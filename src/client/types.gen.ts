// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
	/**
	 * Unique identifier of the account.
	 */
	Id?: string;
	/**
	 * Type of the account.
	 */
	Discriminator?: string | null;
	Customer?: CustomerAccount;
	Company?: CompanyAccount;
};

export type AccountAddress = {
	/**
	 * Unique identifier of the address.
	 */
	Id?: string;
	/**
	 * Unique identifier of a [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) or a [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) within the enterprise.
	 */
	AccountId?: string;
	/**
	 * Unique identifier of the chain.
	 */
	ChainId?: string | null;
	/**
	 * A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), e.g. customer or company.
	 */
	AccountType?: AccountType | null;
	/**
	 * First line of the address.
	 */
	Line1?: string | null;
	/**
	 * Second line of the address.
	 */
	Line2?: string | null;
	/**
	 * The city.
	 */
	City?: string | null;
	/**
	 * Postal code.
	 */
	PostalCode?: string | null;
	/**
	 * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries/#country).
	 */
	CountryCode?: string | null;
	/**
	 * ISO 3166-2 code of the administrative division, e.g. DE-BW.
	 */
	CountrySubdivisionCode?: string | null;
	/**
	 * The latitude.
	 */
	Latitude?: number | null;
	/**
	 * The longitude.
	 */
	Longitude?: number | null;
	/**
	 * Last update date and time of the address in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc?: string | null;
	/**
	 * Whether the address is still active.
	 */
	IsActive?: boolean;
	IsUpdatedByMe?: boolean | null;
};

export type AccountCompanyUpdateParameters = {
	Email?: StringUpdateValue;
	TaxIdentifier?: StringUpdateValue;
	BillingCode?: StringUpdateValue;
	AccountingCode?: StringUpdateValue;
	Notes?: StringUpdateValue;
	Name?: StringUpdateValue;
	MotherCompanyId?: GuidNullableUpdateValue;
	WebsiteUrl?: StringUpdateValue;
	InvoiceDueInterval?: StringUpdateValue;
	Classifications?: CompanyClassificationUpdateParameters;
	Options?: CompanyOptionUpdateParameters;
	CreditRatingBasic?: StringUpdateValue;
	Department?: StringUpdateValue;
	DunsNumber?: StringUpdateValue;
	ReferenceId?: StringUpdateValue;
	ExternalIdentifier?: StringUpdateValue;
	AdditionalTaxIdentifier?: StringUpdateValue;
	Contact?: StringUpdateValue;
	ContactPerson?: StringUpdateValue;
	FiscalIdentifier?: StringUpdateValue;
	Iata?: StringUpdateValue;
	Telephone?: StringUpdateValue;
	SourceId?: GuidNullableUpdateValue;
};

export type AccountCustomerUpdateParameters = {
	Email?: StringUpdateValue;
	TaxIdentifier?: StringUpdateValue;
	BillingCode?: StringUpdateValue;
	AccountingCode?: StringUpdateValue;
	Notes?: StringUpdateValue;
	LastName?: StringUpdateValue;
	FirstName?: StringUpdateValue;
	SecondLastName?: StringUpdateValue;
	BirthPlace?: StringUpdateValue;
	Telephone?: StringUpdateValue;
	Occupation?: StringUpdateValue;
	CarRegistrationNumber?: StringUpdateValue;
	LoyaltyCode?: StringUpdateValue;
	NationalityCode?: StringUpdateValue;
	CompanyId?: GuidNullableUpdateValue;
	BirthDate?: StringUpdateValue;
	Sex?: StringUpdateValue;
	Title?: StringUpdateValue;
	PreferredLanguageCode?: StringUpdateValue;
	Options?: CustomerOptionUpdateParameters;
	Classifications?: CustomerClassificationUpdateParameters;
	LegalEntityIdentifiers?: LegalEntityIdentifierUpdateParameters;
};

export type AccountMergeParameter = {
	SourceAccountIds: Array<string>;
	TargetAccountId: string;
	AccountType: MergeAccountType;
};

export type AccountNote = {
	/**
	 * Unique identifier of the account note.
	 */
	Id: string;
	/**
	 * Unique identifier of the account.
	 */
	AccountId: string;
	/**
	 * The content of the account note.
	 */
	Content: string;
	AccountType: AccountType;
	/**
	 * Specifying the classifactions of the note based on account type ([Customer note classification](https://mews-systems.gitbook.io/connector-api/operations/#customer-note-classifications), [Company note classifications](https://mews-systems.gitbook.io/connector-api/operations/#company-note-classifications)).
	 */
	Classifications: Array<AccountNoteClassification>;
	/**
	 * Whether the account note is still active.
	 */
	IsActive: boolean;
	CreatorProfile: ProfileData;
	UpdaterProfile: ProfileData;
};

export type AccountNoteAddParameters = {
	AccountId: string;
	Content: string;
	Classifications: Array<AccountNoteClassification>;
};

export type AccountNoteAdditionResult = {
	/**
	 * Added account notes.
	 */
	AccountNotes?: Array<AccountNote> | null;
};

export type AccountNoteClassification =
	| "General"
	| "FoodAndBeverage"
	| "FrontOffice"
	| "Reservations"
	| "Housekeeping"
	| "Maintenance"
	| "PreviousStay"
	| "FamilyRelations"
	| "Gifts"
	| "Accounting"
	| "Complaints"
	| "Other";

export type AccountNoteFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
	 */
	ChainIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Account note](https://mews-systems.gitbook.io/connector-api/operations/#account-note).
	 */
	AccountNoteIds?: Array<string> | null;
	/**
	 * Unique identifiers of the accounts ([Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)).
	 */
	AccountIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type AccountNoteResult = {
	/**
	 * The set of requested account notes.
	 */
	AccountNotes?: Array<AccountNote> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type AccountNoteUpdateClassifications = {
	General?: BooleanUpdateValue;
	FoodAndBeverage?: BooleanUpdateValue;
	FrontOffice?: BooleanUpdateValue;
	Reservations?: BooleanUpdateValue;
	Housekeeping?: BooleanUpdateValue;
	Maintenance?: BooleanUpdateValue;
	PreviousStay?: BooleanUpdateValue;
	FamilyRelations?: BooleanUpdateValue;
	Gifts?: BooleanUpdateValue;
	Accounting?: BooleanUpdateValue;
	Complaints?: BooleanUpdateValue;
	Other?: BooleanUpdateValue;
};

export type AccountNoteUpdateParameters = {
	AccountNoteId: string;
	Content?: StringUpdateValue;
	Classifications?: AccountNoteUpdateClassifications;
};

export type AccountNoteUpdateResult = {
	/**
	 * Updated account notes.
	 */
	AccountNotes?: Array<AccountNote> | null;
};

export type AccountResult = {
	/**
	 * Updated accounts.
	 */
	Accounts?: Array<Account> | null;
};

export type AccountType = "Company" | "Customer";

export type AccountUpdateParameters = {
	Id?: string;
	Discriminator?: string | null;
	Customer?: AccountCustomerUpdateParameters;
	Company?: AccountCompanyUpdateParameters;
};

export type AccountingCategory = {
	/**
	 * Unique identifier of the category.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Whether the accounting category is still active.
	 */
	IsActive: boolean;
	/**
	 * Name of the category.
	 */
	Name?: string | null;
	/**
	 * Code of the category within Mews.
	 */
	Code?: string | null;
	/**
	 * Code of the category in external systems.
	 */
	ExternalCode?: string | null;
	/**
	 * Code of the ledger account (double entry accounting).
	 */
	LedgerAccountCode?: string | null;
	/**
	 * Code of the posting account (double entry accounting).
	 */
	PostingAccountCode?: string | null;
	/**
	 * Code of cost center.
	 */
	CostCenterCode?: string | null;
	/**
	 * Classification of the accounting category allowing cross-enterprise reporting.
	 */
	Classification?: string | null;
	/**
	 * Creation date and time of the accounting category in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the accounting category in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type AccountingCategoryFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Accounting categories](https://mews-systems.gitbook.io/connector-api/operations/#accounting-category).
	 */
	AccountingCategoryIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type AccountingCategoryParameters = {
	Code?: string | null;
	Name?: string | null;
};

export type AccountingCategoryResult = {
	/**
	 * Accounting categories of the enterprise.
	 */
	AccountingCategories?: Array<AccountingCategory> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type AccountingConfiguration = {
	AdditionalTaxIdentifier?: string | null;
	CompanyName?: string | null;
	BankAccountNumber?: string | null;
	BankName?: string | null;
	Iban?: string | null;
	Bic?: string | null;
	SurchargeConfiguration: SurchargeConfiguration;
};

export type AccountingItem = {
	Id?: string;
	AccountId?: string;
	/**
	 * @deprecated
	 */
	CustomerId?: string | null;
	OrderId?: string | null;
	ServiceId?: string | null;
	ProductId?: string | null;
	BillId?: string | null;
	InvoiceId?: string | null;
	AccountingCategoryId?: string | null;
	CreditCardId?: string | null;
	Type?: string | null;
	SubType?: string | null;
	Name?: string | null;
	Notes?: string | null;
	ConsumptionUtc?: string | null;
	ClosedUtc?: string | null;
	State?: string | null;
	SubState?: string | null;
	Amount?: ExtendedAmount;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the accounting items, credit card transactions should be also returned.
 */
export type AccountingItemExtent = {
	AccountingItems?: boolean;
	OrderItems?: boolean;
	PaymentItems?: boolean;
	CreditCardTransactions?: boolean;
};

export type AccountingItemParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	StartUtc: string;
	EndUtc: string;
	Extent: AccountingItemExtent;
	/**
	 * Unique identifiers of the Accounting items. Required if no other filter is provided.
	 */
	ItemIds?: Array<string> | null;
	/**
	 * Unique identifiers of the Accounting items we are finding rebates for. Required if no other filter is provided.
	 */
	RebatedItemIds?: Array<string> | null;
	ClosedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	ConsumedUtc?: TimeFilterInterval;
	/**
	 * @deprecated
	 */
	TimeFilter?: string | null;
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
	 */
	Currency?: string | null;
	/**
	 * States the accounting items should be in. If not specified, accounting items in Open or Closed states are returned.
	 */
	States?: Array<string> | null;
};

export type AccountingItemResult = {
	/**
	 * @deprecated
	 */
	AccountingItems?: Array<AccountingItem> | null;
	/**
	 * Updated order items (consumed items such as nights or products).
	 */
	OrderItems?: Array<OrderItemOld> | null;
	/**
	 * Updated payment items (such as cash, credit card payments or invoices).
	 */
	PaymentItems?: Array<PaymentItemOld> | null;
	/**
	 * The credit card payment transactions.
	 */
	CreditCardTransactions?: Array<CreditCardTransaction> | null;
};

export type AccountingItemUpdateParameters = {
	AccountingItemId: string;
	AccountId?: GuidUpdateValue;
	BillId: GuidUpdateValue;
};

export type AccountingState = "Open" | "Closed" | "Inactive" | "Canceled";

export type ActivityState = "Deleted" | "Active";

export type ActivityStates = "Deleted" | "Active";

export type AddAccountFileResult = {
	FileId?: string;
};

export type AddCompanionshipResult = {
	CompanionshipId?: string;
};

export type AddCreditCardResult = {
	/**
	 * Unique identifier of the [Credit card](https://mews-systems.gitbook.io/connector-api/operations/creditcards/#credit-card).
	 */
	CreditCardId?: string;
};

export type AddExternalPaymentResult = {
	/**
	 * Unique identifier of the [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).
	 */
	ExternalPaymentId?: string;
};

export type AddOutletBillsParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * The new outlet bills.
	 */
	Bills: Array<OutletBillParameters>;
};

export type AddOutletBillsResult = {
	/**
	 * Array of unique identifiers of the added Outlet bills.
	 */
	OutletBillIds?: Array<string> | null;
};

export type AddProductItemsResult = {
	ItemIds?: Array<string> | null;
};

export type AddRestrictionParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) restrictions will be added in.
	 */
	ServiceId: string;
	/**
	 * Parameters of restrictions.
	 */
	Restrictions: Array<RestrictionData>;
};

export type AddTaskResult = {
	/**
	 * Unique identifier of added task.
	 */
	TaskId?: string;
};

export type AddedMessage = {
	Identifier?: string | null;
	Message?: Message;
};

export type AddedMessageResult = {
	Messages: Array<AddedMessage>;
};

export type AddedReservation = {
	/**
	 * Identifier of the reservation within the transaction.
	 */
	Identifier?: string | null;
	Reservation?: ReservationOld;
};

export type AddedRestriction = {
	/**
	 * Identifier of the restriction within the transaction.
	 */
	Identifier?: string | null;
	Restriction?: Restriction;
};

export type AdditionalServiceData = {
	Promotions?: Promotions;
};

export type Address = {
	Line1?: string | null;
	Line2?: string | null;
	City?: string | null;
	PostalCode?: string | null;
	SubdivisionCode?: string | null;
	CountryCode?: string | null;
};

export type AddressAddParameters = {
	AccountId: string;
	Line1?: string | null;
	Line2?: string | null;
	City?: string | null;
	PostalCode?: string | null;
	CountryCode?: string | null;
	CountrySubdivisionCode?: string | null;
	Latitude?: number | null;
	Longitude?: number | null;
};

export type AddressDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Unique identifiers of [Addresses](https://mews-systems.gitbook.io/connector-api/operations/#account-address) within the enterprise to be deleted.
	 */
	AddressIds: Array<string>;
};

export type AddressFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
	 */
	ChainIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) or [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) within the enterprise. Required if no other filter is provided.
	 */
	AccountIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Addresses](https://mews-systems.gitbook.io/connector-api/operations/#account-address) within the enterprise. Use this property if you want to fetch specific addresses. Required if no other filter is provided.
	 */
	AddressIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

/**
 * New address details.
 */
export type AddressParameters = {
	Line1?: string | null;
	Line2?: string | null;
	City?: string | null;
	PostalCode?: string | null;
	CountryCode?: string | null;
	CountrySubdivisionCode?: string | null;
};

export type AddressResult = {
	/**
	 * Updated addresses.
	 */
	Addresses?: Array<AccountAddress> | null;
	/**
	 * Unique identifier of the last and hence oldest address item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older Account address.
	 */
	Cursor?: string | null;
};

export type AddressUpdateParameters = {
	AddressId: string;
	AccountId: string;
	Line1?: StringUpdateValue;
	Line2?: StringUpdateValue;
	City?: StringUpdateValue;
	PostalCode?: StringUpdateValue;
	CountryCode?: StringUpdateValue;
	CountrySubdivisionCode?: StringUpdateValue;
};

export type AgeCategory = {
	/**
	 * Unique identifier of age category.
	 */
	Id: string;
	/**
	 * Unique identifier of [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the age category belongs to.
	 */
	ServiceId: string;
	/**
	 * Minimal age for the age category.
	 */
	MinimalAge?: number | null;
	/**
	 * Maximal age for the age category.
	 */
	MaximalAge?: number | null;
	/**
	 * All translations of the name of the age category.
	 */
	Names: {
		[key: string]: string;
	};
	ShortNames?: {
		[key: string]: string;
	} | null;
	/**
	 * Creation date and time of the age category in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the age category in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type AgeCategoryAdjustment = {
	AgeCategoryId?: string;
	AbsoluteValue?: number;
	Type?: AgeCategoryAdjustmentType | null;
};

export type AgeCategoryAdjustmentType =
	| "ExtraOccupancyAdjustment"
	| "NegativeOccupancyAdjustment"
	| "StandardOccupancyAdjustment";

export type AgeCategoryParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Age categories](https://mews-systems.gitbook.io/connector-api/operations/#age-category).
	 */
	AgeCategoryIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) where the age category belong to.
	 */
	ServiceIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type AgeCategoryResult = {
	/**
	 * Age category of the enterprise.
	 */
	AgeCategories?: Array<AgeCategory> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type AlternativePaymentMethods =
	| "Ideal"
	| "ApplePay"
	| "GooglePay"
	| "SepaDirectDebit";

export type AlternativePaymentParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId: string;
	Amount: AmountParameters;
	/**
	 * Payment method to use for the alternative payment.
	 * @deprecated
	 */
	Method?: AlternativePaymentMethods | null;
	/**
	 * URL where the customer will be redirected after completing their payment.
	 * @deprecated
	 */
	RedirectUrl?: string | null;
	ReservationId?: string | null;
	Data?: AlternativePaymentsData;
};

export type AlternativePaymentResult = {
	/**
	 * Unique identifier of the created payment.
	 */
	PaymentId?: string;
	/**
	 * Next action to take in order to complete the payment.
	 */
	NextAction?: {
		discriminator?: NextActionType;
		value?: NextAction;
	};
};

export type AlternativePaymentsData = {
	Discriminator?: string | null;
	SepaDirectDebit?: SepaDirectDebitData;
	Ideal?: IdealData;
};

/**
 * Value of the preauthorization.
 */
export type Amount = {
	Currency?: string | null;
	NetValue?: number;
	GrossValue?: number;
	TaxValues?: Array<TaxValue> | null;
	Breakdown?: TaxBreakdown;
};

/**
 * Price of the product that overrides the price defined in Mews.
 */
export type AmountParameters = {
	Currency: string;
	TaxCodes: Array<string>;
	NetValue?: number | null;
	GrossValue?: number | null;
};

export type AvailabilityAdjustment = {
	/**
	 * Unique identifier of the [Availability adjustment](https://mews-systems.gitbook.io/connector-api/operations/#availability-adjustment).
	 */
	Id: string;
	/**
	 * Unique identifier of the [Availability block](https://mews-systems.gitbook.io/connector-api/operations/availabilityblocks/#availability-block) which the availability adjustment belongs to.
	 */
	AvailabilityBlockId?: string | null;
	/**
	 * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource-category) whose availability is updated.
	 */
	ResourceCategoryId: string;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	/**
	 * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
	 */
	FirstTimeUnitStartUtc: string;
	/**
	 * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
	 */
	LastTimeUnitStartUtc: string;
	/**
	 * Adjustment value applied on the interval.
	 */
	UnitCount: number;
	ActivityState: ActivityState;
	ReleaseOverrideUtc?: string | null;
	/**
	 * Last update date and time of the adjustment in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type AvailabilityAdjustmentParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Availability adjustments](https://mews-systems.gitbook.io/connector-api/operations/#availability-adjustment).
	 */
	AvailabilityAdjustmentIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityState> | null;
};

export type AvailabilityAdjustmentResult = {
	/**
	 * Availability adjustments.
	 */
	AvailabilityAdjustments: Array<AvailabilityAdjustment>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type AvailabilityBlock = {
	/**
	 * Unique identifier of the availability block.
	 */
	Id?: string;
	EnterpriseId?: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the block is assigned to.
	 */
	ServiceId?: string;
	/**
	 * Unique identifier of the [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate) the block is assigned to.
	 */
	RateId?: string;
	/**
	 * Unique identifier of the [Voucher](https://mews-systems.gitbook.io/connector-api/operations/vouchers/#voucher) used to access specified private [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate).
	 */
	VoucherId?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) on whose behalf the block was made.
	 */
	BookerId?: string | null;
	/**
	 * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) linked to the block.
	 */
	CompanyId?: string | null;
	TravelAgencyId?: string | null;
	Budget?: CurrencyValueOld;
	/**
	 * State of the availability block.
	 */
	State?: string | null;
	/**
	 * The purpose of the block.
	 */
	ReservationPurpose?: string | null;
	/**
	 * Creation date and time of the block in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc?: string | null;
	/**
	 * Last update date and time of the block in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc?: string | null;
	ActivityState?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	/**
	 * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
	 */
	FirstTimeUnitStartUtc?: string | null;
	/**
	 * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
	 */
	LastTimeUnitStartUtc?: string | null;
	/**
	 * The moment when the block and its availability is released in UTC timezone in ISO 8601 format.
	 */
	ReleasedUtc?: string | null;
	RollingReleaseOffset?: string | null;
	/**
	 * Identifier of the block from external system.
	 */
	ExternalIdentifier?: string | null;
	/**
	 * The name of the block in Mews.
	 */
	Name?: string | null;
	/**
	 * Additional notes of the block.
	 */
	Notes?: string | null;
	PickupDistribution: PickupDistribution;
};

export type AvailabilityBlockAddParameters = {
	ServiceId: string;
	RateId: string;
	FirstTimeUnitStartUtc: string;
	LastTimeUnitStartUtc: string;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	ReleasedUtc: string;
	Name?: string | null;
	VoucherCode?: string | null;
	BookerId?: string | null;
	CompanyId?: string | null;
	TravelAgencyId?: string | null;
	Budget?: CurrencyValueOld;
	ReservationPurpose?: ReservationPurpose | null;
	ExternalIdentifier?: string | null;
	Notes?: string | null;
	State?: AvailabilityBlockState | null;
};

export type AvailabilityBlockAddResult = {
	/**
	 * Availability blocks.
	 */
	AvailabilityBlocks?: Array<AvailabilityBlock> | null;
};

export type AvailabilityBlockAssignment = {
	RateId?: string;
	AvailabilityBlockId?: string;
};

/**
 * Extent of data to be returned, e.g. it is possible to specify that related service orders (for example reservations) are returned.
 */
export type AvailabilityBlockExtent = {
	AvailabilityBlocks?: boolean;
	Adjustments?: boolean;
	ServiceOrders?: boolean;
	Rates?: boolean;
};

export type AvailabilityBlockParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	Extent: AvailabilityBlockExtent;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which [Availability blocks](https://mews-systems.gitbook.io/connector-api/operations/#availability-block) are assigned.
	 */
	ServiceIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Availability blocks](https://mews-systems.gitbook.io/connector-api/operations/#availability-block).
	 */
	AvailabilityBlockIds?: Array<string> | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	CollidingUtc?: TimeFilterInterval;
	ReleasedUtc?: TimeFilterInterval;
	/**
	 * Identifiers of [Availability block](https://mews-systems.gitbook.io/connector-api/operations/#availability-block)s from external systems.
	 */
	ExternalIdentifiers?: Array<string> | null;
	/**
	 * States the availability blocks should be in.
	 */
	States?: Array<string> | null;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<string> | null;
};

export type AvailabilityBlockResult = {
	/**
	 * Availability blocks.
	 */
	AvailabilityBlocks?: Array<AvailabilityBlock> | null;
	/**
	 * Service orders (for example reservations) linked to availability blocks.
	 */
	ServiceOrders?: Array<ReservationOld> | null;
	/**
	 * Availability adjustments of availability blocks.
	 */
	Adjustments?: Array<AvailabilityAdjustment> | null;
	Rates?: Array<Rate> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type AvailabilityBlockState =
	| "Confirmed"
	| "Optional"
	| "Inquired"
	| "Canceled";

export type AvailabilityBlockUpdateParameters = {
	AvailabilityBlockId?: string;
	Name?: StringUpdateValue;
	FirstTimeUnitStartUtc?: StringUpdateValue;
	LastTimeUnitStartUtc?: StringUpdateValue;
	StartUtc?: StringUpdateValue;
	EndUtc?: StringUpdateValue;
	ReleasedUtc?: StringUpdateValue;
	ExternalIdentifier?: StringUpdateValue;
	State?: StringUpdateValue;
	ReservationPurpose?: StringUpdateValue;
	CompanyId?: GuidNullableUpdateValue;
	TravelAgencyId?: GuidNullableUpdateValue;
	BookerId?: GuidNullableUpdateValue;
	Notes?: StringUpdateValue;
	Budget?: CurrencyValueOldUpdateValue;
	CancellationReason?: StringUpdateValue;
	CancellationReasonDetail?: StringUpdateValue;
};

export type BaseRatePricingParameters = {
	Amount?: AmountParameters;
	NegativeOccupancyAdjustment?: number;
	ExtraOccupancyAdjustment?: number;
};

export type Bill = {
	/**
	 * Unique identifier of the bill.
	 */
	Id?: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId?: string;
	/**
	 * Unique identifier of the account ([Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)) the bill is issued to.
	 */
	AccountId?: string;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) the bill is issued to. **Deprecated!**
	 * @deprecated
	 */
	CustomerId?: string | null;
	/**
	 * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) specified in CompanyDetails or the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) the bill is issued to. **Deprecated!**
	 * @deprecated
	 */
	CompanyId?: string | null;
	/**
	 * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) that are associated to the bill.
	 */
	AssociatedAccountIds?: Array<string> | null;
	/**
	 * Unique identifier of the bill Counter.
	 */
	CounterId?: string | null;
	/**
	 * State of the bill.
	 */
	State?: string | null;
	/**
	 * Type of the bill.
	 */
	Type?: string | null;
	/**
	 * Number of the bill.
	 */
	Number?: string | null;
	/**
	 * Variable symbol of the bill.
	 */
	VariableSymbol?: string | null;
	/**
	 * Date and time of the bill creation in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc?: string | null;
	/**
	 * Date and time of the bill issuance in UTC timezone in ISO 8601 format.
	 */
	IssuedUtc?: string | null;
	/**
	 * Taxation date of the bill in UTC timezone in ISO 8601 format.
	 */
	TaxedUtc?: string | null;
	/**
	 * Date when the bill was paid in UTC timezone in ISO 8601 format.
	 */
	PaidUtc?: string | null;
	/**
	 * Bill due date and time in UTC timezone in ISO 8601 format.
	 */
	DueUtc?: string | null;
	/**
	 * Date and time when the bill was last updated, in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc?: string | null;
	/**
	 * Unique number of the purchase order from the buyer.
	 */
	PurchaseOrderNumber?: string | null;
	/**
	 * Additional notes.
	 */
	Notes?: string | null;
	Options?: BillOptions;
	/**
	 * @deprecated
	 */
	Revenue?: Array<AccountingItem> | null;
	/**
	 * @deprecated
	 */
	Payments?: Array<AccountingItem> | null;
	/**
	 * The order items (consumed items such as nights or products) on the bill.
	 * @deprecated
	 */
	OrderItems?: Array<OrderItemOld> | null;
	/**
	 * The payment items (such as cash, credit card payments or invoices) on the bill.
	 * @deprecated
	 */
	PaymentItems?: Array<PaymentItemOld> | null;
	/**
	 * @deprecated
	 */
	AssigneeData?: {
		discriminator?: BillAssigneeDataDiscriminator;
		value?: BillCompanyData | BillCustomerData;
	};
	/**
	 * Additional information about owner of the bill. Can be a [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company). Persisted at the time of closing of the bill.
	 */
	OwnerData?: {
		discriminator?: BillAssigneeDataDiscriminator;
		value?: BillCompanyData | BillCustomerData;
	};
	CompanyDetails?: BillCompanyData;
	/**
	 * Additional information about the associated account of the bill. Can be a [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company). Persisted at the time of closing of the bill. Currently only one account can be associated with a bill, but this may be extended in future.
	 */
	AssociatedAccountData?: Array<BillAccountData> | null;
	EnterpriseData?: BillEnterpriseData;
	CorrectionState?: BillCorrectionStateEnum;
	CorrectionType?: CorrectionType | null;
	CorrectedBillId?: string | null;
};

export type BillAccountData = {
	readonly Discriminator?: BillAssigneeDataDiscriminator | null;
	BillCustomerData?: BillCustomerData;
	BillCompanyData?: BillCompanyData;
};

export type BillAddParameters = {
	AccountId: string;
	Name?: string | null;
};

export type BillAssigneeDataDiscriminator =
	| "BillCustomerData"
	| "BillCompanyData";

export type BillCloseAccountParameters = {
	Id: string;
	TaxIdentifier?: StringUpdateValue;
	Address?: AddressParameters;
};

export type BillCloseParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill) to be closed.
	 */
	BillId: string;
	/**
	 * Specifies the mode bill should be closed in.
	 */
	Type: string;
	/**
	 * Unique identifier of the [Counter](https://mews-systems.gitbook.io/connector-api/operations/counters/#counter) to be used for closing. Default one is used when no value is provided.
	 */
	BillCounterId?: string | null;
	/**
	 * Unique identifier of the [Fiscal Machine](https://mews-systems.gitbook.io/connector-api/operations/devices/#device) to be used for closing. Default one is used when no value is provided.
	 */
	FiscalMachineId?: string | null;
	Options?: BillOptionsParameters;
	SendEmail?: boolean;
	EmailAddress?: string | null;
	TaxedDate?: StringUpdateValue;
	DueDate?: StringUpdateValue;
	VariableSymbol?: StringUpdateValue;
	TaxIdentifier?: StringUpdateValue;
	AccountTaxIdentifier?: StringUpdateValue;
	CompanyTaxIdentifier?: StringUpdateValue;
	PurchaseOrderNumber?: StringUpdateValue;
	Notes?: StringUpdateValue;
	Address?: AddressParameters;
	AccountAddress?: AddressParameters;
	CompanyAddress?: AddressParameters;
	/**
	 * Account data of the associated account on a bill. Currently one object is supported and only populated when the bill is closed.
	 */
	AssociatedAccountData?: Array<BillCloseAccountParameters> | null;
};

/**
 * Additional information about the company assigned to the bill. Not the same as the owner. Persisted at the time of closing of the bill. **Deprecated!**
 */
export type BillCompanyData = {
	Id?: string | null;
	Address?: Address;
	LegalIdentifiers?: {
		[key: string]: string | null;
	} | null;
	BillingCode?: string | null;
	Name?: string | null;
	FiscalIdentifier?: string | null;
	AdditionalTaxIdentifier?: string | null;
};

/**
 *
 *
 * Bill
 *
 * CorrectiveBill
 */
export type BillCorrectionStateEnum = "Bill" | "CorrectiveBill";

export type BillCustomerData = {
	Id?: string | null;
	Address?: Address;
	LegalIdentifiers?: {
		[key: string]: string | null;
	} | null;
	BillingCode?: string | null;
	LastName?: string | null;
	FirstName?: string | null;
	SecondLastName?: string | null;
	TitlePrefix?: string | null;
};

export type BillDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifiers of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill)s to be deleted.
	 */
	BillIds: Array<string>;
};

/**
 * Additional information about the enterprise issuing the bill, including bank account details. Persisted at the time of closing of the bill.
 */
export type BillEnterpriseData = {
	AdditionalTaxIdentifier?: string | null;
	CompanyName?: string | null;
	BankAccount?: string | null;
	BankName?: string | null;
	Iban?: string | null;
	Bic?: string | null;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the bills, payments and revenue items should be also returned. **Deprecated!**
 */
export type BillExtent = {
	Items?: boolean;
};

export type BillFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	Extent?: BillExtent;
	/**
	 * @deprecated
	 */
	TimeFilter?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	ClosedUtc?: TimeFilterInterval;
	PaidUtc?: TimeFilterInterval;
	DueUtc?: TimeFilterInterval;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Unique identifiers of the [Bills](https://mews-systems.gitbook.io/connector-api/operations/#bill). Required if no other filter is provided.
	 */
	BillIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerIds?: Array<string> | null;
	/**
	 * [Bill state](https://mews-systems.gitbook.io/connector-api/operations/#bill-state) the bills should be in. If not specified Open and Closed bills are returned.
	 */
	State?: BillState | null;
	CorrectionState?: Array<BillCorrectionStateEnum> | null;
};

export type BillFiscalMachineDataDiscriminator = "ItalianFiscalMachineData";

/**
 * Options of the bill.
 */
export type BillOptions = {
	DisplayCustomer?: boolean;
	DisplayTaxation?: boolean;
	TrackReceivable?: boolean;
	DisplayCid?: boolean;
	/**
	 * @deprecated
	 */
	Rebated?: boolean;
};

/**
 * Options of the bill. If not provided both DisplayCustomer and DisplayTaxation are set by default.
 */
export type BillOptionsParameters = {
	DisplayCustomer: BooleanUpdateValue;
	DisplayTaxation: BooleanUpdateValue;
	TrackReceivable?: BooleanUpdateValue;
	DisplayCid?: BooleanUpdateValue;
};

export type BillPdfParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill) to be printed.
	 */
	BillId: string;
	/**
	 * Unique identifier of the [Bill print event](https://mews-systems.gitbook.io/connector-api/operations/#bill-print-event) returned by previous invocation.
	 */
	BillPrintEventId?: string | null;
};

export type BillResult = {
	/**
	 * The closed bill.
	 */
	Bills?: Array<Bill> | null;
	/**
	 * Unique identifier of the last and hence oldest bill returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older bills.
	 */
	Cursor?: string | null;
};

export type BillState = "Open" | "Closed";

export type BookableServiceData = {
	StartOffset?: string | null;
	EndOffset?: string | null;
	OccupancyStartOffset?: string | null;
	OccupancyEndOffset?: string | null;
	/**
	 * @deprecated
	 */
	TimeUnit?: string | null;
	TimeUnitPeriod?: string | null;
};

export type BooleanNullableUpdateValue = {
	Value?: boolean | null;
};

export type BooleanUpdateValue = {
	Value?: boolean;
};

export type BusinessSegment = {
	/**
	 * Unique identifier of the segment.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceId: string;
	/**
	 * Whether the business segment is still active.
	 */
	IsActive: boolean;
	/**
	 * Name of the segment.
	 */
	Name: string;
	/**
	 * Creation date and time of the business segment in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the business segment in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type BusinessSegmentFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Bussiness segment](https://mews-systems.gitbook.io/connector-api/operations/#business-segment).
	 */
	Ids?: Array<string> | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the business segments are requested.
	 */
	ServiceIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type BusinessSegmentResult = {
	/**
	 * Business segments of the default service.
	 */
	BusinessSegments?: Array<BusinessSegment> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type CancellationFeeExtent = "TimeUnits" | "Products";

export type CancellationPolicy = {
	/**
	 * Unique identifier of the cancellation policy.
	 */
	Id: string;
	/**
	 * Unique identifier of the rate group the cancellation policy belongs to.
	 */
	RateGroupId: string;
	/**
	 * Date and time of the cancellation policy creation in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Date and time of the cancellation policy update in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	Applicability: CancellationPolicyApplicability;
	/**
	 * Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.
	 */
	FeeExtent: Array<CancellationFeeExtent>;
	/**
	 * Offset for order start (assuming Applicability is set to Start) from which the fee is applied.
	 */
	ApplicabilityOffset: string;
	/**
	 * Maximum number of time units the cancellation fee is applicable to.
	 */
	FeeMaximumTimeUnits?: number | null;
	AbsoluteFee: CurrencyValue;
	/**
	 * Relative value of the fee, as a percentage of the reservation price.
	 */
	RelativeFee: number;
};

export type CancellationPolicyApplicability =
	| "Creation"
	| "Start"
	| "StartDate";

export type CancellationPolicyFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceIds: Array<string>;
	/**
	 * Unique identifiers of the [Cancellation Policy](https://mews-systems.gitbook.io/connector-api/operations/#cancellationpolicy). Required if no other filter is provided.
	 */
	CancellationPolicyIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Rate group](https://mews-systems.gitbook.io/connector-api/operations/rates/#rategroup). Required if no other filter is provided.
	 */
	RateGroupIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type CancellationPolicyResult = {
	/**
	 * The filtered cancellation policies.
	 */
	CancellationPolicies: Array<CancellationPolicy>;
	/**
	 * Unique identifier of the last and hence oldest cancellation policy returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older cancellation policies.
	 */
	Cursor?: string | null;
};

export type Cashier = {
	/**
	 * Unique identifier of the cashier.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Whether the cashier is still active.
	 */
	IsActive: boolean;
	/**
	 * Name of the cashier.
	 */
	Name: string;
	/**
	 * Creation date and time of the rule in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the rule in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type CashierParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Cashier](https://mews-systems.gitbook.io/connector-api/operations/#cashier).
	 */
	Ids?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type CashierResult = {
	/**
	 * Cashiers in the enterprise.
	 */
	Cashiers?: Array<Cashier> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type CashierTransaction = {
	/**
	 * Unique identifier of the transaction.
	 */
	Id?: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId?: string;
	/**
	 * Unique identifier of the [Cashier](https://mews-systems.gitbook.io/connector-api/operations/cashiers/#cashier).
	 */
	CashierId?: string;
	/**
	 * Unique identifier of the corresponding payment [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).
	 */
	PaymentId?: string | null;
	/**
	 * Creation date and time of the transaction.
	 */
	CreatedUtc?: string | null;
	/**
	 * Number of the transaction.
	 */
	Number?: string | null;
	/**
	 * Additional notes of the transaction.
	 */
	Notes?: string | null;
	Amount?: CurrencyValueOld;
};

export type CashierTransactionParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	CashierTransactionIds?: Array<string> | null;
	CreatedUtc?: TimeFilterInterval;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
};

export type CashierTransactionResult = {
	/**
	 * Cashier transactions created in the interval.
	 */
	CashierTransactions?: Array<CashierTransaction> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type CategoryAdjustment = {
	CategoryId?: string;
	ParentCategoryId?: string | null;
	AbsoluteValue?: number;
	RelativeValue?: number;
};

export type CategoryAvailability = {
	CategoryId?: string;
	Availabilities?: Array<number> | null;
	Adjustments?: Array<number> | null;
};

export type CategoryPricing = {
	CategoryId?: string;
	/**
	 * @deprecated
	 */
	Prices?: Array<number> | null;
	AmountPrices?: Array<Amount> | null;
};

export type ChannelManagerReservation = {
	ReservationId?: string;
	RequestedRateCode?: string | null;
};

export type ChargeCreditCardParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	BillId?: string | null;
	/**
	 * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category).
	 */
	AccountingCategoryId?: string | null;
	ReservationId?: string | null;
	Amount: ExtendedAmountParameters;
	Category?: AccountingCategoryParameters;
	/**
	 * Additional payment notes.
	 */
	Notes?: string | null;
	/**
	 * Unique identifier of the [Credit card](https://mews-systems.gitbook.io/connector-api/operations/#credit-card).
	 */
	CreditCardId?: string;
	/**
	 * Identifier of the payment receipt.
	 */
	ReceiptIdentifier?: string | null;
};

export type ChargeCreditCardResult = {
	/**
	 * Unique identifier of the [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).
	 */
	PaymentId?: string;
};

export type ChargeableCustomer = {
	Customer?: Customer;
	Reservation?: ReservationOld;
	Id?: string;
	FirstName?: string | null;
	LastName?: string | null;
	/**
	 * @deprecated
	 */
	RoomNumber?: string | null;
	ResourceName?: string | null;
};

export type ClearRestrictionParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the restrictions apply.
	 */
	ServiceId: string;
	/**
	 * Details of the matching conditions and time intervals for clearing restrictions.
	 */
	Data: Array<RestrictionClearData>;
};

export type Companionship = {
	/**
	 * Unique identifier of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/#companionship).
	 */
	Id?: string;
	/**
	 * Unique identifier of [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId?: string;
	/**
	 * Unique identifier of [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
	 */
	ReservationGroupId?: string;
	/**
	 * Unique identifier of reservation.
	 */
	ReservationId?: string | null;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the companionships, customers, reservations, and reservation groups should be also returned.
 */
export type CompanionshipExtent = {
	Reservations?: boolean;
	ReservationGroups?: boolean;
	Customers?: boolean;
};

export type CompanionshipFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/#companionship).
	 */
	CompanionshipIds?: Array<string> | null;
	Extent: CompanionshipExtent;
	/**
	 * Unique identifiers of reservations.
	 */
	ReservationIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
	 */
	ReservationGroupIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type CompanionshipResult = {
	/**
	 * Companionships.
	 */
	Companionships?: Array<Companionship> | null;
	/**
	 * The accompanied reservations.
	 */
	Reservations?: Array<ReservationOld> | null;
	/**
	 * The accompanied reservation groups.
	 */
	ReservationGroups?: Array<ReservationGroupOld> | null;
	/**
	 * Customers that belong to the companionships.
	 */
	Customers?: Array<Customer> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type Company = {
	/**
	 * Unique identifier of the company.
	 */
	Id: string;
	/**
	 * Unique identifier of the chain.
	 */
	ChainId: string;
	/**
	 * Name of the company.
	 */
	Name: string;
	/**
	 * Unique identifier of mother company.
	 */
	MotherCompanyId?: string | null;
	/**
	 * Email for issuing invoices to the company.
	 */
	InvoicingEmail?: string | null;
	/**
	 * The website url of the company.
	 */
	WebsiteUrl?: string | null;
	/**
	 * The maximum time, when the invoice has to be be paid in ISO 8601 duration format.
	 */
	InvoiceDueInterval?: string | null;
	Options?: CompanyOptions;
	CreditRating?: CreditRating;
	/**
	 * The internal segmentation of a company, e.g. sales department.
	 */
	Department?: string | null;
	/**
	 * The Dun & Bradstreet unique 9-digit DUNS number.
	 */
	DunsNumber?: string | null;
	/**
	 * External system identifier - custom identifier used by an external system such as an external database.
	 */
	ReferenceIdentifier?: string | null;
	/**
	 * Accounting code of the company.
	 */
	AccountingCode?: string | null;
	/**
	 * Additional tax identifier of the company.
	 */
	AdditionalTaxIdentifier?: string | null;
	/**
	 * Billing code of the company.
	 */
	BillingCode?: string | null;
	/**
	 * Other contact details, such as telephone, email or similar.
	 */
	Contact?: string | null;
	/**
	 * Contact person of the company.
	 */
	ContactPerson?: string | null;
	/**
	 * Electronic invoice identifier of the company.
	 */
	ElectronicInvoiceIdentifier?: string | null;
	/**
	 * Other identifier of the company, e.g. legal identifier.
	 */
	Identifier?: string | null;
	/**
	 * Iata of the company.
	 */
	Iata?: string | null;
	/**
	 * Whether the company is still active.
	 */
	IsActive: boolean;
	/**
	 * Additional notes.
	 */
	Notes?: string | null;
	/**
	 * Unique number of the company.
	 */
	Number: number;
	/**
	 * Tax identification number of the company.
	 */
	TaxIdentifier?: string | null;
	/**
	 * Contact telephone number.
	 */
	Telephone?: string | null;
	/**
	 * Date of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) creation date and time.
	 */
	CreatedUtc?: string | null;
	/**
	 * Date of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) last update date and time.
	 */
	UpdatedUtc?: string | null;
	Address?: OldAddress;
	/**
	 * Unique identifier of the company [Address](https://mews-systems.gitbook.io/connector-api/operations/addresses/#account-address).
	 */
	AddressId?: string | null;
	MergeTargetId?: string | null;
	/**
	 * @deprecated
	 */
	TaxIdentificationNumber?: string | null;
	/**
	 * Identifier of company from external system.
	 */
	ExternalIdentifier?: string | null;
	IsUpdatedByMe?: boolean | null;
};

/**
 * Updated company data.
 */
export type CompanyAccount = {
	ChainId?: string;
	CreatedUtc?: string | null;
	UpdatedUtc?: string | null;
	UpdaterProfileId?: string;
	Email?: string | null;
	TaxIdentifier?: string | null;
	BillingCode?: string | null;
	AccountingCode?: string | null;
	Notes?: string | null;
	Name?: string | null;
	MotherCompanyId?: string | null;
	WebsiteUrl?: string | null;
	InvoiceDueInterval?: string | null;
	CreditRatingBasic?: string | null;
	Department?: string | null;
	DunsNumber?: string | null;
	ReferenceId?: string | null;
	ExternalIdentifier?: string | null;
	AdditionalTaxIdentifier?: string | null;
	Contact?: string | null;
	ContactPerson?: string | null;
	FiscalIdentifier?: string | null;
	Iata?: string | null;
	Telephone?: string | null;
	SourceId?: string | null;
	Classifications?: CompanyAccountClassifications;
	Options?: CompanyAccountOptions;
};

export type CompanyAccountClassifications = {
	Corporate?: boolean;
	Internal?: boolean;
	Private?: boolean;
	OnlineTravelAgency?: boolean;
	GlobalDistributionSystem?: boolean;
	Marketing?: boolean;
	Inactive?: boolean;
};

export type CompanyAccountOptions = {
	Invoiceable?: boolean;
	AddFeesToInvoices?: boolean;
	AddTaxDeductedPaymentToInvoices?: boolean;
};

export type CompanyAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Name of the company.
	 */
	Name: string;
	/**
	 * Unique identifier of the mother company.
	 */
	MotherCompanyId?: string | null;
	InvoicingEmail?: string | null;
	/**
	 * The website url of the company.
	 */
	WebsiteUrl?: string | null;
	/**
	 * The maximum time, when the invoice has to be be paid in ISO 8601 duration format.
	 */
	InvoiceDueInterval?: string | null;
	Options: CompanyOptionsParameters;
	CreditRating?: CreditRatingParameters;
	/**
	 * The internal segmentation of a company, e.g. sales department.
	 */
	Department?: string | null;
	/**
	 * The Dun & Bradstreet unique 9-digit DUNS number.
	 */
	DunsNumber?: string | null;
	/**
	 * External system identifier - custom identifier used by an external system such as an external database.
	 */
	ReferenceIdentifier?: string | null;
	/**
	 * Accounting code of the company.
	 */
	AccountingCode?: string | null;
	/**
	 * Additional tax identifer of the company.
	 */
	AdditionalTaxIdentifier?: string | null;
	/**
	 * Billing code of the company.
	 */
	BillingCode?: string | null;
	/**
	 * Other contact details, such as telephone, email or similar.
	 */
	Contact?: string | null;
	/**
	 * Contact person of the company.
	 */
	ContactPerson?: string | null;
	/**
	 * Identifier of the company (e.g. legal identifier).
	 */
	Identifier?: string | null;
	/**
	 * Iata of the company.
	 */
	Iata?: string | null;
	/**
	 * Notes of the company.
	 */
	Notes?: string | null;
	/**
	 * Tax identification number of the company.
	 */
	TaxIdentifier?: string | null;
	Telephone?: string | null;
	Address?: AddressParameters;
	/**
	 * Identifier of the company from external system.
	 */
	ExternalIdentifier?: string | null;
};

export type CompanyClassificationUpdateParameters = {
	Corporate?: BooleanUpdateValue;
	Internal?: BooleanUpdateValue;
	Private?: BooleanUpdateValue;
	OnlineTravelAgency?: BooleanUpdateValue;
	GlobalDistributionSystem?: BooleanUpdateValue;
	Marketing?: BooleanUpdateValue;
	Inactive?: BooleanUpdateValue;
};

export type CompanyClassifications = {
	Corporate?: boolean;
	Internal?: boolean;
	Private?: boolean;
	OnlineTravelAgency?: boolean;
	GlobalDistributionSystem?: boolean;
	Marketing?: boolean;
	Inactive?: boolean;
};

export type CompanyClassificationsParameters = {
	Corporate?: boolean;
	Internal?: boolean;
	Private?: boolean;
	OnlineTravelAgency?: boolean;
	GlobalDistributionSystem?: boolean;
	Marketing?: boolean;
	Inactive?: boolean;
};

export type CompanyContractFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifier of the Travel agency contract to fetch.
	 */
	CompanyContractIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) assigned with Travel agency contracts.
	 */
	CompanyIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) where the Travel agency contract belong to.
	 */
	ServiceIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
};

export type CompanyExtent = {
	Inactive?: boolean;
};

export type CompanyFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
	 */
	ChainIds?: Array<string> | null;
	/**
	 * @deprecated
	 */
	TimeFilter?: CompanyTimeFilter | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	/**
	 * Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/#company).
	 */
	Ids?: Array<string> | null;
	/**
	 * Identifiers of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) from external system.
	 */
	ExternalIdentifiers?: Array<string> | null;
	Name?: string | null;
	/**
	 * Names of [Companies](https://mews-systems.gitbook.io/connector-api/operations/#company).
	 */
	Names?: Array<string> | null;
	Extent?: CompanyExtent;
	Limitation?: Limitation;
};

export type CompanyNameParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Name: string;
};

/**
 * Options of the company.
 */
export type CompanyOptionUpdateParameters = {
	Invoiceable?: BooleanUpdateValue;
	AddFeesToInvoices?: BooleanUpdateValue;
	AddTaxDeductedPaymentToInvoices?: BooleanUpdateValue;
};

/**
 * Options of the company.
 */
export type CompanyOptions = {
	Invoiceable?: boolean;
	AddFeesToInvoices?: boolean;
	AddTaxDeductedPaymentToInvoices?: boolean;
};

/**
 * Options of the company.
 */
export type CompanyOptionsParameters = {
	Invoiceable?: boolean;
	AddFeesToInvoices?: boolean;
	AddTaxDeductedPaymentToInvoices?: boolean;
};

export type CompanyResult = {
	/**
	 * The company profiles of the enterprise.
	 */
	Companies: Array<Company>;
	/**
	 * Unique identifier of the last and hence oldest company item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older companies. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message; this is true even when using Extents set to false so that no actual data is returned.
	 */
	Cursor?: string | null;
};

export type CompanyTimeFilter = "Created" | "Updated";

export type CompanyUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/#company).
	 */
	CompanyId: string;
	Name?: StringUpdateValue;
	MotherCompanyId?: GuidNullableUpdateValue;
	InvoicingEmail?: StringUpdateValue;
	WebsiteUrl?: StringUpdateValue;
	InvoiceDueInterval?: StringUpdateValue;
	Options?: CompanyOptionUpdateParameters;
	CreditRating?: CreditRatingUpdateParameters;
	Department?: StringUpdateValue;
	DunsNumber?: StringUpdateValue;
	ReferenceIdentifier?: StringUpdateValue;
	AccountingCode?: StringUpdateValue;
	AdditionalTaxIdentifier?: StringUpdateValue;
	BillingCode?: StringUpdateValue;
	Contact?: StringUpdateValue;
	ContactPerson?: StringUpdateValue;
	Identifier?: StringUpdateValue;
	Iata?: StringUpdateValue;
	Notes?: StringUpdateValue;
	TaxIdentifier?: StringUpdateValue;
	Telephone?: StringUpdateValue;
	ExternalIdentifier?: StringUpdateValue;
};

export type Configuration = {
	/**
	 * Current server date and time in UTC timezone in ISO 8601 format.
	 */
	NowUtc?: string | null;
	Enterprise?: Enterprise;
	Service?: Service;
	PaymentCardStorage?: PaymentCardStorage;
};

export type ConfigurationFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/#enterprise), defaults to the enterprise associated with the given access token.
	 */
	EnterpriseId?: string | null;
};

export type ConfirmReservationParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the reservations to confirm.
	 */
	ReservationIds: Array<string>;
	/**
	 * @deprecated
	 */
	ReservationId?: string;
	Extent?: ReservationExtent;
	/**
	 * Wheter the confirmation email is sent. Default value is true.
	 */
	SendConfirmationEmail?: boolean | null;
};

export type ConnectorApiExceptionResult = {
	Message?: string | null;
	Details?: unknown;
};

export type ContractResult = {
	/**
	 * The updated travel agency contracts.
	 */
	TravelAgencyContracts: Array<TravelAgencyContract>;
	/**
	 * Unique identifier of the last and hence oldest contract returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older messages.
	 */
	Cursor?: string | null;
};

export type Coproduct = {
	Discriminator: string;
	Value: unknown;
};

export type CoproductParameters = {
	Discriminator?: string | null;
	Value?: JToken;
};

export type CorrectionType =
	| "Cancellation"
	| "Edit"
	| "CreditNote"
	| "Reinstatement"
	| "ReceivablePaymentsBalance";

export type CostParameters = {
	Amount: number;
	Currency: string;
	Tax: number;
};

export type Counter = {
	/**
	 * Unique identifier of the counter.
	 */
	Id: string;
	EnterpriseId: string;
	/**
	 * Name of the counter.
	 */
	Name: string;
	/**
	 * Whether the counter is used by default.
	 */
	IsDefault: boolean;
	/**
	 * Current value the counter.
	 */
	Value: number;
	/**
	 * Format the counter is displayed in.
	 */
	Format: string;
	Type: EnterpriseScopeCounterDiscriminator;
	/**
	 * Creation date and time of the counter in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the counter in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type CounterFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	CounterIds?: Array<string> | null;
	/**
	 * Type of the counter. If not specified, the operation returns all types.
	 */
	Type?: EnterpriseScopeCounterDiscriminator | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type CounterResult = {
	/**
	 * All types of counters.
	 */
	Counters: Array<Counter>;
	/**
	 * The counters used to count closed [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**
	 * @deprecated
	 */
	BillCounters: Array<Counter>;
	/**
	 * The counters used to count Pro Forma invoices for [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**
	 * @deprecated
	 */
	ProformaCounters: Array<Counter>;
	/**
	 * The counters used to count bill previews for [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**
	 * @deprecated
	 */
	BillPreviewCounters: Array<Counter>;
	/**
	 * The counters used to count service orders (for example reservations). **Deprecated!**
	 * @deprecated
	 */
	ServiceOrderCounters: Array<Counter>;
	/**
	 * The counters used to count registration cards. **Deprecated!**
	 * @deprecated
	 */
	RegistrationCardCounters: Array<Counter>;
	Cursor?: string | null;
};

export type Country = {
	/**
	 * ISO 3166-1 alpha-2 code, e.g. US or GB.
	 */
	Code?: string | null;
	SovereignCountryCode?: string | null;
	/**
	 * English name of the country.
	 */
	EnglishName?: string | null;
};

export type CountryGroup = {
	Code?: string | null;
	EnglishName?: string | null;
	CountryCodes?: Array<string> | null;
};

export type CountryResult = {
	/**
	 * The supported countries.
	 */
	Countries?: Array<Country> | null;
	/**
	 * The supported country subdivisions.
	 */
	CountrySubdivisions?: Array<CountrySubdivision> | null;
	CountryRules?: Array<CountryRule> | null;
	CountryGroups?: Array<CountryGroup> | null;
};

export type CountryRule = {
	CountryCode?: string | null;
	IdentityCardExpirationDateNotRequired?: boolean;
	DriverLicenceExpirationDateNotRequired?: boolean;
};

export type CountrySubdivision = {
	/**
	 * ISO 3166-2 code of the administrative division, e.g AU-QLD.
	 */
	Code?: string | null;
	/**
	 * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/#country).
	 */
	CountryCode?: string | null;
	/**
	 * English name of the country subdivision.
	 */
	EnglishName?: string | null;
};

export type CreditCard = {
	/**
	 * Unique identifier of the credit card.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the credit card [owner](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId: string;
	/**
	 * Whether the credit card is still active.
	 */
	IsActive: boolean;
	/**
	 * State of the credit card.
	 */
	State?: string | null;
	/**
	 * Kind of the credit card.
	 */
	Kind?: string | null;
	/**
	 * Format of the credit card.
	 */
	Format?: string | null;
	/**
	 * Type of the credit card.
	 */
	Type?: string | null;
	/**
	 * Obfuscated credit card number. At most first six digits and last four digits can be specified, otherwise the digits are replaced with *.
	 */
	ObfuscatedNumber?: string | null;
	/**
	 * Expiration of the credit card in format MM/YYYY.
	 */
	Expiration?: string | null;
	/**
	 * Creation date and time of the credit card in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the credit card in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

/**
 * Credit card details provided by PCI provider.
 */
export type CreditCardData = {
	readonly MaskedStorageData?: string | null;
	StorageData: string;
	/**
	 * @deprecated
	 */
	ObfuscatedNumber?: string | null;
	Expiration: string;
};

export type CreditCardFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Credit cards](https://mews-systems.gitbook.io/connector-api/operations/#credit-card). Required if no other filter is provided.
	 */
	CreditCardIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

/**
 * Credit card details.
 */
export type CreditCardParameters = {
	Type: string;
	readonly ObfuscatedNumber?: string | null;
	Number: string;
	Expiration?: string | null;
	Name: string;
};

export type CreditCardPaymentParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of an open bill of the customer where to assign the payment.
	 */
	BillId?: string | null;
	/**
	 * Unique identifier of an [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) to be assigned to the credit card payment.
	 */
	AccountingCategoryId?: string | null;
	ReservationId?: string | null;
	Amount: ExtendedAmountParameters;
	Category?: AccountingCategoryParameters;
	/**
	 * Additional payment notes.
	 */
	Notes?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId: string;
	CreditCard: CreditCardParameters;
	/**
	 * Identifier of the payment receipt.
	 */
	ReceiptIdentifier?: string | null;
};

export type CreditCardResult = {
	/**
	 * The credit cards.
	 */
	CreditCards?: Array<CreditCard> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type CreditCardTransaction = {
	/**
	 * Unique identifier of the [Payment item](https://mews-systems.gitbook.io/connector-api/operations/#payment-item).
	 */
	PaymentId?: string;
	/**
	 * Identifier of the settlement.
	 */
	SettlementId?: string | null;
	/**
	 * Settlement date and time in UTC timezone in ISO 8601 format.
	 */
	SettledUtc?: string | null;
	Fee?: ExtendedAmount;
	AdjustedFee?: ExtendedAmount;
	ChargedAmount?: ExtendedAmount;
	SettledAmount?: ExtendedAmount;
};

/**
 * Credit rating to define creditworthiness of the company.
 */
export type CreditRating = {
	Basic?: string | null;
};

/**
 * Credit rating to define creditworthiness of the company.
 */
export type CreditRatingParameters = {
	Basic?: string | null;
};

/**
 * Credit rating to define creditworthiness of the company.
 */
export type CreditRatingUpdateParameters = {
	Basic?: StringUpdateValue;
};

export type Culture = {
	Code?: string | null;
	EnglishName?: string | null;
};

export type CultureResult = {
	Cultures?: Array<Culture> | null;
};

export type Currency = {
	/**
	 * ISO-4217 three-letter code, e.g. USD or GBP.
	 */
	Code?: string | null;
	/**
	 * Precision of the currency (count of decimal places).
	 */
	Precision?: number;
};

export type CurrencyAcceptance = {
	Currency: string;
	IsDefault: boolean;
	IsEnabled: boolean;
};

export type CurrencyAcceptanceFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Ids?: Array<string> | null;
	EnterpriseIds?: Array<string> | null;
};

export type CurrencyResult = {
	/**
	 * The supported currencies.
	 */
	Currencies?: Array<Currency> | null;
};

/**
 * Absolute value of the fee.
 */
export type CurrencyValue = {
	Currency: string;
	Value: number;
};

/**
 * Total price of the reservation.
 */
export type CurrencyValueOld = {
	Currency: string;
	Value?: number | null;
	Net?: number | null;
	Tax?: number | null;
	TaxRate?: number | null;
};

export type CurrencyValueOldUpdateValue = {
	Value?: CurrencyValueOld;
};

export type Customer = {
	/**
	 * Unique identifier of the customer.
	 */
	Id: string;
	/**
	 * Unique identifier of the chain.
	 */
	ChainId: string;
	/**
	 * Number of the customer.
	 */
	Number?: string | null;
	/**
	 * Title prefix of the customer.
	 */
	Title?: string | null;
	/**
	 * Sex of the customer.
	 */
	Sex?: string | null;
	/**
	 * @deprecated
	 */
	Gender?: string | null;
	/**
	 * First name of the customer.
	 */
	FirstName?: string | null;
	/**
	 * Last name of the customer.
	 */
	LastName: string;
	/**
	 * Second last name of the customer.
	 */
	SecondLastName?: string | null;
	/**
	 * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries/#country).
	 */
	NationalityCode?: string | null;
	/**
	 * Language and culture code of the customers preferred language. E.g. en-US or fr-FR.
	 */
	LanguageCode?: string | null;
	/**
	 * Date of birth in ISO 8601 format.
	 */
	BirthDate?: string | null;
	/**
	 * Place of birth.
	 */
	BirthPlace?: string | null;
	CitizenNumber?: string | null;
	MotherName?: string | null;
	FatherName?: string | null;
	Occupation?: string | null;
	/**
	 * Email address of the customer.
	 */
	Email?: string | null;
	HasOtaEmail?: boolean;
	/**
	 * Phone number of the customer (possibly mobile).
	 */
	Phone?: string | null;
	/**
	 * Tax identification number of the customer.
	 */
	TaxIdentificationNumber?: string | null;
	/**
	 * Loyalty code of the customer.
	 */
	LoyaltyCode?: string | null;
	/**
	 * Accounting code of the customer.
	 */
	AccountingCode?: string | null;
	/**
	 * Billing code of the customer.
	 */
	BillingCode?: string | null;
	/**
	 * Internal notes about the customer.
	 */
	Notes?: string | null;
	/**
	 * Registration number of the customer's car.
	 */
	CarRegistrationNumber?: string | null;
	/**
	 * Creation date and time of the customer in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the customer in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	Passport?: Document;
	IdentityCard?: Document;
	Visa?: Document;
	DriversLicense?: Document;
	Address?: OldAddress;
	AddressId?: string | null;
	/**
	 * Classifications of the customer.
	 */
	Classifications: Array<string>;
	/**
	 * Options of the customer.
	 */
	Options: Array<string>;
	/**
	 * @deprecated
	 */
	CategoryId?: string | null;
	/**
	 * @deprecated
	 */
	BirthDateUtc?: string | null;
	/**
	 * Value of Italian destination code.
	 */
	ItalianDestinationCode?: string | null;
	/**
	 * Value of Italian fiscal code.
	 */
	ItalianFiscalCode?: string | null;
	/**
	 * Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) the customer is associated with.
	 */
	CompanyId?: string | null;
	/**
	 * Unique identifier of the account ([Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer)) to which this customer is linked.
	 */
	MergeTargetId?: string | null;
	/**
	 * [Activity State](https://mews-systems.gitbook.io/connector-api/operations/#activity-state) of customer record, i.e. whether active or deleted.
	 */
	ActivityState: string;
	IsUpdatedByMe?: boolean | null;
};

/**
 * Updated customer data.
 */
export type CustomerAccount = {
	ChainId?: string;
	CreatedUtc?: string | null;
	UpdatedUtc?: string | null;
	UpdaterProfileId?: string;
	Email?: string | null;
	TaxIdentifier?: string | null;
	BillingCode?: string | null;
	AccountingCode?: string | null;
	Notes?: string | null;
	LastName?: string | null;
	FirstName?: string | null;
	SecondLastName?: string | null;
	BirthPlace?: string | null;
	Telephone?: string | null;
	Occupation?: string | null;
	CarRegistrationNumber?: string | null;
	LoyaltyCode?: string | null;
	NationalityCode?: string | null;
	CompanyId?: string | null;
	BirthDate?: string | null;
	Sex?: string | null;
	Title?: string | null;
	PreferredLanguageCode?: string | null;
	Options?: CustomerAccountOptions;
	Classifications?: CustomerAccountClassifications;
	LegalEntityIdentifiers?: LegalEntityIdentifiers;
};

export type CustomerAccountClassifications = {
	PaymasterAccount?: boolean;
	Blacklist?: boolean;
	Media?: boolean;
	LoyaltyProgram?: boolean;
	PreviousComplaint?: boolean;
	Returning?: boolean;
	Staff?: boolean;
	FriendOrFamily?: boolean;
	TopManagement?: boolean;
	Important?: boolean;
	VeryImportant?: boolean;
	Problematic?: boolean;
	Cashlist?: boolean;
	DisabledPerson?: boolean;
	Military?: boolean;
	Airline?: boolean;
	HealthCompliant?: boolean;
	InRoom?: boolean;
	WaitingForRoom?: boolean;
	Student?: boolean;
};

export type CustomerAccountOptions = {
	SendMarketingEmails?: boolean;
	Invoiceable?: boolean;
	BillAddressObjection?: boolean;
};

export type CustomerAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Title prefix of the customer.
	 */
	Title?: string | null;
	/**
	 * First name of the customer.
	 */
	FirstName?: string | null;
	/**
	 * Last name of the customer.
	 */
	LastName?: string | null;
	/**
	 * Second last name of the customer.
	 */
	SecondLastName?: string | null;
	/**
	 * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries/#country).
	 */
	NationalityCode?: string | null;
	/**
	 * Sex of the customer.
	 */
	Sex?: Sex | null;
	/**
	 * @deprecated
	 */
	Gender?: string | null;
	/**
	 * Date of birth in ISO 8601 format.
	 */
	BirthDate?: string | null;
	/**
	 * Place of birth.
	 */
	BirthPlace?: string | null;
	Occupation?: string | null;
	/**
	 * Email address of the customer.
	 */
	Email?: string | null;
	/**
	 * Phone number of the customer (possibly mobile).
	 */
	Phone?: string | null;
	/**
	 * Loyalty code of the customer.
	 */
	LoyaltyCode?: string | null;
	/**
	 * Internal notes about the customer.
	 */
	Notes?: string | null;
	/**
	 * Registration number of the customer's car.
	 */
	CarRegistrationNumber?: string | null;
	/**
	 * Tax identification number of the customer.
	 */
	TaxIdentificationNumber?: string | null;
	CompanyId?: string | null;
	Address?: AddressParameters;
	IdentityCard?: DocumentParameters;
	Passport?: DocumentParameters;
	Visa?: DocumentParameters;
	DriversLicense?: DocumentParameters;
	/**
	 * Classifications of the customer.
	 */
	Classifications?: Array<string> | null;
	/**
	 * Options of the customer.
	 */
	Options?: Array<string> | null;
	/**
	 * @deprecated
	 */
	BirthDateUtc?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Whether an existing customer should be overwritten in case of duplicity. This applies only to basic personal information (Title, FirstName, LastName, ...).
	 */
	OverwriteExisting: boolean;
	/**
	 * Value of Italian destination code.
	 */
	ItalianDestinationCode?: string | null;
	/**
	 * Value of Italian fiscal code.
	 */
	ItalianFiscalCode?: string | null;
};

export type CustomerClassificationUpdateParameters = {
	PaymasterAccount?: BooleanUpdateValue;
	Blacklist?: BooleanUpdateValue;
	Media?: BooleanUpdateValue;
	LoyaltyProgram?: BooleanUpdateValue;
	PreviousComplaint?: BooleanUpdateValue;
	Returning?: BooleanUpdateValue;
	Staff?: BooleanUpdateValue;
	FriendOrFamily?: BooleanUpdateValue;
	TopManagement?: BooleanUpdateValue;
	Important?: BooleanUpdateValue;
	VeryImportant?: BooleanUpdateValue;
	Problematic?: BooleanUpdateValue;
	Cashlist?: BooleanUpdateValue;
	DisabledPerson?: BooleanUpdateValue;
	Military?: BooleanUpdateValue;
	Airline?: BooleanUpdateValue;
	HealthCompliant?: BooleanUpdateValue;
	InRoom?: BooleanUpdateValue;
	WaitingForRoom?: BooleanUpdateValue;
	Student?: BooleanUpdateValue;
};

export type CustomerEmailParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Emails?: Array<string> | null;
};

/**
 * Extent of data to be returned.
 */
export type CustomerExtent = {
	Customers?: boolean;
	Documents?: boolean;
	Addresses?: boolean;
};

export type CustomerFileParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	CustomerId: string;
	/**
	 * Name of the file.
	 */
	Name: string;
	/**
	 * MIME type of the file (e.g. application/pdf).
	 */
	Type: string;
	/**
	 * Base64-encoded data of the file.
	 */
	Data: string;
};

export type CustomerFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	ChainIds?: Array<string> | null;
	Extent: CustomerExtent;
	/**
	 * @deprecated
	 */
	TimeFilter?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	DeletedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
	/**
	 * Unique identifiers of [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer). Required if no other filter is provided.
	 */
	CustomerIds?: Array<string> | null;
	/**
	 * Emails of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	Emails?: Array<string> | null;
	/**
	 * First names of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	FirstNames?: Array<string> | null;
	/**
	 * Last names of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	LastNames?: Array<string> | null;
	/**
	 * Loyalty codes of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	LoyaltyCodes?: Array<string> | null;
	Limitation?: Limitation;
};

export type CustomerItemParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	CustomerIds: Array<string>;
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
	 */
	Currency?: string | null;
};

export type CustomerItemResult = {
	/**
	 * The customers with their items.
	 */
	Customers?: Array<CustomerItems> | null;
};

export type CustomerItems = {
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	CustomerId?: string;
	Items?: Array<AccountingItem> | null;
	/**
	 * The open order items (consumed items such as nights or products).
	 */
	OrderItems?: Array<OrderItemOld> | null;
	/**
	 * The open payment items (such as cash, credit card payments or invoices).
	 */
	PaymentItems?: Array<PaymentItemOld> | null;
};

export type CustomerMergeParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the source [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	SourceCustomerId: string;
	/**
	 * Unique identifier of the target [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	TargetCustomerId: string;
};

export type CustomerNameParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	FirstName?: string | null;
	LastName?: string | null;
};

export type CustomerOptionUpdateParameters = {
	SendMarketingEmails?: BooleanUpdateValue;
	Invoiceable?: BooleanUpdateValue;
	BillAddressObjection?: BooleanUpdateValue;
};

export type CustomerResult = {
	/**
	 * The customers.
	 */
	Customers?: Array<Customer> | null;
	/**
	 * The identity documents of customers.
	 */
	Documents?: Array<Document> | null;
	/**
	 * Unique identifier of the last and hence oldest customer item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older customers. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message; this is true even when using Extents set to false so that no actual data is returned.
	 */
	Cursor?: string | null;
};

export type CustomerSearchParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Operator?: SearchOperator | null;
	/**
	 * Name to search by (applies to first name, last name and full name).
	 */
	Name?: string | null;
	/**
	 * Identifier of [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource) to search by (members of reservation assigned there will be returned).
	 */
	ResourceId?: string | null;
	Extent?: CustomerExtent;
	/**
	 * @deprecated
	 */
	RoomNumber?: string | null;
};

export type CustomerSearchResult = {
	/**
	 * The customer search results.
	 */
	Customers?: Array<ChargeableCustomer> | null;
	Documents?: Array<Document> | null;
};

export type CustomerUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * New title.
	 */
	Title?: string | null;
	/**
	 * New first name.
	 */
	FirstName?: string | null;
	/**
	 * New last name.
	 */
	LastName?: string | null;
	/**
	 * New second last name.
	 */
	SecondLastName?: string | null;
	/**
	 * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries/#country).
	 */
	NationalityCode?: string | null;
	/**
	 * Sex of the customer.
	 */
	Sex?: Sex | null;
	/**
	 * @deprecated
	 */
	Gender?: string | null;
	/**
	 * New birth date in ISO 8601 format.
	 */
	BirthDate?: string | null;
	BirthPlace?: string | null;
	Occupation?: string | null;
	/**
	 * New email address.
	 */
	Email?: string | null;
	/**
	 * New phone number.
	 */
	Phone?: string | null;
	/**
	 * Loyalty code of the customer.
	 */
	LoyaltyCode?: string | null;
	/**
	 * Internal notes about the customer. Old value will be overwritten.
	 */
	Notes?: string | null;
	/**
	 * New registration number of the customer's car.
	 */
	CarRegistrationNumber?: string | null;
	/**
	 * New tax identification number of the customer.
	 */
	TaxIdentificationNumber?: string | null;
	CompanyId?: string | null;
	Address?: AddressParameters;
	IdentityCard?: DocumentParameters;
	Passport?: DocumentParameters;
	Visa?: DocumentParameters;
	DriversLicense?: DocumentParameters;
	/**
	 * New classifications of the customer.
	 */
	Classifications?: Array<string> | null;
	/**
	 * Options of the customer.
	 */
	Options?: Array<string> | null;
	/**
	 * @deprecated
	 */
	BirthDateUtc?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	CustomerId: string;
	ItalianDestinationCode?: StringUpdateValue;
	ItalianFiscalCode?: StringUpdateValue;
};

export type DateRestriction = {
	Id?: string;
	RateId?: string;
	IsInherited?: boolean;
	StartUtc?: string | null;
	EndUtc?: string | null;
	Days?: Array<string> | null;
	ExternalIdentifier?: string | null;
};

export type DateTimeIntervalUtc = {
	StartUtc?: string | null;
	EndUtc?: string | null;
};

export type DaysParameters = {
	Monday: boolean;
	Tuesday: boolean;
	Wednesday: boolean;
	Thursday: boolean;
	Friday: boolean;
	Saturday: boolean;
	Sunday: boolean;
};

export type DecimalNullableUpdateValue = {
	Value?: number | null;
};

export type DeleteRestrictionParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the [Restrictions](https://mews-systems.gitbook.io/connector-api/operations/#restriction).
	 */
	RestrictionIds: Array<string>;
};

export type Department = {
	/**
	 * Unique identifier of the department.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Whether the department is still active.
	 */
	IsActive: boolean;
	/**
	 * Name of the department.
	 */
	Name: string;
	/**
	 * Creation date and time of the department in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the department in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type DepartmentFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Department](https://mews-systems.gitbook.io/connector-api/operations/#department).
	 */
	DepartmentIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type DepartmentResult = {
	/**
	 * The departments of the enterprise.
	 */
	Departments: Array<Department>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type DependentRatePricingParameters = {
	BaseRateId?: string;
	RelativeAdjustment?: number;
	AbsoluteAdjustment?: number;
};

export type DependentTaxRateStrategy = {
	Value?: number;
	BaseTaxationCodes?: Array<string> | null;
};

export type Device = {
	Id?: string;
	Type?: string | null;
	Name?: string | null;
	Identifier?: string | null;
};

export type DeviceCommand = {
	Id?: string;
	State?: string | null;
	CreatedUtc?: string | null;
	Creator?: User;
	Device?: Device;
	Data?: DeviceCommandData;
};

export type DeviceCommandAddResult = {
	/**
	 * Unique identifier of the created [Command](https://mews-systems.gitbook.io/connector-api/operations/#command).
	 */
	CommandId?: string;
};

export type DeviceCommandData =
	| PaymentTerminalCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| number
	| string
	| null
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData;

export type DeviceCommandFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of [Commands](https://mews-systems.gitbook.io/connector-api/operations/#command) to be returned.
	 */
	CommandIds: Array<string>;
	Limitation?: Limitation;
};

export type DeviceCommandResult = {
	Commands?: Array<DeviceCommand> | null;
	Cursor?: string | null;
};

export type DeviceCommandResultDiscriminator = "ItalianFiscalMachine";

export type DeviceCommandState =
	| "Pending"
	| "Received"
	| "Processing"
	| "Processed"
	| "Cancelled"
	| "Error";

export type DeviceCommandUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Identifier of the [Command](https://mews-systems.gitbook.io/connector-api/operations/#command) to be updated.
	 */
	CommandId: string;
	State: DeviceCommandState;
	/**
	 * Progress of the command processing. Only used if the State is Processing, otherwise ignored.
	 */
	Progress?: number | null;
	/**
	 * Notes about command execution. Only used if the State is Processed, Cancelled or Error, otherwise ignored.
	 */
	Notes?: string | null;
	ExternalRequestIdentifier?: StringUpdateValue;
};

export type DeviceResult = {
	/**
	 * The devices.
	 */
	Devices?: Array<Device> | null;
};

export type Document = {
	/**
	 * Unique identifier of the document.
	 */
	Id?: string;
	/**
	 * Identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
	 */
	CustomerId?: string;
	/**
	 * Type of the document.
	 */
	Type?: string | null;
	/**
	 * Number of the document (e.g. passport number).
	 */
	Number?: string | null;
	/**
	 * Expiration date in ISO 8601 format.
	 */
	Expiration?: string | null;
	/**
	 * Date of issuance in ISO 8601 format.
	 */
	Issuance?: string | null;
	/**
	 * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries/#country).
	 */
	IssuingCountryCode?: string | null;
	/**
	 * City from which document issued
	 */
	IssuingCity?: string | null;
	/**
	 * @deprecated
	 */
	ExpirationUtc?: string | null;
	/**
	 * @deprecated
	 */
	IssuanceUtc?: string | null;
};

/**
 * New drivers license details.
 */
export type DocumentParameters = {
	Number?: string | null;
	Expiration?: string | null;
	Issuance?: string | null;
	IssuingCountryCode?: string | null;
	IssuingCity?: string | null;
	/**
	 * @deprecated
	 */
	ExpirationUtc?: string | null;
	/**
	 * @deprecated
	 */
	IssuanceUtc?: string | null;
};

export type EarlinessRestriction = {
	Id?: string;
	RateId?: string;
	IsInherited?: boolean;
	StartUtc?: string | null;
	EndUtc?: string | null;
	Days?: Array<string> | null;
	ExternalIdentifier?: string | null;
	MinAdvance?: string | null;
	MaxAdvance?: string | null;
};

/**
 * The enterprise (e.g. hotel, hostel) associated with the access token.
 */
export type Enterprise = {
	Id: string;
	ExternalIdentifier?: string | null;
	ChainId: string;
	CreatedUtc: string;
	UpdatedUtc: string;
	Name: string;
	TimeZoneIdentifier: string;
	LegalEnvironmentCode: string;
	AccommodationEnvironmentCode?: string | null;
	AccountingEnvironmentCode?: string | null;
	TaxEnvironmentCode?: string | null;
	DefaultLanguageCode: string;
	/**
	 * @deprecated
	 */
	EditableHistoryInterval: string;
	AccountingEditableHistoryInterval: string;
	OperationalEditableHistoryInterval: string;
	WebsiteUrl?: string | null;
	Email?: string | null;
	Phone?: string | null;
	LogoImageId?: string | null;
	CoverImageId?: string | null;
	Pricing: PricingMode;
	TaxPrecision?: number | null;
	AddressId: string;
	Address?: OldAddress;
	Currencies: Array<CurrencyAcceptance>;
	AccountingConfiguration?: AccountingConfiguration;
	IsPortfolio?: boolean;
};

export type EnterpriseBase = {
	Id: string;
	ExternalIdentifier?: string | null;
	ChainId: string;
	CreatedUtc: string;
	UpdatedUtc: string;
	Name: string;
	TimeZoneIdentifier: string;
	LegalEnvironmentCode: string;
	AccommodationEnvironmentCode?: string | null;
	AccountingEnvironmentCode?: string | null;
	TaxEnvironmentCode?: string | null;
	DefaultLanguageCode: string;
	/**
	 * @deprecated
	 */
	EditableHistoryInterval: string;
	AccountingEditableHistoryInterval: string;
	OperationalEditableHistoryInterval: string;
	WebsiteUrl?: string | null;
	Email?: string | null;
	Phone?: string | null;
	LogoImageId?: string | null;
	CoverImageId?: string | null;
	Pricing: PricingMode;
	TaxPrecision?: number | null;
	AddressId: string;
};

export type EnterpriseFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/#enterprise). If not specified, all enterprises within scope of the Access Token are returned.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Identifiers of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/#enterprise) from external system.
	 */
	ExternalIdentifiers?: Array<string> | null;
	LinkedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	Limitation: Limitation;
};

export type EnterpriseProfileData = {
	ProfileId?: string;
};

export type EnterpriseResult = {
	/**
	 * The filtered enterprises.
	 */
	Enterprises: Array<EnterpriseBase>;
	/**
	 * Unique identifier of the last and hence oldest enterprise returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older enterprises.
	 */
	Cursor?: string | null;
};

export type EnterpriseScopeCounterDiscriminator =
	| "Counter"
	| "AccountingCounter"
	| "AvailabilityBlockCounter"
	| "BillCounter"
	| "BillPreviewCounter"
	| "FiscalCounter"
	| "ProformaCounter"
	| "RegistrationCardCounter"
	| "ServiceOrderCounter"
	| "CorrectionBillCounter";

export type ExchangeRate = {
	Id?: string;
	EnterpriseId?: string;
	/**
	 * ISO-4217 code of the source [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
	 */
	SourceCurrency: string;
	/**
	 * ISO-4217 code of the target [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
	 */
	TargetCurrency: string;
	/**
	 * The exchange rate from the source currency to the target currency.
	 */
	Value: number;
};

export type ExchangeRateResult = {
	/**
	 * The available exchange rates.
	 */
	ExchangeRates: Array<ExchangeRate>;
	Cursor?: string | null;
};

export type Export = {
	Id: string;
	Status: ExportStatus;
	EntityType: ExportEntityType;
	Files: Array<ExportFileEntry>;
	ExpiresUtc?: string | null;
};

export type ExportAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	EntityType: ExportEntityType;
};

export type ExportAddResult = {
	Export?: Export;
};

export type ExportEntityType =
	| "OrderItem"
	| "Payment"
	| "Reservation"
	| "Customer"
	| "Company";

export type ExportFileEntry = {
	Url: string;
	SizeInBytes: number;
};

export type ExportFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the [Exports](https://mews-systems.gitbook.io/connector-api/operations/#export).
	 */
	ExportIds: Array<string>;
};

export type ExportResult = {
	[key: string]: unknown;
};

export type ExportStatus =
	| "Pending"
	| "Processing"
	| "Success"
	| "Failed"
	| "Expired";

/**
 * Price representing price of the product.
 */
export type ExtendedAmount = {
	Currency?: string | null;
	NetValue?: number;
	GrossValue?: number;
	TaxValues?: Array<TaxValue> | null;
	Breakdown?: TaxBreakdown;
	Value?: number | null;
	Net?: number | null;
	Tax?: number | null;
	TaxRate?: number | null;
};

/**
 * Amount of the external card payment.
 */
export type ExtendedAmountParameters = {
	Currency: string;
	NetValue?: number | null;
	GrossValue?: number | null;
	TaxCodes?: Array<string> | null;
	/**
	 * @deprecated
	 */
	Value?: number | null;
	/**
	 * @deprecated
	 */
	Net?: number | null;
	/**
	 * @deprecated
	 */
	Tax?: number | null;
	/**
	 * @deprecated
	 */
	TaxRate?: number | null;
};

export type ExternalPaymentParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company). Company billing may not be enabled for your integration.
	 */
	AccountId?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer). **Deprecated!**
	 * @deprecated
	 */
	CustomerId?: string | null;
	/**
	 * Unique identifier of an open bill of the customer where to assign the payment.
	 */
	BillId?: string | null;
	/**
	 * Unique identifier of an [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) to be assigned to the external payment.
	 */
	AccountingCategoryId?: string | null;
	ReservationId?: string | null;
	Amount: ExtendedAmountParameters;
	Category?: AccountingCategoryParameters;
	/**
	 * Type of the external payment. *Except for the enterprises based in the French Legal Environment. Unspecified is considered as fraud.
	 */
	Type?: ExternalPaymentTypeOld | null;
	/**
	 * Identifier of the payment from external system.
	 */
	ExternalIdentifier?: string | null;
	/**
	 * Additional payment notes.
	 */
	Notes?: string | null;
};

export type ExternalPaymentType =
	| "Unspecified"
	| "BadDebts"
	| "Bacs"
	| "WireTransfer"
	| "Invoice"
	| "ExchangeRateDifference"
	| "Complimentary"
	| "Reseller"
	| "ExchangeRoundingDifference"
	| "Barter"
	| "Commission"
	| "BankCharges"
	| "CrossSettlement"
	| "Cash"
	| "CreditCard"
	| "Prepayment"
	| "Cheque"
	| "Bancontact"
	| "IDeal"
	| "PayPal"
	| "GiftCard"
	| "LoyaltyPoints"
	| "ChequeVacances"
	| "OnlinePayment"
	| "CardCheck"
	| "PaymentHubRedirection"
	| "Voucher"
	| "MasterCard"
	| "Visa"
	| "Amex"
	| "Discover"
	| "DinersClub"
	| "Jcb"
	| "UnionPay"
	| "Twint"
	| "Reka"
	| "LoyaltyCard"
	| "PosDiningAndSpaReward"
	| "DirectDebit"
	| "DepositCheck"
	| "DepositCash"
	| "DepositCreditCard"
	| "DepositWireTransfer";

export type ExternalPaymentTypeOld =
	| "Bacs"
	| "WireTransfer"
	| "Invoice"
	| "Reseller"
	| "CrossSettlement"
	| "Cash"
	| "CreditCard"
	| "PayPal"
	| "Twint"
	| "DepositWireTransfer";

export type FiscalMachineCommandData =
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  };

export type FiscalMachinePayloadDataDiscriminator = "ItalianFiscalMachine";

export type FlatTaxRateStrategy = {
	CurrencyCode?: string | null;
	Value?: number;
};

export type GetAllActiveCommandsParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
};

export type GuidIEnumerableUpdateValue = {
	Value?: Array<string> | null;
};

export type GuidNullableUpdateValue = {
	Value?: string | null;
};

export type GuidUpdateValue = {
	Value?: string;
};

export type Hours = {
	Zero: boolean;
	One: boolean;
	Two: boolean;
	Three: boolean;
	Four: boolean;
	Five: boolean;
	Six: boolean;
	Seven: boolean;
	Eight: boolean;
	Nine: boolean;
	Ten: boolean;
	Eleven: boolean;
	Twelve: boolean;
	Thirteen: boolean;
	Fourteen: boolean;
	Fifteen: boolean;
	Sixteen: boolean;
	Seventeen: boolean;
	Eighteen: boolean;
	Nineteen: boolean;
	Twenty: boolean;
	TwentyOne: boolean;
	TwentyTwo: boolean;
	TwentyThree: boolean;
};

export type HoursParameters = {
	Zero: boolean;
	One: boolean;
	Two: boolean;
	Three: boolean;
	Four: boolean;
	Five: boolean;
	Six: boolean;
	Seven: boolean;
	Eight: boolean;
	Nine: boolean;
	Ten: boolean;
	Eleven: boolean;
	Twelve: boolean;
	Thirteen: boolean;
	Fourteen: boolean;
	Fifteen: boolean;
	Sixteen: boolean;
	Seventeen: boolean;
	Eighteen: boolean;
	Nineteen: boolean;
	Twenty: boolean;
	TwentyOne: boolean;
	TwentyTwo: boolean;
	TwentyThree: boolean;
};

export type IdealData = {
	RedirectUrl?: string | null;
};

export type ImageResizeMode = "Cover" | "CoverExact" | "Fit" | "FitExact";

export type ImageSizeParameters = {
	ImageId: string;
	Width?: number | null;
	Height?: number | null;
	ResizeMode?: ImageResizeMode | null;
};

export type ImageUrl = {
	/**
	 * Unique identifier of the image.
	 */
	ImageId?: string;
	/**
	 * URL of the image.
	 */
	Url?: string | null;
};

export type ImageUrlParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Parameters of images whose URLs should be returned.
	 */
	Images: Array<ImageSizeParameters>;
};

export type ImageUrlResult = {
	/**
	 * URLs of the images.
	 */
	ImageUrls?: Array<ImageUrl> | null;
};

export type Int32NullableUpdateValue = {
	Value?: number | null;
};

export type Int32UpdateValue = {
	Value?: number;
};

export type InvoicePaymentData = {
	InvoiceId?: string | null;
};

export type ItalianFiscalMachineData = {
	IsRefund?: boolean;
	RebatedReceiptNumber?: string | null;
	RebatedReceiptSequence?: string | null;
	RebatedReceiptDateTimeUtc?: string | null;
	PrinterSerialNumber?: string | null;
};

export type ItalianFiscalMachineResultData = {
	SerialNumber?: string | null;
	Base64Data?: string | null;
};

export type JToken = Array<JToken>;

export type KeyCutterCommandData =
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null;

export type KeyCutterCommandParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the KeyCutter [Device](https://mews-systems.gitbook.io/connector-api/operations/devices/#device) where to encode the key.
	 */
	KeyCutterId: string;
	/**
	 * Unique identifier of the reservation to encode the key for.
	 */
	ReservationId: string;
	/**
	 * Count of keys to encode.
	 */
	KeyCount: number;
};

export type Language = {
	/**
	 * Language-culture code of the language.
	 */
	Code?: string | null;
	/**
	 * Language-culture code of the fallback language.
	 */
	FallbackLanguageCode?: string | null;
	/**
	 * English name of the language.
	 */
	EnglishName?: string | null;
	/**
	 * Local name of the language.
	 */
	LocalName?: string | null;
};

export type LanguageResult = {
	/**
	 * The supported languages.
	 */
	Languages?: Array<Language> | null;
};

export type LanguageTextParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Language-culture codes of the [Languages](https://mews-systems.gitbook.io/connector-api/operations/#language) whose texts to return.
	 */
	LanguageCodes: Array<string>;
	/**
	 * Scope of texts to return.
	 */
	Scope: string;
};

export type LanguageTextResult = {
	/**
	 * Texts in the specified languages.
	 */
	LanguageTexts?: Array<LanguageTexts> | null;
};

export type LanguageTexts = {
	/**
	 * Language-culture code of the [Language](https://mews-systems.gitbook.io/connector-api/operations/#language).
	 */
	LanguageCode?: string | null;
	/**
	 * Texts in the specified language by their keys.
	 */
	Texts?: {
		[key: string]: string | null;
	} | null;
};

export type LegalEntityIdentifierUpdateParameters = {
	ItDestinationCode?: StringUpdateValue;
	ItFiscalCode?: StringUpdateValue;
};

export type LegalEntityIdentifiers = {
	ItDestinationCode?: string | null;
	ItFiscalCode?: string | null;
};

export type LengthRestriction = {
	Id?: string;
	RateId?: string;
	IsInherited?: boolean;
	StartUtc?: string | null;
	EndUtc?: string | null;
	Days?: Array<string> | null;
	ExternalIdentifier?: string | null;
	MinLength?: string | null;
	MaxLength?: string | null;
};

/**
 * Limitation on the quantity of data returned.
 */
export type Limitation = {
	Count: number;
	Cursor?: string | null;
};

export type LoyaltyMembership = {
	/**
	 * Unique identifier of the loyalty membership.
	 */
	Id: string;
	/**
	 * Unique identifier of the chain.
	 */
	ChainId: string;
	/**
	 * Unique identifier of the account.
	 */
	AccountId: string;
	/**
	 * Unique identifier of the loyalty program.
	 */
	LoyaltyProgramId: string;
	State: LoyaltyMembershipState;
	/**
	 * Defines the primary loyalty membership.
	 */
	IsPrimary: boolean;
	/**
	 * Code of the loyalty membership.
	 */
	Code?: string | null;
	/**
	 * The loyalty points for the account in that membership.
	 */
	Points?: number | null;
	/**
	 * Expiration date of the loyalty membership in UTC timezone in ISO 8601 format.
	 */
	ExpirationDate?: string | null;
	/**
	 * Url of the loyalty membership.
	 */
	Url?: string | null;
	/**
	 * Unique identifier of the loyalty tier.
	 */
	LoyaltyTierId?: string | null;
	CreatorProfile?: ProfileData;
	UpdaterProfile?: ProfileData;
};

export type LoyaltyMembershipAddParameters = {
	AccountId: string;
	LoyaltyProgramId: string;
	IsPrimary: boolean;
	State?: LoyaltyMembershipState | null;
	Code?: string | null;
	Points?: number | null;
	ExpirationDate?: string | null;
	Url?: string | null;
	LoyaltyTierId?: string | null;
};

export type LoyaltyMembershipDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the loyalty memberships to be deleted.
	 */
	LoyaltyMembershipIds: Array<string>;
};

export type LoyaltyMembershipFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
	 */
	ChainIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Loyalty memberships](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-membership).
	 */
	LoyaltyMembershipIds?: Array<string> | null;
	/**
	 * Unique identifiers of accounts (for example [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)) the membership is associated with.
	 */
	AccountIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/loyaltyprograms/#loyalty-program).
	 */
	LoyaltyProgramIds?: Array<string> | null;
	/**
	 * States of the loyalty memberships.
	 */
	MembershipStates?: Array<LoyaltyMembershipState> | null;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
	Codes?: Array<string> | null;
	Limitation: Limitation;
};

export type LoyaltyMembershipResult = {
	/**
	 * Added loyalty memberships.
	 */
	LoyaltyMemberships: Array<LoyaltyMembership>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type LoyaltyMembershipState =
	| "New"
	| "Pending"
	| "Enrolled"
	| "Canceled"
	| "Declined";

export type LoyaltyMembershipUpdateParameters = {
	LoyaltyMembershipId: string;
	LoyaltyProgramId?: GuidUpdateValue;
	State?: LoyaltyMembershipState | null;
	IsPrimary?: BooleanUpdateValue;
	Code?: StringUpdateValue;
	Points?: Int32NullableUpdateValue;
	ExpirationDate?: StringUpdateValue;
	Url?: StringUpdateValue;
	LoyaltyTierId?: GuidNullableUpdateValue;
};

export type LoyaltyProgram = {
	/**
	 * Unique identifier of the loyalty program.
	 */
	Id: string;
	/**
	 * Unique identifier of the chain.
	 */
	ChainId: string;
	/**
	 * Name of the loyalty program.
	 */
	Name: string;
	/**
	 * Code of the loyalty program.
	 */
	Code: string;
	Type?: LoyaltyProgramType | null;
	Subscription?: LoyaltyProgramSubscription | null;
};

export type LoyaltyProgramAddParameters = {
	/**
	 * @deprecated
	 */
	DataClusterId?: string;
	Name: string;
	Code: string;
	Type?: LoyaltyProgramType | null;
	Subscription?: LoyaltyProgramSubscription | null;
};

export type LoyaltyProgramDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the loyalty programs to be deleted.
	 */
	LoyaltyProgramIds: Array<string>;
};

export type LoyaltyProgramFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
	 */
	ChainIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-program).
	 */
	LoyaltyProgramIds?: Array<string> | null;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
	Codes?: Array<string> | null;
	Limitation: Limitation;
};

export type LoyaltyProgramResult = {
	/**
	 * Updated loyalty programs.
	 */
	LoyaltyPrograms: Array<LoyaltyProgram>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type LoyaltyProgramSubscription = "Free" | "Paid";

export type LoyaltyProgramType =
	| "Hotel"
	| "ExternalPartner"
	| "SoftBrand"
	| "Unknown";

export type LoyaltyProgramUpdateParameters = {
	LoyaltyProgramId: string;
	Name?: StringUpdateValue;
	Type?: LoyaltyProgramType | null;
	Subscription?: LoyaltyProgramSubscription | null;
};

export type LoyaltyTier = {
	/**
	 * Unique identifier of the loyalty tier.
	 */
	Id: string;
	/**
	 * Unique identifier of the loyalty program of that loyalty tier.
	 */
	LoyaltyProgramId: string;
	/**
	 * Name of the loyalty tier.
	 */
	Name: string;
	/**
	 * Code of the loyalty tier.
	 */
	Code: string;
	/**
	 * Ordering of the loyalty tier.
	 */
	Ordering: number;
};

export type LoyaltyTierAddParameters = {
	LoyaltyProgramId: string;
	Name: string;
	Code: string;
	Ordering: number;
};

export type LoyaltyTierDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the loyalty tiers to be deleted.
	 */
	LoyaltyTierIds: Array<string>;
};

export type LoyaltyTierFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
	 */
	ChainIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-program).
	 */
	LoyaltyProgramIds: Array<string>;
	/**
	 * Unique identifiers of [Loyalty tiers](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-tier).
	 */
	LoyaltyTierIds?: Array<string> | null;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
	UpdatedUtc?: TimeFilterInterval;
	Limitation?: Limitation;
};

export type LoyaltyTierResult = {
	/**
	 * Updated loyalty tiers.
	 */
	LoyaltyTiers: Array<LoyaltyTier>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type LoyaltyTierUpdateParameters = {
	LoyaltyTierId: string;
	Name?: StringUpdateValue;
	Code?: StringUpdateValue;
	Ordering?: Int32UpdateValue;
};

export type MergeAccountType = "Customer" | "Company";

export type Message = {
	/**
	 * Unique identifier of the message.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Message thread](https://mews-systems.gitbook.io/connector-api/operations/messagethreads/#message-thread) which the message belongs to.
	 */
	MessageThreadId: string;
	/**
	 * Text of the message.
	 */
	Text: string;
	Sender: SenderDiscriminator;
	/**
	 * Creation date and time of the message in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
};

export type MessageAddParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	MessageThreadId: string;
	Text: string;
	Identifier?: string | null;
};

export type MessageFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Message threads](https://mews-systems.gitbook.io/connector-api/operations/messagethreads/#message-thread) from where to return messages.
	 */
	MessageThreadIds: Array<string>;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
};

export type MessageResult = {
	/**
	 * The filtered messages.
	 */
	Messages: Array<Message>;
	/**
	 * Unique identifier of the last and hence oldest message returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older messages.
	 */
	Cursor?: string | null;
};

export type MessageThread = {
	/**
	 * Unique identifier of the message thread.
	 */
	Id: string;
	/**
	 * The sender of the original message in the thread.
	 */
	OriginalSender: string;
	/**
	 * Subject of the message thread.
	 */
	Subject: string;
	/**
	 * Creation date and time of the message thread in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the message thread in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	IsResolved?: boolean;
};

export type MessageThreadAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * The sender of the original message in the thread.
	 */
	OriginalSender: string;
	/**
	 * Subject of the message thread.
	 */
	Subject: string;
};

export type MessageThreadFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Message threads](https://mews-systems.gitbook.io/connector-api/operations/#message-thread). Required if no other filter is provided.
	 */
	MessageThreadIds?: Array<string> | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
};

export type MessageThreadResult = {
	/**
	 * The filtered message threads.
	 */
	MessageThreads: Array<MessageThread>;
	/**
	 * Unique identifier of the last and hence oldest message thread returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older message threads.
	 */
	Cursor?: string | null;
};

export type MultipleAccountMergeParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Accounts to be merged.
	 */
	AccountMergeParameters: Array<AccountMergeParameter>;
};

export type MultipleAccountNoteAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Account notes to be added.
	 */
	AccountNotes: Array<AccountNoteAddParameters>;
};

export type MultipleAccountNoteDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	ChainId?: string | null;
	/**
	 * Unique identifiers of the account notes to be deleted.
	 */
	AccountNoteIds: Array<string>;
};

export type MultipleAccountNoteUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	ChainId?: string | null;
	/**
	 * Account notes to be updated.
	 */
	AccountNoteUpdates: Array<AccountNoteUpdateParameters>;
};

export type MultipleAccountUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	ChainId?: string | null;
	/**
	 * Accounts to be updated.
	 */
	AccountUpdates: Array<AccountUpdateParameters>;
};

export type MultipleAccountingItemsUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * List of requested updates.
	 */
	AccountingItemUpdates: Array<AccountingItemUpdateParameters>;
};

export type MultipleAddressAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Collection of addresses to be created.
	 */
	Addresses: Array<AddressAddParameters>;
};

export type MultipleAddressUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Collection of addresses to be updated.
	 */
	AddressUpdates: Array<AddressUpdateParameters>;
};

export type MultipleAvailabilityBlockAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Availability blocks to be added.
	 */
	AvailabilityBlocks: Array<AvailabilityBlockAddParameters>;
};

export type MultipleAvailabilityBlockDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the Availability block to delete.
	 */
	AvailabilityBlockIds: Array<string>;
};

export type MultipleAvailabilityBlockUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Availability blocks to be updated.
	 */
	AvailabilityBlocks?: Array<AvailabilityBlockUpdateParameters> | null;
};

export type MultipleBillAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Information about bills to be created.
	 */
	Bills: Array<BillAddParameters>;
};

export type MultipleCompanyContractAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Information about travel agency contracts to be created.
	 */
	TravelAgencyContracts?: Array<TravelAgencyContractAddParameters> | null;
};

export type MultipleCompanyContractDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the travel agency contract belongs to.
	 */
	ServiceIds: Array<string>;
	/**
	 * @deprecated
	 */
	ServiceId?: string | null;
	/**
	 * Unique identifiers of the Travel agency contract to delete.
	 */
	TravelAgencyContractIds: Array<string>;
};

export type MultipleCompanyContractUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Information about travel agency contracts to be updated.
	 */
	TravelAgencyContractUpdates: Array<TravelAgencyContractUpdateParameters>;
};

export type MultipleCompanyDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	ChainId?: string | null;
	/**
	 * Unique identifiers of the companies to be deleted.
	 */
	CompanyIds: Array<string>;
};

export type MultipleCreditCardParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	CreditCardIds?: Array<string> | null;
};

export type MultipleCustomerParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerIds: Array<string>;
};

export type MultipleLoyaltyMembershipAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Loyalty memberships to be added.
	 */
	LoyaltyMemberships: Array<LoyaltyMembershipAddParameters>;
};

export type MultipleLoyaltyMembershipUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Loyalty memberships to be updated.
	 */
	LoyaltyMembershipUpdates: Array<LoyaltyMembershipUpdateParameters>;
};

export type MultipleLoyaltyProgramAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Loyalty programs to be added.
	 */
	LoyaltyPrograms: Array<LoyaltyProgramAddParameters>;
};

export type MultipleLoyaltyProgramUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Loyalty programs to be updated.
	 */
	LoyaltyProgramUpdates: Array<LoyaltyProgramUpdateParameters>;
};

export type MultipleLoyaltyTierAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	ChainId?: string | null;
	/**
	 * Loyalty tiers to be added.
	 */
	LoyaltyTiers: Array<LoyaltyTierAddParameters>;
};

export type MultipleLoyaltyTierUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Loyalty tiers to be updated.
	 */
	LoyaltyTierUpdates: Array<LoyaltyTierUpdateParameters>;
};

export type MultipleMessageAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Messages to be added.
	 */
	Messages: Array<MessageAddParameters>;
};

export type MultiplePaymentRequestAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Payment requests to be added.
	 */
	PaymentRequests: Array<PaymentRequestAddParameters>;
};

export type MultiplePaymentRequestCancelParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Identifiers of payment requests to be canceled.
	 */
	PaymentRequestIds: Array<string>;
};

export type MultipleReservationParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	ReservationIds: Array<string>;
	/**
	 * @deprecated
	 */
	ReservationId?: string;
	Extent?: ReservationExtent;
};

export type MultipleReservationResult = {
	ReservationIds?: Array<string> | null;
};

export type MultipleReservationUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	ReservationId: string;
	ChannelNumber?: StringUpdateValue;
	StartUtc?: StringUpdateValue;
	EndUtc?: StringUpdateValue;
	ReleasedUtc?: StringUpdateValue;
	AdultCount?: Int32UpdateValue;
	ChildCount?: Int32UpdateValue;
	PersonCounts?: PersonCountParametersIEnumerableUpdateValue;
	AssignedResourceId?: GuidNullableUpdateValue;
	RequestedCategoryId?: GuidUpdateValue;
	TraveAgencyId?: GuidNullableUpdateValue;
	TravelAgencyId?: GuidNullableUpdateValue;
	CompanyId?: GuidNullableUpdateValue;
	BusinessSegmentId?: GuidNullableUpdateValue;
	Purpose?: StringUpdateValue;
	RateId?: GuidUpdateValue;
	CreditCardId?: GuidNullableUpdateValue;
	TimeUnitPrices?: PerUnitPriceParametersIEnumerableUpdateValue;
	BookerId?: GuidNullableUpdateValue;
	AssignedResourceLocked?: BooleanUpdateValue;
	AvailabilityBlockId?: GuidNullableUpdateValue;
	Options?: ReservationUpdateOptionsParameters;
	/**
	 * Array of properties to be updated in each reservation specified.
	 */
	ReservationUpdates: Array<ReservationUpdateParameters>;
	/**
	 * Indicates whether the system will check and prevent a booking being made in the case of an overbooking, i.e. where there is an insufficient number of resources available to meet the request<sup>\*1</sup>. The default is true, i.e. the system will normally check for this unless the property is set to false.
	 * @deprecated
	 */
	CheckOverbooking?: boolean | null;
	/**
	 * Indicates whether the system will check and prevent a booking being made using a restricted rate, e.g. a private rate. The default is true, i.e. the system will normally check for this unless the property is set to false.
	 * @deprecated
	 */
	CheckRateApplicability?: boolean | null;
	/**
	 * Whether the price should be updated to latest value for date/rate/category combination set in Mews. If not specified, the reservation price is updated.
	 */
	Reprice?: boolean | null;
	/**
	 * @deprecated
	 */
	ApplyCancelationFee?: boolean | null;
	/**
	 * Whether the cancellation fees should be applied according to rate cancellation policies. If not specified, the cancellation fees are applied.
	 */
	ApplyCancellationFee?: boolean | null;
	/**
	 * Reason for updating the reservation. Required when updating the price of the reservation.
	 */
	Reason?: string | null;
};

export type MultipleResourceAccessTokenParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Parameters of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
	 */
	ResourceAccessTokenParameters?: Array<ResourceAccessTokenParameters> | null;
};

export type MultipleResourceAccessTokenUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Parameters of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
	 */
	ResourceAccessTokenUpdates?: Array<ResourceAccessTokenUpdateParameters> | null;
};

export type MultipleResourceBlockAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Resource block parameters.
	 */
	ResourceBlocks: Array<ResourceBlockAddParameters>;
};

export type MultipleResourceUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Resource updates.
	 */
	ResourceUpdates: Array<ResourceUpdateParameters>;
};

export type MultipleRoutingRuleAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Collection of Routing rules to be added.
	 */
	RoutingRules: Array<RoutingRuleAddParameter>;
};

export type MultipleRoutingRuleUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Collection of Routing rules to be updated.
	 */
	RoutingRuleUpdates: Array<RoutingRuleUpdateParameters>;
};

export type MultipleServiceOrderNoteAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Notes to be added.
	 */
	ServiceOrderNotes: Array<ServiceOrderNoteAddParameters>;
};

export type MultipleServiceOrderNoteUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Notes to be updated.
	 */
	ServiceOrderNoteUpdates: Array<ServiceOrderNoteUpdateParameters>;
};

export type MultipleVoucherAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Vouchers to be added.
	 */
	VoucherParameters: Array<VoucherAddParameters>;
};

export type MultipleVoucherCodeAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Voucher codes to be added.
	 */
	VoucherCodeParameters: Array<VoucherCodeAddParameters>;
};

export type MultipleVoucherCodeDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifiers of the voucher codes to be deleted.
	 */
	VoucherCodeIds: Array<string>;
};

export type MultipleVoucherDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifiers of the vouchers to be deleted.
	 */
	VoucherIds: Array<string>;
};

export type MultipleVoucherUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Details of voucher updates.
	 */
	VoucherUpdates: Array<VoucherUpdateParameters>;
};

export type NextAction = {
	Type?: string | null;
	Url?: string | null;
};

export type NextActionType = "RedirectToUrl";

export type ObjectData = {
	[key: string]: unknown;
};

/**
 * Address of the customer.
 */
export type OldAddress = {
	Id?: string;
	Line1?: string | null;
	Line2?: string | null;
	City?: string | null;
	PostalCode?: string | null;
	CountryCode?: string | null;
	CountrySubdivisionCode?: string | null;
	Latitude?: number | null;
	Longitude?: number | null;
};

export type OldTaxation = {
	Code?: string | null;
	/**
	 * @deprecated
	 */
	TaxEnvironmentCode?: string | null;
	Name?: string | null;
	LocalName?: string | null;
};

export type OrderAdditionOptions = {
	DisableItemGrouping?: boolean;
};

export type OrderAdditionParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to be ordered.
	 */
	ServiceId: string;
	/**
	 * Identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) to be charged. Company billing may not be enabled for your integration.
	 */
	AccountId?: string | null;
	/**
	 * Identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) to be charged.  **Deprecated!**
	 * @deprecated
	 */
	CustomerId?: string | null;
	Options?: OrderAdditionOptions;
	/**
	 * Parameters of the ordered products.
	 */
	ProductOrders?: Array<ProductOrderAdditionData> | null;
	/**
	 * Parameters of the ordered custom items.
	 */
	Items?: Array<OrderItemAdditionData> | null;
	/**
	 * Date and time of the order consumption in UTC timezone in ISO 8601 format. If not specified, current date and time is used. Please note, as order consumption is one-time event, the optional parameters StartUtc and EndUtc in [Product order parameters](https://mews-systems.gitbook.io/connector-api/operations/#product-order-parameters) should not be used.
	 */
	ConsumptionUtc?: string | null;
	/**
	 * Additional notes of the order.
	 */
	Notes?: string | null;
	BusinessSegmentId?: string | null;
	/**
	 * Identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) to which the created order will be assigned. The bill needs to be issued to the same account as the order.
	 */
	BillId?: string | null;
	LinkedReservationId?: string | null;
};

export type OrderAdditionResult = {
	/**
	 * Unique identifier of the created order.
	 */
	OrderId?: string;
	ChargeId?: string;
};

export type OrderItem = {
	/**
	 * Unique identifier of the order item.
	 */
	Id?: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId?: string;
	/**
	 * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the order item belongs to.
	 */
	AccountId?: string | null;
	/**
	 * A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), e.g. customer or company.
	 */
	AccountType?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the order item is assigned to.
	 */
	ServiceId?: string;
	/**
	 * Unique identifier of the [Service order](https://mews-systems.gitbook.io/connector-api/operations/serviceorders/#service-order) the order item is assigned to.
	 */
	ServiceOrderId?: string;
	/**
	 * Additional notes.
	 */
	Notes?: string | null;
	/**
	 * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the order item is assigned to.
	 */
	BillId?: string | null;
	/**
	 * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the order item belongs to.
	 */
	AccountingCategoryId?: string | null;
	/**
	 * Unit count of item, i.e. the number of sub-items or units, if applicable.
	 */
	UnitCount?: number;
	UnitAmount?: Amount;
	Amount?: Amount;
	OriginalAmount?: Amount;
	/**
	 * Revenue type of the item.
	 */
	RevenueType?: string | null;
	/**
	 * Unique identifier of the user who created the order item.
	 */
	CreatorProfileId?: string;
	/**
	 * Unique identifier of the user who updated the order item.
	 */
	UpdaterProfileId?: string;
	/**
	 * Creation date and time of the order item created in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc?: string | null;
	/**
	 * Last update date and time of the order item in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc?: string | null;
	/**
	 * Date and time of the item consumption in UTC timezone in ISO 8601 format.
	 */
	ConsumedUtc?: string | null;
	CanceledUtc?: string | null;
	/**
	 * Date and time of the item bill closure in UTC timezone in ISO 8601 format.
	 */
	ClosedUtc?: string | null;
	/**
	 * Start of the order item in UTC timezone in ISO 8601 format.
	 */
	StartUtc?: string | null;
	ClaimedUtc?: string | null;
	/**
	 * Accounting state of the order item.
	 */
	AccountingState?: string | null;
	/**
	 * Order item type, e.g. whether product order or space order.
	 */
	Type?: string | null;
	Options?: OrderItemOptions;
	Data?: OrderItemData;
};

export type OrderItemAdditionData = {
	Name: string;
	UnitCount: number;
	UnitAmount: AmountParameters;
	AccountingCategoryId?: string | null;
	Category?: AccountingCategoryParameters;
	UnitCost?: CostParameters;
};

/**
 * Additional order item data.
 */
export type OrderItemData = {
	Discriminator?: OrderItemDataDiscriminator | null;
	Rebate?: OrderItemRebateData;
	Product?: OrderItemProductData;
};

export type OrderItemDataDiscriminator = "Rebate" | "Product";

export type OrderItemFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the order items for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Order items](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item). Required if no other filter is provided.
	 */
	OrderItemIds?: Array<string> | null;
	/**
	 * Unique identifiers of the service orders ([product service orders](https://mews-systems.gitbook.io/connector-api/operations/productserviceorders/#product-service-order) or [reservations](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06)). Required if no other filter is provided.
	 */
	ServiceOrderIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service). Required if no other filter is provided.
	 */
	ServiceIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) to which order item is assigned. Required if no other filter is provided.
	 */
	BillIds?: Array<string> | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	ConsumedUtc?: TimeFilterInterval;
	CanceledUtc?: TimeFilterInterval;
	ClosedUtc?: TimeFilterInterval;
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
	 */
	Currency?: string | null;
	/**
	 * Accounting state of the item.
	 */
	AccountingStates?: Array<AccountingState> | null;
	/**
	 * Order item type, e.g. whether product order or space order.
	 */
	Types?: Array<OrderItemType> | null;
};

export type OrderItemOld = {
	/**
	 * Unique identifier of the item.
	 */
	Id?: string;
	/**
	 * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the item belongs to.
	 */
	AccountId?: string;
	/**
	 * Unique identifier of the order (or [Reservation](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06) which is a special type of order) the item belongs to.
	 */
	OrderId?: string;
	/**
	 * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the item is assigned to.
	 */
	BillId?: string | null;
	/**
	 * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.
	 */
	AccountingCategoryId?: string | null;
	/**
	 * Unit count of item, i.e. the number of sub-items or units, if applicable.
	 */
	UnitCount?: number;
	UnitAmount?: Amount;
	Amount?: ExtendedAmount;
	OriginalAmount?: ExtendedAmount;
	/**
	 * Revenue type of the item.
	 */
	RevenueType?: string | null;
	CreatorProfileId?: string;
	UpdaterProfileId?: string;
	CreatedUtc?: string | null;
	UpdatedUtc?: string | null;
	/**
	 * Date and time of the item consumption in UTC timezone in ISO 8601 format.
	 */
	ConsumedUtc?: string | null;
	CanceledUtc?: string | null;
	/**
	 * Date and time of the item bill closure in UTC timezone in ISO 8601 format.
	 */
	ClosedUtc?: string | null;
	StartUtc?: string | null;
	/**
	 * Accounting state of the item.
	 */
	AccountingState?: string | null;
	/**
	 * Additional data specific to particular order item.
	 */
	Data?: {
		discriminator?: OrderItemTypeOld;
		value?: RebateOrderItemData | ProductOrderItemData;
	};
};

/**
 * Options of the order item.
 */
export type OrderItemOptions = {
	CanceledWithReservation?: boolean;
};

export type OrderItemProductData = {
	ProductId?: string | null;
	AgeCategoryId?: string | null;
};

export type OrderItemRebateData = {
	RebatedItemId?: string | null;
};

export type OrderItemResult = {
	/**
	 * Set of requested order items.
	 */
	OrderItems: Array<OrderItem>;
	/**
	 * Unique identifier of the last and hence oldest order item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older order items.
	 */
	Cursor?: string | null;
};

export type OrderItemType =
	| "CancellationFee"
	| "NightRebate"
	| "ProductOrderRebate"
	| "AdditionalExpenseRebate"
	| "Deposit"
	| "ExchangeRateDifference"
	| "CustomItem"
	| "ServiceCharge"
	| "CityTax"
	| "CityTaxDiscount"
	| "SpaceOrder"
	| "ProductOrder"
	| "Surcharge"
	| "TaxCorrection"
	| "ResourceUpgradeFee"
	| "InvoiceFee";

export type OrderItemTypeOld =
	| "CancellationFee"
	| "Rebate"
	| "Deposit"
	| "ExchangeRateDifference"
	| "CustomItem"
	| "Surcharge"
	| "SurchargeDiscount"
	| "SpaceOrder"
	| "ProductOrder"
	| "Other"
	| "TaxCorrection"
	| "ResourceUpgradeFee"
	| "InvoiceFee";

export type OrderNote = {
	Id?: string;
	OrderId?: string;
	Text?: string | null;
	Type?: OrderNoteType | null;
	CreatedUtc?: string | null;
	UpdatedUtc?: string | null;
};

export type OrderNoteType = "General" | "ChannelManager";

export type Outlet = {
	/**
	 * Unique identifier of the outlet.
	 */
	Id: string;
	/**
	 * Whether the outlet is still active.
	 */
	IsActive: boolean;
	/**
	 * Name of the outlet.
	 */
	Name: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Creation date and time of the outlet in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the outlet in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type OutletBill = {
	/**
	 * Unique identifier of the bill.
	 */
	Id: string;
	EnterpriseId: string;
	/**
	 * Unique identifier of the [Outlet](https://mews-systems.gitbook.io/connector-api/operations/outlets/#outlet) where the bill was issued.
	 */
	OutletId: string;
	/**
	 * Number of the bill.
	 */
	Number?: string | null;
	/**
	 * Date and time of the bill closure in UTC timezone in ISO 8601 format.
	 */
	ClosedUtc: string;
	/**
	 * Last update date and time of the bill in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	/**
	 * Additional notes on the bill.
	 */
	Notes?: string | null;
};

export type OutletBillParameters = {
	OutletId: string;
	Number: string;
	ClosedUtc: string;
	Items: Array<OutletItemParameters>;
	AccountId?: string | null;
	Notes?: string | null;
};

export type OutletFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Outlets](https://mews-systems.gitbook.io/connector-api/operations/#outlet).
	 */
	OutletIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type OutletItem = {
	/**
	 * Unique identifier of the item.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Unique identifier of the [Outlet bill](https://mews-systems.gitbook.io/connector-api/operations/#outlet-bill) the item belongs to.
	 */
	BillId: string;
	/**
	 * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.
	 */
	AccountingCategoryId?: string | null;
	/**
	 * Type of the item.
	 */
	Type: string;
	/**
	 * Name of the item.
	 */
	Name?: string | null;
	/**
	 * Unit count of the item.
	 */
	UnitCount: number;
	UnitAmount?: Amount;
	/**
	 * Date and time of the item creation in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the item in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	/**
	 * Date and time of the item consumption in UTC timezone in ISO 8601 format.
	 */
	ConsumedUtc: string;
	/**
	 * An identifier of this item from another system.
	 */
	ExternalIdentifier?: string | null;
	/**
	 * Additional notes.
	 */
	Notes?: string | null;
	PaymentCardPaymentId?: string | null;
	UnitCost?: CurrencyValueOld;
};

export type OutletItemParameters = {
	Name: string;
	UnitCount: number;
	UnitAmount: AmountParameters;
	ConsumedUtc: string;
	Type?: string | null;
	ExternalIdentifier?: string | null;
	Notes?: string | null;
	AccountingCategoryId?: string | null;
	AccountingCategory?: AccountingCategoryParameters;
	UnitCost?: CostParameters;
};

export type OutletItemResult = {
	/**
	 * The outlet items.
	 */
	OutletItems?: Array<OutletItem> | null;
	/**
	 * The outlet bills of the items.
	 */
	OutletBills?: Array<OutletBill> | null;
	/**
	 * Unique identifier of the last and hence oldest outlet item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older outlet items.
	 */
	Cursor?: string | null;
};

export type OutletItemsFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	Ids?: Array<string> | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	/**
	 * @deprecated
	 */
	TimeFilter?: string | null;
	ConsumedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	ClosedUtc?: TimeFilterInterval;
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
	 */
	Currency?: string | null;
};

export type OutletResult = {
	/**
	 * The outlets of the enterprise.
	 */
	Outlets: Array<Outlet>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type Parameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
};

/**
 * [Parent product category](https://mews-systems.gitbook.io/connector-api/operations/#parent-product-category).
 */
export type ParentProductCategory = {
	Id: string;
	Names: {
		[key: string]: string;
	};
};

export type PassportScannerCommandData =
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData;

export type Payment = {
	Id: string;
	EnterpriseId: string;
	AccountId?: string | null;
	AccountType?: AccountType | null;
	BillId?: string | null;
	ReservationId?: string | null;
	AccountingCategoryId?: string | null;
	Amount?: Amount;
	OriginalAmount?: Amount;
	Notes?: string | null;
	SettlementId?: string | null;
	ConsumedUtc?: string | null;
	ClosedUtc?: string | null;
	ChargedUtc?: string | null;
	CreatedUtc?: string | null;
	UpdatedUtc?: string | null;
	SettlementUtc?: string | null;
	AccountingState: AccountingState;
	State: PaymentState;
	Identifier?: string | null;
	Kind?: PaymentKind | null;
	Type?: PaymentDiscriminator | null;
	Data?: PaymentData;
};

export type PaymentCardPaymentData = {
	PaymentCardId?: string | null;
};

/**
 * Contains information about payment card storage.
 */
export type PaymentCardStorage = {
	PublicKey?: string | null;
};

export type PaymentCreditCardData = {
	CreditCardId?: string | null;
	Transaction?: CreditCardTransaction;
};

export type PaymentData = {
	readonly Discriminator?: PaymentDataDiscriminator | null;
	CreditCard?: PaymentCreditCardData;
	Invoice?: PaymentInvoiceData;
	External?: PaymentExternalData;
};

export type PaymentDataDiscriminator = "CreditCard" | "Invoice" | "External";

export type PaymentDiscriminator =
	| "Payment"
	| "CreditCardPayment"
	| "AlternativePayment"
	| "CashPayment"
	| "InvoicePayment"
	| "ExternalPayment"
	| "TaxDeductedPayment";

export type PaymentExternalData = {
	Type: ExternalPaymentType;
	ExternalIdentifier?: string | null;
};

export type PaymentFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the payments for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of specific [Payments](https://mews-systems.gitbook.io/connector-api/operations/payments/#payment). Required if no other filter is provided.
	 */
	PaymentIds?: Array<string> | null;
	/**
	 * Unique identifiers of specific [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) to which payments are assigned. Required if no other filter is provided.
	 */
	BillIds?: Array<string> | null;
	ReservationIds?: Array<string> | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	ChargedUtc?: TimeFilterInterval;
	ClosedUtc?: TimeFilterInterval;
	SettlementUtc?: TimeFilterInterval;
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
	 */
	Currency?: string | null;
	/**
	 * Accounting state of the item.
	 */
	AccountingStates?: Array<AccountingState> | null;
	States?: Array<PaymentState> | null;
	Type?: PaymentDiscriminator | null;
};

export type PaymentInvoiceData = {
	InvoiceId?: string | null;
};

export type PaymentItemOld = {
	/**
	 * Unique identifier of the item.
	 */
	Id?: string;
	/**
	 * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the item belongs to.
	 */
	AccountId?: string;
	/**
	 * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the item is assigned to.
	 */
	BillId?: string | null;
	/**
	 * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.
	 */
	AccountingCategoryId?: string | null;
	Amount?: ExtendedAmount;
	OriginalAmount?: ExtendedAmount;
	AmountDefault?: ExtendedAmount;
	/**
	 * Additional notes.
	 */
	Notes?: string | null;
	/**
	 * Identifier of the settled payment from the external system (ApplePay/GooglePay).
	 */
	SettlementId?: string | null;
	/**
	 * Date and time of the item consumption in UTC timezone in ISO 8601 format.
	 */
	ConsumedUtc?: string | null;
	/**
	 * Date and time of the item bill closure in UTC timezone in ISO 8601 format.
	 */
	ClosedUtc?: string | null;
	/**
	 * Accounting state of the item.
	 */
	AccountingState?: string | null;
	/**
	 * Payment state of the item.
	 */
	State?: string | null;
	Identifier?: string | null;
	/**
	 * Additional data specific to particular payment item.
	 */
	Data?: {
		discriminator?: PaymentType;
		value?: PaymentCardPaymentData | InvoicePaymentData;
	};
};

export type PaymentKind =
	| "Payment"
	| "Chargeback"
	| "ChargebackReversal"
	| "Refund";

export type PaymentRefundParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of specific [Payment](https://mews-systems.gitbook.io/connector-api/operations/payments/#payment).
	 */
	PaymentId: string;
	/**
	 * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the payment belongs to.
	 */
	AccountId: string;
	/**
	 * Refund reason.
	 */
	Reason: string;
	/**
	 * Refund amount. If not provided, the whole payment will be refunded.
	 */
	ValueToRefund?: number | null;
};

export type PaymentRefundResult = {
	/**
	 * Unique identifier of specific [Payment](https://mews-systems.gitbook.io/connector-api/operations/payments/#payment).
	 */
	PaymentId: string;
	/**
	 * Unique identifier of refund.
	 */
	RefundId: string;
	Type: RefundType;
	Amount?: CurrencyValue;
};

export type PaymentRequest = {
	/**
	 * Unique identifier of the payment request.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) to which the payment request was issued.
	 */
	AccountId: string;
	/**
	 * @deprecated
	 */
	CustomerId?: string | null;
	/**
	 * Unique identifier of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations#reservation-group).
	 */
	ReservationGroupId?: string | null;
	ReservationId?: string | null;
	State: PaymentRequestState;
	Amount: Amount;
	Type: PaymentRequestType;
	Reason: PaymentRequestReason;
	/**
	 * Date and time of the payment request's expiration in ISO 8601 format.
	 */
	ExpirationUtc: string;
	/**
	 * Description of the payment request.
	 */
	Description: string;
	/**
	 * Payment request's notes.
	 */
	Notes?: string | null;
	/**
	 * Creation date and time of the payment request in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the payment request in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type PaymentRequestAddParameters = {
	AccountId: string;
	Amount: CurrencyValue;
	Type: PaymentRequestType;
	Reason: PaymentRequestReason;
	ExpirationUtc: string;
	Description: string;
	Notes?: string | null;
	ReservationId?: string | null;
};

export type PaymentRequestFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Payment requests](https://mews-systems.gitbook.io/connector-api/operations/#payment-request).
	 */
	PaymentRequestIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) accounts to which payment requests were issued.
	 */
	AccountIds?: Array<string> | null;
	ReservationIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * A list of payment request states to filter by.
	 */
	States?: Array<PaymentRequestState> | null;
};

export type PaymentRequestReason =
	| "Other"
	| "PaymentCardMissing"
	| "PaymentCardDeclined"
	| "Deposit"
	| "Prepayment"
	| "Fee";

export type PaymentRequestResult = {
	/**
	 * The filtered payment requests.
	 */
	PaymentRequests: Array<PaymentRequest>;
	/**
	 * Unique identifier of the last and hence oldest payment request returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older payment requests.
	 */
	Cursor?: string | null;
};

export type PaymentRequestState =
	| "Pending"
	| "Completed"
	| "Canceled"
	| "Expired";

export type PaymentRequestType = "Payment" | "Preauthorization";

export type PaymentResult = {
	/**
	 * The list of filtered payments.
	 */
	Payments: Array<Payment>;
	/**
	 * Unique identifier of the last and hence oldest payment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of payments.
	 */
	Cursor?: string | null;
};

export type PaymentState =
	| "Charged"
	| "Canceled"
	| "Pending"
	| "Failed"
	| "Verifying";

export type PaymentTerminalCommandData =
	| PaymentTerminalCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| number
	| string
	| null
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| string
	| ExtendedAmount
	| PayworksData;

export type PaymentTerminalCommandParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Token authenticating access to the enterprise integration.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token authenticating the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the payment terminal.
	 */
	TerminalId: string;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId: string;
	Type: PaymentTerminalCommandType;
	Amount?: CurrencyValueOld;
	/**
	 * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill).
	 */
	BillId?: string | null;
	PaymentRequestId?: string | null;
	ReservationId?: string | null;
};

export type PaymentTerminalCommandType = "Payment" | "Preauthorization";

export type PaymentType =
	| "CreditCard"
	| "Invoice"
	| "Cash"
	| "Unspecified"
	| "BadDebts"
	| "WireTransfer"
	| "ExchangeRateDifference"
	| "ExchangeRoundingDifference"
	| "BankCharges"
	| "Cheque"
	| "Other";

export type PayworksData = {
	MerchantIdentifier?: string | null;
	MerchantSecretKey?: string | null;
	ApiUrl?: string | null;
	Descriptor?: string | null;
	AcceptedCreditCardTypes?: Array<string> | null;
};

export type PerUnitPriceParameters = {
	Index?: number;
	Amount?: AmountParameters;
};

export type PerUnitPriceParametersIEnumerableUpdateValue = {
	Value?: Array<PerUnitPriceParameters> | null;
};

export type PersonCount = {
	AgeCategoryId?: string;
	Count?: number;
};

export type PersonCountParameters = {
	AgeCategoryId?: string;
	Count?: number;
};

export type PersonCountParametersIEnumerableUpdateValue = {
	Value?: Array<PersonCountParameters> | null;
};

export type PersonData = {
	[key: string]: unknown;
};

export type PickupDistribution = "AllInOneGroup" | "IndividualGroups";

export type Preauthorization = {
	/**
	 * Unique identifier of the preauthorization.
	 */
	Id?: string;
	CustomerId?: string;
	/**
	 * Unique identifier of the credit card.
	 */
	CreditCardId?: string | null;
	Amount?: Amount;
	/**
	 * State of the preauthorization.
	 */
	State?: string | null;
	/**
	 * Code of the preauthorization.
	 */
	Code?: string | null;
	IsActive?: boolean;
};

export type PreauthorizationResult = {
	/**
	 * Preauthorizations of the specified [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	Preauthorizations?: Array<Preauthorization> | null;
};

export type PricingMode = "Gross" | "Net";

export type PrinterCommandData =
	| PaymentTerminalCommandData
	| PrinterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| string
	| null
	| number
	| Array<string>
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| number
	| Array<string>
	| null
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| string
	| null
	| Bill
	| {
			discriminator?: BillFiscalMachineDataDiscriminator;
			value?: ItalianFiscalMachineData;
	  }
	| {
			discriminator?: FiscalMachinePayloadDataDiscriminator;
			value?: string;
	  }
	| number
	| string
	| null
	| PaymentTerminalCommandData
	| PrinterCommandData
	| KeyCutterCommandData
	| FiscalMachineCommandData
	| PassportScannerCommandData
	| number
	| string
	| null;

export type PrinterCommandParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Uniqque identifier of the Printer [Device](https://mews-systems.gitbook.io/connector-api/operations/devices/#device) where to print the document.
	 */
	PrinterId: string;
	/**
	 * Base64 encoded data of PDF document to print.
	 */
	Data: string;
	/**
	 * Count of copies to be printed.
	 */
	CopyCount: number;
};

export type Product = {
	/**
	 * Unique identifier of the product.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceId: string;
	/**
	 * Unique identifier of the Product category.
	 */
	CategoryId?: string | null;
	/**
	 * Unique identifier of [Accounting Category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category).
	 */
	AccountingCategoryId?: string | null;
	/**
	 * Whether the product is still active.
	 */
	IsActive: boolean;
	IsDefault?: boolean;
	/**
	 * Name of the product. **Deprecated!** Please use Names
	 * @deprecated
	 */
	Name?: string | null;
	/**
	 * All translations of the product name.
	 */
	Names?: {
		[key: string]: string;
	} | null;
	/**
	 * Name of the product meant to be displayed to customer. **Deprecated!** Please use ExternalNames
	 * @deprecated
	 */
	ExternalName?: string | null;
	/**
	 * All translations of the product name meant to be displayed to customer.
	 */
	ExternalNames?: {
		[key: string]: string;
	} | null;
	/**
	 * Short name of the product. **Deprecated!** Please use ShortNames
	 * @deprecated
	 */
	ShortName?: string | null;
	/**
	 * All translations of the product short name.
	 */
	ShortNames?: {
		[key: string]: string;
	} | null;
	/**
	 * Description of the product. **Deprecated!** Please use Descriptions
	 * @deprecated
	 */
	Description?: string | null;
	/**
	 * All translations of the product description.
	 */
	Descriptions?: {
		[key: string]: string;
	} | null;
	/**
	 * @deprecated
	 */
	Charging?: string | null;
	/**
	 * Charging mode of the product.
	 */
	ChargingMode?: string | null;
	/**
	 * @deprecated
	 */
	Posting?: string | null;
	/**
	 * Posting mode of the product.
	 */
	PostingMode?: string | null;
	Options?: ProductOptions;
	Promotions?: Promotions;
	Classifications?: ProductClassifications;
	Price?: ExtendedAmount;
	Pricing?: {
		discriminator?: ProductPricing;
		value?: ExtendedAmount | RelativeProductPrice;
	};
	ImageIds?: Array<string> | null;
	Ordering?: number;
	/**
	 * Identifier of the product from external system.
	 */
	ExternalIdentifier?: string | null;
	/**
	 * Creation date and time of the product in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the product in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type ProductAgeCategoryPrice = {
	AgeCategoryId?: string;
	Prices?: Array<Amount> | null;
};

export type ProductCategory = {
	/**
	 * Unique identifier of the category.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) of the resource category.
	 */
	ServiceId: string;
	/**
	 * All translations of the name.
	 */
	Names: {
		[key: string]: string;
	};
	/**
	 * All translations of the short name.
	 */
	ShortNames?: {
		[key: string]: string;
	} | null;
	/**
	 * All translations of the description.
	 */
	Descriptions?: {
		[key: string]: string;
	} | null;
	ParentProductCategory?: ParentProductCategory;
	/**
	 * Date and time of the product category update in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	/**
	 * Date and time of the product category creation in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Ordering of the category, lower number corresponds to lower category (note that neither uniqueness nor continuous sequence is guaranteed).
	 */
	Ordering: number;
};

export type ProductCategoryFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the resource categories for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Product category](https://mews-systems.gitbook.io/connector-api/operations/#product-category).
	 */
	ProductCategoryIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource categories belong.
	 */
	ServiceIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type ProductCategoryResult = {
	/**
	 * Product categories.
	 */
	ProductCategories: Array<ProductCategory>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

/**
 * Classifications of the service.
 */
export type ProductClassifications = {
	Food?: boolean;
	Beverage?: boolean;
	Wellness?: boolean;
	CityTax?: boolean;
};

export type ProductDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifiers of the [Products](https://mews-systems.gitbook.io/connector-api/operations/#product) to delete.
	 */
	ProductIds: Array<string>;
};

export type ProductFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	EnterpriseIds?: Array<string> | null;
	ProductIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceIds: Array<string>;
	/**
	 * @deprecated
	 */
	ServiceId?: string | null;
	UpdatedUtc?: TimeFilterInterval;
};

/**
 * Options of the product.
 */
export type ProductOptions = {
	BillAsPackage?: boolean;
};

export type ProductOrderAdditionData = {
	ProductId: string;
	Count?: number | null;
	UnitAmount?: AmountParameters;
	StartUtc?: string | null;
	EndUtc?: string | null;
	UnitCost?: CostParameters;
};

export type ProductOrderItemData = {
	ProductId?: string | null;
	AgeCategoryId?: string | null;
};

export type ProductPricing = "Absolute" | "Relative";

export type ProductPricingFilterParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	EnterpriseIds?: Array<string> | null;
	ProductId?: string;
	FirstTimeUnitStartUtc?: string | null;
	LastTimeUnitStartUtc?: string | null;
};

export type ProductPricingResult = {
	ProductId?: string;
	TimeUnitStartsUtc?: Array<string> | null;
	BaseAmountPrices?: Array<Amount> | null;
	AgeCategoryPrices?: Array<ProductAgeCategoryPrice> | null;
};

export type ProductResult = {
	/**
	 * Products offered with the service.
	 */
	Products?: Array<Product> | null;
	/**
	 * Products offered specifically to customers.
	 */
	CustomerProducts?: Array<Product> | null;
	Cursor?: string | null;
};

export type ProductServiceOrderFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Product service order](https://mews-systems.gitbook.io/connector-api/operations/#product-service-order).
	 */
	ProductServiceOrderIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceIds: Array<string>;
	AccountIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * A list of product service order states to filter by.
	 */
	States?: Array<ServiceOrderState> | null;
};

export type ProductServiceOrderResult = {
	/**
	 * The product service order of the enterprise.
	 */
	ProductServiceOrders: Array<ServiceOrder>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

/**
 * The profile data of the user who updated the loyalty membership.
 */
export type ProfileData = {
	Discriminator?: ProfileDataDiscriminator | null;
	EnterpriseProfile?: EnterpriseProfileData;
};

export type ProfileDataDiscriminator =
	| "Personal"
	| "Enterprise"
	| "Platform"
	| "Static"
	| "Integration";

/**
 * Promotions of the service.
 */
export type Promotions = {
	BeforeCheckIn?: boolean;
	AfterCheckIn?: boolean;
	DuringStay?: boolean;
	BeforeCheckOut?: boolean;
	AfterCheckOut?: boolean;
	DuringCheckOut?: boolean;
};

export type Rate = {
	/**
	 * Unique identifier of the rate.
	 */
	Id?: string;
	/**
	 * Unique identifier of [Rate group](https://mews-systems.gitbook.io/connector-api/operations/#rate-group) where the rate belongs.
	 */
	GroupId?: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceId?: string;
	/**
	 * Unique identifier of the base [Rate](https://mews-systems.gitbook.io/connector-api/operations/#rate).
	 */
	BaseRateId?: string | null;
	/**
	 * Unique identifier of the [Business segment](https://mews-systems.gitbook.io/connector-api/operations/businesssegments/#business-segment).
	 */
	BusinessSegmentId?: string | null;
	/**
	 * Whether the rate is still active.
	 */
	IsActive?: boolean;
	/**
	 * Whether the rate is currently available to customers.
	 */
	IsEnabled?: boolean;
	/**
	 * Whether the rate is publicly available.
	 */
	IsPublic?: boolean;
	/**
	 * Type of the rate
	 */
	Type?: RateType | null;
	/**
	 * Name of the rate (in the default language).
	 */
	Name?: string | null;
	/**
	 * Short name of the rate (in the default language).
	 */
	ShortName?: string | null;
	UpdatedUtc: string;
	/**
	 * All translations of the external name of the rate.
	 */
	ExternalNames?: {
		[key: string]: string;
	} | null;
	/**
	 * All translations of the description of the rate.
	 */
	Description?: {
		[key: string]: string;
	} | null;
	/**
	 * Identifier of the rate from external system.
	 */
	ExternalIdentifier?: string | null;
};

export type RateAddData = {
	ServiceId: string;
	RateGroupId: string;
	IsEnabled?: boolean;
	Type?: RateType | null;
	AccountingCategoryId?: string | null;
	BusinessSegmentId?: string | null;
	Names?: {
		[key: string]: string;
	} | null;
	ShortNames?: {
		[key: string]: string;
	} | null;
	ExternalNames?: {
		[key: string]: string;
	} | null;
	Descriptions?: {
		[key: string]: string;
	} | null;
	PricingType?: RatePricingDiscriminator | null;
	ExternalIdentifier?: string | null;
	Pricing?: RatePricingDataParameters;
};

export type RateAddOptions = {
	HidePriceFromGuest?: boolean;
	IsBonusPointsEligible?: boolean;
};

export type RateAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Information about rates to be created.
	 */
	Rates: Array<RateAddData>;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
};

export type RateAddResult = {
	/**
	 * Rates that have been added.
	 */
	Rates?: Array<Rate> | null;
};

/**
 * Extent of data to be returned.
 */
export type RateExtent = {
	Rates?: boolean;
	/**
	 * @deprecated
	 */
	RateGroups?: boolean;
	/**
	 * @deprecated
	 */
	RateRestrictions?: boolean;
};

export type RateFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	Extent: RateExtent;
	/**
	 * Unique identifiers of the requested [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate).
	 */
	RateIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the rates are requested.
	 */
	ServiceIds: Array<string>;
	/**
	 * Identifiers of [Rate](https://mews-systems.gitbook.io/connector-api/operations/#rate) from external systems.
	 */
	ExternalIdentifiers?: Array<string> | null;
	/**
	 * Whether to return only active, only deleted, or both types of record. If not specified, both active and deleted will be returned.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type RateGroup = {
	/**
	 * Unique identifier of the rate group.
	 */
	Id?: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the rate group belongs to.
	 */
	ServiceId?: string;
	/**
	 * Whether the rate group is still active.
	 */
	IsActive?: boolean;
	/**
	 * Creation date and time of the rate group in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc?: string | null;
	/**
	 * Last update date and time of the rate group in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc?: string | null;
	/**
	 * Ordering of the rate group.
	 */
	Ordering?: number;
	/**
	 * All translations of the name.
	 */
	Names?: {
		[key: string]: string;
	} | null;
	/**
	 * All translations of the short name.
	 */
	ShortNames?: {
		[key: string]: string;
	} | null;
	/**
	 * All translations of the description.
	 */
	Descriptions?: {
		[key: string]: string;
	} | null;
	/**
	 * Identifier of the rate group from external system.
	 */
	ExternalIdentifier?: string | null;
};

export type RateGroupFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Rate group](https://mews-systems.gitbook.io/connector-api/operations/#rate-group). Required if ServiceIds filter is not provided.
	 */
	RateGroupIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service). Required if RateGroupIds filter is not provided.
	 */
	ServiceIds?: Array<string> | null;
	/**
	 * Identifiers of [Rate group](https://mews-systems.gitbook.io/connector-api/operations/#rate-group) from external systems.
	 */
	ExternalIdentifiers?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type RateGroupOld = {
	Id?: string;
	ServiceId?: string;
	IsActive?: boolean;
	Name?: string | null;
	ExternalIdentifier?: string | null;
};

export type RateGroupResult = {
	/**
	 * The filtered rate groups.
	 */
	RateGroups?: Array<RateGroup> | null;
	/**
	 * Unique identifier of the last and hence oldest rate group returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older rate groups.
	 */
	Cursor?: string | null;
};

export type RateOptions = {
	HidePriceFromGuest: boolean;
	IsBonusPointsEligible: boolean;
};

export type RatePriceUpdate = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	FirstTimeUnitStartUtc?: string | null;
	LastTimeUnitStartUtc?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	CategoryId?: string | null;
	Value?: number | null;
};

export type RatePriceUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	FirstTimeUnitStartUtc?: string | null;
	LastTimeUnitStartUtc?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	/**
	 * Unique identifier of the base [Rate](https://mews-systems.gitbook.io/connector-api/operations/#rate) to update.
	 */
	RateId: string;
	ProductId?: string | null;
	/**
	 * Price updates.
	 */
	PriceUpdates: Array<RatePriceUpdate>;
};

export type RatePricing = {
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
	 */
	Currency?: string | null;
	/**
	 * @deprecated
	 */
	DatesUtc?: Array<string> | null;
	/**
	 * Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.
	 */
	TimeUnitStartsUtc?: Array<string> | null;
	/**
	 * @deprecated
	 */
	BasePrices?: Array<number> | null;
	/**
	 * Base prices of the rates for each time unit covered by the time interval.
	 */
	BaseAmountPrices?: Array<Amount> | null;
	/**
	 * Resource category prices.
	 */
	CategoryPrices?: Array<CategoryPricing> | null;
	/**
	 * Resource category adjustments.
	 */
	CategoryAdjustments?: Array<CategoryAdjustment> | null;
	AgeCategoryAdjustments?: Array<AgeCategoryAdjustment> | null;
	/**
	 * Specific amount which shows the difference between this rate and the base rate.
	 */
	RelativeAdjustment?: number;
	/**
	 * Relative amount which shows the difference between this rate and the base rate.
	 */
	AbsoluteAdjustment?: number;
	/**
	 * Price adjustment for when the resource booked with this rate is not full to capacity.
	 */
	EmptyUnitAdjustment?: number;
	/**
	 * Price adjustment for when the resource booked with this rate exceeds capacity.
	 */
	ExtraUnitAdjustment?: number;
};

export type RatePricingDataParameters = {
	BaseRatePricing?: BaseRatePricingParameters;
	DependentRatePricing?: DependentRatePricingParameters;
};

export type RatePricingDiscriminator =
	| "BaseRatePricing"
	| "DependentRatePricing";

export type RatePricingParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
	 */
	FirstTimeUnitStartUtc?: string | null;
	/**
	 * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit): 367 hours if hours, 367 days if days, or 24 months if months.
	 */
	LastTimeUnitStartUtc?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	/**
	 * Unique identifier of the [Rate](https://mews-systems.gitbook.io/connector-api/operations/#rate) whose prices should be returned.
	 */
	RateId: string;
	ProductId?: string | null;
};

export type RateRestrictionResult = {
	DateRestrictions?: Array<DateRestriction> | null;
	EarlinessRestrictions?: Array<EarlinessRestriction> | null;
	LengthRestrictions?: Array<LengthRestriction> | null;
};

export type RateResult = {
	/**
	 * Rates of the default service.
	 */
	Rates?: Array<Rate> | null;
	/**
	 * Rate groups of the default service. **Deprecated!**
	 */
	RateGroups?: Array<RateGroupOld> | null;
	RateRestrictions?: RateRestrictionResult;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type RateType = "Public" | "Private" | "AvailabilityBlock";

export type RebateOrderItemData = {
	RebatedItemId?: string | null;
};

export type RefundType = "CreditCardPayment" | "AlternativePayment";

export type RelativeProductPrice = {
	Multiplier?: number;
	Target?: string | null;
	TaxRateCodes?: Array<string> | null;
	ProductIds?: Array<string> | null;
};

export type RelativeTaxRateStrategy = {
	Value?: number;
};

export type Reservation = {
	/**
	 * Unique identifier of the reservation.
	 */
	Id: string;
	/**
	 * Unique identifier of the Service that reservation is made againts.
	 */
	ServiceId: string;
	/**
	 * Unique identifier of the Customer or a Company who owns the reservation.
	 */
	AccountId: string;
	/**
	 * A discriminator specifying the type of account, e.g. customer or company.
	 */
	AccountType?: AccountType | null;
	/**
	 * Unique identifier of the user who created the order item.
	 */
	CreatorProfileId: string;
	/**
	 * Unique identifier of the user who updated the order item.
	 */
	UpdaterProfileId: string;
	/**
	 * Unique identifier of the Customer on whose behalf the reservation was made.
	 */
	BookerId?: string | null;
	/**
	 * Confirmation number of the reservation in Mews.
	 */
	Number?: string | null;
	State: ServiceOrderState;
	Origin: ServiceOrderOrigin;
	/**
	 * Further detail about origin in case of Origin `Commander`.
	 */
	CommanderOrigin?: ServiceOrderCommanderOrigin | null;
	/**
	 * Details about the reservation `Origin`.
	 */
	OriginDetails?: string | null;
	/**
	 * Creation date and time of the reservation in UTC timezone.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the reservation in UTC timezone.
	 */
	UpdatedUtc: string;
	/**
	 * Cancellation date and time in UTC timezone.
	 */
	CancelledUtc?: string | null;
	/**
	 * Unique identifier of the `Voucher` that has been used to create reservation.
	 */
	VoucherId?: string | null;
	/**
	 * Identifier of the reservation `Business segment`.
	 */
	BusinessSegmentId?: string | null;
	LinkedReservationId?: string | null;
	Options: ServiceOrderOptions;
	/**
	 * Identifier of the reservation `Rate`.
	 */
	RateId: string;
	/**
	 * Unique identifier of the Credit card.
	 */
	CreditCardId?: string | null;
	/**
	 * Unique identifier of the Reservation group.
	 */
	GroupId?: string | null;
	/**
	 * Unique identifier of the Resource category.
	 */
	RequestedResourceCategoryId?: string | null;
	/**
	 * Identifier of the assigned Resource.
	 */
	AssignedResourceId?: string | null;
	/**
	 * Unique identifier of the Availability block the reservation is assigned to.
	 */
	AvailabilityBlockId?: string | null;
	/**
	 * Identifier of the Company that mediated the reservation.
	 */
	PartnerCompanyId?: string | null;
	/**
	 * Identifier of the Travel Agency that mediated the reservation.
	 */
	TravelAgencyId?: string | null;
	/**
	 * Whether the reservation is locked to the assigned Resource and cannot be moved.
	 */
	AssignedResourceLocked?: boolean;
	/**
	 * Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number).
	 */
	ChannelNumber?: string | null;
	/**
	 * Unique number of the reservation within the reservation group.
	 */
	ChannelManagerNumber?: string | null;
	/**
	 * Cancellation reason of the reservation.
	 */
	CancellationReason?: ServiceOrderCancellationReason | null;
	/**
	 * Date when the optional reservation is released in UTC timezone.
	 */
	ReleasedUtc?: string | null;
	/**
	 * Reservation start or check-in time (if it's earlier than scheduled start) in UTC timezone.
	 *
	 * **Deprecated!** Use `ScheduledStartUtc` and `ActualStartUtc` instead.
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * End of the reservation (departure) in UTC timezone.
	 * @deprecated
	 */
	EndUtc?: string | null;
	/**
	 * Scheduled start time of reservation in UTC timezone.
	 */
	ScheduledStartUtc?: string | null;
	/**
	 * Actual customer check-in time of reservation in UTC timezone.
	 */
	ActualStartUtc?: string | null;
	ScheduledEndUtc?: string | null;
	ActualEndUtc?: string | null;
	/**
	 * Purpose of the reservation.
	 */
	Purpose?: ReservationPurpose | null;
	/**
	 * QR code data of the reservation.
	 */
	QrCodeData?: string | null;
	/**
	 * Number of people per age category the reservation was booked for.
	 */
	PersonCounts?: Array<ReservationPersonCount> | null;
};

export type ReservationAdditionParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to be reserved.
	 */
	ServiceId: string;
	/**
	 * Unique identifier of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group) where the reservations are added. If not specified, a new group is created.
	 */
	GroupId?: string | null;
	/**
	 * Name of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group) which the reservations are added to. If GroupId is specified, this field is ignored. If not specified, the group name is automatically created.
	 */
	GroupName?: string | null;
	/**
	 * Parameters of the new reservations.
	 */
	Reservations: Array<ReservationData>;
	/**
	 * Indicates whether the system will check and prevent a booking being made using a restricted rate, e.g. a private rate. The default is true, i.e. the system will normally check for this unless the property is set to false.
	 */
	CheckRateApplicability?: boolean | null;
	/**
	 * Indicates whether the system will check and prevent a booking being made in the case of an overbooking, i.e. where there is an insufficient number of resources available to meet the request<sup>\*1</sup>. The default is true, i.e. the system will normally check for this unless the property is set to false.
	 */
	CheckOverbooking?: boolean | null;
	/**
	 * Whether the confirmation email is sent. Default value is true.
	 */
	SendConfirmationEmail?: boolean | null;
};

export type ReservationAdditionResult = {
	/**
	 * The added reservations.
	 */
	Reservations?: Array<AddedReservation> | null;
};

export type ReservationCancellationParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifiers of the reservation to cancel.
	 */
	ReservationIds: Array<string>;
	/**
	 * @deprecated
	 */
	ReservationId?: string;
	/**
	 * Whether cancellation fees should be charged according to rate conditions.
	 */
	PostCancellationFee?: boolean;
	/**
	 * Additional notes describing the reason for the cancellation.
	 */
	Notes?: string | null;
};

export type ReservationConfirmationNumberParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Numbers?: Array<string> | null;
	Extent?: ReservationExtent;
};

export type ReservationCustomerParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the reservation.
	 */
	ReservationId: string;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId: string;
};

export type ReservationData = {
	Identifier?: string | null;
	ChannelNumber?: string | null;
	State?: ServiceOrderState | null;
	StartUtc: string;
	EndUtc: string;
	ReleasedUtc?: string | null;
	/**
	 * @deprecated
	 */
	AdultCount?: number;
	/**
	 * @deprecated
	 */
	ChildCount?: number;
	PersonCounts: Array<PersonCountParameters>;
	CustomerId: string;
	BookerId?: string | null;
	RequestedCategoryId: string;
	RateId: string;
	VoucherCode?: string | null;
	CreditCardId?: string | null;
	TravelAgencyId?: string | null;
	CompanyId?: string | null;
	BusinessSegmentId?: string | null;
	Notes?: string | null;
	TimeUnitAmount?: AmountParameters;
	TimeUnitPrices?: Array<PerUnitPriceParameters> | null;
	ProductOrders?: Array<ProductOrderAdditionData> | null;
	ResourceAccessTokens?: Array<ResourceAccessTokenParameters> | null;
	AvailabilityBlockId?: string | null;
	ReservationPurpose?: ReservationPurpose | null;
	TimeUnitCost?: CostParameters;
};

export type ReservationDataParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to be priced.
	 */
	ServiceId: string;
	GroupId?: string | null;
	GroupName?: string | null;
	/**
	 * Parameters of the reservations to price. Note that CustomerId is not required when pricing reservations.
	 */
	Reservations: Array<ReservationData>;
	CheckRateApplicability?: boolean | null;
	CheckOverbooking?: boolean | null;
	SendConfirmationEmail?: boolean | null;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the reservations, customers, groups and rates should be also returned.
 */
export type ReservationExtent = {
	Reservations?: boolean;
	ReservationGroups?: boolean;
	Customers?: boolean;
	CustomerAdresses?: boolean | null;
	CustomerIdentityDocuments?: boolean | null;
	Services?: boolean;
	Products?: boolean;
	BusinessSegments?: boolean;
	Resources?: boolean;
	ResourceCategories?: boolean;
	ResourceCategoryAssignments?: boolean;
	Rates?: boolean;
	Items?: boolean;
	OrderItems?: boolean;
	Notes?: boolean;
	QrCodeData?: boolean;
	Companies?: boolean;
	AccountingStates?: Array<string> | null;
};

export type ReservationFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the reservations are requested.
	 */
	ServiceIds: Array<string>;
	/**
	 * @deprecated
	 */
	ServiceId?: string | null;
	/**
	 * Start of the interval in UTC timezone in ISO 8601 format. Required when used in conjunction with the TimeFilter or States search parameter.
	 */
	StartUtc: string;
	/**
	 * End of the interval in UTC timezone in ISO 8601 format. Required when used in conjunction with the TimeFilter or States search parameter.
	 */
	EndUtc: string;
	/**
	 * Unique identifiers of the requested [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group).
	 */
	GroupIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2017-04-12).
	 */
	ReservationIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) which own the reservations.
	 */
	CustomerIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource) assigned to the reservations.
	 */
	AssignedResourceIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate) assigned to the reservations.
	 */
	RateIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Business segments](https://mews-systems.gitbook.io/connector-api/operations/businesssegments/#business-segment) assigned to the reservations.
	 */
	BusinessSegmentIds?: Array<string> | null;
	/**
	 * Set of numbers or references used by the Channel (i.e. OTA, GDS, CRS, etc.) in case the reservation group originates there, e.g. Booking.com confirmation numbers.
	 */
	ChannelNumbers?: Array<string> | null;
	/**
	 * Confirmation numbers of [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2017-04-12).
	 */
	Numbers?: Array<string> | null;
	/**
	 * Time filter of the interval. If not specified, reservations Colliding with the interval are returned.
	 */
	TimeFilter?: ReservationTimeFilter | null;
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
	 */
	Currency?: string | null;
	/**
	 * States the reservations should be in. If not specified, reservations in Confirmed, Started or Processed states or reservations specified by ReservationIds regardless of state are returned.
	 */
	States?: Array<string> | null;
	Extent: ReservationExtent;
	Limitation?: Limitation;
};

export type ReservationGroup = {
	/**
	 * Unique identifier of the reservation group.
	 */
	Id: string;
	/**
	 * Name of the reservation group, might be empty or same for multiple groups.
	 */
	Name: string;
	/**
	 * Name of the corresponding channel manager.
	 */
	ChannelManager?: string | null;
	/**
	 * Identifier of the channel manager.
	 */
	ChannelManagerGroupNumber?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise) the reservation group belongs to.
	 */
	EnterpriseId: string;
};

export type ReservationGroupFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Reservation Group](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group). Required if no other filter is provided.
	 */
	ReservationGroupIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type ReservationGroupOld = {
	Id?: string;
	Name?: string | null;
};

export type ReservationGroupResult = {
	/**
	 * The filtered reservation groups.
	 */
	ReservationGroups: Array<ReservationGroup>;
	/**
	 * Unique identifier of the last and hence oldest reservation group returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older reservation groups.
	 */
	Cursor?: string | null;
};

export type ReservationItemParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the reservation.
	 */
	ReservationIds: Array<string>;
	/**
	 * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
	 */
	Currency?: string | null;
	/**
	 * States the items should be in. If not specified, items in Open or Closed states are returned.
	 */
	AccountingStates?: Array<string> | null;
};

export type ReservationItemResult = {
	/**
	 * The reservations with their items.
	 */
	Reservations?: Array<ReservationItems> | null;
};

export type ReservationItems = {
	/**
	 * Unique identifier of the reservation.
	 */
	ReservationId?: string;
	Items?: Array<AccountingItem> | null;
	/**
	 * The items associated with the reservation.
	 */
	OrderItems?: Array<OrderItemOld> | null;
};

export type ReservationMultipleCustomerParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	CustomerIds?: Array<string> | null;
	Extent?: ReservationExtent;
};

/**
 * The added reservation.
 */
export type ReservationOld = {
	Id?: string;
	ServiceId?: string;
	GroupId?: string;
	Number?: string | null;
	ChannelNumber?: string | null;
	ChannelManagerNumber?: string | null;
	ChannelManagerGroupNumber?: string | null;
	ChannelManager?: string | null;
	State?: string | null;
	Origin?: string | null;
	OriginDetails?: string | null;
	Purpose?: string | null;
	CreatedUtc?: string | null;
	UpdatedUtc?: string | null;
	CancelledUtc?: string | null;
	StartUtc?: string | null;
	EndUtc?: string | null;
	ReleasedUtc?: string | null;
	RequestedCategoryId?: string;
	/**
	 * @deprecated
	 */
	AssignedSpaceId?: string | null;
	AssignedResourceId?: string | null;
	/**
	 * @deprecated
	 */
	AssignedSpaceLocked?: boolean;
	AssignedResourceLocked?: boolean;
	BusinessSegmentId?: string | null;
	CompanyId?: string | null;
	TravelAgencyId?: string | null;
	AvailabilityBlockId?: string | null;
	RateId?: string;
	VoucherId?: string | null;
	CreditCardId?: string | null;
	CancellationReason?: string | null;
	/**
	 * @deprecated
	 */
	AdultCount?: number;
	/**
	 * @deprecated
	 */
	ChildCount?: number;
	PersonCounts?: Array<PersonCount> | null;
	OwnerId?: string;
	/**
	 * @deprecated
	 */
	CustomerId?: string | null;
	BookerId?: string | null;
	/**
	 * @deprecated
	 */
	CompanionIds?: Array<string> | null;
	/**
	 * @deprecated
	 */
	ChannelManagerId?: string | null;
	Options: ReservationOptions;
};

export type ReservationOptions = {
	OwnerCheckedIn: boolean;
	AllCompanionsCheckedIn: boolean;
	AnyCompanionCheckedIn: boolean;
};

export type ReservationPersonCount = {
	AgeCategoryId?: string;
	Count?: number;
};

export type ReservationPrice = {
	/**
	 * Identifier of the reservation within the transaction.
	 */
	Identifier?: string | null;
	TotalAmount?: Amount;
	Total?: CurrencyValueOld;
};

export type ReservationPricingResult = {
	/**
	 * The reservation prices.
	 */
	ReservationPrices?: Array<ReservationPrice> | null;
};

export type ReservationProcessingParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the reservation to process.
	 */
	ReservationId: string;
	/**
	 * Whether closable bills of the reservation members should be automatically closed.
	 */
	CloseBills?: boolean;
	/**
	 * Whether non-zero consumed balance of all reservation members is allowed.
	 */
	AllowOpenBalance?: boolean;
	/**
	 * Required if AllowOpenBalance set to true. Used to provide reason for closing with unbalanced bill.
	 */
	Notes?: string | null;
};

export type ReservationProductParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the reservation.
	 */
	ReservationId: string;
	/**
	 * Unique identifier of the [Product](https://mews-systems.gitbook.io/connector-api/operations/products/#product).
	 */
	ProductId: string;
	/**
	 * The amount of the products to be added. Note that if the product is charged e.g. per night, count 1 means a single product every night. Count 2 means two products every night.
	 */
	Count: number;
	UnitAmount?: AmountParameters;
	/**
	 * Product start in UTC timezone in ISO 8601 format. For products with charging Once and PerPerson must be set to same value as EndUtc.
	 */
	StartUtc?: string | null;
	/**
	 * Product end in UTC timezone in ISO 8601 format. For products with charging Once and PerPerson must be set to same value as StartUtc.
	 */
	EndUtc?: string | null;
	UnitCost?: CostParameters;
};

export type ReservationPurpose = "Leisure" | "Business" | "Student";

export type ReservationQrCodeData = {
	ReservationId?: string;
	Data?: string | null;
};

export type ReservationResult = {
	/**
	 * The reservations that collide with the specified interval.
	 */
	Reservations?: Array<ReservationOld> | null;
	/**
	 * Reservation groups that the reservations are members of.
	 */
	ReservationGroups?: Array<ReservationGroupOld> | null;
	/**
	 * Customers that are members of the reservations.
	 */
	Customers?: Array<Customer> | null;
	/**
	 * Services that have been reserved.
	 */
	Services?: Array<Service> | null;
	/**
	 * Products orderable with reservations.
	 */
	Products?: Array<Product> | null;
	/**
	 * Assigned resources of the reservations.
	 */
	Resources?: Array<Resource> | null;
	/**
	 * Resource categories of the resources.
	 */
	ResourceCategories?: Array<ResourceCategory> | null;
	/**
	 * Assignments of the resources to categories.
	 */
	ResourceCategoryAssignments?: Array<ResourceCategoryAssignment> | null;
	/**
	 * Business segments of the reservations.
	 */
	BusinessSegments?: Array<BusinessSegment> | null;
	/**
	 * Rates of the reservations.
	 */
	Rates?: Array<Rate> | null;
	/**
	 * Rate groups of the reservation rates.
	 */
	RateGroups?: Array<RateGroupOld> | null;
	Items?: Array<AccountingItem> | null;
	/**
	 * Revenue items of the reservations.
	 */
	OrderItems?: Array<OrderItemOld> | null;
	/**
	 * Notes of the reservations.
	 */
	Notes?: Array<OrderNote> | null;
	/**
	 * QR code data of the reservations.
	 */
	QrCodeData?: Array<ReservationQrCodeData> | null;
	Companies?: Array<Company> | null;
	ResourceAccessTokens?: Array<ResourceAccessToken> | null;
	/**
	 * Unique identifier of the last and hence oldest reservation returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older reservations.
	 */
	Cursor?: string | null;
};

export type ReservationServiceOrderFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2023-06-06).
	 */
	ReservationIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service). If not provided, all bookable services are used.
	 */
	ServiceIds: Array<string>;
	/**
	 * Unique identifiers of [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group).
	 */
	ReservationGroupIds?: Array<string> | null;
	/**
	 * Unique identifiers of accounts (currently only [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer), in the future also [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)) the reservation is associated with.
	 */
	AccountIds?: Array<string> | null;
	AssignedResourceIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	CollidingUtc?: TimeFilterInterval;
	ScheduledStartUtc?: TimeFilterInterval;
	/**
	 * A list of service order states to filter by.
	 */
	States?: Array<ServiceOrderState> | null;
};

export type ReservationServiceOrderResult = {
	/**
	 * The reservations of the enterprise.
	 */
	Reservations: Array<Reservation>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type ReservationStartParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the reservation to start.
	 */
	ReservationId: string;
};

export type ReservationTimeFilter =
	| "Colliding"
	| "Created"
	| "Updated"
	| "Start"
	| "End"
	| "Overlapping"
	| "Canceled"
	| "Cancelled";

export type ReservationUpdateIntervalParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the reservation to be updated.
	 */
	ReservationId: string;
	/**
	 * New reservation start in UTC timezone in ISO 8601 format.
	 */
	StartUtc?: string | null;
	/**
	 * New reservation end in UTC timezone in ISO 8601 format.
	 */
	EndUtc?: string | null;
	/**
	 * Whether cancellation fee should be charged for potentially canceled nights.
	 */
	ChargeCancellationFee: boolean;
};

export type ReservationUpdateOptionsParameters = {
	OwnerCheckedIn?: BooleanUpdateValue;
};

export type ReservationUpdateParameters = {
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	EnterpriseId?: string | null;
	ReservationId: string;
	ChannelNumber?: StringUpdateValue;
	StartUtc?: StringUpdateValue;
	EndUtc?: StringUpdateValue;
	ReleasedUtc?: StringUpdateValue;
	AdultCount?: Int32UpdateValue;
	ChildCount?: Int32UpdateValue;
	PersonCounts?: PersonCountParametersIEnumerableUpdateValue;
	AssignedResourceId?: GuidNullableUpdateValue;
	RequestedCategoryId?: GuidUpdateValue;
	TraveAgencyId?: GuidNullableUpdateValue;
	TravelAgencyId?: GuidNullableUpdateValue;
	CompanyId?: GuidNullableUpdateValue;
	BusinessSegmentId?: GuidNullableUpdateValue;
	Purpose?: StringUpdateValue;
	RateId?: GuidUpdateValue;
	CreditCardId?: GuidNullableUpdateValue;
	TimeUnitPrices?: PerUnitPriceParametersIEnumerableUpdateValue;
	BookerId?: GuidNullableUpdateValue;
	AssignedResourceLocked?: BooleanUpdateValue;
	AvailabilityBlockId?: GuidNullableUpdateValue;
	Options?: ReservationUpdateOptionsParameters;
};

export type ReservationsUpdateCustomerParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property/), ignored otherwise.
	 */
	EnterpriseId?: string | null;
	/**
	 * Unique identifier of the reservation to be updated.
	 */
	ReservationId: string;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId: string;
};

export type Resource = {
	/**
	 * Unique identifier of the resource.
	 */
	Id?: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId?: string;
	/**
	 * Whether the resource is still active.
	 */
	IsActive?: boolean;
	/**
	 * Identifier of the parent [Resource](https://mews-systems.gitbook.io/connector-api/operations/#resource) (e.g. room of a bed).
	 */
	ParentResourceId?: string | null;
	/**
	 * Name of the resource (e.g. room number).
	 */
	Name?: string | null;
	/**
	 * State of the resource.
	 */
	State?: string | null;
	Descriptions?: {
		[key: string]: string;
	} | null;
	/**
	 * Creation date and time of the resource in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc?: string | null;
	/**
	 * Last update date and time of the resource in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc?: string | null;
	/**
	 * Additional data of the resource.
	 */
	Data?: {
		discriminator?: string;
		value?:
			| SpaceData
			| {
					[key: string]: unknown;
			  };
	};
	ExternalNames?: {
		[key: string]: string;
	} | null;
};

export type ResourceAccessToken = {
	/**
	 * Unique identifier of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Unique identifier of a reservation.
	 */
	ServiceOrderId: string;
	/**
	 * Unique identifier of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/companionships/#companionship).
	 */
	CompanionshipId?: string | null;
	/**
	 * Unique identifier of [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
	 */
	ResourceId?: string | null;
	Type: ResourceAccessTokenType;
	/**
	 * Value of resource access token
	 */
	Value?: string | null;
	/**
	 * Serial number of [Resource access token type](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token-type).
	 */
	SerialNumber?: string | null;
	/**
	 * Marks the start of interval in which the resource access token can be used.
	 */
	ValidityStartUtc: string;
	/**
	 * Marks the end of interval in which the resource access token can be used.
	 */
	ValidityEndUtc: string;
	Permissions?: ResourceAccessTokenPermissions;
	/**
	 * Creation date and time of the resource access token in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the resource access token in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	/**
	 * Whether the resource access token is still active.
	 */
	IsActive: boolean;
};

export type ResourceAccessTokenDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
	 */
	Ids?: Array<string> | null;
};

export type ResourceAccessTokenFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource access tokens](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token). Required if no other filter is provided.
	 */
	ResourceAccessTokenIds?: Array<string> | null;
	/**
	 * Unique identifiers of reservations. Required if no other filter is provided.
	 */
	ServiceOrderIds?: Array<string> | null;
	CollidingUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<string> | null;
};

export type ResourceAccessTokenParameters = {
	ServiceOrderId?: string;
	CompanionshipId?: string | null;
	ResourceId?: string | null;
	Value?: string | null;
	Type?: string | null;
	SerialNumber?: string | null;
	ValidityStartUtc?: string | null;
	ValidityEndUtc?: string | null;
	Permissions?: ResourceAccessTokenPermissionsParameters;
};

/**
 * Specify permissions of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
 */
export type ResourceAccessTokenPermissions = {
	Bed?: boolean;
	Room?: boolean;
	Floor?: boolean;
	Building?: boolean;
};

export type ResourceAccessTokenPermissionsParameters = {
	Bed?: BooleanUpdateValue;
	Room?: BooleanUpdateValue;
	Floor?: BooleanUpdateValue;
	Building?: BooleanUpdateValue;
};

export type ResourceAccessTokenResult = {
	/**
	 * Resource access tokens.
	 */
	ResourceAccessTokens?: Array<ResourceAccessToken> | null;
	/**
	 * Unique identifier of the last and hence oldest item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older tokens. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message.
	 */
	Cursor?: string | null;
};

export type ResourceAccessTokenType = "PinCode" | "RfidTag";

export type ResourceAccessTokenUpdateParameters = {
	ResourceAccessTokenId?: string;
	ValidityStartUtc?: StringUpdateValue;
	ValidityEndUtc?: StringUpdateValue;
	Permissions?: ResourceAccessTokenPermissionsParameters;
};

/**
 *
 *
 * OutOfOrderBlocks
 *
 * PublicAvailabilityAdjustment
 *
 * OtherServiceReservationCount
 *
 * Occupied
 *
 * ConfirmedReservations
 *
 * OptionalReservations
 *
 * BlockAvailability
 *
 * AllocatedBlockAvailability
 *
 * UsableResources
 *
 * ActiveResources
 */
export type ResourceAvailabilityMetricTypeEnum =
	| "OutOfOrderBlocks"
	| "PublicAvailabilityAdjustment"
	| "OtherServiceReservationCount"
	| "Occupied"
	| "ConfirmedReservations"
	| "OptionalReservations"
	| "BlockAvailability"
	| "AllocatedBlockAvailability"
	| "UsableResources"
	| "ActiveResources";

export type ResourceBlock = {
	/**
	 * Unique identifier of the block.
	 */
	Id: string;
	EnterpriseId: string;
	/**
	 * Unique identifier of the assigned [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
	 */
	AssignedResourceId: string;
	/**
	 * Whether the block is still active.
	 */
	IsActive: boolean;
	Type: ResourceBlockType;
	/**
	 * Start of the block in UTC timezone in ISO 8601 format.
	 */
	StartUtc: string;
	/**
	 * End of the block in UTC timezone in ISO 8601 format.
	 */
	EndUtc: string;
	/**
	 * Creation date and time of the block in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the block in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	/**
	 * Name of the resource block.
	 */
	Name: string;
	/**
	 * Note describing the resource block.
	 */
	Notes?: string | null;
};

export type ResourceBlockAddParameters = {
	ResourceId: string;
	Name: string;
	Type: ResourceBlockType;
	StartUtc: string;
	EndUtc: string;
	Notes?: string | null;
};

export type ResourceBlockDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of [Resource blocks](https://mews-systems.gitbook.io/connector-api/operations/#resource-block) to be removed.
	 */
	ResourceBlockIds: Array<string>;
};

/**
 * Extent of data to be returned.
 */
export type ResourceBlockExtent = {
	Inactive?: boolean;
};

export type ResourceBlockParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	Extent: ResourceBlockExtent;
	/**
	 * Unique identifiers of the requested [Resource blocks](https://mews-systems.gitbook.io/connector-api/operations/#resource-block).
	 */
	ResourceBlockIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested Assigned [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
	 */
	AssignedResourceIds?: Array<string> | null;
	CollidingUtc?: TimeFilterInterval;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
};

export type ResourceBlockResult = {
	/**
	 * Resource blocks added.
	 */
	ResourceBlocks: Array<ResourceBlock>;
	Cursor?: string | null;
};

export type ResourceBlockType = "OutOfOrder" | "InternalUse";

export type ResourceCategory = {
	/**
	 * Unique identifier of the category.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) of the resource category.
	 */
	ServiceId: string;
	/**
	 * Whether the category is still active.
	 */
	IsActive: boolean;
	Type: ResourceCategoryType;
	Classification: ResourceClassification;
	/**
	 * All translations of the name.
	 */
	Names: {
		[key: string]: string;
	};
	/**
	 * All translations of the short name.
	 */
	ShortNames: {
		[key: string]: string;
	};
	/**
	 * All translations of the description.
	 */
	Descriptions: {
		[key: string]: string;
	};
	Ordering: number;
	Capacity: number;
	/**
	 * Extra capacity that can be served (e.g. extra bed count).
	 */
	ExtraCapacity: number;
	/**
	 * Identifier of the resource category from external system.
	 */
	ExternalIdentifier?: string | null;
};

export type ResourceCategoryAssignment = {
	/**
	 * Unique identifier of the assignment.
	 */
	Id: string;
	/**
	 * Whether the assignment is still active.
	 */
	IsActive: boolean;
	/**
	 * Unique identifier of the [Resource](https://mews-systems.gitbook.io/connector-api/operations/#resource) assigned to the Resource category.
	 */
	ResourceId: string;
	/**
	 * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).
	 */
	CategoryId: string;
	/**
	 * Creation date and time of the assignment in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the assignment in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type ResourceCategoryAssignmentFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the resource category assignments for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource category assignment](https://mews-systems.gitbook.io/connector-api/operations/resourcecategories/#resource-category-assignment).
	 */
	ResourceCategoryAssignmentIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/#resource-category) to which the resource category assignment belong.
	 */
	ResourceCategoryIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceCategoryAssignmentResult = {
	/**
	 * Resource category assignments.
	 */
	ResourceCategoryAssignments: Array<ResourceCategoryAssignment>;
	/**
	 * Unique identifier of the last and hence oldest resource category assignment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource category assignments.
	 */
	Cursor?: string | null;
};

export type ResourceCategoryAvailabilityV20240122 = {
	ResourceCategoryId: string;
	/**
	 * Dictionary keys are names of [Service availability metrics](https://mews-systems.gitbook.io/connector-api/operations/#service-availability-metrics), values are arrays of integers with metric values for corresponding time unit in TimeUnitStartsUtc.
	 */
	// Metrics: {
	//     [key: string]: Array<(number)>;
	// };
	// Metrics: { [key: ResourceAvailabilityMetricTypeEnum]: Array<number> };
	Metrics: Record<ResourceAvailabilityMetricTypeEnum, Array<number>>;
};

export type ResourceCategoryFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the resource categories for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).
	 */
	ResourceCategoryIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource categories belong.
	 */
	ServiceIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceCategoryImageAssignment = {
	/**
	 * Unique identifier of the assignment.
	 */
	Id: string;
	/**
	 * Whether the assignment is still active.
	 */
	IsActive: boolean;
	/**
	 * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).
	 */
	CategoryId: string;
	/**
	 * Unique identifier of the image assigned to the Resource category.
	 */
	ImageId: string;
	/**
	 * Creation date and time of the assignment in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the assignment in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type ResourceCategoryImageAssignmentFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the resource category image assignments for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource category image assignments](https://mews-systems.gitbook.io/connector-api/operations/resourcecategories/#resource-category-image-assignment).
	 */
	ResourceCategoryImageAssignmentIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource-category) to which the resource category image assignments belong.
	 */
	ResourceCategoryIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceCategoryImageAssignmentResult = {
	/**
	 * Resource category image assignments.
	 */
	ResourceCategoryImageAssignments: Array<ResourceCategoryImageAssignment>;
	/**
	 * Unique identifier of the last and hence oldest resource category image assignment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource category image assignments.
	 */
	Cursor?: string | null;
};

export type ResourceCategoryResult = {
	/**
	 * Resource categories of the resources.
	 */
	ResourceCategories: Array<ResourceCategory>;
	/**
	 * Unique identifier of the last and hence oldest resource category returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource categories.
	 */
	Cursor?: string | null;
};

export type ResourceCategoryType =
	| "Room"
	| "Bed"
	| "Dorm"
	| "Apartment"
	| "Suite"
	| "Villa"
	| "Site"
	| "Office"
	| "MeetingRoom"
	| "ParkingSpot"
	| "Desk"
	| "TeamArea"
	| "Membership"
	| "Tent"
	| "CaravanOrRV"
	| "UnequippedCampsite"
	| "Bike";

export type ResourceClassification =
	| "StandardSingle"
	| "StandardDouble"
	| "SuperiorTwin"
	| "SuperiorDouble"
	| "JuniorSuite"
	| "SharedOrDorm"
	| "Other"
	| "SuperiorSingle"
	| "Triple"
	| "Family"
	| "StandardTwin"
	| "Studio"
	| "SuperiorTripleRoom"
	| "OneBedroomApartment"
	| "ThreeBedroomsApartment"
	| "TwoBedroomsApartment";

export type ResourceDataDiscriminator = "Space" | "Object" | "Person";

/**
 * Extent of data to be returned.
 */
export type ResourceExtent = {
	Resources?: boolean;
	/**
	 * @deprecated
	 */
	ResourceCategories?: boolean;
	/**
	 * @deprecated
	 */
	ResourceCategoryAssignments?: boolean;
	/**
	 * @deprecated
	 */
	ResourceCategoryImageAssignments?: boolean;
	/**
	 * @deprecated
	 */
	ResourceFeatures?: boolean;
	/**
	 * @deprecated
	 */
	ResourceFeatureAssignments?: boolean;
	Inactive?: boolean;
};

export type ResourceFeature = {
	/**
	 * Unique identifier of the feature.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceId: string;
	/**
	 * Whether the resource feature is still active.
	 */
	IsActive: boolean;
	Classification: ResourceFeatureClassification;
	/**
	 * All translations of the name.
	 */
	Names: {
		[key: string]: string;
	};
	/**
	 * All translations of the short name.
	 */
	ShortNames: {
		[key: string]: string;
	};
	/**
	 * All translations of the description.
	 */
	Descriptions: {
		[key: string]: string;
	};
	CreatedUtc: string;
	UpdatedUtc: string;
};

export type ResourceFeatureAssignment = {
	/**
	 * Unique identifier of the assignment.
	 */
	Id: string;
	/**
	 * Whether the assignment is still active.
	 */
	IsActive: boolean;
	/**
	 * Unique identifier of the [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
	 */
	ResourceId: string;
	/**
	 * Unique identifier of the [Resource feature](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature) assigned to the Resource.
	 */
	FeatureId: string;
	/**
	 * Creation date and time of the assignment in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the assignment in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type ResourceFeatureAssignmentFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the resource feature assignments for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	ResourceFeatureAssignmentIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource features](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature) to which the resource feature assignments belong.
	 */
	ResourceFeatureIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceFeatureAssignmentResult = {
	/**
	 * Resource feature assignments.
	 */
	ResourceFeatureAssignments: Array<ResourceFeatureAssignment>;
	/**
	 * Unique identifier of the last and hence oldest resource feature assignments returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource feature assignments.
	 */
	Cursor?: string | null;
};

export type ResourceFeatureClassification =
	| "SeaView"
	| "RiverView"
	| "OceanView"
	| "TwinBeds"
	| "DoubleBed"
	| "RollawayBed"
	| "UpperBed"
	| "LowerBed"
	| "Balcony"
	| "AccessibleBathroom"
	| "AccessibleRoom"
	| "ElevatorAccess"
	| "HighFloor"
	| "Kitchenette"
	| "AirConditioning"
	| "PrivateJacuzzi"
	| "PrivateSauna"
	| "EnsuiteRoom"
	| "PrivateBathroom"
	| "SharedBathroom";

export type ResourceFeatureFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the resource features for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource features](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature).
	 */
	ResourceFeatureIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource features belong.
	 */
	ServiceIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceFeatureResult = {
	/**
	 * Resource features.
	 */
	ResourceFeatures: Array<ResourceFeature>;
	/**
	 * Unique identifier of the last and hence oldest resource features returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource feature.
	 */
	Cursor?: string | null;
};

export type ResourceFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the requested [Resources](https://mews-systems.gitbook.io/connector-api/operations/#resource).
	 */
	ResourceIds?: Array<string> | null;
	Names?: Array<string> | null;
	Extent?: ResourceExtent;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
};

export type ResourceResult = {
	/**
	 * The resources of the enterprise.
	 */
	Resources?: Array<Resource> | null;
	/**
	 * Categories of resources in the enterprise. **Deprecated!**
	 * @deprecated
	 */
	ResourceCategories?: Array<ResourceCategory> | null;
	/**
	 * Assignments of resources to categories. **Deprecated!**
	 * @deprecated
	 */
	ResourceCategoryAssignments?: Array<ResourceCategoryAssignment> | null;
	/**
	 * Assignments of images to categories. **Deprecated!**
	 * @deprecated
	 */
	ResourceCategoryImageAssignments?: Array<ResourceCategoryImageAssignment> | null;
	/**
	 * Features of resources in the enterprise. **Deprecated!**
	 * @deprecated
	 */
	ResourceFeatures?: Array<ResourceFeature> | null;
	/**
	 * Assignments of resource features to resources. **Deprecated!**
	 * @deprecated
	 */
	ResourceFeatureAssignments?: Array<ResourceFeatureAssignment> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type ResourceUpdateParameters = {
	ResourceId: string;
	Name?: StringUpdateValue;
	ParentResourceId?: GuidNullableUpdateValue;
	Data?: {
		discriminator?: ResourceDataDiscriminator;
		value?:
			| SpaceData
			| {
					[key: string]: unknown;
			  };
	};
	State?: StringUpdateValue;
	StateReason?: StringUpdateValue;
};

/**
 * The added restriction.
 */
export type Restriction = {
	/**
	 * Unique identifier of the restriction.
	 */
	Id?: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceId?: string;
	/**
	 * External identifier of the restriction.
	 */
	ExternalIdentifier?: string | null;
	/**
	 * [Restriction origin](https://mews-systems.gitbook.io/connector-api/operations/#restriction-origin)
	 */
	Origin?: string | null;
	Conditions?: RestrictionConditions;
	Exceptions?: RestrictionExceptions;
};

export type RestrictionAdditionResult = {
	/**
	 * The added restrictions.
	 */
	Restrictions?: Array<AddedRestriction> | null;
};

export type RestrictionClearData = {
	Type: RestrictionType;
	ExactRateId?: string | null;
	BaseRateId?: string | null;
	RateGroupId?: string | null;
	ResourceCategoryId?: string | null;
	ResourceCategoryType?: ResourceCategoryType | null;
	StartUtc?: string | null;
	EndUtc?: string | null;
	Days: DaysParameters;
};

/**
 * The conditions or rules that must be met by a reservation for the restriction to apply.
 */
export type RestrictionConditions = {
	Type?: string | null;
	ExactRateId?: string | null;
	BaseRateId?: string | null;
	RateGroupId?: string | null;
	ResourceCategoryId?: string | null;
	ResourceCategoryType?: string | null;
	StartUtc?: string | null;
	EndUtc?: string | null;
	Days?: Array<string> | null;
	Hours?: Hours;
};

export type RestrictionConditionsData = {
	Type: string;
	ExactRateId?: string | null;
	BaseRateId?: string | null;
	RateGroupId?: string | null;
	ResourceCategoryId?: string | null;
	ResourceCategoryType?: ResourceCategoryType | null;
	StartUtc?: string | null;
	EndUtc?: string | null;
	Days?: Array<string> | null;
	Hours?: HoursParameters;
};

export type RestrictionData = {
	Identifier?: string | null;
	ExternalIdentifier?: string | null;
	Conditions: RestrictionConditionsData;
	Exceptions?: RestrictionExceptionsData;
};

/**
 * The rules that prevent the restriction from applying to a reservation, even when all conditions have been met.
 */
export type RestrictionExceptions = {
	MinAdvance?: string | null;
	MaxAdvance?: string | null;
	MinLength?: string | null;
	MaxLength?: string | null;
	MinPrice?: CurrencyValueOld;
	MaxPrice?: CurrencyValueOld;
	MinReservationCount?: number | null;
	MaxReservationCount?: number | null;
};

export type RestrictionExceptionsData = {
	MinAdvance?: string | null;
	MaxAdvance?: string | null;
	MinLength?: string | null;
	MaxLength?: string | null;
	MinPrice?: CurrencyValueOld;
	MaxPrice?: CurrencyValueOld;
	MaxReservationCount?: number | null;
};

export type RestrictionFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * @deprecated
	 */
	TimeFilter?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	CollidingUtc?: TimeFilterInterval;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	RestrictionIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource-category).
	 */
	ResourceCategoryIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate). Returns all restrictions that affect the given rates, i.e. ones without any [Restriction Conditions](https://mews-systems.gitbook.io/connector-api/operations/#restriction-conditions), ones assigned directly to specified rates, ones assigned to [Rate groups](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate-group) of specified rates, or ones inherited from base rates.
	 */
	RateIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate). Returns only those restrictions which have matching ExactRateId set in [Restriction Conditions](https://mews-systems.gitbook.io/connector-api/operations/#restriction-conditions).
	 */
	ExactRateIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate). Returns only those restrictions which have matching BaseRateId set in [Restriction Conditions](https://mews-systems.gitbook.io/connector-api/operations/#restriction-conditions).
	 */
	BaseRateIds?: Array<string> | null;
	/**
	 * [Restriction origin](https://mews-systems.gitbook.io/connector-api/operations/#restriction-origin). Returns only those restrictions which have matching Origin or all if not specified.
	 */
	Origin?: RestrictionOrigin | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the restrictions are requested.
	 */
	ServiceIds: Array<string>;
};

export type RestrictionOrigin = "User" | "Integration";

export type RestrictionResult = {
	/**
	 * Restrictions of the default service.
	 */
	Restrictions?: Array<Restriction> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type RestrictionSetData = {
	Type: RestrictionType;
	ExactRateId?: string | null;
	BaseRateId?: string | null;
	RateGroupId?: string | null;
	ResourceCategoryId?: string | null;
	ResourceCategoryType?: ResourceCategoryType | null;
	StartUtc?: string | null;
	EndUtc?: string | null;
	Days: DaysParameters;
	MinAdvance?: string | null;
	MaxAdvance?: string | null;
	MinLength?: string | null;
	MaxLength?: string | null;
	MinPrice?: CurrencyValue;
	MaxPrice?: CurrencyValue;
	MaxReservationCount?: number | null;
};

export type RestrictionType = "Stay" | "Start" | "End";

export type RoutingRule = {
	/**
	 * Unique identifier of the routing rule.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) routing rule is assigned to.
	 */
	CompanyId: string;
	CompanyRelation: RoutingRuleCompanyRelation;
	Applicability: RoutingRuleApplicability;
	RouteType: RoutingRuleRouteType;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) routing rule is assigned to.
	 */
	ServiceId?: string | null;
	SelectedStayItems?: RoutingRuleStayItems;
	/**
	 * Creation date and time of the routing rule in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the routing rule in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type RoutingRuleAddParameter = {
	CompanyId: string;
	ServiceId: string;
	CompanyRelation: RoutingRuleCompanyRelation;
	Applicability: RoutingRuleApplicability;
	RouteType: RoutingRuleRouteType;
	SelectedStayItems?: RoutingRuleStayItemsAddParameters;
};

export type RoutingRuleApplicability = "Always" | "PrepaidOnly";

export type RoutingRuleCompanyRelation = "PartnerCompany" | "TravelAgency";

export type RoutingRuleDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the routing rules to be deleted.
	 */
	RoutingRuleIds: Array<string>;
};

export type RoutingRuleFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company).
	 */
	CompanyIds?: Array<string> | null;
	/**
	 * Unique identifier of the [Routing rule](https://mews-systems.gitbook.io/connector-api/operations/routingrules/#routing-rule).
	 */
	RoutingRuleIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type RoutingRuleResult = {
	/**
	 * Collection of Routing rules.
	 */
	RoutingRules: Array<RoutingRule>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type RoutingRuleRouteType = "AllStayItems" | "SelectedStayItems";

/**
 * Specific items to which the routing rule applies. Returns only if RouteType value is SelectedStayItems.
 */
export type RoutingRuleStayItems = {
	Nights?: boolean;
	CityTax?: boolean;
	ProductCategoryIds?: Array<string> | null;
};

export type RoutingRuleStayItemsAddParameters = {
	Nights?: boolean;
	CityTax?: boolean;
	ProductCategoryIds?: Array<string> | null;
};

export type RoutingRuleStayItemsUpdateParameters = {
	Nights?: BooleanUpdateValue;
	CityTax?: BooleanUpdateValue;
	ProductCategoryIds?: GuidIEnumerableUpdateValue;
};

export type RoutingRuleUpdateParameters = {
	RoutingRuleId: string;
	CompanyId?: GuidUpdateValue;
	ServiceId?: GuidUpdateValue;
	CompanyRelation?: RoutingRuleCompanyRelation | null;
	Applicability?: RoutingRuleApplicability | null;
	RouteType?: RoutingRuleRouteType | null;
	SelectedStayItems?: RoutingRuleStayItemsUpdateParameters;
};

export type Rule = {
	/**
	 * Unique identifier of the rule.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the rule is assigned to.
	 */
	ServiceId: string;
	Conditions?: RuleConditions;
	/**
	 * Creation date and time of the rule in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the rule in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type RuleAction = {
	/**
	 * Unique identifier of the rule action.
	 */
	Id?: string;
	/**
	 * Unique identifier of the rule.
	 */
	RuleId?: string;
	/**
	 * Additional information about action.
	 */
	Data?: {
		discriminator?: RuleActionDiscriminator;
		value?: RuleActionProductData;
	};
};

export type RuleActionDiscriminator = "Product";

export type RuleActionProductData = {
	ActionType?: string | null;
	ProductId?: string;
};

export type RuleCondition = {
	Value?: string | null;
	ConditionType?: RuleConditionType | null;
};

export type RuleConditionType = "Equals" | "NotEquals";

/**
 * Conditions of the rule.
 */
export type RuleConditions = {
	RateId?: RuleCondition;
	RateGroupId?: RuleCondition;
	BusinessSegmentId?: RuleCondition;
	ResourceCategoryId?: RuleCondition;
	ResourceCategoryType?: RuleCondition;
	Origin?: RuleCondition;
	TravelAgencyId?: RuleCondition;
	MinimumTimeUnitCount?: number | null;
	MaximumTimeUnitCount?: number | null;
};

/**
 * Extent of data to be returned.
 */
export type RuleExtent = {
	RuleActions?: boolean;
	Rates?: boolean;
	RateGroups?: boolean;
	ResourceCategories?: boolean;
	BusinessSegments?: boolean;
};

export type RuleFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	EnterpriseIds?: Array<string> | null;
	Ids?: Array<string> | null;
	/**
	 * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
	Extent: RuleExtent;
};

export type RuleResult = {
	/**
	 * Rules used with reservation creations and modifications.
	 */
	Rules?: Array<Rule> | null;
	/**
	 * Rule actions applied in rules.
	 */
	RuleActions?: Array<RuleAction> | null;
	/**
	 * Rates used in conditions.
	 */
	Rates?: Array<Rate> | null;
	/**
	 * Rate groups used in conditions.
	 */
	RateGroups?: Array<RateGroupOld> | null;
	/**
	 * Resource categories used in conditions.
	 */
	ResourceCategories?: Array<ResourceCategory> | null;
	/**
	 * Business segments used in conditions.
	 */
	BusinessSegments?: Array<BusinessSegment> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type SearchOperator = "And" | "Or";

export type SenderDiscriminator = "Application" | "Enterprise";

export type SepaDirectDebitData = {
	Iban?: string | null;
	Name?: string | null;
	Email?: string | null;
	UserAgent?: string | null;
	RemoteIpAddress?: string | null;
};

/**
 * The reservable service (e.g. accommodation, parking) associated with the access token of the service scoped integration.
 */
export type Service = {
	/**
	 * Unique identifier of the service.
	 */
	Id?: string;
	/**
	 * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
	 */
	EnterpriseId: string;
	/**
	 * Whether the service is still active.
	 */
	IsActive?: boolean;
	/**
	 * Name of the service.
	 */
	Name?: string | null;
	/**
	 * @deprecated
	 */
	StartTime?: string | null;
	/**
	 * @deprecated
	 */
	EndTime?: string | null;
	Options?: ServiceOptions;
	Promotions?: Promotions;
	/**
	 * @deprecated
	 */
	Type?: string | null;
	Ordering?: number;
	/**
	 * Additional information about the specific service.
	 */
	Data?: {
		Discriminator?: ServiceType;
		Value?: BookableServiceData | AdditionalServiceData;
	};
	/**
	 * Identifier of the service from external system.
	 */
	ExternalIdentifier?: string | null;
	/**
	 * Creation date and time of the service in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the service in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type ServiceAvailabilityFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/#service) whose availability should be returned.
	 */
	ServiceId: string;
	/**
	 * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
	 */
	FirstTimeUnitStartUtc?: string | null;
	/**
	 * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit): 367 hours if hours, 367 days if days, or 24 months if months.
	 */
	LastTimeUnitStartUtc?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
};

export type ServiceAvailabilityFilterParametersV20240122 = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/#service) whose availability should be returned.
	 */
	ServiceId: string;
	/**
	 * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
	 */
	FirstTimeUnitStartUtc: string;
	/**
	 * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit): 367 hours if hours, 367 days if days, or 24 months if months.
	 */
	LastTimeUnitStartUtc: string;
	/**
	 * Set of [Service availability metrics](https://mews-systems.gitbook.io/connector-api/operations/#service-availability-metrics) to be returned.
	 */
	Metrics: Array<ResourceAvailabilityMetricTypeEnum>;
};

export type ServiceAvailabilityResult = {
	/**
	 * @deprecated
	 */
	DatesUtc?: Array<string> | null;
	/**
	 * Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.
	 */
	TimeUnitStartsUtc?: Array<string> | null;
	/**
	 * Resource category availabilities.
	 */
	CategoryAvailabilities?: Array<CategoryAvailability> | null;
};

export type ServiceAvailabilityResultV20240122 = {
	/**
	 * Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.
	 */
	TimeUnitStartsUtc: Array<string>;
	/**
	 * Resource category availabilities.
	 */
	ResourceCategoryAvailabilities: Array<ResourceCategoryAvailabilityV20240122>;
};

export type ServiceAvailabilityUpdateData = {
	FirstTimeUnitStartUtc?: string | null;
	LastTimeUnitStartUtc?: string | null;
	/**
	 * @deprecated
	 */
	StartUtc?: string | null;
	/**
	 * @deprecated
	 */
	EndUtc?: string | null;
	ResourceCategoryId: string;
	UnitCountAdjustment: Int32NullableUpdateValue;
	AvailabilityBlockId?: string | null;
};

export type ServiceAvailabilityUpdateParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/#service) to update.
	 */
	ServiceId: string;
	/**
	 * Availability updates.
	 */
	AvailabilityUpdates: Array<ServiceAvailabilityUpdateData>;
};

export type ServiceFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns the resource categories for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
	 */
	ServiceIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

/**
 * Options of the service.
 */
export type ServiceOptions = {
	BillAsPackage?: boolean;
};

export type ServiceOrder = {
	Id: string;
	ServiceId: string;
	AccountId: string;
	AccountType?: AccountType | null;
	CreatorProfileId: string;
	UpdaterProfileId: string;
	BookerId?: string | null;
	Number?: string | null;
	State: ServiceOrderState;
	Origin: ServiceOrderOrigin;
	CommanderOrigin?: ServiceOrderCommanderOrigin | null;
	OriginDetails?: string | null;
	CreatedUtc: string;
	UpdatedUtc: string;
	CancelledUtc?: string | null;
	VoucherId?: string | null;
	BusinessSegmentId?: string | null;
	LinkedReservationId?: string | null;
	Options: ServiceOrderOptions;
};

export type ServiceOrderCancellationReason =
	| "Other"
	| "ConfirmationMissed"
	| "BookedElsewhere"
	| "ForceMajeure"
	| "GuestComplaint"
	| "NoShow"
	| "PriceTooHigh"
	| "ServiceNotAvailable"
	| "InputError"
	| "InvalidPayment"
	| "TravelAgency"
	| "RequestedByGuest"
	| "Update"
	| "BookingAbandoned"
	| "RequestedByBooker";

export type ServiceOrderCommanderOrigin =
	| "InPerson"
	| "Channel"
	| "Phone"
	| "Email"
	| "Website"
	| "Message"
	| "CallCenter";

export type ServiceOrderNoteAddParameters = {
	ServiceOrderId: string;
	Text: string;
};

export type ServiceOrderNoteAdditionResult = {
	/**
	 * Added service order notes.
	 */
	ServiceOrderNotes: Array<OrderNote>;
};

export type ServiceOrderNoteDeleteParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of the service order notes to be deleted.
	 */
	ServiceOrderNoteIds: Array<string>;
};

export type ServiceOrderNoteFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Service order](https://mews-systems.gitbook.io/connector-api/operations/#service-order). Reservation IDs or Order IDs can be used as service order identifiers.
	 */
	ServiceOrderIds: Array<string>;
	/**
	 * Unique identifiers of [Service order notes](https://mews-systems.gitbook.io/connector-api/operations/#service-order-note). Use this property if you want to fetch specific service order notes.
	 */
	ServiceOrderNoteIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type ServiceOrderNoteResult = {
	/**
	 * The collection of service order notes.
	 */
	ServiceOrderNotes: Array<OrderNote>;
	/**
	 * Unique identifier of the last and hence oldest service order note returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older service order notes.
	 */
	Cursor?: string | null;
};

export type ServiceOrderNoteUpdateParameters = {
	ServiceOrderNoteId: string;
	Text?: StringUpdateValue;
};

export type ServiceOrderNoteUpdateResult = {
	/**
	 * Updated service order notes.
	 */
	ServiceOrderNotes: Array<OrderNote>;
};

export type ServiceOrderOptions = {
	/**
	 * Owner of the reservation checked in.
	 */
	OwnerCheckedIn: boolean;
	/**
	 * All companions of the reservation checked in.
	 */
	AllCompanionsCheckedIn: boolean;
	/**
	 * Any of the companions of the reservation checked in.
	 */
	AnyCompanionCheckedIn: boolean;
	/**
	 * Check in was done via Connector API.
	 */
	ConnectorCheckIn: boolean;
};

export type ServiceOrderOrigin =
	| "Distributor"
	| "ChannelManager"
	| "Commander"
	| "Import"
	| "Connector"
	| "Navigator";

export type ServiceOrderState =
	| "Inquired"
	| "Confirmed"
	| "Started"
	| "Processed"
	| "Canceled"
	| "Optional"
	| "Requested";

export type ServiceResult = {
	/**
	 * Services offered by the enterprise.
	 */
	Services?: Array<Service> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type ServiceType =
	| "Reservable"
	| "Orderable"
	| "Bookable"
	| "Additional";

export type SetRestrictionParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) restrictions will be set in.
	 */
	ServiceId: string;
	/**
	 * Parameters of restrictions.
	 */
	Data: Array<RestrictionSetData>;
};

export type Sex = "Male" | "Female";

export type Source = {
	/**
	 * Unique identifier of the source.
	 */
	Id: string;
	/**
	 * Name of the source.
	 */
	Name: string;
	Type: SourceType;
	/**
	 * Date and time when the source was last updated, expressed in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	Code: number;
};

export type SourceAssignment = {
	/**
	 * Unique identifier of the source assignement.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
	 */
	ReservationGroupId: string;
	/**
	 * Unique identifier of the [Source](https://mews-systems.gitbook.io/connector-api/operations/sources/#source).
	 */
	SourceId: string;
	/**
	 * Specifies the primary source for the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
	 */
	IsPrimary: boolean;
};

export type SourceAssignmentFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
	 */
	ReservationGroupIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
};

export type SourceAssignmentResult = {
	/**
	 * Assignments between reservation group and sources.
	 */
	SourceAssignments: Array<SourceAssignment>;
	/**
	 * Unique identifier of the last and hence oldest source assignment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older source assignments.
	 */
	Cursor?: string | null;
};

export type SourceFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifiers of [Sources](https://mews-systems.gitbook.io/connector-api/operations/sources/#source).
	 */
	SourceIds?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	Limitation: Limitation;
};

export type SourceResult = {
	/**
	 * The reservation sources.
	 */
	Sources: Array<Source>;
	/**
	 * Unique identifier of the last and hence oldest source returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older sources.
	 */
	Cursor?: string | null;
};

export type SourceType =
	| "OnlineTravelAgency"
	| "CentralReservationSystem"
	| "GlobalDistributionSystem"
	| "AlternativeDistributionSystem"
	| "SalesAndCateringSystem"
	| "PropertyManagementSystem"
	| "TourOperatorSystem"
	| "OnlineBookingEngine"
	| "Kiosk"
	| "Agent";

export type SpaceData = {
	FloorNumber: string;
	LocationNotes?: string | null;
};

export type StringUpdateValue = {
	Value?: string | null;
};

export type SurchargeConfiguration = {
	SurchargeFees: {
		[key: string]: number;
	};
	SurchargeServiceId?: string | null;
	SurchargeTaxCode?: string | null;
};

export type Task = {
	Id?: string;
	EnterpriseId?: string;
	Name?: string | null;
	State?: string | null;
	Description?: string | null;
	DepartmentId?: string | null;
	ServiceOrderId?: string | null;
	CreatedUtc?: string | null;
	DeadlineUtc?: string | null;
	ClosedUtc?: string | null;
};

export type TaskAddParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Department](https://mews-systems.gitbook.io/connector-api/operations/departments/#department) the task is addressed to.
	 */
	DepartmentId?: string | null;
	/**
	 * Unique identifier of the service order (reservation or product service order) the task is linked with.
	 */
	ServiceOrderId?: string | null;
	/**
	 * Name (or title) of the task.
	 */
	Name: string;
	/**
	 * Further decription of the task.
	 */
	Description?: string | null;
	/**
	 * Deadline of the task in UTC timezone in ISO 8601 format.
	 */
	DeadlineUtc: string;
};

export type TaskFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	EnterpriseIds?: Array<string> | null;
	CreatedUtc?: TimeFilterInterval;
	UpdatedUtc?: TimeFilterInterval;
	ClosedUtc?: TimeFilterInterval;
	DeadlineUtc?: TimeFilterInterval;
	/**
	 * Unique identifiers of [Tasks](https://mews-systems.gitbook.io/connector-api/operations/#task).
	 */
	TaskIds?: Array<string> | null;
	/**
	 * Unique identifiers of [Departments](https://mews-systems.gitbook.io/connector-api/operations/departments/#department). Not possible to be used standalone, needs to be used in combination with other filters.
	 */
	DepartmentIds?: Array<string> | null;
	/**
	 * Unique identifiers of service orders (reservations or product service orders).
	 */
	ServiceOrderIds?: Array<string> | null;
};

export type TaskResult = {
	/**
	 * The filtered tasks.
	 */
	Tasks?: Array<Task> | null;
	Cursor?: string | null;
};

export type TaxBreakdown = {
	Items?: Array<TaxBreakdownItem> | null;
};

export type TaxBreakdownItem = {
	TaxRateCode?: string | null;
	NetValue?: number;
	TaxValue?: number;
};

export type TaxEnvironment = {
	/**
	 * Code of the tax environment.
	 */
	Code?: string | null;
	/**
	 * ISO 3166-1 alpha-3 code of associated country, e.g. USA or GBR.
	 */
	CountryCode?: string | null;
	/**
	 * If specified, marks the start of the validity interval in UTC timezone in ISO 8601 format.
	 */
	ValidityStartUtc?: string | null;
	/**
	 * If specified, marks the end of the validity interval in UTC timezone in ISO 8601 format.
	 */
	ValidityEndUtc?: string | null;
	/**
	 * Codes of the [Taxations](https://mews-systems.gitbook.io/connector-api/operations/#taxation) that are used by this environment.
	 */
	TaxationCodes?: Array<string> | null;
};

export type TaxEnvironmentResult = {
	/**
	 * The supported tax environments.
	 */
	TaxEnvironments?: Array<TaxEnvironment> | null;
	/**
	 * @deprecated
	 */
	Taxations?: Array<OldTaxation> | null;
	/**
	 * @deprecated
	 */
	TaxRates?: Array<TaxRate> | null;
};

export type TaxRate = {
	/**
	 * Code of the tax rate. To be used when posting revenue items which should be accompanied by the tax rate(s) applicable to the nature of the item and the tax environment.
	 */
	Code?: string | null;
	/**
	 * Code of the [Taxation](https://mews-systems.gitbook.io/connector-api/operations/#taxation) the rate is part of.
	 */
	TaxationCode?: string | null;
	Value?: number;
	ValidityInvervalsUtc?: Array<DateTimeIntervalUtc> | null;
	/**
	 * Tax strategy type, e.g. relative, flat or dependent.
	 */
	Strategy?: {
		discriminator?: TaxRateStrategyDiscriminator;
		value?:
			| RelativeTaxRateStrategy
			| FlatTaxRateStrategy
			| DependentTaxRateStrategy;
	};
};

export type TaxRateStrategyDiscriminator = "Relative" | "Flat" | "Dependent";

export type TaxValue = {
	Code?: string | null;
	Value?: number;
};

export type Taxation = {
	/**
	 * Code of the taxation.
	 */
	Code?: string | null;
	/**
	 * Name of the taxation.
	 */
	Name?: string | null;
	/**
	 * Local name of the taxation.
	 */
	LocalName?: string | null;
};

export type TaxationResult = {
	/**
	 * The supported taxations.
	 */
	Taxations?: Array<Taxation> | null;
	/**
	 * The supported tax rates.
	 */
	TaxRates?: Array<TaxRate> | null;
};

export type TimeFilterInterval = {
	StartUtc?: string | null;
	EndUtc?: string | null;
};

export type TokenizedCreditCardParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	/**
	 * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
	 */
	CustomerId: string;
	CreditCardData: CreditCardData;
};

export type TravelAgencyContract = {
	/**
	 * Unique identifier of the contract.
	 */
	Id: string;
	/**
	 * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the contract is related to.
	 */
	ServiceId: string;
	/**
	 * Unique identifier of the contracted [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company).
	 */
	CompanyId: string;
	/**
	 * Whether the contract is still active.
	 */
	IsActive: boolean;
	/**
	 * Whether commission of the travel agency is included in the rate. When CommissionIncluded is not provided in the response, that means commission is unspecified, when set to true it means the the commission is included in the rate and false means the commission in not included in the rate.
	 */
	CommissionIncluded?: boolean | null;
	/**
	 * Commission of the travel agency.
	 */
	Commission?: number | null;
	/**
	 * Flat fee added to (or subtracted from) the reservation price when coming from Channel Managers.
	 */
	ChannelManagerAbsoluteAdjustment?: number | null;
	/**
	 * Percentage of the reservation price added to (or subtracted from) price when coming from Channel Managers.
	 */
	ChannelManagerRelativeAdjustment?: number | null;
	Options?: TravelAgencyContractOptions;
	/**
	 * Accounting code of the travel agency contract.
	 */
	AccountingCode?: string | null;
	/**
	 * The maximum time, when the invoice has to be be paid in ISO 8601 duration format.
	 */
	InvoiceDueInterval?: string | null;
	ChannelManagerBusinessSegmentId?: string | null;
	/**
	 * Contact person of the travel agency.
	 */
	ContactPerson?: string | null;
	/**
	 * Contact email of the travel agency.
	 */
	ContactEmail?: string | null;
	/**
	 * Additional contact info of the travel agency.
	 */
	AdditionalContactInfo?: string | null;
	/**
	 * Additional notes of the travel agency contract.
	 */
	Notes?: string | null;
	/**
	 * Creation date and time of the travel agency contract in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the travel agency contract in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
};

export type TravelAgencyContractAddParameters = {
	ServiceId: string;
	CompanyId: string;
	CommissionIncluded?: boolean | null;
	Commission?: number | null;
	ChannelManagerBusinessSegmentId?: string | null;
	ChannelManagerAbsoluteAdjustment?: number | null;
	ChannelManagerRelativeAdjustment?: number | null;
	Options?: TravelAgencyContractOptions;
	AccountingCode?: string | null;
	InvoiceDueInterval?: string | null;
	ContactPerson?: string | null;
	ContactEmail?: string | null;
	AdditionalContactInfo?: string | null;
	Notes?: string | null;
};

/**
 * Options of the travel agency contract.
 */
export type TravelAgencyContractOptions = {
	IncludeCancellationFeeInCommissionEstimate?: boolean;
	SkipAutomaticSettlement?: boolean;
};

export type TravelAgencyContractOptionsParameters = {
	IncludeCancellationFeeInCommissionEstimate?: BooleanUpdateValue;
	SkipAutomaticSettlement?: BooleanUpdateValue;
};

export type TravelAgencyContractUpdateParameters = {
	TravelAgencyContractId: string;
	CommissionIncluded?: BooleanNullableUpdateValue;
	Commission?: DecimalNullableUpdateValue;
	ChannelManagerBusinessSegmentId?: GuidNullableUpdateValue;
	ChannelManagerAbsoluteAdjustment?: DecimalNullableUpdateValue;
	ChannelManagerRelativeAdjustment?: DecimalNullableUpdateValue;
	Options?: TravelAgencyContractOptionsParameters;
	AccountingCode?: StringUpdateValue;
	InvoiceDueInterval?: StringUpdateValue;
	ContactPerson?: StringUpdateValue;
	ContactEmail?: StringUpdateValue;
	AdditionalContactInfo?: StringUpdateValue;
	Notes?: StringUpdateValue;
};

export type Unit = {
	[key: string]: unknown;
};

export type User = {
	Id?: string | null;
	FirstName?: string | null;
	LastName?: string | null;
	ImageUrl?: string | null;
	Email?: string | null;
	LastSuccessfulSignInUtc?: string | null;
};

export type Voucher = {
	/**
	 * Unique identifier of voucher.
	 */
	Id: string;
	/**
	 * Unique identifier of [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the voucher belongs to.
	 */
	ServiceId: string;
	/**
	 * Internal name of the voucher.
	 */
	Name: string;
	/**
	 * Creation date and time of the voucher in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc: string;
	/**
	 * Last update date and time of the voucher in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc: string;
	Type: VoucherType;
	ActivityState: ActivityState;
	/**
	 * Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) the voucher is related to.
	 */
	CompanyId?: string | null;
	/**
	 * Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) with [Travel agency contract](https://mews-systems.gitbook.io/connector-api/operations/companycontracts/#travel-agency-contract) the voucher is related to.
	 */
	TravelAgencyId?: string | null;
	OccupiableIntervalStartUtc?: string | null;
	OccupiableIntervalEndUtc?: string | null;
	/**
	 * Identifier of the voucher from external system.
	 */
	ExternalIdentifier?: string | null;
};

export type VoucherAddParameters = {
	ServiceId: string;
	Name: string;
	Type: VoucherType;
	CompanyId?: string | null;
	AssignedRateIds?: Array<string> | null;
	OccupiableIntervalStartUtc?: string | null;
	OccupiableIntervalEndUtc?: string | null;
	ExternalIdentifier?: string | null;
};

export type VoucherAssignment = {
	/**
	 * Unique identifier of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher).
	 */
	VoucherId?: string;
	/**
	 * Unique identifier of [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate) the voucher is assigned with.
	 */
	RateId?: string;
};

export type VoucherCode = {
	/**
	 * Unique identifier of the voucher code.
	 */
	Id?: string;
	/**
	 * Unique identifier of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher) the code belongs to.
	 */
	VoucherId?: string;
	/**
	 * Value of voucher code used by customers.
	 */
	Value?: string | null;
	/**
	 * If specified, marks the beginning of interval in which the code can be used.
	 */
	ValidityStartUtc?: string | null;
	/**
	 * If specified, marks the end of interval in which the code can be used.
	 */
	ValidityEndUtc?: string | null;
	/**
	 * Creation date and time of the voucher in UTC timezone in ISO 8601 format.
	 */
	CreatedUtc?: string | null;
	/**
	 * Last update date and time of the voucher in UTC timezone in ISO 8601 format.
	 */
	UpdatedUtc?: string | null;
	/**
	 * Whether voucher code is active or deleted.
	 */
	ActivityState?: string | null;
};

export type VoucherCodeAddParameters = {
	VoucherId: string;
	Value: string;
	ValidityStartUtc?: string | null;
	ValidityEndUtc?: string | null;
};

export type VoucherCodeFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	/**
	 * Unique identifiers of the voucher codes.
	 */
	VoucherCodeIds?: Array<string> | null;
	/**
	 * Unique identifiers of vouchers.
	 */
	VoucherIds: Array<string>;
	UpdatedUtc?: TimeFilterInterval;
};

export type VoucherCodeResult = {
	/**
	 * Information about voucher codes used by customers.
	 */
	VoucherCodes: Array<VoucherCode>;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

/**
 * Extent of data to be returned. Whether only specific voucher info should be returned or related items as well.
 */
export type VoucherExtent = {
	Vouchers?: boolean;
	/**
	 * @deprecated
	 */
	VoucherCodes?: boolean;
	VoucherAssignments?: boolean;
	/**
	 * @deprecated
	 */
	Companies?: boolean;
	Rates?: boolean;
};

export type VoucherFilterParameters = {
	/**
	 * Name and version of the client application.
	 */
	Client: string;
	LanguageCode?: string | null;
	CultureCode?: string | null;
	/**
	 * Access token of the client application.
	 */
	AccessToken: string;
	readonly MaskedAccessToken?: string | null;
	/**
	 * Token identifying the client application.
	 */
	ClientToken: string;
	readonly MaskedClientToken?: string | null;
	Limitation: Limitation;
	/**
	 * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). If not specified, the operation returns data for all enterprises within scope of the Access Token.
	 */
	EnterpriseIds?: Array<string> | null;
	Extent: VoucherExtent;
	/**
	 * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) where the vouchers belong to.
	 */
	ServiceIds: Array<string>;
	/**
	 * Unique identifiers of vouchers.
	 */
	VoucherIds?: Array<string> | null;
	/**
	 * Value of voucher codes used by customers.
	 */
	VoucherCodeValues?: Array<string> | null;
	/**
	 * Whether to return only active, only deleted or both records.
	 */
	ActivityStates?: Array<string> | null;
	UpdatedUtc?: TimeFilterInterval;
	/**
	 * Identifiers of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher) from external systems.
	 */
	ExternalIdentifiers?: Array<string> | null;
};

export type VoucherResult = {
	/**
	 * Details about vouchers added to the system.
	 */
	Vouchers?: Array<Voucher> | null;
	/**
	 * Information about voucher codes used by customers.
	 */
	VoucherCodes?: Array<VoucherCode> | null;
	/**
	 * The assignments between vouchers and [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate).
	 */
	VoucherAssignments?: Array<VoucherAssignment> | null;
	/**
	 * The assigned rates.
	 */
	Rates?: Array<Rate> | null;
	/**
	 * The related companies and travel agencies.
	 */
	Companies?: Array<Company> | null;
	/**
	 * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
	 */
	Cursor?: string | null;
};

export type VoucherType = "Public" | "PartnerCompany" | "TravelAgency";

export type VoucherUpdateParameters = {
	VoucherId: string;
	Name?: StringUpdateValue;
	Type?: VoucherType | null;
	CompanyId?: GuidNullableUpdateValue;
	AssignedRateIds?: GuidIEnumerableUpdateValue;
	OccupiableIntervalStartUtc?: StringUpdateValue;
	OccupiableIntervalEndUtc?: StringUpdateValue;
	ExternalIdentifier?: StringUpdateValue;
};

export type VoucherWriteResult = {
	/**
	 * Details about vouchers added to the system.
	 */
	Vouchers?: Array<Voucher> | null;
};

export type AccountNotesGetAllData = {
	requestBody?: AccountNoteFilterParameters;
};

export type AccountNotesGetAllResponse = AccountNoteResult;

export type AccountNotesAddData = {
	requestBody?: MultipleAccountNoteAddParameters;
};

export type AccountNotesAddResponse = AccountNoteAdditionResult;

export type AccountNotesUpdateData = {
	requestBody?: MultipleAccountNoteUpdateParameters;
};

export type AccountNotesUpdateResponse = AccountNoteUpdateResult;

export type AccountNotesDeleteData = {
	requestBody?: MultipleAccountNoteDeleteParameters;
};

export type AccountNotesDeleteResponse = Unit;

export type AccountingCategoriesGetAllData = {
	requestBody?: AccountingCategoryFilterParameters;
};

export type AccountingCategoriesGetAllResponse = AccountingCategoryResult;

export type AccountingItemsUpdateData = {
	requestBody?: MultipleAccountingItemsUpdateParameters;
};

export type AccountingItemsUpdateResponse = AccountingItemResult;

export type AccountingItemsGetAllData = {
	requestBody?: AccountingItemParameters;
};

export type AccountingItemsGetAllResponse = AccountingItemResult;

export type AccountsUpdateData = {
	requestBody?: MultipleAccountUpdateParameters;
};

export type AccountsUpdateResponse = AccountResult;

export type AccountsMergeData = {
	requestBody?: MultipleAccountMergeParameters;
};

export type AccountsMergeResponse = Unit;

export type AddressesGetAllData = {
	requestBody?: AddressFilterParameters;
};

export type AddressesGetAllResponse = AddressResult;

export type AddressesAddData = {
	requestBody?: MultipleAddressAddParameters;
};

export type AddressesAddResponse = AddressResult;

export type AddressesUpdateData = {
	requestBody?: MultipleAddressUpdateParameters;
};

export type AddressesUpdateResponse = AddressResult;

export type AddressesDeleteData = {
	requestBody?: AddressDeleteParameters;
};

export type AddressesDeleteResponse = Unit;

export type AgeCategoriesGetAllData = {
	requestBody?: AgeCategoryParameters;
};

export type AgeCategoriesGetAllResponse = AgeCategoryResult;

export type AvailabilityAdjustmentsGetAllData = {
	requestBody?: AvailabilityAdjustmentParameters;
};

export type AvailabilityAdjustmentsGetAllResponse =
	AvailabilityAdjustmentResult;

export type AvailabilityBlocksDeleteData = {
	requestBody?: MultipleAvailabilityBlockDeleteParameters;
};

export type AvailabilityBlocksDeleteResponse = Unit;

export type AvailabilityBlocksGetAllData = {
	requestBody?: AvailabilityBlockParameters;
};

export type AvailabilityBlocksGetAllResponse = AvailabilityBlockResult;

export type AvailabilityBlocksAddData = {
	requestBody?: MultipleAvailabilityBlockAddParameters;
};

export type AvailabilityBlocksAddResponse = AvailabilityBlockAddResult;

export type AvailabilityBlocksUpdateData = {
	requestBody?: MultipleAvailabilityBlockUpdateParameters;
};

export type AvailabilityBlocksUpdateResponse = AvailabilityBlockAddResult;

export type BillsGetAllData = {
	requestBody?: BillFilterParameters;
};

export type BillsGetAllResponse = BillResult;

export type BillsGetAllByIdsData = {
	requestBody?: BillFilterParameters;
};

export type BillsGetAllByIdsResponse = BillResult;

export type BillsGetAllByCustomersData = {
	requestBody?: BillFilterParameters;
};

export type BillsGetAllByCustomersResponse = BillResult;

export type BillsGetAllClosedData = {
	requestBody?: BillFilterParameters;
};

export type BillsGetAllClosedResponse = BillResult;

export type BillsGetPdfData = {
	requestBody?: BillPdfParameters;
};

export type BillsGetPdfResponse = BillResult;

export type BillsAddData = {
	requestBody?: MultipleBillAddParameters;
};

export type BillsAddResponse = BillResult;

export type BillsDeleteData = {
	requestBody?: BillDeleteParameters;
};

export type BillsDeleteResponse = Unit;

export type BillsCloseData = {
	requestBody?: BillCloseParameters;
};

export type BillsCloseResponse = BillResult;

export type BusinessSegmentsGetAllData = {
	requestBody?: BusinessSegmentFilterParameters;
};

export type BusinessSegmentsGetAllResponse = BusinessSegmentResult;

export type CancellationPoliciesGetAllData = {
	requestBody?: CancellationPolicyFilterParameters;
};

export type CancellationPoliciesGetAllResponse = CancellationPolicyResult;

export type CashierTransactionsGetAllData = {
	requestBody?: CashierTransactionParameters;
};

export type CashierTransactionsGetAllResponse = CashierTransactionResult;

export type CashiersGetAllData = {
	requestBody?: CashierParameters;
};

export type CashiersGetAllResponse = CashierResult;

export type CommandsGetAllByIdsData = {
	requestBody?: DeviceCommandFilterParameters;
};

export type CommandsGetAllByIdsResponse = DeviceCommandResult;

export type CommandsGetAllActiveData = {
	requestBody?: GetAllActiveCommandsParameters;
};

export type CommandsGetAllActiveResponse = DeviceCommandResult;

export type CommandsAddPrinterData = {
	requestBody?: PrinterCommandParameters;
};

export type CommandsAddPrinterResponse = DeviceCommandAddResult;

export type CommandsAddKeyCutterData = {
	requestBody?: KeyCutterCommandParameters;
};

export type CommandsAddKeyCutterResponse = DeviceCommandAddResult;

export type CommandsAddPaymentTerminalData = {
	requestBody?: PaymentTerminalCommandParameters;
};

export type CommandsAddPaymentTerminalResponse = DeviceCommandAddResult;

export type CommandsUpdateData = {
	requestBody?: DeviceCommandUpdateParameters;
};

export type CommandsUpdateResponse = Unit;

export type CompaniesAddData = {
	requestBody?: CompanyAddParameters;
};

export type CompaniesAddResponse = CompanyResult;

export type CompaniesUpdateData = {
	requestBody?: CompanyUpdateParameters;
};

export type CompaniesUpdateResponse = CompanyResult;

export type CompaniesGetAllData = {
	requestBody?: CompanyFilterParameters;
};

export type CompaniesGetAllResponse = CompanyResult;

export type CompaniesDeleteData = {
	requestBody?: MultipleCompanyDeleteParameters;
};

export type CompaniesDeleteResponse = Unit;

export type CompaniesGetAllByNameData = {
	requestBody?: CompanyNameParameters;
};

export type CompaniesGetAllByNameResponse = CompanyResult;

export type CompanionshipsGetAllData = {
	requestBody?: CompanionshipFilterParameters;
};

export type CompanionshipsGetAllResponse = CompanionshipResult;

export type CompanyContractsGetAllData = {
	requestBody?: CompanyContractFilterParameters;
};

export type CompanyContractsGetAllResponse = ContractResult;

export type CompanyContractsAddData = {
	requestBody?: MultipleCompanyContractAddParameters;
};

export type CompanyContractsAddResponse = ContractResult;

export type CompanyContractsUpdateData = {
	requestBody?: MultipleCompanyContractUpdateParameters;
};

export type CompanyContractsUpdateResponse = ContractResult;

export type CompanyContractsDeleteData = {
	requestBody?: MultipleCompanyContractDeleteParameters;
};

export type CompanyContractsDeleteResponse = Unit;

export type ConfigurationGetData = {
	requestBody?: ConfigurationFilterParameters;
};

export type ConfigurationGetResponse = Configuration;

export type CountersGetAllData = {
	requestBody?: CounterFilterParameters;
};

export type CountersGetAllResponse = CounterResult;

export type CountriesGetAllData = {
	requestBody?: Parameters;
};

export type CountriesGetAllResponse = CountryResult;

export type CreditCardsGetAllData = {
	requestBody?: CreditCardFilterParameters;
};

export type CreditCardsGetAllResponse = CreditCardResult;

export type CreditCardsGetAllByIdsData = {
	requestBody?: MultipleCreditCardParameters;
};

export type CreditCardsGetAllByIdsResponse = CreditCardResult;

export type CreditCardsGetAllByCustomersData = {
	requestBody?: MultipleCustomerParameters;
};

export type CreditCardsGetAllByCustomersResponse = CreditCardResult;

export type CreditCardsAddTokenizedData = {
	requestBody?: TokenizedCreditCardParameters;
};

export type CreditCardsAddTokenizedResponse = AddCreditCardResult;

export type CreditCardsChargeData = {
	requestBody?: ChargeCreditCardParameters;
};

export type CreditCardsChargeResponse = ChargeCreditCardResult;

export type CulturesGetAllData = {
	requestBody?: Parameters;
};

export type CulturesGetAllResponse = CultureResult;

export type CurrenciesGetAllData = {
	requestBody?: Parameters;
};

export type CurrenciesGetAllResponse = CurrencyResult;

export type CustomersGetAllData = {
	requestBody?: CustomerFilterParameters;
};

export type CustomersGetAllResponse = CustomerResult;

export type CustomersGetAllByIdsData = {
	requestBody?: MultipleCustomerParameters;
};

export type CustomersGetAllByIdsResponse = CustomerResult;

export type CustomersGetAllByEmailsData = {
	requestBody?: CustomerEmailParameters;
};

export type CustomersGetAllByEmailsResponse = CustomerResult;

export type CustomersSearchData = {
	requestBody?: CustomerSearchParameters;
};

export type CustomersSearchResponse = CustomerSearchResult;

export type CustomersGetAllByNameData = {
	requestBody?: CustomerNameParameters;
};

export type CustomersGetAllByNameResponse = CustomerResult;

export type CustomersGetOpenItemsData = {
	requestBody?: CustomerItemParameters;
};

export type CustomersGetOpenItemsResponse = CustomerItemResult;

export type CustomersAddData = {
	requestBody?: CustomerAddParameters;
};

export type CustomersAddResponse = Customer;

export type CustomersUpdateData = {
	requestBody?: CustomerUpdateParameters;
};

export type CustomersUpdateResponse = Customer;

export type CustomersMergeData = {
	requestBody?: CustomerMergeParameters;
};

export type CustomersMergeResponse = Unit;

export type CustomersAddFileData = {
	requestBody?: CustomerFileParameters;
};

export type CustomersAddFileResponse = AddAccountFileResult;

export type DepartmentsGetAllData = {
	requestBody?: DepartmentFilterParameters;
};

export type DepartmentsGetAllResponse = DepartmentResult;

export type DevicesGetAllData = {
	requestBody?: Parameters;
};

export type DevicesGetAllResponse = DeviceResult;

export type EnterprisesGetAllData = {
	requestBody?: EnterpriseFilterParameters;
};

export type EnterprisesGetAllResponse = EnterpriseResult;

export type ExchangeRatesGetAllData = {
	requestBody?: CurrencyAcceptanceFilterParameters;
};

export type ExchangeRatesGetAllResponse = ExchangeRateResult;

export type ExportsAddData = {
	requestBody?: ExportAddParameters;
};

export type ExportsAddResponse = ExportAddResult;

export type ExportsGetAllData = {
	requestBody?: ExportFilterParameters;
};

export type ExportsGetAllResponse = ExportResult;

export type ImagesGetUrlsData = {
	requestBody?: ImageUrlParameters;
};

export type ImagesGetUrlsResponse = ImageUrlResult;

export type LanguagesGetAllData = {
	requestBody?: Parameters;
};

export type LanguagesGetAllResponse = LanguageResult;

export type LanguagesGetTextsData = {
	requestBody?: LanguageTextParameters;
};

export type LanguagesGetTextsResponse = LanguageTextResult;

export type LoyaltyMembershipsGetAllData = {
	requestBody?: LoyaltyMembershipFilterParameters;
};

export type LoyaltyMembershipsGetAllResponse = LoyaltyMembershipResult;

export type LoyaltyMembershipsAddData = {
	requestBody?: MultipleLoyaltyMembershipAddParameters;
};

export type LoyaltyMembershipsAddResponse = LoyaltyMembershipResult;

export type LoyaltyMembershipsUpdateData = {
	requestBody?: MultipleLoyaltyMembershipUpdateParameters;
};

export type LoyaltyMembershipsUpdateResponse = LoyaltyMembershipResult;

export type LoyaltyMembershipsDeleteData = {
	requestBody?: LoyaltyMembershipDeleteParameters;
};

export type LoyaltyMembershipsDeleteResponse = Unit;

export type LoyaltyProgramsGetAllData = {
	requestBody?: LoyaltyProgramFilterParameters;
};

export type LoyaltyProgramsGetAllResponse = LoyaltyProgramResult;

export type LoyaltyProgramsAddData = {
	requestBody?: MultipleLoyaltyProgramAddParameters;
};

export type LoyaltyProgramsAddResponse = LoyaltyProgramResult;

export type LoyaltyProgramsUpdateData = {
	requestBody?: MultipleLoyaltyProgramUpdateParameters;
};

export type LoyaltyProgramsUpdateResponse = LoyaltyProgramResult;

export type LoyaltyProgramsDeleteData = {
	requestBody?: LoyaltyProgramDeleteParameters;
};

export type LoyaltyProgramsDeleteResponse = Unit;

export type LoyaltyTiersGetAllData = {
	requestBody?: LoyaltyTierFilterParameters;
};

export type LoyaltyTiersGetAllResponse = LoyaltyTierResult;

export type LoyaltyTiersAddData = {
	requestBody?: MultipleLoyaltyTierAddParameters;
};

export type LoyaltyTiersAddResponse = LoyaltyTierResult;

export type LoyaltyTiersUpdateData = {
	requestBody?: MultipleLoyaltyTierUpdateParameters;
};

export type LoyaltyTiersUpdateResponse = LoyaltyTierResult;

export type LoyaltyTiersDeleteData = {
	requestBody?: LoyaltyTierDeleteParameters;
};

export type LoyaltyTiersDeleteResponse = Unit;

export type MessageThreadsGetAllData = {
	requestBody?: MessageThreadFilterParameters;
};

export type MessageThreadsGetAllResponse = MessageThreadResult;

export type MessageThreadsAddData = {
	requestBody?: MessageThreadAddParameters;
};

export type MessageThreadsAddResponse = MessageThreadResult;

export type MessagesGetAllData = {
	requestBody?: MessageFilterParameters;
};

export type MessagesGetAllResponse = MessageResult;

export type MessagesAddData = {
	requestBody?: MultipleMessageAddParameters;
};

export type MessagesAddResponse = AddedMessageResult;

export type OrderItemsGetAllData = {
	requestBody?: OrderItemFilterParameters;
};

export type OrderItemsGetAllResponse = OrderItemResult;

export type OutletBillsAddData = {
	requestBody?: AddOutletBillsParameters;
};

export type OutletBillsAddResponse = AddOutletBillsResult;

export type OutletItemsGetAllData = {
	requestBody?: OutletItemsFilterParameters;
};

export type OutletItemsGetAllResponse = OutletItemResult;

export type OutletsGetAllData = {
	requestBody?: OutletFilterParameters;
};

export type OutletsGetAllResponse = OutletResult;

export type PaymentRequestsGetAllData = {
	requestBody?: PaymentRequestFilterParameters;
};

export type PaymentRequestsGetAllResponse = PaymentRequestResult;

export type PaymentRequestsAddData = {
	requestBody?: MultiplePaymentRequestAddParameters;
};

export type PaymentRequestsAddResponse = PaymentRequestResult;

export type PaymentRequestsCancelData = {
	requestBody?: MultiplePaymentRequestCancelParameters;
};

export type PaymentRequestsCancelResponse = PaymentRequestResult;

export type PaymentsGetAllData = {
	requestBody?: PaymentFilterParameters;
};

export type PaymentsGetAllResponse = PaymentResult;

export type PaymentsRefundData = {
	requestBody?: PaymentRefundParameters;
};

export type PaymentsRefundResponse = PaymentRefundResult;

export type PaymentsAddCreditCardData = {
	requestBody?: CreditCardPaymentParameters;
};

export type PaymentsAddCreditCardResponse = AddCreditCardResult;

export type PaymentsAddExternalData = {
	requestBody?: ExternalPaymentParameters;
};

export type PaymentsAddExternalResponse = AddExternalPaymentResult;

export type PaymentsAddAlternativeData = {
	requestBody?: AlternativePaymentParameters;
};

export type PaymentsAddAlternativeResponse = AlternativePaymentResult;

export type PreauthorizationsGetAllByCustomersData = {
	requestBody?: MultipleCustomerParameters;
};

export type PreauthorizationsGetAllByCustomersResponse = PreauthorizationResult;

export type ProductCategoriesGetAllData = {
	requestBody?: ProductCategoryFilterParameters;
};

export type ProductCategoriesGetAllResponse = ProductCategoryResult;

export type ProductsGetPricingData = {
	requestBody?: ProductPricingFilterParameters;
};

export type ProductsGetPricingResponse = ProductPricingResult;

export type ProductsGetAllData = {
	requestBody?: ProductFilterParameters;
};

export type ProductsGetAllResponse = ProductResult;

export type ProductsDeleteData = {
	requestBody?: ProductDeleteParameters;
};

export type ProductsDeleteResponse = Unit;

export type RateGroupsGetAllData = {
	requestBody?: RateGroupFilterParameters;
};

export type RateGroupsGetAllResponse = RateGroupResult;

export type RatesGetAllData = {
	requestBody?: RateFilterParameters;
};

export type RatesGetAllResponse = RateResult;

export type RatesAddData = {
	requestBody?: RateAddParameters;
};

export type RatesAddResponse = RateAddResult;

export type RatesGetPricingData = {
	requestBody?: RatePricingParameters;
};

export type RatesGetPricingResponse = RatePricing;

export type RatesUpdatePriceData = {
	requestBody?: RatePriceUpdateParameters;
};

export type RatesUpdatePriceResponse = Unit;

export type ReservationGroupsGetAllData = {
	requestBody?: ReservationGroupFilterParameters;
};

export type ReservationGroupsGetAllResponse = ReservationGroupResult;

export type ServiceOrdersReservationsGetAllData = {
	requestBody?: ReservationServiceOrderFilterParameters;
};

export type ServiceOrdersReservationsGetAllResponse =
	ReservationServiceOrderResult;

export type ReservationsGetAll20230606Data = {
	requestBody?: ReservationServiceOrderFilterParameters;
};

export type ReservationsGetAll20230606Response = ReservationServiceOrderResult;

export type ReservationsGetAllData = {
	requestBody?: ReservationFilterParameters;
};

export type ReservationsGetAllResponse = ReservationResult;

export type ReservationsGetAllByIdsData = {
	requestBody?: MultipleReservationParameters;
};

export type ReservationsGetAllByIdsResponse = ReservationResult;

export type ReservationsGetAllByCustomersData = {
	requestBody?: ReservationMultipleCustomerParameters;
};

export type ReservationsGetAllByCustomersResponse = ReservationResult;

export type ReservationsGetAllByNumbersData = {
	requestBody?: ReservationConfirmationNumberParameters;
};

export type ReservationsGetAllByNumbersResponse = ReservationResult;

export type ReservationsPriceData = {
	requestBody?: ReservationDataParameters;
};

export type ReservationsPriceResponse = ReservationPricingResult;

export type ReservationsAddData = {
	requestBody?: ReservationAdditionParameters;
};

export type ReservationsAddResponse = ReservationAdditionResult;

export type ReservationsUpdateData = {
	requestBody?: MultipleReservationUpdateParameters;
};

export type ReservationsUpdateResponse = ReservationResult;

export type ReservationsConfirmData = {
	requestBody?: ConfirmReservationParameters;
};

export type ReservationsConfirmResponse = MultipleReservationResult;

export type ReservationsStartData = {
	requestBody?: ReservationStartParameters;
};

export type ReservationsStartResponse = Unit;

export type ReservationsProcessData = {
	requestBody?: ReservationProcessingParameters;
};

export type ReservationsProcessResponse = Unit;

export type ReservationsCancelData = {
	requestBody?: ReservationCancellationParameters;
};

export type ReservationsCancelResponse = MultipleReservationResult;

export type ReservationsUpdateCustomerData = {
	requestBody?: ReservationsUpdateCustomerParameters;
};

export type ReservationsUpdateCustomerResponse = Unit;

export type ReservationsUpdateIntervalData = {
	requestBody?: ReservationUpdateIntervalParameters;
};

export type ReservationsUpdateIntervalResponse = Unit;

export type ReservationsAddCompanionData = {
	requestBody?: ReservationCustomerParameters;
};

export type ReservationsAddCompanionResponse = AddCompanionshipResult;

export type ReservationsDeleteCompanionData = {
	requestBody?: ReservationCustomerParameters;
};

export type ReservationsDeleteCompanionResponse = Unit;

export type ReservationsAddProductData = {
	requestBody?: ReservationProductParameters;
};

export type ReservationsAddProductResponse = AddProductItemsResult;

export type ReservationsGetAllItemsData = {
	requestBody?: ReservationItemParameters;
};

export type ReservationsGetAllItemsResponse = ReservationItemResult;

export type ResourceAccessTokensGetAllData = {
	requestBody?: ResourceAccessTokenFilterParameters;
};

export type ResourceAccessTokensGetAllResponse = ResourceAccessTokenResult;

export type ResourceAccessTokensAddData = {
	requestBody?: MultipleResourceAccessTokenParameters;
};

export type ResourceAccessTokensAddResponse = ResourceAccessTokenResult;

export type ResourceAccessTokensUpdateData = {
	requestBody?: MultipleResourceAccessTokenUpdateParameters;
};

export type ResourceAccessTokensUpdateResponse = ResourceAccessTokenResult;

export type ResourceAccessTokensDeleteData = {
	requestBody?: ResourceAccessTokenDeleteParameters;
};

export type ResourceAccessTokensDeleteResponse = Unit;

export type ResourceBlocksGetAllData = {
	requestBody?: ResourceBlockParameters;
};

export type ResourceBlocksGetAllResponse = ResourceBlockResult;

export type ResourceBlocksAddData = {
	requestBody?: MultipleResourceBlockAddParameters;
};

export type ResourceBlocksAddResponse = ResourceBlockResult;

export type ResourceBlocksDeleteData = {
	requestBody?: ResourceBlockDeleteParameters;
};

export type ResourceBlocksDeleteResponse = Unit;

export type ResourceCategoriesGetAllData = {
	requestBody?: ResourceCategoryFilterParameters;
};

export type ResourceCategoriesGetAllResponse = ResourceCategoryResult;

export type ResourceCategoryAssignmentsGetAllData = {
	requestBody?: ResourceCategoryAssignmentFilterParameters;
};

export type ResourceCategoryAssignmentsGetAllResponse =
	ResourceCategoryAssignmentResult;

export type ResourceCategoryImageAssignmentsGetAllData = {
	requestBody?: ResourceCategoryImageAssignmentFilterParameters;
};

export type ResourceCategoryImageAssignmentsGetAllResponse =
	ResourceCategoryImageAssignmentResult;

export type ResourceFeatureAssignmentsGetAllData = {
	requestBody?: ResourceFeatureAssignmentFilterParameters;
};

export type ResourceFeatureAssignmentsGetAllResponse =
	ResourceFeatureAssignmentResult;

export type ResourceFeaturesGetAllData = {
	requestBody?: ResourceFeatureFilterParameters;
};

export type ResourceFeaturesGetAllResponse = ResourceFeatureResult;

export type ResourcesGetAllData = {
	requestBody?: ResourceFilterParameters;
};

export type ResourcesGetAllResponse = ResourceResult;

export type ResourcesUpdateData = {
	requestBody?: MultipleResourceUpdateParameters;
};

export type ResourcesUpdateResponse = Unit;

export type RestrictionsAddData = {
	requestBody?: AddRestrictionParameters;
};

export type RestrictionsAddResponse = RestrictionAdditionResult;

export type RestrictionsDeleteData = {
	requestBody?: DeleteRestrictionParameters;
};

export type RestrictionsDeleteResponse = Unit;

export type RestrictionsSetData = {
	requestBody?: SetRestrictionParameters;
};

export type RestrictionsSetResponse = Unit;

export type RestrictionsClearData = {
	requestBody?: ClearRestrictionParameters;
};

export type RestrictionsClearResponse = Unit;

export type RestrictionsGetAllData = {
	requestBody?: RestrictionFilterParameters;
};

export type RestrictionsGetAllResponse = RestrictionResult;

export type RoutingRulesGetAllData = {
	requestBody?: RoutingRuleFilterParameters;
};

export type RoutingRulesGetAllResponse = RoutingRuleResult;

export type RoutingRulesAddData = {
	requestBody?: MultipleRoutingRuleAddParameters;
};

export type RoutingRulesAddResponse = RoutingRuleResult;

export type RoutingRulesUpdateData = {
	requestBody?: MultipleRoutingRuleUpdateParameters;
};

export type RoutingRulesUpdateResponse = RoutingRuleResult;

export type RoutingRulesDeleteData = {
	requestBody?: RoutingRuleDeleteParameters;
};

export type RoutingRulesDeleteResponse = Unit;

export type RulesGetAllData = {
	requestBody?: RuleFilterParameters;
};

export type RulesGetAllResponse = RuleResult;

export type ServiceOrderNotesAddData = {
	requestBody?: MultipleServiceOrderNoteAddParameters;
};

export type ServiceOrderNotesAddResponse = ServiceOrderNoteAdditionResult;

export type ServiceOrderNotesUpdateData = {
	requestBody?: MultipleServiceOrderNoteUpdateParameters;
};

export type ServiceOrderNotesUpdateResponse = ServiceOrderNoteUpdateResult;

export type ServiceOrderNotesGetAllData = {
	requestBody?: ServiceOrderNoteFilterParameters;
};

export type ServiceOrderNotesGetAllResponse = ServiceOrderNoteResult;

export type ServiceOrderNotesDeleteData = {
	requestBody?: ServiceOrderNoteDeleteParameters;
};

export type ServiceOrderNotesDeleteResponse = Unit;

export type ProductServiceOrdersGetAllData = {
	requestBody?: ProductServiceOrderFilterParameters;
};

export type ProductServiceOrdersGetAllResponse = ProductServiceOrderResult;

export type CustomersChargeData = {
	requestBody?: OrderAdditionParameters;
};

export type CustomersChargeResponse = OrderAdditionResult;

export type OrdersAddData = {
	requestBody?: OrderAdditionParameters;
};

export type OrdersAddResponse = OrderAdditionResult;

export type ServicesGetAllData = {
	requestBody?: ServiceFilterParameters;
};

export type ServicesGetAllResponse = ServiceResult;

export type ServicesUpdateAvailabilityData = {
	requestBody?: ServiceAvailabilityUpdateParameters;
};

export type ServicesUpdateAvailabilityResponse = Unit;

export type ServicesGetAvailabilityData = {
	requestBody?: ServiceAvailabilityFilterParameters;
};

export type ServicesGetAvailabilityResponse = ServiceAvailabilityResult;

export type ServicesGetAvailability20240122Data = {
	requestBody?: ServiceAvailabilityFilterParametersV20240122;
};

export type ServicesGetAvailability20240122Response =
	ServiceAvailabilityResultV20240122;

export type SourceAssignmentsGetAllData = {
	requestBody?: SourceAssignmentFilterParameters;
};

export type SourceAssignmentsGetAllResponse = SourceAssignmentResult;

export type SourcesGetAllData = {
	requestBody?: SourceFilterParameters;
};

export type SourcesGetAllResponse = SourceResult;

export type TasksGetAllData = {
	requestBody?: TaskFilterParameters;
};

export type TasksGetAllResponse = TaskResult;

export type TasksAddData = {
	requestBody?: TaskAddParameters;
};

export type TasksAddResponse = AddTaskResult;

export type TaxEnvironmentsGetAllData = {
	requestBody?: Parameters;
};

export type TaxEnvironmentsGetAllResponse = TaxEnvironmentResult;

export type TaxationsGetAllData = {
	requestBody?: Parameters;
};

export type TaxationsGetAllResponse = TaxationResult;

export type VoucherCodesAddData = {
	requestBody?: MultipleVoucherCodeAddParameters;
};

export type VoucherCodesAddResponse = VoucherCodeResult;

export type VoucherCodesDeleteData = {
	requestBody?: MultipleVoucherCodeDeleteParameters;
};

export type VoucherCodesDeleteResponse = Unit;

export type VoucherCodesGetAllData = {
	requestBody?: VoucherCodeFilterParameters;
};

export type VoucherCodesGetAllResponse = VoucherCodeResult;

export type VouchersGetAllData = {
	requestBody?: VoucherFilterParameters;
};

export type VouchersGetAllResponse = VoucherResult;

export type VouchersAddData = {
	requestBody?: MultipleVoucherAddParameters;
};

export type VouchersAddResponse = VoucherWriteResult;

export type VouchersUpdateData = {
	requestBody?: MultipleVoucherUpdateParameters;
};

export type VouchersUpdateResponse = VoucherWriteResult;

export type VouchersDeleteData = {
	requestBody?: MultipleVoucherDeleteParameters;
};

export type VouchersDeleteResponse = Unit;

export type $OpenApiTs = {
	"/api/connector/v1/accountNotes/getAll": {
		post: {
			req: {
				requestBody?: AccountNoteFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AccountNoteResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accountNotes/add": {
		post: {
			req: {
				requestBody?: MultipleAccountNoteAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AccountNoteAdditionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accountNotes/update": {
		post: {
			req: {
				requestBody?: MultipleAccountNoteUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AccountNoteUpdateResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accountNotes/delete": {
		post: {
			req: {
				requestBody?: MultipleAccountNoteDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accountingCategories/getAll": {
		post: {
			req: {
				requestBody?: AccountingCategoryFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AccountingCategoryResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accountingItems/update": {
		post: {
			req: {
				requestBody?: MultipleAccountingItemsUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AccountingItemResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accountingItems/getAll": {
		post: {
			req: {
				requestBody?: AccountingItemParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AccountingItemResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accounts/update": {
		post: {
			req: {
				requestBody?: MultipleAccountUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AccountResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/accounts/merge": {
		post: {
			req: {
				requestBody?: MultipleAccountMergeParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/addresses/getAll": {
		post: {
			req: {
				requestBody?: AddressFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddressResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/addresses/add": {
		post: {
			req: {
				requestBody?: MultipleAddressAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddressResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/addresses/update": {
		post: {
			req: {
				requestBody?: MultipleAddressUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddressResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/addresses/delete": {
		post: {
			req: {
				requestBody?: AddressDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/ageCategories/getAll": {
		post: {
			req: {
				requestBody?: AgeCategoryParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AgeCategoryResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/availabilityAdjustments/getAll": {
		post: {
			req: {
				requestBody?: AvailabilityAdjustmentParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AvailabilityAdjustmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/availabilityBlocks/delete": {
		post: {
			req: {
				requestBody?: MultipleAvailabilityBlockDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/availabilityBlocks/getAll": {
		post: {
			req: {
				requestBody?: AvailabilityBlockParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AvailabilityBlockResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/availabilityBlocks/add": {
		post: {
			req: {
				requestBody?: MultipleAvailabilityBlockAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AvailabilityBlockAddResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/availabilityBlocks/update": {
		post: {
			req: {
				requestBody?: MultipleAvailabilityBlockUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AvailabilityBlockAddResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/getAll": {
		post: {
			req: {
				requestBody?: BillFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BillResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/getAllByIds": {
		post: {
			req: {
				requestBody?: BillFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BillResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/getAllByCustomers": {
		post: {
			req: {
				requestBody?: BillFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BillResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/getAllClosed": {
		post: {
			req: {
				requestBody?: BillFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BillResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/getPdf": {
		post: {
			req: {
				requestBody?: BillPdfParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BillResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/add": {
		post: {
			req: {
				requestBody?: MultipleBillAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BillResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/delete": {
		post: {
			req: {
				requestBody?: BillDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/bills/close": {
		post: {
			req: {
				requestBody?: BillCloseParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BillResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/businessSegments/getAll": {
		post: {
			req: {
				requestBody?: BusinessSegmentFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: BusinessSegmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/cancellationPolicies/getAll": {
		post: {
			req: {
				requestBody?: CancellationPolicyFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CancellationPolicyResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/cashierTransactions/getAll": {
		post: {
			req: {
				requestBody?: CashierTransactionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CashierTransactionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/cashiers/getAll": {
		post: {
			req: {
				requestBody?: CashierParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CashierResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/commands/getAllByIds": {
		post: {
			req: {
				requestBody?: DeviceCommandFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: DeviceCommandResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/commands/getAllActive": {
		post: {
			req: {
				requestBody?: GetAllActiveCommandsParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: DeviceCommandResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/commands/addPrinter": {
		post: {
			req: {
				requestBody?: PrinterCommandParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: DeviceCommandAddResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/commands/addKeyCutter": {
		post: {
			req: {
				requestBody?: KeyCutterCommandParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: DeviceCommandAddResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/commands/addPaymentTerminal": {
		post: {
			req: {
				requestBody?: PaymentTerminalCommandParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: DeviceCommandAddResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/commands/update": {
		post: {
			req: {
				requestBody?: DeviceCommandUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companies/add": {
		post: {
			req: {
				requestBody?: CompanyAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CompanyResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companies/update": {
		post: {
			req: {
				requestBody?: CompanyUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CompanyResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companies/getAll": {
		post: {
			req: {
				requestBody?: CompanyFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CompanyResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companies/delete": {
		post: {
			req: {
				requestBody?: MultipleCompanyDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companies/getAllByName": {
		post: {
			req: {
				requestBody?: CompanyNameParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CompanyResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companionships/getAll": {
		post: {
			req: {
				requestBody?: CompanionshipFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CompanionshipResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companyContracts/getAll": {
		post: {
			req: {
				requestBody?: CompanyContractFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ContractResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companyContracts/add": {
		post: {
			req: {
				requestBody?: MultipleCompanyContractAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ContractResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companyContracts/update": {
		post: {
			req: {
				requestBody?: MultipleCompanyContractUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ContractResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/companyContracts/delete": {
		post: {
			req: {
				requestBody?: MultipleCompanyContractDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/configuration/get": {
		post: {
			req: {
				requestBody?: ConfigurationFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Configuration;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/counters/getAll": {
		post: {
			req: {
				requestBody?: CounterFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CounterResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/countries/getAll": {
		post: {
			req: {
				requestBody?: Parameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CountryResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/creditCards/getAll": {
		post: {
			req: {
				requestBody?: CreditCardFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CreditCardResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/creditCards/getAllByIds": {
		post: {
			req: {
				requestBody?: MultipleCreditCardParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CreditCardResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/creditCards/getAllByCustomers": {
		post: {
			req: {
				requestBody?: MultipleCustomerParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CreditCardResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/creditCards/addTokenized": {
		post: {
			req: {
				requestBody?: TokenizedCreditCardParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddCreditCardResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/creditCards/charge": {
		post: {
			req: {
				requestBody?: ChargeCreditCardParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ChargeCreditCardResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/cultures/getAll": {
		post: {
			req: {
				requestBody?: Parameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CultureResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/currencies/getAll": {
		post: {
			req: {
				requestBody?: Parameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CurrencyResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/getAll": {
		post: {
			req: {
				requestBody?: CustomerFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CustomerResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/getAllByIds": {
		post: {
			req: {
				requestBody?: MultipleCustomerParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CustomerResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/getAllByEmails": {
		post: {
			req: {
				requestBody?: CustomerEmailParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CustomerResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/search": {
		post: {
			req: {
				requestBody?: CustomerSearchParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CustomerSearchResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/getAllByName": {
		post: {
			req: {
				requestBody?: CustomerNameParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CustomerResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/getOpenItems": {
		post: {
			req: {
				requestBody?: CustomerItemParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: CustomerItemResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/add": {
		post: {
			req: {
				requestBody?: CustomerAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Customer;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/update": {
		post: {
			req: {
				requestBody?: CustomerUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Customer;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/merge": {
		post: {
			req: {
				requestBody?: CustomerMergeParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/addFile": {
		post: {
			req: {
				requestBody?: CustomerFileParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddAccountFileResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/departments/getAll": {
		post: {
			req: {
				requestBody?: DepartmentFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: DepartmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/devices/getAll": {
		post: {
			req: {
				requestBody?: Parameters;
			};
			res: {
				/**
				 * Success
				 */
				200: DeviceResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/enterprises/getAll": {
		post: {
			req: {
				requestBody?: EnterpriseFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: EnterpriseResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/exchangeRates/getAll": {
		post: {
			req: {
				requestBody?: CurrencyAcceptanceFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ExchangeRateResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/exports/add": {
		post: {
			req: {
				requestBody?: ExportAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ExportAddResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/exports/getAll": {
		post: {
			req: {
				requestBody?: ExportFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ExportResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/images/getUrls": {
		post: {
			req: {
				requestBody?: ImageUrlParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ImageUrlResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/languages/getAll": {
		post: {
			req: {
				requestBody?: Parameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LanguageResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/languages/getTexts": {
		post: {
			req: {
				requestBody?: LanguageTextParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LanguageTextResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyMemberships/getAll": {
		post: {
			req: {
				requestBody?: LoyaltyMembershipFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyMembershipResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyMemberships/add": {
		post: {
			req: {
				requestBody?: MultipleLoyaltyMembershipAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyMembershipResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyMemberships/update": {
		post: {
			req: {
				requestBody?: MultipleLoyaltyMembershipUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyMembershipResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyMemberships/delete": {
		post: {
			req: {
				requestBody?: LoyaltyMembershipDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyPrograms/getAll": {
		post: {
			req: {
				requestBody?: LoyaltyProgramFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyProgramResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyPrograms/add": {
		post: {
			req: {
				requestBody?: MultipleLoyaltyProgramAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyProgramResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyPrograms/update": {
		post: {
			req: {
				requestBody?: MultipleLoyaltyProgramUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyProgramResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyPrograms/delete": {
		post: {
			req: {
				requestBody?: LoyaltyProgramDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyTiers/getAll": {
		post: {
			req: {
				requestBody?: LoyaltyTierFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyTierResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyTiers/add": {
		post: {
			req: {
				requestBody?: MultipleLoyaltyTierAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyTierResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyTiers/update": {
		post: {
			req: {
				requestBody?: MultipleLoyaltyTierUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: LoyaltyTierResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/loyaltyTiers/delete": {
		post: {
			req: {
				requestBody?: LoyaltyTierDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/messageThreads/getAll": {
		post: {
			req: {
				requestBody?: MessageThreadFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: MessageThreadResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/messageThreads/add": {
		post: {
			req: {
				requestBody?: MessageThreadAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: MessageThreadResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/messages/getAll": {
		post: {
			req: {
				requestBody?: MessageFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: MessageResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/messages/add": {
		post: {
			req: {
				requestBody?: MultipleMessageAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddedMessageResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/orderItems/getAll": {
		post: {
			req: {
				requestBody?: OrderItemFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: OrderItemResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/outletBills/add": {
		post: {
			req: {
				requestBody?: AddOutletBillsParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddOutletBillsResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/outletItems/getAll": {
		post: {
			req: {
				requestBody?: OutletItemsFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: OutletItemResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/outlets/getAll": {
		post: {
			req: {
				requestBody?: OutletFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: OutletResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/paymentRequests/getAll": {
		post: {
			req: {
				requestBody?: PaymentRequestFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: PaymentRequestResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/paymentRequests/add": {
		post: {
			req: {
				requestBody?: MultiplePaymentRequestAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: PaymentRequestResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/paymentRequests/cancel": {
		post: {
			req: {
				requestBody?: MultiplePaymentRequestCancelParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: PaymentRequestResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/payments/getAll": {
		post: {
			req: {
				requestBody?: PaymentFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: PaymentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/payments/refund": {
		post: {
			req: {
				requestBody?: PaymentRefundParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: PaymentRefundResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/payments/addCreditCard": {
		post: {
			req: {
				requestBody?: CreditCardPaymentParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddCreditCardResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/payments/addExternal": {
		post: {
			req: {
				requestBody?: ExternalPaymentParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddExternalPaymentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/payments/addAlternative": {
		post: {
			req: {
				requestBody?: AlternativePaymentParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AlternativePaymentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/preauthorizations/getAllByCustomers": {
		post: {
			req: {
				requestBody?: MultipleCustomerParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: PreauthorizationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/productCategories/getAll": {
		post: {
			req: {
				requestBody?: ProductCategoryFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ProductCategoryResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/products/getPricing": {
		post: {
			req: {
				requestBody?: ProductPricingFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ProductPricingResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/products/getAll": {
		post: {
			req: {
				requestBody?: ProductFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ProductResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/products/delete": {
		post: {
			req: {
				requestBody?: ProductDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/rateGroups/getAll": {
		post: {
			req: {
				requestBody?: RateGroupFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RateGroupResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/rates/getAll": {
		post: {
			req: {
				requestBody?: RateFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RateResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/rates/add": {
		post: {
			req: {
				requestBody?: RateAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RateAddResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/rates/getPricing": {
		post: {
			req: {
				requestBody?: RatePricingParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RatePricing;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/rates/updatePrice": {
		post: {
			req: {
				requestBody?: RatePriceUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservationGroups/getAll": {
		post: {
			req: {
				requestBody?: ReservationGroupFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationGroupResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/serviceOrders/reservations/getAll": {
		post: {
			req: {
				requestBody?: ReservationServiceOrderFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationServiceOrderResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/getAll/2023-06-06": {
		post: {
			req: {
				requestBody?: ReservationServiceOrderFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationServiceOrderResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/getAll": {
		post: {
			req: {
				requestBody?: ReservationFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/getAllByIds": {
		post: {
			req: {
				requestBody?: MultipleReservationParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/getAllByCustomers": {
		post: {
			req: {
				requestBody?: ReservationMultipleCustomerParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/getAllByNumbers": {
		post: {
			req: {
				requestBody?: ReservationConfirmationNumberParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/price": {
		post: {
			req: {
				requestBody?: ReservationDataParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationPricingResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/add": {
		post: {
			req: {
				requestBody?: ReservationAdditionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationAdditionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/update": {
		post: {
			req: {
				requestBody?: MultipleReservationUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/confirm": {
		post: {
			req: {
				requestBody?: ConfirmReservationParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: MultipleReservationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/start": {
		post: {
			req: {
				requestBody?: ReservationStartParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/process": {
		post: {
			req: {
				requestBody?: ReservationProcessingParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/cancel": {
		post: {
			req: {
				requestBody?: ReservationCancellationParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: MultipleReservationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/updateCustomer": {
		post: {
			req: {
				requestBody?: ReservationsUpdateCustomerParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/updateInterval": {
		post: {
			req: {
				requestBody?: ReservationUpdateIntervalParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/addCompanion": {
		post: {
			req: {
				requestBody?: ReservationCustomerParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddCompanionshipResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/deleteCompanion": {
		post: {
			req: {
				requestBody?: ReservationCustomerParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/addProduct": {
		post: {
			req: {
				requestBody?: ReservationProductParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddProductItemsResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/reservations/getAllItems": {
		post: {
			req: {
				requestBody?: ReservationItemParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ReservationItemResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceAccessTokens/getAll": {
		post: {
			req: {
				requestBody?: ResourceAccessTokenFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceAccessTokenResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceAccessTokens/add": {
		post: {
			req: {
				requestBody?: MultipleResourceAccessTokenParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceAccessTokenResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceAccessTokens/update": {
		post: {
			req: {
				requestBody?: MultipleResourceAccessTokenUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceAccessTokenResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceAccessTokens/delete": {
		post: {
			req: {
				requestBody?: ResourceAccessTokenDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceBlocks/getAll": {
		post: {
			req: {
				requestBody?: ResourceBlockParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceBlockResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceBlocks/add": {
		post: {
			req: {
				requestBody?: MultipleResourceBlockAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceBlockResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceBlocks/delete": {
		post: {
			req: {
				requestBody?: ResourceBlockDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceCategories/getAll": {
		post: {
			req: {
				requestBody?: ResourceCategoryFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceCategoryResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceCategoryAssignments/getAll": {
		post: {
			req: {
				requestBody?: ResourceCategoryAssignmentFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceCategoryAssignmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceCategoryImageAssignments/getAll": {
		post: {
			req: {
				requestBody?: ResourceCategoryImageAssignmentFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceCategoryImageAssignmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceFeatureAssignments/getAll": {
		post: {
			req: {
				requestBody?: ResourceFeatureAssignmentFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceFeatureAssignmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resourceFeatures/getAll": {
		post: {
			req: {
				requestBody?: ResourceFeatureFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceFeatureResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resources/getAll": {
		post: {
			req: {
				requestBody?: ResourceFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ResourceResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/resources/update": {
		post: {
			req: {
				requestBody?: MultipleResourceUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/restrictions/add": {
		post: {
			req: {
				requestBody?: AddRestrictionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RestrictionAdditionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/restrictions/delete": {
		post: {
			req: {
				requestBody?: DeleteRestrictionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/restrictions/set": {
		post: {
			req: {
				requestBody?: SetRestrictionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/restrictions/clear": {
		post: {
			req: {
				requestBody?: ClearRestrictionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/restrictions/getAll": {
		post: {
			req: {
				requestBody?: RestrictionFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RestrictionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/routingRules/getAll": {
		post: {
			req: {
				requestBody?: RoutingRuleFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RoutingRuleResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/routingRules/add": {
		post: {
			req: {
				requestBody?: MultipleRoutingRuleAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RoutingRuleResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/routingRules/update": {
		post: {
			req: {
				requestBody?: MultipleRoutingRuleUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RoutingRuleResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/routingRules/delete": {
		post: {
			req: {
				requestBody?: RoutingRuleDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/rules/getAll": {
		post: {
			req: {
				requestBody?: RuleFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: RuleResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/serviceOrderNotes/add": {
		post: {
			req: {
				requestBody?: MultipleServiceOrderNoteAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ServiceOrderNoteAdditionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/serviceOrderNotes/update": {
		post: {
			req: {
				requestBody?: MultipleServiceOrderNoteUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ServiceOrderNoteUpdateResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/serviceOrderNotes/getAll": {
		post: {
			req: {
				requestBody?: ServiceOrderNoteFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ServiceOrderNoteResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/serviceOrderNotes/delete": {
		post: {
			req: {
				requestBody?: ServiceOrderNoteDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/productServiceOrders/getAll": {
		post: {
			req: {
				requestBody?: ProductServiceOrderFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ProductServiceOrderResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/customers/charge": {
		post: {
			req: {
				requestBody?: OrderAdditionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: OrderAdditionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/orders/add": {
		post: {
			req: {
				requestBody?: OrderAdditionParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: OrderAdditionResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/services/getAll": {
		post: {
			req: {
				requestBody?: ServiceFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ServiceResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/services/updateAvailability": {
		post: {
			req: {
				requestBody?: ServiceAvailabilityUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/services/getAvailability": {
		post: {
			req: {
				requestBody?: ServiceAvailabilityFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: ServiceAvailabilityResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/services/getAvailability/2024-01-22": {
		post: {
			req: {
				requestBody?: ServiceAvailabilityFilterParametersV20240122;
			};
			res: {
				/**
				 * Success
				 */
				200: ServiceAvailabilityResultV20240122;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/sourceAssignments/getAll": {
		post: {
			req: {
				requestBody?: SourceAssignmentFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: SourceAssignmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/sources/getAll": {
		post: {
			req: {
				requestBody?: SourceFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: SourceResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/tasks/getAll": {
		post: {
			req: {
				requestBody?: TaskFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: TaskResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/tasks/add": {
		post: {
			req: {
				requestBody?: TaskAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: AddTaskResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/taxEnvironments/getAll": {
		post: {
			req: {
				requestBody?: Parameters;
			};
			res: {
				/**
				 * Success
				 */
				200: TaxEnvironmentResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/taxations/getAll": {
		post: {
			req: {
				requestBody?: Parameters;
			};
			res: {
				/**
				 * Success
				 */
				200: TaxationResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/voucherCodes/add": {
		post: {
			req: {
				requestBody?: MultipleVoucherCodeAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: VoucherCodeResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/voucherCodes/delete": {
		post: {
			req: {
				requestBody?: MultipleVoucherCodeDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/voucherCodes/getAll": {
		post: {
			req: {
				requestBody?: VoucherCodeFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: VoucherCodeResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/vouchers/getAll": {
		post: {
			req: {
				requestBody?: VoucherFilterParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: VoucherResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/vouchers/add": {
		post: {
			req: {
				requestBody?: MultipleVoucherAddParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: VoucherWriteResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/vouchers/update": {
		post: {
			req: {
				requestBody?: MultipleVoucherUpdateParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: VoucherWriteResult;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
	"/api/connector/v1/vouchers/delete": {
		post: {
			req: {
				requestBody?: MultipleVoucherDeleteParameters;
			};
			res: {
				/**
				 * Success
				 */
				200: Unit;
				/**
				 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
				 */
				400: ConnectorApiExceptionResult;
				/**
				 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
				 */
				401: ConnectorApiExceptionResult;
				/**
				 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
				 */
				403: ConnectorApiExceptionResult;
				/**
				 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
				 */
				408: ConnectorApiExceptionResult;
				/**
				 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
				 */
				429: ConnectorApiExceptionResult;
				/**
				 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
				 */
				500: ConnectorApiExceptionResult;
			};
		};
	};
};
