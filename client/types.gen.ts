// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    /**
     * Unique identifier of the account.
     */
    Id: string;
    /**
     * Type of the account.
     *
     * Company
     *
     * Customer
     */
    Discriminator: AccountTypeEnum;
    /**
     * Updated customer data.
     */
    Customer?: (CustomerAccount) | null;
    /**
     * Updated company data.
     */
    Company?: (CompanyAccount) | null;
};

export type AccountAddress = {
    /**
     * Unique identifier of the address.
     */
    Id?: string;
    /**
     * Unique identifier of a [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) or a [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) within the enterprise.
     */
    AccountId?: string;
    /**
     * Unique identifier of the chain.
     */
    ChainId?: string | null;
    /**
     * A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), e.g. customer or company.
     */
    AccountType?: AccountType | null;
    /**
     * First line of the address.
     */
    Line1?: string | null;
    /**
     * Second line of the address.
     */
    Line2?: string | null;
    /**
     * The city.
     */
    City?: string | null;
    /**
     * Postal code.
     */
    PostalCode?: string | null;
    /**
     * ISO 3166-1 alpha-2 code of the Country.
     */
    CountryCode?: string | null;
    /**
     * ISO 3166-2 code of the administrative division, e.g. DE-BW.
     */
    CountrySubdivisionCode?: string | null;
    /**
     * The latitude.
     */
    Latitude?: number | null;
    /**
     * The longitude.
     */
    Longitude?: number | null;
    /**
     * Last update date and time of the address in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc?: string | null;
    /**
     * Whether the address is still active.
     */
    IsActive?: boolean;
};

export type AccountCompanyUpdateParameters = {
    /**
     * Email address (or `null` if the email should not be updated).
     */
    Email?: (StringUpdateValue) | null;
    /**
     * Tax identification number (or `null` if the tax identification number should not be updated).
     */
    TaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Billing code (or `null` if the billing code should not be updated).
     */
    BillingCode?: (StringUpdateValue) | null;
    /**
     * Accounting code (or `null` if the accounting code should not be updated).
     */
    AccountingCode?: (StringUpdateValue) | null;
    /**
     * Notes (or `null` if the notes should not be updated).
     */
    Notes?: (StringUpdateValue) | null;
    /**
     * Name (or `null` if the name should not be updated).
     */
    Name?: (StringUpdateValue) | null;
    /**
     * Mother company identifier (or `null` if the mother company identifier should not be updated).
     */
    MotherCompanyId?: (GuidNullableUpdateValue) | null;
    /**
     * Website url (or `null` if the website url should not be updated).
     */
    WebsiteUrl?: (StringUpdateValue) | null;
    /**
     * Invoice due interval (or `null` if the invoice due interval should not be updated).
     */
    InvoiceDueInterval?: (StringUpdateValue) | null;
    /**
     * Classifications of the company.
     */
    Classifications?: (CompanyClassificationUpdateParameters) | null;
    /**
     * Options of the company.
     */
    Options?: (CompanyOptionUpdateParameters) | null;
    /**
     * Basic credit rating (or `null` if the basic credit rating should not be updated).
     */
    CreditRatingBasic?: (StringUpdateValue) | null;
    /**
     * Department (or `null` if the department should not be updated).
     */
    Department?: (StringUpdateValue) | null;
    /**
     * Duns number (or `null` if the duns number should not be updated).
     */
    DunsNumber?: (StringUpdateValue) | null;
    /**
     * Reference identifier (or `null` if the reference identifier should not be updated).
     */
    ReferenceId?: (StringUpdateValue) | null;
    /**
     * External identifier (or `null` if the external identifier should not be updated).
     */
    ExternalIdentifier?: (StringUpdateValue) | null;
    /**
     * Additional tax identifier (or `null` if the additional tax identifier should not be updated).
     */
    AdditionalTaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Contact (or `null` if the contact should not be updated).
     */
    Contact?: (StringUpdateValue) | null;
    /**
     * Contact person (or `null` if the contact person should not be updated).
     */
    ContactPerson?: (StringUpdateValue) | null;
    /**
     * Fiscal identifier (or `null` if the fiscal identifier should not be updated).
     */
    FiscalIdentifier?: (StringUpdateValue) | null;
    /**
     * IATA of the company (or `null` if the iata should not be updated).
     */
    Iata?: (StringUpdateValue) | null;
    /**
     * Telephone number (or `null` if the telephone number should not be updated).
     */
    Telephone?: (StringUpdateValue) | null;
    /**
     * Source identifier (or `null` if the source identifier should not be updated).
     */
    SourceId?: (GuidNullableUpdateValue) | null;
};

export type AccountCustomerUpdateParameters = {
    /**
     * Email address (or `null` if the email should not be updated).
     */
    Email?: (StringUpdateValue) | null;
    /**
     * Tax identification number (or `null` if the tax identification number should not be updated).
     */
    TaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Billing code (or `null` if the billing code should not be updated).
     */
    BillingCode?: (StringUpdateValue) | null;
    /**
     * Accounting code (or `null` if the accounting code should not be updated).
     */
    AccountingCode?: (StringUpdateValue) | null;
    /**
     * Notes (or `null` if the notes should not be updated).
     */
    Notes?: (StringUpdateValue) | null;
    /**
     * Last name (or `null` if the last name should not be updated).
     */
    LastName?: (StringUpdateValue) | null;
    /**
     * First name (or `null` if the first name should not be updated).
     */
    FirstName?: (StringUpdateValue) | null;
    /**
     * Second last name (or `null` if the second last name should not be updated).
     */
    SecondLastName?: (StringUpdateValue) | null;
    /**
     * Birth place (or `null` if the birth place should not be updated).
     */
    BirthPlace?: (StringUpdateValue) | null;
    /**
     * Telephone number (or `null` if the telephone should not be updated).
     */
    Telephone?: (StringUpdateValue) | null;
    /**
     * Occupation (or `null` if the occupation should not be updated).
     */
    Occupation?: (StringUpdateValue) | null;
    /**
     * Car registration number (or `null` if the car registration number should not be updated).
     */
    CarRegistrationNumber?: (StringUpdateValue) | null;
    /**
     * Dietary requirements (or `null` if the dietary requirements should not be updated).
     */
    DietaryRequirements?: (StringUpdateValue) | null;
    /**
     * Loyalty code (or `null` if the loyalty code should not be updated).
     */
    LoyaltyCode?: (StringUpdateValue) | null;
    /**
     * Nationality code (or `null` if the nationality code should not be updated).
     */
    NationalityCode?: (StringUpdateValue) | null;
    /**
     * Unique identifier of the company (or `null` if the company should not be updated).
     */
    CompanyId?: (GuidNullableUpdateValue) | null;
    /**
     * Birth date (or `null` if the birth date should not be updated).
     */
    BirthDate?: (StringUpdateValue) | null;
    /**
     * Sex (or `null` if the sex should not be updated).
     */
    Sex?: (StringUpdateValue) | null;
    /**
     * Title (or `null` if the title should not be updated).
     */
    Title?: (StringUpdateValue) | null;
    /**
     * Preferred language code (or `null` if the preferred language code should not be updated).
     */
    PreferredLanguageCode?: (StringUpdateValue) | null;
    /**
     * Options of the customer.
     */
    Options?: (CustomerOptionUpdateParameters) | null;
    /**
     * Classifications of the customer.
     */
    Classifications?: (CustomerClassificationUpdateParameters) | null;
    /**
     * Legal entity identifiers of the customer.
     */
    LegalEntityIdentifiers?: (LegalEntityIdentifierUpdateParameters) | null;
};

export type AccountFileParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifier of the account to which the file will be uploaded to.
     */
    AccountId: string;
    /**
     * Uploaded file name.
     */
    Name: string;
    /**
     * Content type of the uploaded file following defined by its MIME type.
     */
    Type: string;
    /**
     * Uploaded file data serialized in base64 format.
     */
    Data: string;
};

export type AccountMergeParameter = {
    /**
     * Unique identifiers of the source accounts (`Customer` or `Company`).
     */
    SourceAccountIds: Array<(string)>;
    /**
     * Unique identifier of the target account (`Customer` or `Company`).
     */
    TargetAccountId: string;
    /**
     * Specifying types of the accounts provided (`Customer` or `Company`).
     *
     * Customer
     *
     * Company
     */
    AccountType: MergeAccountTypeEnum;
};

export type AccountNote = {
    /**
     * Unique identifier of the account note.
     */
    Id: string;
    /**
     * Unique identifier of the account.
     */
    AccountId: string;
    /**
     * The content of the account note.
     */
    Content: string;
    /**
     * Specifying type of associated account.
     *
     * Company
     *
     * Customer
     */
    AccountType: AccountTypeEnum;
    /**
     * Specifying the classifications of the note based on account type.
     */
    Classifications: Array<AccountNoteClassificationEnum>;
    /**
     * Whether the account note is still active.
     */
    IsActive: boolean;
    /**
     * The profile data of the user who created the account note.
     */
    CreatorProfile: ProfileData;
    /**
     * The profile data of the user who updated the account note.
     */
    UpdaterProfile: ProfileData;
};

export type AccountNoteAddParameters = {
    AccountId: string;
    /**
     * The content of the account note.
     */
    Content: string;
    /**
     * Specifying the classifications of the note based on account type.
     */
    Classifications: Array<AccountNoteClassificationEnum>;
};

export type AccountNoteAdditionResult = {
    /**
     * Added account notes.
     */
    AccountNotes: Array<AccountNote>;
};

/**
 *
 *
 * General (For Company and Customer)
 *
 * FoodAndBeverage (Only Customer)
 *
 * FrontOffice (Only Customer)
 *
 * Reservations (Only Customer)
 *
 * Housekeeping (Only Customer)
 *
 * Maintenance (Only Customer)
 *
 * PreviousStay (Only Customer)
 *
 * FamilyRelations (Only Customer)
 *
 * Gifts (Only Customer)
 *
 * Accounting (Only Customer)
 *
 * Complaints (Only Customer)
 *
 * Other (Only Customer)
 */
export type AccountNoteClassificationEnum = 'General' | 'FoodAndBeverage' | 'FrontOffice' | 'Reservations' | 'Housekeeping' | 'Maintenance' | 'PreviousStay' | 'FamilyRelations' | 'Gifts' | 'Accounting' | 'Complaints' | 'Other';

export type AccountNoteFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of `Chain`. If not specified, the operation returns data for all chains within scope of the Access Token.
     */
    ChainIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Account note](https://mews-systems.gitbook.io/connector-api/operations/#account-note).
     */
    AccountNoteIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the accounts ([Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)).
     */
    AccountIds?: Array<(string)> | null;
    /**
     * Interval of Account note's last update date and time.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type AccountNoteResult = {
    /**
     * The set of requested account notes.
     */
    AccountNotes: Array<AccountNote>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type AccountNoteUpdateClassifications = {
    /**
     * Company and Customer: Boolean value defining the general classification for the account note (or `null` if the value should not be updated).
     */
    General?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the food and beverage classification for the account note (or `null` if the value should not be updated).
     */
    FoodAndBeverage?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the front office classification for the account note (or `null` if the value should not be updated).
     */
    FrontOffice?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the reservations classification for the account note (or `null` if the value should not be updated).
     */
    Reservations?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the housekeeping classification for the account note (or `null` if the value should not be updated).
     */
    Housekeeping?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the maintenance classification for the account note (or `null` if the value should not be updated).
     */
    Maintenance?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the previous stay classification for the account note (or `null` if the value should not be updated).
     */
    PreviousStay?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the family relations classification for the account note (or `null` if the value should not be updated).
     */
    FamilyRelations?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the gifts classification for the account note (or `null` if the value should not be updated).
     */
    Gifts?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the accounting classification for the account note (or `null` if the value should not be updated).
     */
    Accounting?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the complaints classification for the account note (or `null` if the value should not be updated).
     */
    Complaints?: (BooleanUpdateValue) | null;
    /**
     * Customer only: Boolean value defining the other classification for the account note (or `null` if the value should not be updated).
     */
    Other?: (BooleanUpdateValue) | null;
};

export type AccountNoteUpdateParameters = {
    /**
     * Unique identifier of the account note.
     */
    AccountNoteId: string;
    /**
     * Content of the account note (or `null` if the content should not be updated).
     */
    Content?: (StringUpdateValue) | null;
    /**
     * Classification of the account note.
     */
    Classifications: AccountNoteUpdateClassifications;
};

export type AccountNoteUpdateResult = {
    /**
     * Updated account notes.
     */
    AccountNotes: Array<AccountNote>;
};

/**
 *
 *
 * Customer
 *
 * Company
 */
export type AccountParameterDiscriminatorEnum = 'Customer' | 'Company';

export type AccountResult = {
    /**
     * Updated accounts.
     */
    Accounts: Array<Account>;
};

export type AccountType = 'Company' | 'Customer';

/**
 *
 *
 * Company
 *
 * Customer
 */
export type AccountTypeEnum = 'Company' | 'Customer';

export type AccountUpdateParameters = {
    /**
     * Unique identifier of the account.
     */
    Id: string;
    /**
     * Type of the account.
     *
     * Customer
     *
     * Company
     */
    Discriminator: AccountParameterDiscriminatorEnum;
    /**
     * Customer data to be updated. Required when `Discriminator` is `Customer`.
     */
    Customer?: (AccountCustomerUpdateParameters) | null;
    /**
     * Company data to be updated. Required when `Discriminator` is `Company`.
     */
    Company?: (AccountCompanyUpdateParameters) | null;
};

export type AccountingCategory = {
    /**
     * Unique identifier of the category.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Whether the accounting category is still active.
     */
    IsActive: boolean;
    /**
     * Name of the category.
     */
    Name: string;
    /**
     * Code of the category within Mews.
     */
    Code?: string | null;
    /**
     * Code of the category in external systems.
     */
    ExternalCode?: string | null;
    /**
     * Code of the ledger account (double entry accounting).
     */
    LedgerAccountCode?: string | null;
    /**
     * Code of the posting account (double entry accounting).
     */
    PostingAccountCode?: string | null;
    /**
     * Code of cost center.
     */
    CostCenterCode?: string | null;
    /**
     * Classification of the accounting category allowing cross-enterprise reporting.
     *
     * Accommodation
     *
     * FoodAndBeverage
     *
     * Taxes
     *
     * Payments
     *
     * ExternalRevenue
     *
     * SundryIncome
     *
     * Wellness
     *
     * Sport
     *
     * Technology
     *
     * Facilities
     *
     * Events
     *
     * Tourism
     */
    Classification?: (AccountingCategoryClassificationEnum) | null;
    /**
     * Creation date and time of the accounting category in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the accounting category in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

/**
 *
 *
 * Accommodation
 *
 * FoodAndBeverage
 *
 * Taxes
 *
 * Payments
 *
 * ExternalRevenue
 *
 * SundryIncome
 *
 * Wellness
 *
 * Sport
 *
 * Technology
 *
 * Facilities
 *
 * Events
 *
 * Tourism
 */
export type AccountingCategoryClassificationEnum = 'Accommodation' | 'FoodAndBeverage' | 'Taxes' | 'Payments' | 'ExternalRevenue' | 'SundryIncome' | 'Wellness' | 'Sport' | 'Technology' | 'Facilities' | 'Events' | 'Tourism';

export type AccountingCategoryFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested [Accounting categories](https://mews-systems.gitbook.io/connector-api/operations/#accounting-category).
     */
    AccountingCategoryIds?: Array<(string)> | null;
    /**
     * Last update date and time of the accounting category in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type AccountingCategoryParameters = {
    Code?: string | null;
    Name?: string | null;
};

export type AccountingCategoryResult = {
    /**
     * Accounting categories of the enterprise.
     */
    AccountingCategories: Array<AccountingCategory>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type AccountingCategoryRoutedItemTypes = {
    /**
     * Specifies whether products under the given accounting category are routed.
     */
    Products: boolean;
    /**
     * Specifies whether custom items under the given accounting category are routed.
     */
    CustomItems: boolean;
};

export type AccountingConfiguration = {
    /**
     * Organization number.
     */
    AdditionalTaxIdentifier?: string | null;
    /**
     * Legal name of the company.
     */
    CompanyName?: string | null;
    /**
     * Bank account number.
     */
    BankAccountNumber?: string | null;
    /**
     * Name of the bank.
     */
    BankName?: string | null;
    /**
     * International Bank Account Number.
     */
    Iban?: string | null;
    /**
     * Business Identification Code.
     */
    Bic?: string | null;
    /**
     * Configuration for surcharging fees.
     */
    SurchargeConfiguration: SurchargeConfiguration;
    /**
     * External payment types that are enabled for the enterprise and can be used in `payments/addExternal`.
     */
    EnabledExternalPaymentTypes: Array<ExternalPaymentTypeEnum>;
};

export type AccountingItem = {
    Id?: string;
    AccountId?: string;
    /**
     * @deprecated
     */
    CustomerId?: string | null;
    OrderId?: string | null;
    ServiceId?: string | null;
    ProductId?: string | null;
    BillId?: string | null;
    InvoiceId?: string | null;
    AccountingCategoryId?: string | null;
    CreditCardId?: string | null;
    Type?: string | null;
    SubType?: string | null;
    Name?: string | null;
    Notes?: string | null;
    ConsumptionUtc?: string | null;
    ClosedUtc?: string | null;
    State?: string | null;
    SubState?: string | null;
    Amount?: (ExtendedAmount) | null;
    /**
     * Code of tax exemption reason. **Restricted!** This property is currently intended for Mews' internal usage and may be subject to change.
     */
    TaxExemptionReasonCode?: string | null;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the accounting items, credit card transactions should be also returned.
 */
export type AccountingItemExtent = {
    AccountingItems?: boolean;
    OrderItems?: boolean;
    PaymentItems?: boolean;
    CreditCardTransactions?: boolean;
};

export type AccountingItemParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    StartUtc: string;
    EndUtc: string;
    /**
     * Extent of data to be returned. E.g. it is possible to specify that together with the accounting items, credit card transactions should be also returned.
     */
    Extent: AccountingItemExtent;
    /**
     * Unique identifiers of the Accounting items. Required if no other filter is provided.
     */
    ItemIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the Accounting items we are finding rebates for. Required if no other filter is provided.
     */
    RebatedItemIds?: Array<(string)> | null;
    ClosedUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    ConsumedUtc?: (TimeFilterInterval) | null;
    /**
     * @deprecated
     */
    TimeFilter?: string | null;
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
     */
    Currency?: string | null;
    /**
     * States the accounting items should be in. If not specified, accounting items in Open or Closed states are returned.
     */
    States?: Array<(string)> | null;
};

export type AccountingItemResult = {
    /**
     * @deprecated
     */
    AccountingItems?: Array<AccountingItem> | null;
    /**
     * Updated order items (consumed items such as nights or products).
     */
    OrderItems?: Array<OrderItemOld> | null;
    /**
     * Updated payment items (such as cash, credit card payments or invoices).
     */
    PaymentItems?: Array<PaymentItemOld> | null;
    /**
     * The credit card payment transactions.
     */
    CreditCardTransactions?: Array<CreditCardTransaction> | null;
};

export type AccountingItemUpdateParameters = {
    AccountingItemId: string;
    AccountId?: (GuidUpdateValue) | null;
    BillId: GuidUpdateValue;
};

/**
 *
 *
 * Revenue
 *
 * Tax
 *
 * Payment
 *
 * Deposit
 *
 * Guest
 *
 * City
 *
 * NonRevenue
 */
export type AccountingLedgerTypeEnum = 'Revenue' | 'Tax' | 'Payment' | 'Deposit' | 'Guest' | 'City' | 'NonRevenue';

export type AccountingState = 'Open' | 'Closed' | 'Inactive' | 'Canceled';

/**
 *
 *
 * Open (Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.)
 *
 * Closed (Order items which carry a non-zero value and have been closed on a bill or invoice.)
 *
 * Inactive (Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.)
 *
 * Canceled (Order items which have been canceled, regardless of whether the item is of zero value.)
 */
export type AccountingStateEnum = 'Open' | 'Closed' | 'Inactive' | 'Canceled';

export type ActivityState = 'Deleted' | 'Active';

/**
 *
 *
 * Deleted
 *
 * Active
 */
export type ActivityStateEnum = 'Deleted' | 'Active';

export type ActivityStates = 'Deleted' | 'Active';

export type AddAccountFileResult = {
    /**
     * Unique identifier of the uploaded file.
     */
    FileId: string;
};

export type AddCreditCardResult = {
    /**
     * Unique identifier of the [Credit card](https://mews-systems.gitbook.io/connector-api/operations/creditcards/#credit-card).
     */
    CreditCardId?: string;
};

export type AddExternalPaymentResult = {
    /**
     * Unique identifier of the [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).
     */
    ExternalPaymentId?: string;
};

export type AddOutletBillsParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * The new outlet bills.
     */
    Bills: Array<OutletBillParameters>;
};

export type AddOutletBillsResult = {
    /**
     * Array of unique identifiers of the added Outlet bills.
     */
    OutletBillIds?: Array<(string)> | null;
};

export type AddProductItemsResult = {
    ItemIds?: Array<(string)> | null;
};

export type AddRestrictionParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) restrictions will be added in.
     */
    ServiceId: string;
    /**
     * Parameters of restrictions.
     */
    Restrictions: Array<RestrictionData>;
};

export type AddTaskResult = {
    /**
     * Unique identifier of added task.
     */
    TaskId?: string;
};

export type AddedMessage = {
    Identifier?: string | null;
    Message?: (Message) | null;
};

export type AddedMessageResult = {
    Messages: Array<AddedMessage>;
};

export type AddedReservation = {
    /**
     * Identifier of the reservation within the transaction.
     */
    Identifier?: string | null;
    /**
     * The added reservation.
     */
    Reservation: ReservationOld;
};

export type AddedRestriction = {
    /**
     * Identifier of the restriction within the transaction.
     */
    Identifier?: string | null;
    /**
     * The added restriction.
     */
    Restriction?: (Restriction) | null;
};

export type AdditionalServiceData = {
    /**
     * Promotions of the service.
     */
    Promotions: Promotions;
};

export type Address = {
    Line1?: string | null;
    Line2?: string | null;
    City?: string | null;
    PostalCode?: string | null;
    SubdivisionCode?: string | null;
    CountryCode?: string | null;
};

export type AddressAddParameters = {
    /**
     * Unique identifier of a Company or a Customer within the enterprise.
     */
    AccountId: string;
    /**
     * First line of the address.
     */
    Line1?: string | null;
    /**
     * Second line of the address.
     */
    Line2?: string | null;
    /**
     * The city.
     */
    City?: string | null;
    /**
     * Postal code.
     */
    PostalCode?: string | null;
    /**
     * ISO 3166-1 alpha-2 code of the Country.
     */
    CountryCode?: string | null;
    /**
     * ISO 3166-2 code of the administrative division, e.g. `DE-BW`.
     */
    CountrySubdivisionCode?: string | null;
    /**
     * The latitude in range of -90 to 90.
     */
    Latitude?: number | null;
    /**
     * The longitude in range of -180 to 180.
     */
    Longitude?: number | null;
};

export type AddressDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifiers of [Addresses](https://mews-systems.gitbook.io/connector-api/operations/#account-address) within the enterprise to be deleted.
     */
    AddressIds: Array<(string)>;
};

export type AddressFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of `Chain`. If not specified, the operation returns data for all chains within scope of the Access Token.
     */
    ChainIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) or [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) within the enterprise. Required if no other filter is provided.
     */
    AccountIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Addresses](https://mews-systems.gitbook.io/connector-api/operations/#account-address) within the enterprise. Use this property if you want to fetch specific addresses. Required if no other filter is provided.
     */
    AddressIds?: Array<(string)> | null;
    /**
     * Interval of Address last update date and time. Required if no other filter is provided.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

/**
 * New address details.
 */
export type AddressParameters = {
    /**
     * First line of the address.
     */
    Line1?: string | null;
    /**
     * Second line of the address.
     */
    Line2?: string | null;
    /**
     * The city.
     */
    City?: string | null;
    /**
     * Postal code.
     */
    PostalCode?: string | null;
    /**
     * ISO 3166-1 code of the Country.
     */
    CountryCode?: string | null;
    /**
     * ISO 3166-2 code of the administrative division, e.g. DE-BW
     */
    CountrySubdivisionCode?: string | null;
};

export type AddressResult = {
    /**
     * The collection of added or modified Account addresses, containing address and account information.
     */
    Addresses: Array<AccountAddress>;
};

export type AddressResultPage = {
    /**
     * The collection of Account addresses, containing address and account information.
     */
    Addresses: Array<AccountAddress>;
    /**
     * Unique identifier of the last and hence oldest address item returned. This can be used in Limitation in a subsequent request to fetch the next batch of older Account address.
     */
    Cursor?: string | null;
};

export type AddressUpdateParameters = {
    /**
     * Unique identifier of the address.
     */
    AddressId: string;
    /**
     * First line of the address.
     */
    Line1?: (StringUpdateValue) | null;
    /**
     * Second line of the address.
     */
    Line2?: (StringUpdateValue) | null;
    /**
     * The city.
     */
    City?: (StringUpdateValue) | null;
    /**
     * Postal code.
     */
    PostalCode?: (StringUpdateValue) | null;
    /**
     * ISO 3166-1 alpha-2 code of the Country.
     */
    CountryCode?: (StringUpdateValue) | null;
    /**
     * ISO 3166-2 code of the administrative division, e.g. `DE-BW`.
     */
    CountrySubdivisionCode?: (StringUpdateValue) | null;
};

export type AgeCategory = {
    /**
     * Unique identifier of age category.
     */
    Id: string;
    /**
     * Unique identifier of [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the age category belongs to.
     */
    ServiceId: string;
    /**
     * Minimal age for the age category.
     */
    MinimalAge?: number | null;
    /**
     * Maximal age for the age category.
     */
    MaximalAge?: number | null;
    /**
     * All translations of the name of the age category.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * All translations of the short name of the age category.
     */
    ShortNames?: {
        [key: string]: (string);
    } | null;
    /**
     * Creation date and time of the age category in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the age category in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * The classification of the age category.
     *
     * Adult
     *
     * Child
     */
    Classification: AgeCategoryClassificationEnum;
    /**
     * Whether the age category is still active.
     */
    IsActive: boolean;
    /**
     * Identifier of the age category from external system.
     */
    ExternalIdentifier?: string | null;
};

export type AgeCategoryAdjustment = {
    /**
     * Unique identifier of the age category.
     */
    AgeCategoryId: string;
    /**
     * Absolute value of the adjustment (e.g. `50` represents 50 EUR in case the rate currency is `EUR`).
     */
    AbsoluteValue: number;
    /**
     * Age category adjustment type
     *
     * ExtraOccupancyAdjustment
     *
     * NegativeOccupancyAdjustment
     *
     * StandardOccupancyAdjustment
     */
    Type: AgeCategoryAdjustmentTypeEnum;
};

/**
 *
 *
 * ExtraOccupancyAdjustment
 *
 * NegativeOccupancyAdjustment
 *
 * StandardOccupancyAdjustment
 */
export type AgeCategoryAdjustmentTypeEnum = 'ExtraOccupancyAdjustment' | 'NegativeOccupancyAdjustment' | 'StandardOccupancyAdjustment';

/**
 *
 *
 * Adult
 *
 * Child
 */
export type AgeCategoryClassificationEnum = 'Adult' | 'Child';

export type AgeCategoryParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Age categories](https://mews-systems.gitbook.io/connector-api/operations/#age-category).
     */
    AgeCategoryIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Services` associated with the age categories. If not provided, defaults to all bookable services.
     */
    ServiceIds?: Array<(string)> | null;
    /**
     * Interval in which the age category was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type AgeCategoryResult = {
    /**
     * Age category of the enterprise.
     */
    AgeCategories: Array<AgeCategory>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * AllowanceBreakage (Profit of the allowance product.)
 *
 * AllowanceContraBreakage (Accounting balance for profit of the allowance product.)
 *
 * AllowanceLoss (Loss of the allowance product.)
 *
 * AllowanceContraLoss (Accounting balance for loss of the allowance product.)
 */
export type AllowanceProfitTypeEnum = 'AllowanceBreakage' | 'AllowanceContraBreakage' | 'AllowanceLoss' | 'AllowanceContraLoss';

export type AlternativePaymentMethodDeprecated = 'Ideal' | 'ApplePay' | 'GooglePay';

/**
 *
 *
 * Ideal (iDEAL data.)
 *
 * ApplePay (No additional data.)
 *
 * GooglePay (No additional data.)
 *
 * SepaDirectDebit (SEPA Direct Debit data.)
 */
export type AlternativePaymentMethodEnum = 'Ideal' | 'ApplePay' | 'GooglePay' | 'SepaDirectDebit';

export type AlternativePaymentParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerId: string;
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    Amount: AmountParameters;
    /**
     * Payment method to use for the alternative payment.
     * @deprecated
     */
    Method?: AlternativePaymentMethodDeprecated | null;
    /**
     * URL where the customer will be redirected after completing their payment.
     * @deprecated
     */
    RedirectUrl?: string | null;
    /**
     * Unique identifier of the reservation the payment belongs to.
     */
    ReservationId?: string | null;
    /**
     * Data specific to particular alternative payment method.
     */
    Data: AlternativePaymentsData;
};

export type AlternativePaymentResult = {
    /**
     * Unique identifier of the created payment.
     */
    PaymentId: string;
    /**
     * Next action to take in order to complete the payment.
     */
    NextAction?: (NextAction) | null;
};

export type AlternativePaymentsData = {
    /**
     * Type of alternative payment method (e.g. `Ideal`).
     *
     * Ideal (iDEAL data.)
     *
     * ApplePay (No additional data.)
     *
     * GooglePay (No additional data.)
     *
     * SepaDirectDebit (SEPA Direct Debit data.)
     */
    Discriminator: AlternativePaymentMethodEnum;
    /**
     * SEPA Direct Debit payment method data. Required when `Discriminator` is `SepaDirectDebit`.
     */
    SepaDirectDebit?: (SepaDirectDebitData) | null;
    /**
     * iDEAL payment method data. Required when `Discriminator` is `Ideal`.
     */
    Ideal?: (IdealData) | null;
};

export type Amount = {
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
     */
    Currency: string;
    /**
     * Net value without taxes.
     */
    NetValue: number;
    /**
     * Gross value including all taxes.
     */
    GrossValue: number;
    /**
     * The tax values applied.
     */
    TaxValues: Array<TaxValue>;
    /**
     * Information about individual tax amounts.
     */
    Breakdown: TaxBreakdown;
};

/**
 * Price of the product that overrides the price defined in Mews.
 */
export type AmountParameters = {
    Currency: string;
    TaxCodes: Array<(string)>;
    NetValue?: number | null;
    GrossValue?: number | null;
};

/**
 * Has same structure as [Array of strings update value](https://mews-systems.gitbook.io/connector-api/operations/_objects#array-of-strings-update-value).
 */
export type AssignedRateIds = {
    /**
     * Unique identifiers of Rates (or `null` should it not be updated).
     */
    Value?: Array<(string)> | null;
};

/**
 * Has same structure as [Array of strings update value](https://mews-systems.gitbook.io/connector-api/operations/_objects#array-of-strings-update-value).
 */
export type AssociatedAccountIdsUpdate = {
    /**
     * Unique identifiers of the `Customer` or `Company` that are associated to the bill. Set to `null` to remove all associated accounts. Note that only single associated account is currently supported.
     */
    Value?: Array<(string)> | null;
};

export type AvailabilityAdjustment = {
    /**
     * Unique identifier of the [Availability adjustment](https://mews-systems.gitbook.io/connector-api/operations/#availability-adjustment).
     */
    Id: string;
    /**
     * Unique identifier of the [Availability block](https://mews-systems.gitbook.io/connector-api/operations/availabilityblocks/#availability-block) which the availability adjustment belongs to.
     */
    AvailabilityBlockId?: string | null;
    /**
     * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource-category) whose availability is updated.
     */
    ResourceCategoryId: string;
    /**
     * Start of the interval in UTC timezone in ISO 8601 format.
     * @deprecated
     */
    StartUtc?: string | null;
    /**
     * End of the interval in UTC timezone in ISO 8601 format.
     * @deprecated
     */
    EndUtc?: string | null;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.
     */
    LastTimeUnitStartUtc: string;
    /**
     * Adjustment value applied on the interval.
     */
    UnitCount: number;
    /**
     * Shows whether the availability adjustment is active or deleted.
     *
     * Deleted
     *
     * Active
     * @deprecated
     */
    ActivityState: ActivityStateEnum;
    /**
     * Exact moment the availability adjustment is released if set; overrides the release strategy of the associated availability block.
     */
    ReleaseOverrideUtc?: string | null;
    /**
     * Last update date and time of the adjustment in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Whether the availability adjustment is still active.
     */
    IsActive: boolean;
    /**
     * Collection of predicted occupancy of availability adjustments. Relates to how many adjustments are assigned to each count of guests.
     */
    PaxCounts?: Array<PaxCount> | null;
    /**
     * Exact moment the first time unit of the availability adjustment is released based on `ReleaseOverrideUtc` or the `ReleaseStrategy` of the associated availability block, or the `OperationalEditableHistoryInterval` of the associated enterprise if not set, or `null` if `AvailabilityBlockId` is `null`.
     */
    FirstTimeUnitReleaseUtc?: string | null;
};

export type AvailabilityAdjustmentParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested [Availability adjustments](https://mews-systems.gitbook.io/connector-api/operations/#availability-adjustment).
     */
    AvailabilityAdjustmentIds?: Array<(string)> | null;
    /**
     * Interval in which the availability adjustments were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted, or both types of record. If not specified, only active records will be returned.
     */
    ActivityStates?: Array<ActivityState> | null;
};

export type AvailabilityAdjustmentResult = {
    /**
     * Availability adjustments.
     */
    AvailabilityAdjustments: Array<AvailabilityAdjustment>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type AvailabilityBlock = {
    /**
     * Unique identifier of the availability block.
     */
    Id?: string;
    /**
     * Unique identifier of the [enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises#enterprise).
     */
    EnterpriseId?: string;
    /**
     * Unique identifier of the `Service` the block is assigned to.
     */
    ServiceId?: string;
    /**
     * Unique identifier of the `Rate` the block is assigned to.
     */
    RateId?: string;
    /**
     * Unique identifier of the `Voucher` used to access specified private `Rate`.
     */
    VoucherId?: string | null;
    /**
     * Unique identifier of the `Customer` on whose behalf the block was made.
     */
    BookerId?: string | null;
    /**
     * Unique identifier of the `Company` linked to the block.
     */
    CompanyId?: string | null;
    /**
     * Unique identifier of `Company`with `Travel agency contract` the Availability Block is related to.
     */
    TravelAgencyId?: string | null;
    /**
     * The tentative budget for the total price of reservations in the block.
     */
    Budget?: (CurrencyValueOld) | null;
    /**
     * State of the availability block.
     *
     * Confirmed (The block deducts availability and can have reservations assigned.)
     *
     * Optional (The block deducts availability and cannot have reservations assigned.)
     *
     * Inquired (The block does not deduct availability and cannot have reservations assigned (waitlist).)
     *
     * Canceled (The block does not deduct availability and cannot have reservations assigned (waitlist).)
     */
    State: AvailabilityBlockStateEnum;
    /**
     * The purpose of the block.
     *
     * Leisure
     *
     * Business
     *
     * Student
     */
    ReservationPurpose?: (ReservationPurposeEnum) | null;
    /**
     * Creation date and time of the block in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the block in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format. See [Time units](https://mews-systems.gitbook.io/connector-api/concepts/time-units).
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last time unit, in UTC timezone ISO 8601 format. See [Time units](https://mews-systems.gitbook.io/connector-api/concepts/time-units).
     */
    LastTimeUnitStartUtc: string;
    /**
     * The moment when the block and its availability is released in UTC timezone in ISO 8601 format. Mutually exclusive with `RollingReleaseOffset`; the block will not be automatically released if neither `ReleasedUtc` nor `RollingReleaseOffsetUtc` is specified.
     */
    ReleasedUtc?: string | null;
    /**
     * Exact offset from the start of availability adjustments to the moment the individual days in the adjustment should be released, in ISO 8601 duration format. Mutually exclusive with `ReleasedUtc`; the block will not be automatically released if neither `ReleasedUtc` nor `RollingReleaseOffsetUtc` is specified.
     */
    RollingReleaseOffset?: string | null;
    /**
     * Identifier of the block from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * The name of the block in Mews.
     */
    Name?: string | null;
    /**
     * Additional notes of the block.
     */
    Notes?: string | null;
    /**
     * Whether assigning spaces to reservations within an availability block is done as a single group or divided into individual groups.
     *
     * AllInOneGroup (All created reservations in the block are added to the same reservation group.)
     *
     * IndividualGroups (Reservations can be picked up in multiple groups, with up to 750 reservations per group.)
     */
    PickupDistribution: PickupDistributionEnum;
    /**
     * Whether the `Availability Block` is still active.
     */
    IsActive: boolean;
    /**
     * Unique identifier of the Mews Events quote associated with the availability block.
     */
    QuoteId?: string | null;
    /**
     * Unique number for a specific availability block within the Mews system.
     */
    AvailabilityBlockNumber: string;
    /**
     * The strategy for automatic release of the availability block.
     *
     * FixedRelease (The availability block is released at a fixed time.)
     *
     * RollingRelease (Each availability adjustment is released at a fixed offset from its start.)
     *
     * None (The availability block is not automatically released.)
     */
    ReleaseStrategy: ReleaseStrategyEnum;
    /**
     * Unique number of the purchase order. This number is propagated to any newly picked up `Reservation` within the block.
     */
    PurchaseOrderNumber?: string | null;
};

export type AvailabilityBlockAddParameters = {
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) to assign block to.
     */
    ServiceId: string;
    /**
     * Unique identifier of the [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates#rate) to assign block to.
     */
    RateId: string;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format.
     */
    LastTimeUnitStartUtc: string;
    /**
     * The moment when the block and its availability is released, in UTC timezone ISO 8601 format. Takes precedence over `RollingReleaseOffset`.
     */
    ReleasedUtc?: string | null;
    /**
     * Exact offset from the start of availability adjustments to the moment the availability adjustment should be released, in ISO 8601 duration format. Ignored if `ReleasedUtc` is specified.
     */
    RollingReleaseOffset?: string | null;
    /**
     * The name of the block.
     */
    Name?: string | null;
    /**
     * Voucher code providing access to specified private [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates#rate).
     */
    VoucherCode?: string | null;
    /**
     * Unique identifier of the Booker as a creator of an availability block.
     */
    BookerId?: string | null;
    /**
     * Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies#company).
     */
    CompanyId?: string | null;
    /**
     * Unique identifier of travel agency (`Company` with a `TravelAgencyContract`).
     */
    TravelAgencyId?: string | null;
    /**
     * The tentative budget for the total price of reservations.
     */
    Budget?: (CurrencyValueOld) | null;
    /**
     * The purpose of the block.
     *
     * Leisure
     *
     * Business
     *
     * Student
     */
    ReservationPurpose?: (ReservationPurposeEnum) | null;
    /**
     * Identifier of the block from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Additional notes of the block.
     */
    Notes?: string | null;
    /**
     * State of the availability block.
     *
     * Confirmed (The block deducts availability and can have reservations assigned.)
     *
     * Optional (The block deducts availability and cannot have reservations assigned.)
     *
     * Inquired (The block does not deduct availability and cannot have reservations assigned (waitlist).)
     *
     * Canceled (The block does not deduct availability and cannot have reservations assigned (waitlist).)
     */
    State: AvailabilityBlockStateEnum;
    /**
     * Unique identifier of the Mews Events quote associated with the availability block.
     */
    QuoteId?: string | null;
    /**
     * Unique number of the purchase order. This number is propagated to any newly picked up `Reservation` within the block.
     */
    PurchaseOrderNumber?: string | null;
};

export type AvailabilityBlockAddResult = {
    /**
     * Availability blocks.
     */
    AvailabilityBlocks: Array<AvailabilityBlock>;
};

export type AvailabilityBlockAssignment = {
    RateId?: string;
    AvailabilityBlockId?: string;
};

export type AvailabilityBlockDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the Availability block to delete.
     */
    AvailabilityBlockIds: Array<(string)>;
};

export type AvailabilityBlockExtent = {
    /**
     * Whether the response should contain the general availability blocks.
     */
    AvailabilityBlocks?: boolean | null;
    /**
     * Whether the response should contain individual availability adjustments related to availability blocks.
     */
    Adjustments?: boolean | null;
    /**
     * Whether the response should contain reservations related to availability blocks.
     * @deprecated
     */
    ServiceOrders?: boolean | null;
    /**
     * Whether the response should contain rates related to availability blocks.
     * @deprecated
     */
    Rates?: boolean | null;
};

export type AvailabilityBlockParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Extent of data to be returned, e.g. it is possible to specify that related service orders (for example reservations) are returned.
     */
    Extent: AvailabilityBlockExtent;
    /**
     * Unique identifiers of the `Services` to which `Availability blocks` are assigned.
     */
    ServiceIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested `Availability blocks`.
     */
    AvailabilityBlockIds?: Array<(string)> | null;
    /**
     * Interval in which the availability blocks were created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Availability blocks` were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Availability blocks` are active.
     */
    CollidingUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Availability blocks`are released.
     */
    ReleasedUtc?: (TimeFilterInterval) | null;
    /**
     * Identifiers of `Availability blocks` from external systems.
     */
    ExternalIdentifiers?: Array<(string)> | null;
    /**
     * States the availability blocks should be in.
     */
    States?: Array<AvailabilityBlockStateEnum> | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<(string)> | null;
};

export type AvailabilityBlockResult = {
    /**
     * Availability blocks.
     */
    AvailabilityBlocks?: Array<AvailabilityBlock> | null;
    /**
     * Service orders (for example reservations) linked to availability blocks.
     * @deprecated
     */
    ServiceOrders?: Array<ReservationOld> | null;
    /**
     * Availability adjustments of availability blocks.
     */
    Adjustments?: Array<AvailabilityAdjustment> | null;
    /**
     * `Rates` assigned to the block.
     * @deprecated
     */
    Rates?: Array<RateForExtent> | null;
    /**
     * Unique identifier of the last returned availability block. This can be used in Limitation in a subsequent request to fetch the next batch of availability block.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * Confirmed (The block deducts availability and can have reservations assigned.)
 *
 * Optional (The block deducts availability and cannot have reservations assigned.)
 *
 * Inquired (The block does not deduct availability and cannot have reservations assigned (waitlist).)
 *
 * Canceled (The block does not deduct availability and cannot have reservations assigned (waitlist).)
 */
export type AvailabilityBlockStateEnum = 'Confirmed' | 'Optional' | 'Inquired' | 'Canceled';

export type AvailabilityBlockUpdateParameters = {
    /**
     * Unique identifier of the [Availability block](https://mews-systems.gitbook.io/connector-api/operations/availabilityblocks#availability-block).
     */
    AvailabilityBlockId?: string;
    /**
     * The name of the block (or `null` if the name should not be updated).
     */
    Name?: (StringUpdateValue) | null;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format (or `null` if the start time should not be updated).
     */
    FirstTimeUnitStartUtc?: (StringUpdateValue) | null;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last time unit, in UTC timezone ISO 8601 format (or `null` if the end time should not be updated).
     */
    LastTimeUnitStartUtc?: (StringUpdateValue) | null;
    /**
     * Identifier of the block from external system (or `null` if the identifier should not be updated).
     */
    ExternalIdentifier?: (StringUpdateValue) | null;
    /**
     * State of the availability block (or `null` if not updated).
     */
    State?: (StringUpdateValue) | null;
    /**
     * The purpose of the block (or `null` if not updated).
     */
    ReservationPurpose?: (StringUpdateValue) | null;
    /**
     * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies#company) (or `null` if not updated).
     */
    CompanyId?: (GuidNullableUpdateValue) | null;
    /**
     * Unique identifier of the travel agency (i.e. `Company`; or `null` if not updated).
     */
    TravelAgencyId?: (GuidNullableUpdateValue) | null;
    /**
     * Unique identifier of the Booker as a creator of an availability block (or `null` if not updated).
     */
    BookerId?: (GuidNullableUpdateValue) | null;
    /**
     * Additional notes of the block (or `null` if not updated).
     */
    Notes?: (StringUpdateValue) | null;
    /**
     * The tentative budget for the total price of reservations (or `null` if not updated).
     */
    Budget?: (UpdateValueCurrencyValueOld) | null;
    /**
     * Cancellation reason of the availability block (or `null` if not updated).
     */
    CancellationReason?: (StringUpdateValue) | null;
    /**
     * Cancellation reason detail of the availability block (or `null` if not updated).
     */
    CancellationReasonDetail?: (StringUpdateValue) | null;
    /**
     * Exact offset from the start of availability adjustments to the moment the availability adjustment should be released, in ISO 8601 duration format. Required if `ReleaseStrategy` is set to `RollingRelease`, ignored otherwise.
     */
    RollingReleaseOffset?: (StringUpdateValue) | null;
    /**
     * The moment when the block and its availability is released, in UTC timezone ISO 8601 format. Required if `ReleaseStrategy` is set to `FixedRelease`, or used when `ReleaseStrategy` update is unspecified.
     */
    ReleasedUtc?: (StringUpdateValue) | null;
    /**
     * The strategy for automatic release of the availability block (or `null` if not updated).
     */
    ReleaseStrategy?: (ReleaseStrategyUpdateValue) | null;
    /**
     * Unique identifier of the Mews Events quote associated with the availability block (or `null` if not updated).
     */
    QuoteId?: (GuidNullableUpdateValue) | null;
    /**
     * Unique number of the purchase order. This number is propagated to any newly picked up `Reservation` within the block.
     */
    PurchaseOrderNumber?: (StringUpdateValue) | null;
};

export type BaseRatePricingData = {
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    Amount: Amount;
};

export type BaseRatePricingParameters = {
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    Amount: AmountParameters;
    /**
     * This is the amount added to the price when occupancy of the space is less than the Space Category Capacity. To provide a discount price for under-occupancy, simply use a negative value.
     */
    NegativeOccupancyAdjustment?: number;
    /**
     * This is the amount added to the price when the Space Category Capacity is exceeded.
     */
    ExtraOccupancyAdjustment?: number;
};

export type BaseRatePricingWithoutAdjustmentsParameters = {
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    Amount: AmountParameters;
};

export type Bill = {
    /**
     * Unique identifier of the bill.
     */
    Id: string;
    /**
     * Name of the bill.
     */
    Name?: string | null;
    /**
     * Unique identifier of the `Enterprise`.
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the account (`Customer` or `Company`) the bill is issued to.
     */
    AccountId: string;
    /**
     * A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), i.e. `Customer` or `Company`.
     *
     * Company
     *
     * Customer
     */
    AccountType: AccountTypeEnum;
    /**
     * Unique identifier of the `Customer` the bill is issued to.
     * @deprecated
     */
    CustomerId?: string | null;
    /**
     * Unique identifier of the `Company` specified in `CompanyDetails` or the `Company` the bill is issued to.
     * @deprecated
     */
    CompanyId?: string | null;
    /**
     * Unique identifiers of the `Customers` or `Companies` that are associated to the bill.
     */
    AssociatedAccountIds: Array<(string)> | null;
    /**
     * Unique identifier of the bill `Counter`.
     */
    CounterId?: string | null;
    State: BillState;
    Type: BillType;
    /**
     * Number of the bill.
     */
    Number?: string | null;
    /**
     * Variable symbol of the bill.
     */
    VariableSymbol?: string | null;
    /**
     * Date and time of the bill creation in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Date and time of the bill issuance in UTC timezone in ISO 8601 format.
     */
    IssuedUtc?: string | null;
    /**
     * Taxation date of the bill in UTC timezone in ISO 8601 format.
     */
    TaxedUtc?: string | null;
    /**
     * Date when the bill was paid in UTC timezone in ISO 8601 format.
     */
    PaidUtc?: string | null;
    /**
     * Bill due date and time in UTC timezone in ISO 8601 format.
     */
    DueUtc?: string | null;
    /**
     * Date and time when an email reminder to pay an invoice was last sent, in UTC timezone in ISO 8601 format.
     */
    LastReminderDateUtc?: string | null;
    /**
     * Date and time when the bill was last updated, in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Unique number of the purchase order from the buyer.
     */
    PurchaseOrderNumber?: string | null;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Options of the bill.
     */
    Options?: (BillOptions) | null;
    /**
     * @deprecated
     */
    Revenue: Array<AccountingItem> | null;
    /**
     * @deprecated
     */
    Payments: Array<AccountingItem> | null;
    /**
     * The order items (consumed items such as nights or products) on the bill.
     * @deprecated
     */
    OrderItems: Array<OrderItemOld> | null;
    /**
     * The payment items (such as cash, credit card payments or invoices) on the bill.
     * @deprecated
     */
    PaymentItems: Array<PaymentItemOld> | null;
    /**
     * @deprecated
     */
    AssigneeData?: {
        Discriminator?: BillAssigneeDataDiscriminator;
        Value?: BillCompanyData | BillCustomerData;
    };
    /**
     * Additional information about owner of the bill. Can be a [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company). Persisted at the time of closing of the bill.
     */
    OwnerData?: {
        Discriminator?: BillAssigneeDataDiscriminator;
        Value?: BillCompanyData | BillCustomerData;
    };
    /**
     * Additional information about the company assigned to the bill. Not the same as the owner. Persisted at the time of closing of the bill.
     * @deprecated
     */
    CompanyDetails?: (BillCompanyData) | null;
    /**
     * Additional information about the associated account of the bill. Can be a `Customer` or `Company`. Persisted at the time of closing of the bill. Currently only one account can be associated with a bill, but this may be extended in future.
     */
    AssociatedAccountData?: Array<BillAccountData> | null;
    /**
     * Additional information about the enterprise issuing the bill, including bank account details. Persisted at the time of closing of the bill.
     */
    EnterpriseData?: (BillEnterpriseData) | null;
    /**
     * Whether the bill is a regular bill or a corrective bill.
     *
     * Bill (Regular bill.)
     *
     * CorrectiveBill (Corrective bill, i.e. the `CorrectionType` is either `Edit`, `Cancellation`, or `ReceivablePaymentsBalance`.)
     */
    CorrectionState: BillCorrectionStateEnum;
    /**
     * Type of correction.
     *
     * Cancellation
     *
     * Edit
     *
     * CreditNote
     *
     * Reinstatement
     *
     * ReceivablePaymentsBalance
     */
    CorrectionType?: (BillCorrectionTypeEnum) | null;
    /**
     * The ID of the bill that the corrective bill corrects. If the corrected bill was deleted, this field is `null`.
     */
    CorrectedBillId?: string | null;
};

export type BillAccountData = {
    /**
     * Determines type of value.
     */
    readonly Discriminator?: BillAssigneeDataDiscriminator | null;
    /**
     * Associated account bill data for customer.
     */
    BillCustomerData?: (BillCustomerData) | null;
    /**
     * Associated account bill data for company.
     */
    readonly BillCompanyData?: (BillCompanyData) | null;
};

export type BillAddParameters = {
    /**
     * Unique identifier of the account (`Customer` or `Company`) the bill is issued to. Company billing may not be enabled for your integration.
     */
    AccountId: string;
    /**
     * Account that has a possible link with the owner of the bill.
     */
    AssociatedAccountId?: string | null;
    /**
     * Name of the newly created bill.
     */
    Name?: string | null;
};

export type BillAssigneeDataDiscriminator = 'BillCustomerData' | 'BillCompanyData';

export type BillCloseAccountParameters = {
    /**
     * Unique identifier of the associated account (`Customer` or `Company`) the bill is associated to.
     */
    Id: string;
    /**
     * Tax identifier of the associated account to be put on a bill.
     */
    TaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Address of the associated account to be displayed on bill. Overrides the default one taken from account profile.
     */
    Address?: (AddressParameters) | null;
};

export type BillCloseParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill) to be closed.
     */
    BillId: string;
    Type: BillType;
    /**
     * Unique identifier of the [Counter](https://mews-systems.gitbook.io/connector-api/operations/counters/#counter) to be used for closing. Default one is used when no value is provided.
     */
    BillCounterId?: string | null;
    /**
     * Unique identifier of the [Fiscal Machine](https://mews-systems.gitbook.io/connector-api/operations/devices/#device) to be used for closing. Default one is used when no value is provided.
     */
    FiscalMachineId?: string | null;
    /**
     * Options of the bill. If not provided, both DisplayCustomer and DisplayTaxation are set by default.
     */
    Options?: (BillOptionsParameters) | null;
    /**
     * Date of consumption for tax purposes. Can be used only with `Type` of `Invoice`.
     */
    TaxedDate?: (StringUpdateValue) | null;
    /**
     * Deadline when bill is due to be paid. Can be used only with `Type` of `Invoice`.
     */
    DueDate?: (StringUpdateValue) | null;
    /**
     * Optional unique identifier of requested payment. Can be used only with `Type` of `Invoice`.
     */
    VariableSymbol?: (StringUpdateValue) | null;
    /**
     * Tax identifier of account to be put on a bill.
     * @deprecated
     */
    TaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Tax identifier of account to be put on a bill.
     */
    AccountTaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Tax identifier of company to be put on a bill.
     * @deprecated
     */
    CompanyTaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Unique number of the purchase order from the buyer.
     */
    PurchaseOrderNumber?: (StringUpdateValue) | null;
    /**
     * Notes to be attached to bill.
     */
    Notes?: (StringUpdateValue) | null;
    /**
     * Address of the account to be displayed on bill. Overrides the default one taken from account profile.
     * @deprecated
     */
    Address?: (AddressParameters) | null;
    /**
     * Address of the account to be displayed on bill. Overrides the default one taken from account profile.
     */
    AccountAddress?: (AddressParameters) | null;
    /**
     * Account data of the associated account on a bill. Currently one object is supported and only populated when the bill is closed.
     */
    AssociatedAccountData?: Array<BillCloseAccountParameters> | null;
};

export type BillCompanyData = {
    /**
     * ID of the `Company`.
     */
    Id: string | null;
    /**
     * Address of the company.
     */
    Address?: (Address) | null;
    /**
     * The set of `LegalIdentifiers` for the company.
     */
    LegalIdentifiers?: {
        [key: string]: (string);
    } | null;
    /**
     * A unique code for Mews to list on invoices it sends to the company.
     */
    BillingCode?: string | null;
    /**
     * Name of the company.
     */
    Name: string;
    /**
     * Fiscal identifier of the company.
     */
    FiscalIdentifier?: string | null;
    /**
     * Additional tax identifier of the company.
     */
    AdditionalTaxIdentifier?: string | null;
    /**
     * DUNS (Data Universal Numbering System) number of the company.
     */
    DUNS?: string | null;
    /**
     * Company telephone number.
     */
    Telephone?: string | null;
    /**
     * Tax identifier of the company.
     */
    TaxIdentifier?: string | null;
    /**
     * Invoicing email of the company.
     */
    InvoicingEmail?: string | null;
    /**
     * Department of the company.
     */
    Department?: string | null;
};

/**
 *
 *
 * Bill (Regular bill.)
 *
 * CorrectiveBill (Corrective bill, i.e. the `CorrectionType` is either `Edit`, `Cancellation`, or `ReceivablePaymentsBalance`.)
 */
export type BillCorrectionStateEnum = 'Bill' | 'CorrectiveBill';

/**
 *
 *
 * Cancellation
 *
 * Edit
 *
 * CreditNote
 *
 * Reinstatement
 *
 * ReceivablePaymentsBalance
 */
export type BillCorrectionTypeEnum = 'Cancellation' | 'Edit' | 'CreditNote' | 'Reinstatement' | 'ReceivablePaymentsBalance';

export type BillCustomerData = {
    /**
     * ID of the `Customer` to whom the bill was assigned.
     */
    Id: string;
    /**
     * Address of the customer.
     */
    Address?: (Address) | null;
    /**
     * The set of `LegalIdentifiers` for the customer.
     */
    LegalIdentifiers?: {
        [key: string]: (string);
    } | null;
    /**
     * A unique code for Mews to list on invoices it sends to the customer.
     */
    BillingCode?: string | null;
    /**
     * Last name of the customer.
     */
    LastName: string;
    /**
     * First name of the customer.
     */
    FirstName?: string | null;
    /**
     * Second last name of the customer.
     */
    SecondLastName?: string | null;
    /**
     * Title prefix of the customer.
     *
     * Mister (Mr.)
     *
     * Miss (Ms.)
     *
     * Misses (Mrs.)
     */
    TitlePrefix?: (Title) | null;
    /**
     * Tax identifier of the customer.
     */
    TaxIdentifier?: string | null;
};

export type BillDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill)s to be deleted.
     */
    BillIds: Array<(string)>;
};

/**
 * Additional information about the enterprise issuing the bill, including bank account details. Persisted at the time of closing of the bill.
 */
export type BillEnterpriseData = {
    /**
     * Enterprise additional tax identifier.
     */
    AdditionalTaxIdentifier?: string | null;
    /**
     * Enterprise company name.
     */
    CompanyName?: string | null;
    /**
     * Enterprise bank account.
     */
    BankAccount?: string | null;
    /**
     * Enterprise bank name.
     */
    BankName?: string | null;
    /**
     * Enterprise IBAN (International Bank Account Number).
     */
    Iban?: string | null;
    /**
     * Enterprise BIC (Bank Identifier Code).
     */
    Bic?: string | null;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the bills, payments and revenue items should be also returned. **Deprecated!**
 */
export type BillExtent = {
    /**
     * Whether the response should contain payments and revenue items.
     * @deprecated
     */
    Items?: boolean;
};

export type BillFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Extent of data to be returned. E.g. it is possible to specify that together with the bills, payments and revenue items should be also returned.
     * @deprecated
     */
    Extent?: (BillExtent) | null;
    /**
     * Interval in which the `Bill` was closed.
     */
    ClosedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Bill` was paid.
     */
    PaidUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Bill` is due to be paid.
     */
    DueUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Bill` was created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Bill` was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Unique identifiers of the `Bills`. Required if no other filter is provided.
     */
    BillIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the `Customers`.
     */
    CustomerIds?: Array<(string)> | null;
    /**
     * State the bills should be in. If not specified, `Open` and `Closed` bills are returned.
     */
    State?: BillState | null;
    /**
     * Whether to return regular bills, corrective bills, or both. If `BillIds` are specified, defaults to both, otherwise defaults to `Bill`.
     */
    CorrectionState?: Array<BillCorrectionStateEnum> | null;
};

export type BillFiscalMachineData = {
    /**
     * Discriminator of the object.
     *
     * ItalianFiscalMachineData
     */
    Discriminator: BillFiscalMachineDataDiscriminatorEnum;
    /**
     * Structure of the object depends on `Discriminator` (currently only `ItalianFiscalMachineData` is supported).
     */
    Value: ItalianFiscalMachineData;
};

/**
 *
 *
 * ItalianFiscalMachineData
 */
export type BillFiscalMachineDataDiscriminatorEnum = 'ItalianFiscalMachineData';

export type BillFiscalMachinePayloadData = {
    /**
     * Discriminator of the object.
     *
     * ItalianFiscalMachine
     */
    Discriminator: FiscalMachinePayloadDataDiscriminatorEnum;
    /**
     * Base64-encoded data of the file to be printed.
     */
    Value: string;
};

/**
 * Options of the bill.
 */
export type BillOptions = {
    /**
     * Display customer information on a bill.
     */
    DisplayCustomer?: boolean;
    /**
     * Display taxation detail on a bill.
     */
    DisplayTaxation?: boolean;
    /**
     * Tracking of payments is enabled for bill, only applicable for `BillType` of `Invoice`.
     */
    TrackReceivable?: boolean;
    /**
     * Display CID number on bill, only applicable for `BillType` of `Invoice`.
     */
    DisplayCid?: boolean;
    /**
     * Whether the bill is rebated (both fully or partially).
     */
    Rebated?: boolean;
};

export type BillOptionsParameters = {
    /**
     * Display customer information on a bill.
     */
    DisplayCustomer: BooleanUpdateValue;
    /**
     * Display taxation detail on a bill.
     */
    DisplayTaxation: BooleanUpdateValue;
};

export type BillPdfFile = {
    /**
     * Base64 encoded PDF file.
     */
    Base64Data: string;
};

export type BillPdfParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill) to be printed.
     */
    BillId: string;
    /**
     * Unique identifier of the [Bill print event](https://mews-systems.gitbook.io/connector-api/operations/#bill-print-event) returned by previous invocation.
     */
    BillPrintEventId?: string | null;
    /**
     * Bill PDF template type. If not specified, the default template is used.
     *
     * Detailed (Detailed overview. Items are grouped by the reservation, item type and price, and consumption date.)
     *
     * Consumption (Overview by date (no reservation details). Items of the same type and price are grouped by consumption date.)
     *
     * Reservation (Overview by reservation (no date). Items of the same type and price are grouped by reservation.)
     *
     * OrderItem (Consumption overview (not fiscal document). Items are grouped by the item type and price without reservation details and consumption date.)
     *
     * Guest (Overview by guest. Items are grouped by guest, reservation, consumption date, and item type.)
     */
    PdfTemplate?: (FinancialDocumentPdfTemplateTypeEnum) | null;
    /**
     * The reason for reprinting the bill with different template. Required for France LE.
     */
    PrintReason?: string | null;
};

export type BillPdfResult = {
    /**
     * Unique identifier of the printed bill.
     */
    BillId?: string;
    Result?: {
        Discriminator?: BillPdfResultDiscriminator;
        Value?: BillPdfFile | BillPrintEvent;
    };
};

/**
 * The result of operation.
 */
export type BillPdfResultDiscriminator = 'BillPdfFile' | 'BillPrintEvent';

export type BillPrintEvent = {
    /**
     * Unique identifier of print event. Must be used in retry calls to retrieve the PDF.
     */
    BillPrintEventId?: string;
};

/**
 * Whether the bill is `Open` or `Closed`.
 */
export type BillState = 'Open' | 'Closed';

/**
 * After a bill is closed, the Bill Type is set to `Receipt` or `Invoice`. `Receipt` indicates that the bill has been fully paid and the balance is zero. `Invoice` indicates that the bill has not yet been fully paid but an invoice has been issued. Prior to closing, Bill Type should not be used.
 */
export type BillType = 'Receipt' | 'Invoice';

export type BillUpdateParameters = {
    /**
     * Unique identifier of the bill to update.
     */
    BillId: string;
    /**
     * Unique identifier of the account (`Customer` or `Company`) the bill is issued to (or null if the account should not be updated).
     */
    AccountId?: (GuidUpdateValue) | null;
    /**
     * Unique identifiers of the `Customer` or `Company` that are associated to the bill (or null if the account should not be updated).
     */
    AssociatedAccountIds?: (AssociatedAccountIdsUpdate) | null;
};

export type BillV20250623 = {
    /**
     * Unique identifier of the bill.
     */
    Id: string;
    /**
     * Name of the bill.
     */
    Name?: string | null;
    /**
     * Unique identifier of the `Enterprise`.
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the account (`Customer` or `Company`) the bill is issued to.
     */
    AccountId: string;
    /**
     * Unique identifiers of the `Customers` or `Companies` that are associated to the bill.
     */
    AssociatedAccountIds: Array<(string)> | null;
    /**
     * Unique identifier of the bill `Counter`.
     */
    CounterId?: string | null;
    State: BillState;
    Type: BillType;
    /**
     * Number of the bill.
     */
    Number?: string | null;
    /**
     * Variable symbol of the bill.
     */
    VariableSymbol?: string | null;
    /**
     * Date and time of the bill creation in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Date and time when the bill was last updated, in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Date and time of the bill issuance in UTC timezone in ISO 8601 format.
     */
    IssuedUtc?: string | null;
    /**
     * Taxation date of the bill in UTC timezone in ISO 8601 format.
     */
    TaxedUtc?: string | null;
    /**
     * Date when the bill was paid in UTC timezone in ISO 8601 format.
     */
    PaidUtc?: string | null;
    /**
     * Bill due date and time in UTC timezone in ISO 8601 format.
     */
    DueUtc?: string | null;
    /**
     * Date and time when an email reminder to pay an invoice was last sent, in UTC timezone in ISO 8601 format.
     */
    LastReminderDateUtc?: string | null;
    /**
     * Unique number of the purchase order from the buyer.
     */
    PurchaseOrderNumber?: string | null;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Options of the bill.
     */
    Options?: (BillOptions) | null;
    /**
     * Additional information about owner of the bill. Can be a `Customer` or `Company`. Persisted at the time of closing of the bill.
     */
    Owner?: (BillAccountData) | null;
    /**
     * Additional information about the associated account of the bill. Can be a `Customer` or `Company`. Persisted at the time of closing of the bill. Currently only one account can be associated with a bill, but this may be extended in future.
     */
    AssociatedAccountsData?: Array<BillAccountData> | null;
    /**
     * Additional information about the enterprise issuing the bill, including bank account details. Persisted at the time of closing of the bill.
     */
    EnterpriseData?: (BillEnterpriseData) | null;
    /**
     * Whether the bill is a regular bill or a corrective bill.
     *
     * Bill (Regular bill.)
     *
     * CorrectiveBill (Corrective bill, i.e. the `CorrectionType` is either `Edit`, `Cancellation`, or `ReceivablePaymentsBalance`.)
     */
    CorrectionState: BillCorrectionStateEnum;
    /**
     * Type of correction.
     *
     * Cancellation
     *
     * Edit
     *
     * CreditNote
     *
     * Reinstatement
     *
     * ReceivablePaymentsBalance
     */
    CorrectionType?: (BillCorrectionTypeEnum) | null;
    /**
     * The ID of the bill that the corrective bill corrects. If the corrected bill was deleted, this field is `null`.
     */
    CorrectedBillId?: string | null;
};

export type BillingAutomation = {
    /**
     * Unique identifier of the billing automation.
     */
    Id: string;
    /**
     * Unique identifier of the enterprise.
     */
    EnterpriseId: string;
    /**
     * Name of the billing automation.
     */
    Name: string;
    /**
     * Description of the billing automation.
     */
    Description?: string | null;
    /**
     * List of companies with relations to the billing automation.
     */
    CompaniesWithRelations: Array<CompanyWithBillingAutomationRelation>;
    /**
     * Type of prepayment.
     *
     * All (All)
     *
     * Prepaid (Prepaid)
     */
    Prepayment: BillingAutomationPrepaymentEnum;
    /**
     * Type of target company and customer assignment behavior.
     *
     * CompanyAsDetails (The company will be the associated account in the resulting routed bill, and the customer is the owner.)
     *
     * CompanyAsOwner (The company will be the owner in the resulting routed bill, and the customer might be the associated account.)
     *
     * NoCompany (The customer will be owner of the bill.)
     */
    AssignmentTargetType: BillingAutomationAssignmentTargetTypeEnum;
    /**
     * Trigger type of billing automation.
     *
     * Continuous (Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.)
     *
     * Recurring (Billing automation is executed monthly.)
     *
     * Legacy (Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.)
     */
    TriggerType: BillingAutomationTriggerTypeEnum;
    /**
     * Type of bill aggregation.
     *
     * OnePerReservation (Create a separate bill for each reservation.)
     *
     * AggregateByCustomer (Create a separate bill for each reservation owner.)
     *
     * AggregateAll (Group all moved items on one bill.)
     *
     * AggregatePerReservationGroup (Create a separate bill for each reservation group.)
     */
    BillAggregationType: BillingAutomationBillAggregationTypeEnum;
    /**
     * Creation date and time of the billing automation in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Processing start offset. Applicable only if the billing automation `TriggerType` is set to `Reccuring`.
     */
    ProcessingStartOffset?: string | null;
    /**
     * Specifies the type of order item consumption period for the billing automation. This value is applicable only when the `TriggerType` is set to `Reccuring`.
     *
     * MonthBefore (Only items with a consumption date within the previous month will be routed.)
     *
     * SameMonthAndMonthBefore (Only items with a consumption date within this and the previous month will be routed.)
     *
     * SameMonth (Only items with a consumption date within this month will be routed.)
     *
     * SameMonthAndMonthAfter (Only items with a consumption date within this and the next month will be routed.)
     *
     * MonthAfter (Only items with a consumption date within the next month will be routed.)
     */
    OrderItemConsumptionPeriod?: (BillingAutomationOrderItemConsumptionPeriodTypeEnum) | null;
    /**
     * List of billing automation assignments.
     */
    Assignments?: Array<BillingAutomationAssignment> | null;
};

export type BillingAutomationAccountingCategoryAssignment = {
    /**
     * Unique identifier of the accounting category.
     */
    AccountingCategoryId: string;
    /**
     * Type of the accounting category routed item.
     */
    ItemTypes: AccountingCategoryRoutedItemTypes;
};

export type BillingAutomationAccountingCategoryAssignmentIEnumerableUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: Array<BillingAutomationAccountingCategoryAssignment> | null;
};

export type BillingAutomationAddParameters = {
    /**
     * Name of the billing automation.
     */
    Name: string;
    /**
     * Description of the billing automation.
     */
    Description?: string | null;
    /**
     * List of companies with relations indicating whether the company is considered a travel agency or a company in the reservation. Can only be empty if `AssignmentTargetType` is `CompanyAsDetails` or `NoCompany`.
     */
    CompaniesWithRelations?: Array<CompanyWithBillingAutomationRelation> | null;
    /**
     * Type of prepayment.
     *
     * All (All)
     *
     * Prepaid (Prepaid)
     */
    Prepayment: BillingAutomationPrepaymentEnum;
    /**
     * Specifies the type of company assignment to the bill. If set to `NoCompany`, the `BillAggregationType` must be `AggregateByCustomer`.
     *
     * CompanyAsDetails (The company will be the associated account in the resulting routed bill, and the customer is the owner.)
     *
     * CompanyAsOwner (The company will be the owner in the resulting routed bill, and the customer might be the associated account.)
     *
     * NoCompany (The customer will be owner of the bill.)
     */
    AssignmentTargetType: BillingAutomationAssignmentTargetTypeEnum;
    /**
     * Trigger type of billing automation.
     *
     * Continuous (Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.)
     *
     * Recurring (Billing automation is executed monthly.)
     *
     * Legacy (Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.)
     */
    TriggerType: BillingAutomationTriggerTypeEnum;
    /**
     * Specifies the type of bill aggregation. If the value is not `AggregateByCustomer`, the `AssignmentTargetType` must be `CompanyAsOwner`.
     *
     * OnePerReservation (Create a separate bill for each reservation.)
     *
     * AggregateByCustomer (Create a separate bill for each reservation owner.)
     *
     * AggregateAll (Group all moved items on one bill.)
     *
     * AggregatePerReservationGroup (Create a separate bill for each reservation group.)
     */
    BillAggregationType: BillingAutomationBillAggregationTypeEnum;
    /**
     * Specifies the order item consumption period type for the billing automation. This is required if the `TriggerType` is set to `Reccuring`.
     *
     * MonthBefore (Only items with a consumption date within the previous month will be routed.)
     *
     * SameMonthAndMonthBefore (Only items with a consumption date within this and the previous month will be routed.)
     *
     * SameMonth (Only items with a consumption date within this month will be routed.)
     *
     * SameMonthAndMonthAfter (Only items with a consumption date within this and the next month will be routed.)
     *
     * MonthAfter (Only items with a consumption date within the next month will be routed.)
     */
    OrderItemConsumptionPeriod?: (BillingAutomationOrderItemConsumptionPeriodTypeEnum) | null;
    /**
     * Specifies the processing start offset. This is required if the billing automation `TriggerType` is set to `Reccuring`.
     */
    ProcessingStartOffset?: string | null;
    /**
     * List of billing automation assignments.
     */
    Assignments: Array<BillingAutomationAssignmentAddParameters>;
};

export type BillingAutomationAssignment = {
    /**
     * Unique identifier of the billing automation assignment.
     */
    Id: string;
    /**
     * Unique identifier of the billing automation.
     */
    BillingAutomationId: string;
    /**
     * Unique identifier of the related service.
     */
    ServiceId: string;
    /**
     * Type of items that are going to be routed.
     */
    RoutedItemTypes: BillingAutomationItemTypesParameters;
    /**
     * Unique identifiers of `Rates` used in billing automation conditions.
     */
    RateIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Product Categories` used in billing automation conditions.
     */
    ProductCategoryIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Products` used in billing automation conditions.
     */
    ProductIds?: Array<(string)> | null;
    /**
     * List of accounting category assignments used in billing automation conditions.
     */
    AccountingCategoryAssignments?: Array<BillingAutomationAccountingCategoryAssignment> | null;
};

export type BillingAutomationAssignmentAddParameters = {
    /**
     * Unique identifier of the related service.
     */
    ServiceId: string;
    /**
     * Type of items that are going to be routed.
     */
    RoutedItemTypes: BillingAutomationItemTypesParameters;
    /**
     * Unique identifiers of `Rates` that will be applied as billing automation condition.
     */
    RateIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Product Categories` that will be applied as billing automation condition.
     */
    ProductCategoryIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Products` that will be applied as billing automation condition.
     */
    ProductIds?: Array<(string)> | null;
    /**
     * List of accounting categories that will be applied as billing automation condition.
     */
    AccountingCategories?: Array<BillingAutomationAccountingCategoryAssignment> | null;
};

/**
 *
 *
 * CompanyAsDetails (The company will be the associated account in the resulting routed bill, and the customer is the owner.)
 *
 * CompanyAsOwner (The company will be the owner in the resulting routed bill, and the customer might be the associated account.)
 *
 * NoCompany (The customer will be owner of the bill.)
 */
export type BillingAutomationAssignmentTargetTypeEnum = 'CompanyAsDetails' | 'CompanyAsOwner' | 'NoCompany';

export type BillingAutomationAssignmentTargetTypeUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: BillingAutomationAssignmentTargetTypeEnum;
};

export type BillingAutomationAssignmentUpdateParameters = {
    /**
     * Unique identifier of the billing automation assignment.
     */
    BillingAutomationAssignmentId: string;
    /**
     * Type of items that are going to be routed (or `null` should it not be updated).
     */
    RoutedItemTypes?: (BillingAutomationItemTypesUpdateParameters) | null;
    /**
     * Unique identifiers of `Rates` that will be applied as billing automation condition (or `null` should it not be updated).
     */
    RateIds?: (GuidIEnumerableUpdateValue) | null;
    /**
     * Unique identifiers of `Product Categories` that will be applied as billing automation condition (or `null` should it not be updated).
     */
    ProductCategoryIds?: (GuidIEnumerableUpdateValue) | null;
    /**
     * Unique identifiers of `Products` that will be applied as billing automation condition (or `null` should it not be updated).
     */
    ProductIds?: (GuidIEnumerableUpdateValue) | null;
    /**
     * List of `Accounting Categories` with their `ItemTypes` that will be applied as billing automation condition (or `null` should it not be updated).
     */
    AccountingCategories?: (BillingAutomationAccountingCategoryAssignmentIEnumerableUpdateValue) | null;
};

export type BillingAutomationAssignmentsUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the billing automation.
     */
    BillingAutomationId: string;
    /**
     * Parameters for adding new assignments (or null if not being updated).
     */
    AssignmentsToAdd?: Array<BillingAutomationAssignmentAddParameters> | null;
    /**
     * List of parameters for updating existing assignments (or null if not being updated).
     */
    AssignmentsToUpdate?: Array<BillingAutomationAssignmentUpdateParameters> | null;
    /**
     * List of unique identifiers for assignments to be removed (or null if not being updated).
     */
    AssignmentIdsToRemove?: Array<(string)> | null;
};

/**
 *
 *
 * OnePerReservation (Create a separate bill for each reservation.)
 *
 * AggregateByCustomer (Create a separate bill for each reservation owner.)
 *
 * AggregateAll (Group all moved items on one bill.)
 *
 * AggregatePerReservationGroup (Create a separate bill for each reservation group.)
 */
export type BillingAutomationBillAggregationTypeEnum = 'OnePerReservation' | 'AggregateByCustomer' | 'AggregateAll' | 'AggregatePerReservationGroup';

export type BillingAutomationBillAggregationTypeUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: BillingAutomationBillAggregationTypeEnum;
};

export type BillingAutomationDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the billing automations to be deleted.
     */
    BillingAutomationIds: Array<(string)>;
};

export type BillingAutomationFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Company` associated with the billing automations.
     */
    CompanyIds?: Array<(string)> | null;
    /**
     * Unique identifiers of specific `Billing automation` items.
     */
    BillingAutomationIds?: Array<(string)> | null;
};

export type BillingAutomationItemTypesParameters = {
    /**
     * Space order
     */
    SpaceOrder: boolean;
    /**
     * City tax
     */
    CityTax: boolean;
    /**
     * All products
     */
    AllProducts: boolean;
    /**
     * Deposits
     */
    Deposits: boolean;
    /**
     * Additional expenses
     */
    AdditionalExpenses: boolean;
    /**
     * All custom items
     */
    AllCustomItems: boolean;
};

export type BillingAutomationItemTypesUpdateParameters = {
    /**
     * Space order (or `null` should it not be updated).
     */
    SpaceOrder?: (BooleanUpdateValue) | null;
    /**
     * City tax (or `null` should it not be updated).
     */
    CityTax?: (BooleanUpdateValue) | null;
    /**
     * Products (or `null` should it not be updated).
     */
    AllProducts?: (BooleanUpdateValue) | null;
    /**
     * Deposits(or `null` should it not be updated).
     */
    Deposits?: (BooleanUpdateValue) | null;
    /**
     * Additional expenses (or `null` should it not be updated).
     */
    AdditionalExpenses?: (BooleanUpdateValue) | null;
    /**
     * Custom items (or `null` should it not be updated).
     */
    AllCustomItems?: (BooleanUpdateValue) | null;
};

export type BillingAutomationModificationResult = {
    /**
     * Billing automations affected by the operation.
     */
    BillingAutomations?: Array<BillingAutomation> | null;
};

/**
 *
 *
 * MonthBefore (Only items with a consumption date within the previous month will be routed.)
 *
 * SameMonthAndMonthBefore (Only items with a consumption date within this and the previous month will be routed.)
 *
 * SameMonth (Only items with a consumption date within this month will be routed.)
 *
 * SameMonthAndMonthAfter (Only items with a consumption date within this and the next month will be routed.)
 *
 * MonthAfter (Only items with a consumption date within the next month will be routed.)
 */
export type BillingAutomationOrderItemConsumptionPeriodTypeEnum = 'MonthBefore' | 'SameMonthAndMonthBefore' | 'SameMonth' | 'SameMonthAndMonthAfter' | 'MonthAfter';

export type BillingAutomationOrderItemConsumptionPeriodTypeUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: BillingAutomationOrderItemConsumptionPeriodTypeEnum;
};

/**
 *
 *
 * All (All)
 *
 * Prepaid (Prepaid)
 */
export type BillingAutomationPrepaymentEnum = 'All' | 'Prepaid';

export type BillingAutomationPrepaymentUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: BillingAutomationPrepaymentEnum;
};

export type BillingAutomationResult = {
    /**
     * The list of filtered billing automations.
     */
    BillingAutomations?: Array<BillingAutomation> | null;
    /**
     * Unique identifier of the last returned billing automation. This can be used in Limitation in a subsequent request to fetch the next batch of billing automations.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * Continuous (Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.)
 *
 * Recurring (Billing automation is executed monthly.)
 *
 * Legacy (Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.)
 */
export type BillingAutomationTriggerTypeEnum = 'Continuous' | 'Recurring' | 'Legacy';

export type BillingAutomationUpdateParameters = {
    /**
     * Unique identifier of the billing automation.
     */
    BillingAutomationId: string;
    /**
     * Name of the billing automation (or null should it not be updated).
     */
    Name?: (StringUpdateValue) | null;
    /**
     * Description of the billing automation (or null should it not be updated).
     */
    Description?: (StringUpdateValue) | null;
    /**
     * List of companies with relations indicating whether the company should be considered as a travel agency or a company in the reservation. This list can only be empty if the `AssignmentTargetType` is `CompanyAsDetails` or `NoCompany`. Set to null if the value is not updated.
     */
    Companies?: (CompanyWithBillingAutomationRelationIEnumerableUpdateValue) | null;
    /**
     * Type of prepayment (or null should it not be updated).
     */
    Prepayment?: (BillingAutomationPrepaymentUpdateValue) | null;
    /**
     * Specifies the type of company assignment to the bill. If set to `NoCompany`, the `BillAggregationType` must be `AggregateByCustomer`. Set to null if the value is not updated.
     */
    AssignmentTargetType?: (BillingAutomationAssignmentTargetTypeUpdateValue) | null;
    /**
     * Defines the aggregation target type for billing automation. If not `AggregateByCustomer`, the `AssignmentTargetType` must be `CompanyAsOwner`. Set to null if the value is not updated.
     */
    BillAggregationType?: (BillingAutomationBillAggregationTypeUpdateValue) | null;
    /**
     * Specifies the order item consumption period type for the billing automation. Required if the `TriggerType` is recurring. Can be null if the value is not updated.
     */
    OrderItemConsumptionPeriod?: (BillingAutomationOrderItemConsumptionPeriodTypeUpdateValue) | null;
    /**
     * Processing start offset. Required if the billing automation `TriggerType` is recurring (or null should it not be updated).
     */
    ProcessingStartOffset?: (StringUpdateValue) | null;
};

export type BillsAddResult = {
    /**
     * The created bills.
     */
    Bills: Array<Bill>;
};

export type BillsCloseResult = {
    /**
     * The closed bills.
     */
    Bills: Array<Bill>;
};

export type BillsResult = {
    /**
     * The filtered bills.
     */
    Bills: Array<Bill>;
    /**
     * Unique identifier of the last and hence oldest bill returned. This can be used in `Limitation` in a subsequent request to fetch the next batch of older bills.
     */
    Cursor?: string | null;
};

export type BillsUpdateResult = {
    /**
     * Updated bills.
     */
    Bills: Array<Bill>;
};

export type BookableServiceData = {
    /**
     * Offset from the start of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the default start of the service; expressed in ISO 8601 duration format.
     */
    StartOffset: string;
    /**
     * Offset from the end of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the default end of the service; expressed in ISO 8601 duration format.
     */
    EndOffset: string;
    /**
     * Offset from the start of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the occupancy start of the service; expressed in ISO 8601 duration format. 'Occupancy start' is used for availability and reporting purposes, it implies the time at which the booked resource is considered occupied.
     */
    OccupancyStartOffset: string;
    /**
     * Offset from the end of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the occupancy end of the service; expressed in ISO 8601 duration format. 'Occupancy end' is used for availability and reporting purposes, it implies the time at which the booked resource is no longer considered occupied.
     */
    OccupancyEndOffset: string;
    /**
     *
     *
     * Day
     *
     * Month
     *
     * Hour
     * @deprecated
     */
    TimeUnit: TimeUnitPeriodEnum;
    /**
     * The length of time or period represented by a [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), for which the service can be booked.
     *
     * Day
     *
     * Month
     *
     * Hour
     */
    TimeUnitPeriod: TimeUnitPeriodEnum;
};

export type BooleanNullableUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: boolean | null;
};

export type BooleanUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: boolean;
};

export type BusinessSegment = {
    /**
     * Unique identifier of the business segment.
     */
    Id: string;
    /**
     * Unique identifier of the `Service`.
     */
    ServiceId: string;
    /**
     * Whether the business segment is still active.
     */
    IsActive: boolean;
    /**
     * Name of the business segment.
     */
    Name: string;
    /**
     * Creation date and time of the business segment in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the business segment in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type BusinessSegmentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested `Business segment`.
     */
    Ids?: Array<(string)> | null;
    /**
     * Unique identifiers of the `Services` from which the business segments are requested.
     */
    ServiceIds?: Array<(string)> | null;
    /**
     * Interval of `Business segment` last update date and time.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type BusinessSegmentResult = {
    /**
     * Business segments.
     */
    BusinessSegments: Array<BusinessSegment>;
    /**
     * Unique identifier of the last and hence oldest business segment item returned. This can be used in Limitation in a subsequent request to fetch the next batch of older business segment.
     */
    Cursor?: string | null;
};

export type CancelOrderItemParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the `OrderItems` to cancel.
     */
    OrderItemIds: Array<(string)>;
};

/**
 * Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.
 */
export type CancellationFeeExtent = 'TimeUnits' | 'Products';

/**
 * Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.
 *
 * Nothing
 *
 * TimeUnits
 *
 * Products
 *
 * Everything
 */
export type CancellationFeeExtentEnum = 'Nothing' | 'TimeUnits' | 'Products' | 'Everything';

export type CancellationPolicy = {
    /**
     * Unique identifier of the cancellation policy.
     */
    Id: string;
    /**
     * Unique identifier of the rate group the cancellation policy belongs to.
     */
    RateGroupId: string;
    /**
     * Date and time of the cancellation policy creation in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Date and time of the cancellation policy update in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    Applicability: CancellationPolicyApplicability;
    /**
     * Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.
     */
    FeeExtent: Array<CancellationFeeExtent>;
    /**
     * Offset for order start (assuming Applicability is set to Start) from which the fee is applied.
     */
    ApplicabilityOffset: string;
    /**
     * Maximum number of time units the cancellation fee is applicable to.
     */
    FeeMaximumTimeUnits?: number | null;
    /**
     * Absolute value of the fee.
     */
    AbsoluteFee: CurrencyValue;
    /**
     * Relative value of the fee, as a percentage of the reservation price.
     */
    RelativeFee: number;
    /**
     * Whether the cancellation policy is still active.
     */
    IsActive: boolean;
};

/**
 * Applicability mode of the cancellation policy.
 */
export type CancellationPolicyApplicability = 'Creation' | 'Start' | 'StartDate';

/**
 * Applicability mode of the cancellation policy.
 *
 * Creation
 *
 * Start
 *
 * StartDate
 */
export type CancellationPolicyApplicabilityEnum = 'Creation' | 'Start' | 'StartDate';

export type CancellationPolicyByRate = {
    /**
     * Unique identifier of the `Rate`.
     */
    RateId: string;
    /**
     * Collection of cancellation policy data.
     */
    Policies: Array<CancellationPolicyData>;
};

export type CancellationPolicyByRateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the `Rate`.
     */
    RateIds: Array<(string)>;
    /**
     * Start of the reservation interval in UTC timezone in ISO 8601 format.
     */
    ReservationStartUtc: string;
    /**
     * End of the reservation interval in UTC timezone in ISO 8601 format.
     */
    ReservationEndUtc: string;
};

export type CancellationPolicyByRateResult = {
    /**
     * List of cancellation policies data grouped by rate.
     */
    CancellationPolicies: Array<CancellationPolicyByRate>;
};

export type CancellationPolicyByReservation = {
    /**
     * Unique identifier of the reservation.
     */
    ReservationId: string;
    /**
     * Collection of cancellation policy data.
     */
    Policies: Array<CancellationPolicyData>;
};

export type CancellationPolicyByReservationParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the `Reservation`.
     */
    ReservationIds: Array<(string)>;
};

export type CancellationPolicyByReservationResult = {
    /**
     * List of cancellation policies data grouped by reservation.
     */
    CancellationPolicies: Array<CancellationPolicyByReservation>;
};

export type CancellationPolicyData = {
    /**
     * Applicability mode of the cancellation policy.
     *
     * Creation
     *
     * Start
     *
     * StartDate
     */
    Applicability: CancellationPolicyApplicabilityEnum;
    /**
     * Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.
     */
    FeeExtents: Array<CancellationFeeExtentEnum>;
    /**
     * Offset for order start (assuming Applicability is set to Start) from which the fee is applied in ISO 8601 duration format.
     */
    ApplicabilityOffset: string;
    /**
     * Maximum number of time units the cancellation fee is applicable to.
     */
    FeeMaximumTimeUnits?: number | null;
    /**
     * Absolute value of the fee.
     */
    AbsoluteFee: CurrencyValue;
    /**
     * Relative value of the fee, as a percentage of the reservation price.
     */
    RelativeFee: number;
};

export type CancellationPolicyFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
     */
    ServiceIds: Array<(string)>;
    /**
     * Unique identifiers of the [Cancellation Policy](https://mews-systems.gitbook.io/connector-api/operations/#cancellationpolicy). Required if no other filter is provided.
     */
    CancellationPolicyIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Rate group](https://mews-systems.gitbook.io/connector-api/operations/rates/#rategroup). Required if no other filter is provided.
     */
    RateGroupIds?: Array<(string)> | null;
    /**
     * Interval in which the Cancellation Policy was updated. Required if no other filter is provided.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted, or both types of record. If not specified, only active records will be returned.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type CancellationPolicyResult = {
    /**
     * The filtered cancellation policies.
     */
    CancellationPolicies: Array<CancellationPolicy>;
    /**
     * Unique identifier of the last and hence oldest cancellation policy returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older cancellation policies.
     */
    Cursor?: string | null;
};

export type CancellationReason = 'Other' | 'ConfirmationMissed' | 'BookedElsewhere' | 'ForceMajeure' | 'GuestComplaint' | 'NoShow' | 'PriceTooHigh' | 'ServiceNotAvailable' | 'InputError' | 'InvalidPayment' | 'TravelAgency' | 'RequestedByGuest' | 'Update' | 'BookingAbandoned' | 'RequestedByBooker';

export type Cashier = {
    /**
     * Unique identifier of the cashier.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Whether the cashier is still active.
     */
    IsActive: boolean;
    /**
     * Name of the cashier.
     */
    Name: string;
    /**
     * Creation date and time of the `Cashier` in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the `Cashier` in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type CashierParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested [Cashier](https://mews-systems.gitbook.io/connector-api/operations/#cashier).
     */
    Ids?: Array<(string)> | null;
    /**
     * Interval in which `Cashier` was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type CashierResult = {
    /**
     * Cashiers in the enterprise.
     */
    Cashiers: Array<Cashier>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type CashierTransaction = {
    /**
     * Unique identifier of the transaction.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the [Cashier](https://mews-systems.gitbook.io/connector-api/operations/cashiers/#cashier).
     */
    CashierId: string;
    /**
     * Unique identifier of the corresponding payment [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).
     */
    PaymentId?: string | null;
    /**
     * Creation date and time of the transaction.
     */
    CreatedUtc: string;
    /**
     * Number of the transaction.
     */
    Number: string;
    /**
     * Additional notes of the transaction.
     */
    Notes?: string | null;
    /**
     * Total price of the transaction
     */
    Amount: CurrencyValueOld;
};

export type CashierTransactionParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the Cashier transactions.
     */
    CashierTransactionIds?: Array<(string)> | null;
    /**
     * Interval in which Cashier transaction was created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
};

export type CashierTransactionResult = {
    /**
     * The collection of cashier transactions.
     */
    CashierTransactions: Array<CashierTransaction>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type CategoryAdjustment = {
    /**
     * Unique identifier of the adjustment category.
     */
    CategoryId: string;
    /**
     * Unique identifier of the parent category that serves as a base price for the current category.
     */
    ParentCategoryId?: string | null;
    /**
     * Absolute value of the adjustment (e.g. `50` represents 50 EUR in case the rate currency is `EUR`).
     */
    AbsoluteValue: number;
    /**
     * Relative value of the adjustment (e.g. `0.5` represents 50% increase).
     */
    RelativeValue: number;
};

export type CategoryAvailability = {
    /**
     * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources#resource-category).
     */
    CategoryId: string;
    /**
     * Absolute availabilities of the resource category in the covered dates.
     */
    Availabilities: Array<(number)>;
    /**
     * Relative availability adjustments set for resource category in the covered dates.
     */
    Adjustments: Array<(number)>;
};

export type CategoryPricing = {
    /**
     * Unique identifier of the category.
     */
    CategoryId: string;
    /**
     * Prices of the rate for the resource category in the covered dates.
     * @deprecated
     */
    Prices: Array<(number)>;
    /**
     * Prices of the rate for the resource category in the covered dates.
     */
    AmountPrices: Array<Amount>;
};

export type ChannelManagerDetails = {
    /**
     * Unique identifier of the `Reservation`.
     */
    ReservationId: string;
    /**
     * Rate code requested by the channel manager for this reservation.
     */
    RequestedRateCode: string;
    /**
     * Name of the Channel Manager associated with this reservation.
     */
    ChannelManagerName?: string | null;
    /**
     * Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number).
     */
    ChannelNumber?: string | null;
    /**
     * Number of the reservation group within a Channel Manager.
     */
    ChannelManagerGroupNumber?: string | null;
    /**
     * Unique number of the reservation within the reservation group.
     */
    ChannelManagerNumber?: string | null;
    /**
     * The timestamp when the Channel Manager reservation was created.
     */
    CreatedUtc: string;
};

export type ChannelManagerReservation = {
    ReservationId?: string;
    RequestedRateCode?: string | null;
};

export type ChargeCreditCardParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    BillId?: string | null;
    /**
     * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category).
     */
    AccountingCategoryId?: string | null;
    /**
     * Unique identifier of the reservation the payment belongs to.
     */
    ReservationId?: string | null;
    /**
     * Amount of the credit card payment.
     */
    Amount: ExtendedAmountParameters;
    /**
     * Additional payment notes.
     */
    Notes?: string | null;
    /**
     * Unique identifier of the [Credit card](https://mews-systems.gitbook.io/connector-api/operations/#credit-card).
     */
    CreditCardId?: string;
    /**
     * Identifier of the payment receipt.
     */
    ReceiptIdentifier?: string | null;
};

export type ChargeCreditCardResult = {
    /**
     * Unique identifier of the [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).
     */
    PaymentId?: string;
};

export type ChargeableCustomer = {
    /**
     * The found customer.
     */
    Customer: Customer;
    /**
     * Reservation of the customer in case they are currently staying in the property.
     */
    Reservation?: (ReservationOld) | null;
};

export type ClearRestrictionParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) to which the restrictions apply.
     */
    ServiceId: string;
    /**
     * Details of the matching conditions and time intervals for clearing restrictions.
     */
    Data: Array<RestrictionClearData>;
};

/**
 * Filter commands by their unique identifiers.
 */
export type CommandsGetAllFilterByCommandIdParameters = CommandsGetAllFilterParameters & {
    /**
     * Unique identifiers of the commands to filter by.
     */
    CommandIds: Array<(string)>;
};

/**
 * Filter commands by the unique identifiers of `Device` and states, with optional filtering by update interval.
 */
export type CommandsGetAllFilterByStatesParameters = CommandsGetAllFilterParameters & {
    /**
     * Unique identifiers of `Device` to filter by.
     */
    DeviceIds: Array<(string)>;
    /**
     * States of the commands to filter by.
     */
    States: Array<DeviceCommandStateEnum>;
    /**
     * Interval in which the commands were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type CommandsGetAllFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
};

export type Companionship = {
    /**
     * Unique identifier of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/#companionship).
     */
    Id?: string;
    /**
     * Unique identifier of [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerId?: string;
    /**
     * Unique identifier of [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
     */
    ReservationGroupId?: string;
    /**
     * Unique identifier of reservation.
     */
    ReservationId?: string | null;
};

export type CompanionshipAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the `Reservation`.
     */
    ReservationId: string;
    /**
     * Unique identifier of the `Customer`.
     */
    CustomerId: string;
};

export type CompanionshipAddResult = {
    /**
     * Identifier of the created `Companionship` entity.
     */
    CompanionshipId: string;
};

export type CompanionshipDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the `Reservation`.
     */
    ReservationId: string;
    /**
     * Unique identifier of the `Customer`.
     */
    CustomerId: string;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the companionships, customers, reservations, and reservation groups should be also returned.
 */
export type CompanionshipExtent = {
    Reservations?: boolean;
    ReservationGroups?: boolean;
    Customers?: boolean;
};

export type CompanionshipFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/#companionship).
     */
    CompanionshipIds?: Array<(string)> | null;
    /**
     * Extent of data to be returned. E.g. it is possible to specify that together with the companionships, customers, reservations, and reservation groups should be also returned.
     */
    Extent: CompanionshipExtent;
    /**
     * Unique identifiers of reservations.
     */
    ReservationIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
     */
    ReservationGroupIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type CompanionshipResult = {
    /**
     * Companionships.
     */
    Companionships?: Array<Companionship> | null;
    /**
     * The accompanied reservations.
     */
    Reservations?: Array<ReservationOld> | null;
    /**
     * The accompanied reservation groups.
     */
    ReservationGroups?: Array<ReservationGroupOld> | null;
    /**
     * Customers that belong to the companionships.
     */
    Customers?: Array<Customer> | null;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type Company = {
    /**
     * Unique identifier of the company.
     */
    Id: string;
    /**
     * Unique identifier of the chain.
     */
    ChainId: string;
    /**
     * Name of the company.
     */
    Name: string;
    /**
     * Unique identifier of mother company.
     */
    MotherCompanyId?: string | null;
    /**
     * Email for issuing invoices to the company.
     */
    InvoicingEmail?: string | null;
    /**
     * The website url of the company.
     */
    WebsiteUrl?: string | null;
    /**
     * The maximum time, when the invoice has to be be paid in ISO 8601 duration format.
     */
    InvoiceDueInterval?: string | null;
    /**
     * Options of the company.
     */
    Options: CompanyOptions;
    /**
     * Credit rating to define creditworthiness of the company.
     */
    CreditRating: CreditRating;
    /**
     * The internal segmentation of a company, e.g. sales department.
     */
    Department?: string | null;
    /**
     * The Dun & Bradstreet unique 9-digit DUNS number.
     */
    DunsNumber?: string | null;
    /**
     * External system identifier - custom identifier used by an external system such as an external database.
     */
    ReferenceIdentifier?: string | null;
    /**
     * Accounting code of the company.
     */
    AccountingCode?: string | null;
    /**
     * Additional tax identifier of the company.
     */
    AdditionalTaxIdentifier?: string | null;
    /**
     * Billing code of the company.
     */
    BillingCode?: string | null;
    /**
     * Other contact details, such as telephone, email or similar.
     */
    Contact?: string | null;
    /**
     * Contact person of the company.
     */
    ContactPerson?: string | null;
    /**
     * Electronic invoice identifier of the company.
     * @deprecated
     */
    ElectronicInvoiceIdentifier?: string | null;
    /**
     * Fiscal or legal identifier of the company.
     */
    Identifier?: string | null;
    /**
     * Iata of the company.
     */
    Iata?: string | null;
    /**
     * Whether the company is still active.
     */
    IsActive: boolean;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Unique number of the company.
     */
    Number: number;
    /**
     * Tax identification number of the company.
     */
    TaxIdentifier?: string | null;
    /**
     * Contact telephone number.
     */
    Telephone?: string | null;
    /**
     * Date of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) creation date and time.
     */
    CreatedUtc?: string | null;
    /**
     * Date of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) last update date and time.
     */
    UpdatedUtc?: string | null;
    /**
     * @deprecated
     */
    Address?: (OldAddress) | null;
    /**
     * Unique identifier of the company [Address](https://mews-systems.gitbook.io/connector-api/operations/addresses/#account-address).
     */
    AddressId?: string | null;
    /**
     * Unique identifier of the account (Customer) to which this company is linked.
     */
    MergeTargetId?: string | null;
    /**
     * @deprecated
     */
    TaxIdentificationNumber?: string | null;
    /**
     * Identifier of company from external system.
     */
    ExternalIdentifier?: string | null;
};

export type CompanyAccount = {
    /**
     * Unique identifier of the chain.
     */
    ChainId: string;
    /**
     * Creation date and time of the `Company` in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the `Company` in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Unique identifier of the user who updated the company.
     */
    UpdaterProfileId: string;
    /**
     * Email address of the company.
     */
    Email?: string | null;
    /**
     * Tax identification number of the company.
     */
    TaxIdentifier?: string | null;
    /**
     * Billing code of the company.
     */
    BillingCode?: string | null;
    /**
     * Accounting code of the company.
     */
    AccountingCode?: string | null;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Name of the company.
     */
    Name: string;
    /**
     * Unique identifier of mother company.
     */
    MotherCompanyId?: string | null;
    /**
     * The website url of the company.
     */
    WebsiteUrl?: string | null;
    /**
     * The maximum time (in ISO 8601 duration format), when the invoice has to be be paid.
     */
    InvoiceDueInterval?: string | null;
    /**
     * Credit rating to define credit worthiness of the company.
     *
     * CreditOk (Company can book services.)
     *
     * PaymentRequiredUpfront (Company must pay upfront.)
     *
     * LocalDecisionRequired (Requires local approval.)
     */
    CreditRatingBasic?: (CreditRatingBasicEnum) | null;
    /**
     * The internal segmentation of a company, e.g. sales department.
     */
    Department?: string | null;
    /**
     * The Dun & Bradstreet unique 9-digit DUNS number.
     */
    DunsNumber?: string | null;
    /**
     * External system identifier - custom identifier used by an external system such as an external database.
     */
    ReferenceId?: string | null;
    /**
     * Identifier of company from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Additional tax identifier of the company.
     */
    AdditionalTaxIdentifier?: string | null;
    /**
     * Other contact details, such as telephone, email or similar.
     */
    Contact?: string | null;
    /**
     * Contact person of the company.
     */
    ContactPerson?: string | null;
    /**
     * Fiscal identifier of the company.
     */
    FiscalIdentifier?: string | null;
    /**
     * Iata of the company.
     */
    Iata?: string | null;
    /**
     * Contact telephone number.
     */
    Telephone?: string | null;
    /**
     * Unique identifier of the `Source`.
     */
    SourceId?: string | null;
    /**
     * Classifications of the company.
     */
    Classifications: CompanyAccountClassifications;
    /**
     * Options of the company.
     */
    Options: CompanyAccountOptions;
};

export type CompanyAccountClassifications = {
    /**
     * Corporate.
     */
    Corporate?: boolean;
    /**
     * Internal.
     */
    Internal?: boolean;
    /**
     * Private.
     */
    Private?: boolean;
    /**
     * Online travel agency.
     */
    OnlineTravelAgency?: boolean;
    /**
     * Global distribution system.
     */
    GlobalDistributionSystem?: boolean;
    /**
     * Marketing.
     */
    Marketing?: boolean;
    /**
     * Inactive.
     */
    Inactive?: boolean;
    /**
     * Government Entity
     */
    GovernmentEntity?: boolean;
};

export type CompanyAccountOptions = {
    /**
     * Whether the company is invoiceable or not.
     */
    Invoiceable?: boolean;
    /**
     * Whether the company has an additional fee applied for invoicing or not.
     */
    AddFeesToInvoices?: boolean;
    /**
     * Whether tax-deducted payments should be automatically added to invoices.
     */
    AddTaxDeductedPaymentToInvoices?: boolean;
};

export type CompanyAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Name of the company.
     */
    Name: string;
    /**
     * Unique identifier of the mother company.
     */
    MotherCompanyId?: string | null;
    /**
     * Email for issuing invoices to the company.
     */
    InvoicingEmail?: string | null;
    /**
     * The website url of the company.
     */
    WebsiteUrl?: string | null;
    /**
     * The maximum time, when the invoice has to be be paid in ISO 8601 duration format.
     */
    InvoiceDueInterval?: string | null;
    /**
     * Options of the company.
     */
    Options: CompanyOptionsParameters;
    /**
     * Credit rating to define creditworthiness of the company.
     */
    CreditRating?: (CreditRatingParameters) | null;
    /**
     * The internal segmentation of a company, e.g. sales department.
     */
    Department?: string | null;
    /**
     * The Dun & Bradstreet unique 9-digit DUNS number.
     */
    DunsNumber?: string | null;
    /**
     * External system identifier - custom identifier used by an external system such as an external database.
     */
    ReferenceIdentifier?: string | null;
    /**
     * Accounting code of the company.
     */
    AccountingCode?: string | null;
    /**
     * Additional tax identifer of the company.
     */
    AdditionalTaxIdentifier?: string | null;
    /**
     * Billing code of the company.
     */
    BillingCode?: string | null;
    /**
     * Other contact details, such as telephone, email or similar.
     */
    Contact?: string | null;
    /**
     * Contact person of the company.
     */
    ContactPerson?: string | null;
    /**
     * Fiscal or legal identifier of the company.
     */
    Identifier?: string | null;
    /**
     * Iata of the company.
     */
    Iata?: string | null;
    /**
     * Notes of the company.
     */
    Notes?: string | null;
    /**
     * Tax identification number of the company.
     */
    TaxIdentifier?: string | null;
    /**
     * Contact telephone number.
     */
    Telephone?: string | null;
    /**
     * New address details.
     */
    Address?: (AddressParameters) | null;
    /**
     * Identifier of the company from external system.
     */
    ExternalIdentifier?: string | null;
};

export type CompanyClassificationUpdateParameters = {
    /**
     * Corporate (or `null` if the value should not be updated).
     */
    Corporate?: (BooleanUpdateValue) | null;
    /**
     * Internal (or `null` if the value should not be updated).
     */
    Internal?: (BooleanUpdateValue) | null;
    /**
     * Private (or `null` if the value should not be updated).
     */
    Private?: (BooleanUpdateValue) | null;
    /**
     * Online travel agency (or `null` if the value should not be updated).
     */
    OnlineTravelAgency?: (BooleanUpdateValue) | null;
    /**
     * Global distribution system (or `null` if the value should not be updated).
     */
    GlobalDistributionSystem?: (BooleanUpdateValue) | null;
    /**
     * Marketing (or `null` if the value should not be updated).
     */
    Marketing?: (BooleanUpdateValue) | null;
    /**
     * Inactive (or `null` if the value should not be updated).
     */
    Inactive?: (BooleanUpdateValue) | null;
    /**
     * Government Entity (or `null` if the value should not be updated).
     */
    GovernmentEntity?: (BooleanUpdateValue) | null;
};

export type CompanyClassifications = {
    Corporate?: boolean;
    Internal?: boolean;
    Private?: boolean;
    OnlineTravelAgency?: boolean;
    GlobalDistributionSystem?: boolean;
    Marketing?: boolean;
    Inactive?: boolean;
    GovernmentEntity?: boolean;
};

export type CompanyClassificationsParameters = {
    Corporate?: boolean;
    Internal?: boolean;
    Private?: boolean;
    OnlineTravelAgency?: boolean;
    GlobalDistributionSystem?: boolean;
    Marketing?: boolean;
    Inactive?: boolean;
    GovernmentEntity?: boolean;
};

export type CompanyContractFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifier of the Travel agency contract to fetch.
     */
    CompanyContractIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) assigned with Travel agency contracts.
     */
    CompanyIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) where the Travel agency contract belong to.
     */
    ServiceIds: Array<(string)>;
    UpdatedUtc?: (TimeFilterInterval) | null;
    ActivityStates?: Array<ActivityStates> | null;
};

export type CompanyExtent = {
    Inactive?: boolean;
};

export type CompanyFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
     */
    ChainIds?: Array<(string)> | null;
    /**
     * Unique identifiers of mother `Company`.
     */
    MotherCompanyIds?: Array<(string)> | null;
    CreatedUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * @deprecated
     */
    TimeFilter?: CompanyTimeFilter | null;
    /**
     * @deprecated
     */
    StartUtc?: string | null;
    /**
     * @deprecated
     */
    EndUtc?: string | null;
    /**
     * Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/#company).
     */
    Ids?: Array<(string)> | null;
    /**
     * Identifiers of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) from external system.
     */
    ExternalIdentifiers?: Array<(string)> | null;
    /**
     * Names of [Companies](https://mews-systems.gitbook.io/connector-api/operations/#company).
     */
    Names?: Array<(string)> | null;
    /**
     * Whether to return only active, only deleted, or both types of record. If not specified, both active and deleted records will be returned.
     */
    ActivityStates?: Array<ActivityStates> | null;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation?: (Limitation) | null;
};

/**
 * Options of the company.
 */
export type CompanyOptionUpdateParameters = {
    /**
     * Whether the company is invoiceable or not (or `null` if the `Invoiceable` field should not be updated).
     */
    Invoiceable?: (BooleanUpdateValue) | null;
    /**
     * Whether the company has an additional fee applied for invoicing or not (or `null` if the `AddFeesToInvoices` field should not be updated).
     */
    AddFeesToInvoices?: (BooleanUpdateValue) | null;
    /**
     * Whether tax-deducted payments should be automatically added to invoices (or `null` if the `AddTaxDeductedPaymentToInvoices` field should not be updated).
     */
    AddTaxDeductedPaymentToInvoices?: (BooleanUpdateValue) | null;
};

/**
 * Options of the company.
 */
export type CompanyOptions = {
    /**
     * Whether the company is invoiceable or not.
     */
    Invoiceable?: boolean;
    /**
     * Whether the company has an additional fee applied for invoicing or not.
     */
    AddFeesToInvoices?: boolean;
    /**
     * Whether tax-deducted payments should be automatically added to invoices.
     */
    AddTaxDeductedPaymentToInvoices?: boolean;
};

/**
 * Options of the company.
 */
export type CompanyOptionsParameters = {
    /**
     * Whether the company is invoiceable or not.
     */
    Invoiceable?: boolean;
    /**
     * Whether the company has an additional fee applied for invoicing or not.
     */
    AddFeesToInvoices?: boolean;
    /**
     * Whether tax-deducted payments should be automatically added to invoices.
     */
    AddTaxDeductedPaymentToInvoices?: boolean;
};

export type CompanyRelationsParameters = {
    /**
     * Indicates whether the billing automation will apply if the company added to a reservation is a partner company.
     */
    PartnerCompany?: boolean;
    /**
     * Indicates whether the billing automation will apply if the company added to a reservation is a travel agency.
     */
    TravelAgency?: boolean;
};

export type CompanyResult = {
    /**
     * The company profiles of the enterprise.
     */
    Companies: Array<Company>;
    /**
     * Unique identifier of the last and hence oldest company item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older companies. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message; this is true even when using Extents set to false so that no actual data is returned.
     */
    Cursor?: string | null;
};

export type CompanyTimeFilter = 'Created' | 'Updated';

export type CompanyUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/#company).
     */
    CompanyId: string;
    /**
     * Name of the company (or `null` if the name should not be updated).
     */
    Name?: (StringUpdateValue) | null;
    /**
     * Unique identifier of the mother company (or `null` if the mother company should not be updated).
     */
    MotherCompanyId?: (GuidNullableUpdateValue) | null;
    /**
     * Email for issuing invoices to the company  (or `null` if the email for issuing invoices should not be updated).
     */
    InvoicingEmail?: (StringUpdateValue) | null;
    /**
     * The website url of the company (or `null` if the website url should not be updated).
     */
    WebsiteUrl?: (StringUpdateValue) | null;
    /**
     * The maximum time, when the invoice has to be be paid in ISO 8601 duration format (or `null` if the interval should not be updated).
     */
    InvoiceDueInterval?: (StringUpdateValue) | null;
    /**
     * Options of the company (or `null` if the company options should not be updated).
     */
    Options?: (CompanyOptionUpdateParameters) | null;
    /**
     * Credit rating to define creditworthiness of the company (or `null` if the credit rating should not be updated).
     */
    CreditRating?: (CreditRatingUpdateParameters) | null;
    /**
     * The internal segmentation of a company, e.g. sales department (or `null` if the department should not be updated).
     */
    Department?: (StringUpdateValue) | null;
    /**
     * The Dun & Bradstreet unique 9-digit DUNS number (or `null` if the Duns number should not be updated).
     */
    DunsNumber?: (StringUpdateValue) | null;
    /**
     * External system identifier - custom identifier used by an external system such as an external database (or `null` if the identifier should not be updated).
     */
    ReferenceIdentifier?: (StringUpdateValue) | null;
    /**
     * Accounting code of the company (or `null` if the accounting code should not be updated).
     */
    AccountingCode?: (StringUpdateValue) | null;
    /**
     * Additional tax identifier of the company (or `null` if the additional tax identifier should not be updated).
     */
    AdditionalTaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Billing code of the company (or `null` if the billing code should not be updated).
     */
    BillingCode?: (StringUpdateValue) | null;
    /**
     * Other contact details, such as telephone, email or similar (or `null` if the contact should not be updated).
     */
    Contact?: (StringUpdateValue) | null;
    /**
     * Contact person of the company (or `null` if the contact person should not be updated).
     */
    ContactPerson?: (StringUpdateValue) | null;
    /**
     * Fiscal or legal identifier of the company (or `null` if the identifier should not be updated).
     */
    Identifier?: (StringUpdateValue) | null;
    /**
     * Iata of the company (or `null` if the Iata should not be updated).
     */
    Iata?: (StringUpdateValue) | null;
    /**
     * Notes of the company (or `null` if the notes should not be updated).
     */
    Notes?: (StringUpdateValue) | null;
    /**
     * Tax identification number of the company (or `null` if the tax identifier should not be updated).
     */
    TaxIdentifier?: (StringUpdateValue) | null;
    /**
     * Contact telephone number (or `null` if the telephone number should not be updated).
     */
    Telephone?: (StringUpdateValue) | null;
    /**
     * Identifier of the company from external system (or `null` if the External Identifier should not be updated).
     */
    ExternalIdentifier?: (StringUpdateValue) | null;
};

export type CompanyWithBillingAutomationRelation = {
    /**
     * Unique identifier of the company.
     */
    CompanyId: string;
    /**
     * Company relations.
     */
    CompanyRelations: CompanyRelationsParameters;
};

export type CompanyWithBillingAutomationRelationIEnumerableUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: Array<CompanyWithBillingAutomationRelation> | null;
};

export type Configuration = {
    /**
     * Current server date and time in UTC timezone in ISO 8601 format.
     */
    NowUtc: string;
    /**
     * The enterprise (e.g. hotel, hostel) associated with the access token.
     */
    Enterprise: Enterprise;
    /**
     * The reservable service (e.g. accommodation, parking) associated with the access token of the service scoped integration.
     */
    Service?: (Service) | null;
    /**
     * Contains information about payment card storage.
     */
    PaymentCardStorage?: (PaymentCardStorage) | null;
    /**
     * Whether the identity documents for this enterprise include the value of identity document number as required by the legal environment. When `false`, the number is not required, and an empty string can be used in write operations. In read operations, an empty string is returned when an empty string was provided for the number.
     */
    IsIdentityDocumentNumberRequired?: boolean;
};

export type ConfigurationFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/#enterprise), defaults to the enterprise associated with the given access token.
     */
    EnterpriseId?: string | null;
};

export type ConfirmReservationParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the reservations to confirm.
     */
    ReservationIds: Array<(string)>;
    /**
     * Wheter the confirmation email is sent. Default value is true.
     */
    SendConfirmationEmail?: boolean | null;
};

export type ConnectorApiExceptionResult = {
    Message?: string | null;
    RequestId?: string | null;
    Details?: unknown;
};

export type ContractResult = {
    /**
     * The updated travel agency contracts.
     */
    TravelAgencyContracts: Array<TravelAgencyContract>;
    /**
     * Unique identifier of the last and hence oldest contract returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older messages.
     */
    Cursor?: string | null;
};

export type Coproduct = {
    Discriminator: string;
    Value: unknown;
};

export type CoproductParameters = {
    Discriminator?: string | null;
    Value?: (JToken) | null;
};

export type CostParameters = {
    Amount: number;
    Currency: string;
    Tax: number;
};

export type Counter = {
    /**
     * Unique identifier of the counter.
     */
    Id: string;
    EnterpriseId: string;
    /**
     * Name of the counter.
     */
    Name: string;
    /**
     * Whether the counter is used by default.
     */
    IsDefault: boolean;
    /**
     * Current value the counter.
     */
    Value: number;
    /**
     * Format the counter is displayed in.
     */
    Format: string;
    Type: EnterpriseScopeCounterDiscriminator;
    /**
     * Creation date and time of the counter in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the counter in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type CounterFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    CounterIds?: Array<(string)> | null;
    /**
     * Type of the counter. If not specified, the operation returns all types.
     */
    Type?: EnterpriseScopeCounterDiscriminator | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type CounterResult = {
    /**
     * All types of counters.
     */
    Counters: Array<Counter>;
    /**
     * The counters used to count closed [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**
     * @deprecated
     */
    BillCounters: Array<Counter>;
    /**
     * The counters used to count Pro Forma invoices for [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**
     * @deprecated
     */
    ProformaCounters: Array<Counter>;
    /**
     * The counters used to count bill previews for [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**
     * @deprecated
     */
    BillPreviewCounters: Array<Counter>;
    /**
     * The counters used to count service orders (for example reservations). **Deprecated!**
     * @deprecated
     */
    ServiceOrderCounters: Array<Counter>;
    /**
     * The counters used to count registration cards. **Deprecated!**
     * @deprecated
     */
    RegistrationCardCounters: Array<Counter>;
    Cursor?: string | null;
};

export type Country = {
    /**
     * ISO 3166-1 alpha-2 code, e.g. `CZ` or `SK`.
     */
    Code: string;
    /**
     * ISO 3166-1 alpha-2 code of the sovereign country. May differ from `Code` for dependent territories.
     */
    SovereignCountryCode: string;
    /**
     * English name of the country.
     */
    EnglishName: string;
};

export type CountryGroup = {
    /**
     * Group code, e.g. `EU`, `SCHENGEN`, `NORDIC`...
     */
    Code: string;
    /**
     * English name of the country group.
     */
    EnglishName: string;
    /**
     * Codes of countries included in the group, in ISO 3166-1 alpha-2 format.
     */
    CountryCodes: Array<(string)>;
};

export type CountryResult = {
    /**
     * The supported countries.
     */
    Countries: Array<Country>;
    /**
     * The supported country subdivisions.
     */
    CountrySubdivisions: Array<CountrySubdivision>;
    /**
     * Country-specific rules
     */
    CountryRules: Array<CountryRule>;
    /**
     * The supported country groups.
     */
    CountryGroups: Array<CountryGroup>;
};

/**
 * Country-specific rules
 */
export type CountryRule = {
    /**
     * ISO 3166-1 alpha-2 code, e.g. US or GB.
     */
    CountryCode: string;
    /**
     * Whether the country requires expiration date for identity card.
     */
    IdentityCardExpirationDateNotRequired: boolean;
    /**
     * Whether the country requires expiration date for driver's license.
     */
    DriverLicenceExpirationDateNotRequired: boolean;
};

export type CountrySubdivision = {
    /**
     * ISO 3166-2 code of the administrative division, e.g AU-QLD.
     */
    Code: string;
    /**
     * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries#country).
     */
    CountryCode: string;
    /**
     * English name of the country subdivision.
     */
    EnglishName: string;
};

export type CreditCard = {
    /**
     * Unique identifier of the credit card.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the credit card [owner](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerId: string;
    /**
     * Whether the credit card is still active.
     */
    IsActive: boolean;
    /**
     * State of the credit card.
     */
    State?: string | null;
    /**
     * Kind of the credit card.
     */
    Kind?: string | null;
    /**
     * Format of the credit card.
     */
    Format?: string | null;
    /**
     * Type of the credit card.
     */
    Type?: string | null;
    /**
     * Obfuscated credit card number. At most first six digits and last four digits can be specified, otherwise the digits are replaced with *.
     */
    ObfuscatedNumber?: string | null;
    /**
     * Expiration of the credit card in format MM/YYYY.
     */
    Expiration?: string | null;
    /**
     * Creation date and time of the credit card in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the credit card in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

/**
 * Credit card details provided by PCI provider.
 */
export type CreditCardData = {
    readonly MaskedStorageData?: string | null;
    StorageData: string;
    /**
     * @deprecated
     */
    ObfuscatedNumber?: string | null;
    Expiration: string;
};

export type CreditCardFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Credit cards](https://mews-systems.gitbook.io/connector-api/operations/#credit-card). Required if no other filter is provided.
     */
    CreditCardIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type CreditCardParameters = {
    /**
     * Type of the credit card, one of: `Visa`, `MasterCard`, `Amex`, `Discover`, `DinersClub`, `Jcb`, `EnRoute`, `Maestro`, `UnionPay`.
     */
    Type: string;
    /**
     * Obfuscated credit card number. At most first six digits and last four digits can be specified, the digits in between should be replaced with `*`. It is possible to provide even more obfuscated number or just last four digits. **Never provide full credit card number**. For example `411111******1111`.
     */
    Number: string;
    /**
     * Expiration of the credit card in format `MM/YYYY`, e.g. `12/2016` or `04/2017`.
     */
    Expiration?: string | null;
    /**
     * Name of the card holder.
     */
    Name: string;
};

export type CreditCardPaymentParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of an open bill of the customer where to assign the payment.
     */
    BillId?: string | null;
    /**
     * Unique identifier of an [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) to be assigned to the credit card payment.
     */
    AccountingCategoryId?: string | null;
    /**
     * Unique identifier of the reservation the payment belongs to.
     */
    ReservationId?: string | null;
    /**
     * Amount of the credit card payment.
     */
    Amount: ExtendedAmountParameters;
    /**
     * Additional payment notes.
     */
    Notes?: string | null;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerId: string;
    CreditCard: CreditCardParameters;
    /**
     * Identifier of the payment receipt.
     */
    ReceiptIdentifier?: string | null;
};

export type CreditCardResult = {
    /**
     * The credit cards.
     */
    CreditCards?: Array<CreditCard> | null;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type CreditCardTransaction = {
    /**
     * Unique identifier of the `PaymentItem`.
     */
    PaymentId: string;
    /**
     * Identifier of the settlement.
     */
    SettlementId?: string | null;
    /**
     * Settlement date and time in UTC timezone in ISO 8601 format.
     */
    SettledUtc?: string | null;
    /**
     * Transaction fee - this includes an estimate of bank charges.
     */
    Fee?: (ExtendedAmount) | null;
    /**
     * Transaction fee (adjusted) - this is the final confirmed transaction fee, including confirmed bank charges.
     */
    AdjustedFee?: (ExtendedAmount) | null;
    /**
     * Charged amount of the transaction.
     */
    ChargedAmount: ExtendedAmount;
    /**
     * Settled amount of the transaction.
     */
    SettledAmount?: (ExtendedAmount) | null;
};

/**
 * Credit rating to define creditworthiness of the company.
 */
export type CreditRating = {
    /**
     * Indicates the credit status of a company.
     *
     * CreditOk (Company can book services.)
     *
     * PaymentRequiredUpfront (Company must pay upfront.)
     *
     * LocalDecisionRequired (Requires local approval.)
     */
    Basic?: (CreditRatingBasicEnum) | null;
};

export type CreditRatingBasic = 'CreditOk' | 'PaymentRequiredUpfront' | 'LocalDecisionRequired';

/**
 *
 *
 * CreditOk (Company can book services.)
 *
 * PaymentRequiredUpfront (Company must pay upfront.)
 *
 * LocalDecisionRequired (Requires local approval.)
 */
export type CreditRatingBasicEnum = 'CreditOk' | 'PaymentRequiredUpfront' | 'LocalDecisionRequired';

export type CreditRatingBasicUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: CreditRatingBasicEnum;
};

/**
 * Credit rating to define creditworthiness of the company.
 */
export type CreditRatingParameters = {
    /**
     * Indicates the credit status of a company.
     *
     * CreditOk (Company can book services.)
     *
     * PaymentRequiredUpfront (Company must pay upfront.)
     *
     * LocalDecisionRequired (Requires local approval.)
     */
    Basic?: (CreditRatingBasicEnum) | null;
};

/**
 * Credit rating to define creditworthiness of the company.
 */
export type CreditRatingUpdateParameters = {
    /**
     * Credit status of a company (or `null` if the credit status should not be updated).
     */
    Basic?: (CreditRatingBasicUpdateValue) | null;
};

export type Currency = {
    /**
     * ISO-4217 three-letter code, e.g. USD or GBP.
     */
    Code: string;
    /**
     * Precision of the currency (count of decimal places).
     */
    Precision: number;
};

export type CurrencyAcceptance = {
    /**
     * ISO-4217 code of the `Currency`.
     */
    Currency: string;
    /**
     * Whether the currency is a default accounting currency.
     */
    IsDefault: boolean;
    /**
     * Whether the currency is enabled for usage.
     */
    IsEnabled: boolean;
};

export type CurrencyAcceptanceFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the Exchange Rates. If not specified, the operation returns all exchange rates.
     */
    Ids?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/configuration/#enterprise). If not specified, the operation returns the exchange rates for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
};

export type CurrencyResult = {
    /**
     * The supported currencies.
     */
    Currencies: Array<Currency>;
};

/**
 * Absolute value of the fee.
 */
export type CurrencyValue = {
    Currency: string;
    Value: number;
};

/**
 * Total price of the reservation.
 */
export type CurrencyValueOld = {
    Currency: string;
    Value?: number | null;
    /**
     * @deprecated
     */
    Net?: number | null;
    /**
     * @deprecated
     */
    Tax?: number | null;
    /**
     * @deprecated
     */
    TaxRate?: number | null;
};

export type Customer = {
    /**
     * Unique identifier of the customer.
     */
    Id: string;
    /**
     * Unique identifier of the chain.
     */
    ChainId: string;
    /**
     * Number of the customer.
     */
    Number: string;
    /**
     * Title of the customer.
     *
     * Mister (Mr.)
     *
     * Miss (Ms.)
     *
     * Misses (Mrs.)
     */
    Title?: (Title) | null;
    /**
     * Sex of the customer.
     *
     * Male
     *
     * Female
     */
    Sex?: (SexEnum) | null;
    /**
     * First name of the customer.
     */
    FirstName?: string | null;
    /**
     * Last name of the customer.
     */
    LastName: string;
    /**
     * Second last name of the customer.
     */
    SecondLastName?: string | null;
    /**
     * ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries/#country).
     */
    NationalityCode?: string | null;
    /**
     * Language and culture code of the customer's preferred language, according to their profile. For example: `en-GB`, `fr-CA`.
     */
    PreferredLanguageCode?: string | null;
    /**
     * Language and culture code of the customer's language, based on multiple sources. These sources include the preferred language specified in internal data based on previous bookings, and the preferred language of the customer specified in their profile. If neither of these sources are present, we use the native language based on the customer's nationality. The format is, for example, `en-US` or `fr-FR`.
     */
    LanguageCode?: string | null;
    /**
     * Date of birth in ISO 8601 format.
     */
    BirthDate?: string | null;
    /**
     * Place of birth.
     */
    BirthPlace?: string | null;
    /**
     * Occupation of the customer.
     */
    Occupation?: string | null;
    /**
     * Email address of the customer.
     */
    Email?: string | null;
    /**
     * Whether the customer's email address is a temporary email address from an OTA. For more details, see the [product documentation](https://help.mews.com/s/article/how-to-maintain-ota-guest-profiles-with-verified-email-addresses-obtained-from-the-guest-portal).
     */
    HasOtaEmail?: boolean;
    /**
     * Phone number of the customer (possibly mobile).
     */
    Phone?: string | null;
    /**
     * Tax identification number of the customer.
     */
    TaxIdentificationNumber?: string | null;
    /**
     * Loyalty code of the customer.
     */
    LoyaltyCode?: string | null;
    /**
     * Accounting code of the customer.
     */
    AccountingCode?: string | null;
    /**
     * Billing code of the customer.
     */
    BillingCode?: string | null;
    /**
     * Internal notes about the customer.
     */
    Notes?: string | null;
    /**
     * Registration number of the customer's car.
     */
    CarRegistrationNumber?: string | null;
    /**
     * Customer's dietary requirements, e.g. Vegan, Halal.
     */
    DietaryRequirements?: string | null;
    /**
     * Creation date and time of the customer in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the customer in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * @deprecated
     */
    Passport?: (IdentityDocument) | null;
    /**
     * @deprecated
     */
    IdentityCard?: (IdentityDocument) | null;
    /**
     * @deprecated
     */
    Visa?: (IdentityDocument) | null;
    /**
     * @deprecated
     */
    DriversLicense?: (IdentityDocument) | null;
    /**
     * @deprecated
     */
    Address?: (OldAddress) | null;
    /**
     * Unique identifier of the `Address` of the customer.
     */
    AddressId?: string | null;
    /**
     * Classifications of the customer.
     */
    Classifications: Array<CustomerClassificationsEnum>;
    /**
     * Options of the customer.
     */
    Options: Array<CustomerOptionsEnum>;
    /**
     * Value of Italian destination code.
     */
    ItalianDestinationCode?: string | null;
    /**
     * Value of Italian fiscal code.
     */
    ItalianFiscalCode?: string | null;
    /**
     * Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) the customer is associated with.
     */
    CompanyId?: string | null;
    /**
     * Unique identifier of the account ([Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer)) to which this customer is linked.
     */
    MergeTargetId?: string | null;
    /**
     * [Activity State](https://mews-systems.gitbook.io/connector-api/operations/#activity-state) of customer record, i.e. whether active or deleted.
     * @deprecated
     */
    ActivityState?: string | null;
    /**
     * Whether the customer record is still active.
     */
    IsActive: boolean;
    /**
     * A list of room preferences, such as view type, bed type, and amenities.
     */
    PreferredSpaceFeatures: Array<ResourceFeatureClassification>;
    /**
     * Unique identifier of the user who created the customer.
     */
    CreatorProfileId: string;
    /**
     * Unique identifier of the user who last updated the customer.
     */
    UpdaterProfileId: string;
};

/**
 * Updated customer data.
 */
export type CustomerAccount = {
    /**
     * Unique identifier of the chain.
     */
    ChainId: string;
    /**
     * Creation date and time of the customer in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the customer in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Unique identifier of the user who updated the customer.
     */
    UpdaterProfileId: string;
    /**
     * Email address of the customer.
     */
    Email?: string | null;
    /**
     * Tax identification number of the customer.
     */
    TaxIdentifier?: string | null;
    /**
     * Billing code of the customer.
     */
    BillingCode?: string | null;
    /**
     * Accounting code of the customer.
     */
    AccountingCode?: string | null;
    /**
     * Internal notes about the customer.
     */
    Notes?: string | null;
    /**
     * Last name of the customer.
     */
    LastName: string;
    /**
     * First name of the customer.
     */
    FirstName?: string | null;
    /**
     * Second last name of the customer.
     */
    SecondLastName?: string | null;
    /**
     * Place of birth.
     */
    BirthPlace?: string | null;
    /**
     * Telephone number of the customer (possibly mobile).
     */
    Telephone?: string | null;
    /**
     * Occupation of the customer.
     */
    Occupation?: string | null;
    /**
     * Registration number of the customer's car.
     */
    CarRegistrationNumber?: string | null;
    /**
     * Dietary requirements of the customer.
     */
    DietaryRequirements?: string | null;
    /**
     * Loyalty code of the customer.
     */
    LoyaltyCode?: string | null;
    /**
     * ISO 3166-1 code of the `Country`.
     */
    NationalityCode?: string | null;
    /**
     * Unique identifier of `Company` the customer is associated with.
     */
    CompanyId?: string | null;
    /**
     * Date of birth in ISO 8601 format.
     */
    BirthDate?: string | null;
    /**
     * Sex of the customer.
     */
    Sex?: string | null;
    /**
     * Title prefix of the customer.
     *
     * Mister (Mr.)
     *
     * Miss (Ms.)
     *
     * Misses (Mrs.)
     */
    Title?: (Title) | null;
    /**
     * Language and culture code of the customer's preferred language. E.g. `en-US` or `fr-FR`.
     */
    PreferredLanguageCode?: string | null;
    /**
     * Options of the customer.
     */
    Options: CustomerAccountOptions;
    /**
     * Classifications of the customer.
     */
    Classifications: CustomerAccountClassifications;
    /**
     * Legal entity identifiers of the customer.
     */
    LegalEntityIdentifiers: LegalEntityIdentifiers;
};

export type CustomerAccountClassifications = {
    /**
     * Paymaster account.
     */
    PaymasterAccount?: boolean;
    /**
     * Blacklist.
     */
    Blacklist?: boolean;
    /**
     * Media.
     */
    Media?: boolean;
    /**
     * Loyalty program.
     */
    LoyaltyProgram?: boolean;
    /**
     * Previous complaint.
     */
    PreviousComplaint?: boolean;
    /**
     * Returning.
     */
    Returning?: boolean;
    /**
     * Staff.
     */
    Staff?: boolean;
    /**
     * Friend or family.
     */
    FriendOrFamily?: boolean;
    /**
     * Top management.
     */
    TopManagement?: boolean;
    /**
     * Important.
     */
    Important?: boolean;
    /**
     * Very important.
     */
    VeryImportant?: boolean;
    /**
     * Problematic.
     */
    Problematic?: boolean;
    /**
     * Cash list.
     */
    Cashlist?: boolean;
    /**
     * Disabled person.
     */
    DisabledPerson?: boolean;
    /**
     * Military.
     */
    Military?: boolean;
    /**
     * Airline.
     */
    Airline?: boolean;
    /**
     * Health compliant.
     */
    HealthCompliant?: boolean;
    /**
     * In room.
     */
    InRoom?: boolean;
    /**
     * Waiting for room.
     */
    WaitingForRoom?: boolean;
    /**
     * Student.
     */
    Student?: boolean;
};

export type CustomerAccountOptions = {
    /**
     * Send marketing emails.
     */
    SendMarketingEmails?: boolean;
    /**
     * Invoiceable.
     */
    Invoiceable?: boolean;
    /**
     * Bill address objection.
     */
    BillAddressObjection?: boolean;
};

export type CustomerAddFileResult = {
    /**
     * Unique identifier of the uploaded file.
     */
    FileId: string;
};

export type CustomerAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Title prefix of the customer.
     */
    Title?: Title | null;
    /**
     * First name of the customer.
     */
    FirstName?: string | null;
    /**
     * Last name of the customer.
     */
    LastName: string;
    /**
     * Second last name of the customer.
     */
    SecondLastName?: string | null;
    /**
     * ISO 3166-1 code of the `Country`.
     */
    NationalityCode?: string | null;
    /**
     * Sex of the customer.
     */
    Sex?: Sex | null;
    /**
     * Date of birth in ISO 8601 format.
     */
    BirthDate?: string | null;
    /**
     * Place of birth.
     */
    BirthPlace?: string | null;
    /**
     * Occupation of the customer.
     */
    Occupation?: string | null;
    /**
     * Email address of the customer.
     */
    Email?: string | null;
    /**
     * Phone number of the customer (possibly mobile).
     */
    Phone?: string | null;
    /**
     * Loyalty code of the customer.
     */
    LoyaltyCode?: string | null;
    /**
     * Internal notes about the customer.
     */
    Notes?: string | null;
    /**
     * Registration number of the customer's car.
     */
    CarRegistrationNumber?: string | null;
    /**
     * Customer's dietary requirements, e.g. Vegan, Halal.
     */
    DietaryRequirements?: string | null;
    /**
     * Tax identification number of the customer.
     */
    TaxIdentificationNumber?: string | null;
    /**
     * Unique identifier of `Company` the customer is associated with.
     */
    CompanyId?: string | null;
    /**
     * Address of the customer.
     */
    Address?: (AddressParameters) | null;
    /**
     * Identity card details of the customer.
     * @deprecated
     */
    IdentityCard?: (DocumentParameters) | null;
    /**
     * Passport details of the customer.
     * @deprecated
     */
    Passport?: (DocumentParameters) | null;
    /**
     * Visa details of the customer.
     * @deprecated
     */
    Visa?: (DocumentParameters) | null;
    /**
     * Drivers license details of the customer.
     * @deprecated
     */
    DriversLicense?: (DocumentParameters) | null;
    /**
     * Classifications of the customer.
     */
    Classifications?: Array<CustomerClassificationEnum> | null;
    /**
     * Options of the customer.
     */
    Options?: Array<CustomerOptionEnum> | null;
    /**
     * Unique identifier of the chain. Required when using `PortfolioAccessTokens`, ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Whether an existing customer should be overwritten in case of duplicity. This applies only to basic personal information (`Title`, `FirstName`, `LastName`, ...).
     */
    OverwriteExisting: boolean;
    /**
     * Value of Italian destination code.
     */
    ItalianDestinationCode?: string | null;
    /**
     * Value of Italian fiscal code.
     */
    ItalianFiscalCode?: string | null;
};

/**
 *
 *
 * PaymasterAccount
 *
 * Blacklist
 *
 * Media
 *
 * LoyaltyProgram
 *
 * PreviousComplaint
 *
 * Returning
 *
 * Staff
 *
 * FriendOrFamily
 *
 * TopManagement
 *
 * Important
 *
 * VeryImportant
 *
 * Problematic
 *
 * Cashlist
 *
 * DisabledPerson
 *
 * Military
 *
 * Airline
 *
 * HealthCompliant
 *
 * InRoom
 *
 * WaitingForRoom
 *
 * Student
 */
export type CustomerClassificationEnum = 'PaymasterAccount' | 'Blacklist' | 'Media' | 'LoyaltyProgram' | 'PreviousComplaint' | 'Returning' | 'Staff' | 'FriendOrFamily' | 'TopManagement' | 'Important' | 'VeryImportant' | 'Problematic' | 'Cashlist' | 'DisabledPerson' | 'Military' | 'Airline' | 'HealthCompliant' | 'InRoom' | 'WaitingForRoom' | 'Student';

export type CustomerClassificationUpdateParameters = {
    /**
     * Paymaster account (or `null` if the value should not be updated).
     */
    PaymasterAccount?: (BooleanUpdateValue) | null;
    /**
     * Blacklist (or `null` if the value should not be updated).
     */
    Blacklist?: (BooleanUpdateValue) | null;
    /**
     * Media (or `null` if the value should not be updated).
     */
    Media?: (BooleanUpdateValue) | null;
    /**
     * Loyalty program (or `null` if the value should not be updated).
     */
    LoyaltyProgram?: (BooleanUpdateValue) | null;
    /**
     * Previous complaint (or `null` if the value should not be updated).
     */
    PreviousComplaint?: (BooleanUpdateValue) | null;
    /**
     * Returning (or `null` if the value should not be updated).
     */
    Returning?: (BooleanUpdateValue) | null;
    /**
     * Staff (or `null` if the value should not be updated).
     */
    Staff?: (BooleanUpdateValue) | null;
    /**
     * Friend or family (or `null` if the value should not be updated).
     */
    FriendOrFamily?: (BooleanUpdateValue) | null;
    /**
     * Top management (or `null` if the value should not be updated).
     */
    TopManagement?: (BooleanUpdateValue) | null;
    /**
     * Important (or `null` if the value should not be updated).
     */
    Important?: (BooleanUpdateValue) | null;
    /**
     * Very important (or `null` if the value should not be updated).
     */
    VeryImportant?: (BooleanUpdateValue) | null;
    /**
     * Problematic (or `null` if the value should not be updated).
     */
    Problematic?: (BooleanUpdateValue) | null;
    /**
     * Cashlist (or `null` if the value should not be updated).
     */
    Cashlist?: (BooleanUpdateValue) | null;
    /**
     * Disabled person (or `null` if the value should not be updated).
     */
    DisabledPerson?: (BooleanUpdateValue) | null;
    /**
     * Military (or `null` if the value should not be updated).
     */
    Military?: (BooleanUpdateValue) | null;
    /**
     * Airline (or `null` if the value should not be updated).
     */
    Airline?: (BooleanUpdateValue) | null;
    /**
     * Health compliant (or `null` if the value should not be updated).
     */
    HealthCompliant?: (BooleanUpdateValue) | null;
    /**
     * In room (or `null` if the value should not be updated).
     */
    InRoom?: (BooleanUpdateValue) | null;
    /**
     * Waiting for room (or `null` if the value should not be updated).
     */
    WaitingForRoom?: (BooleanUpdateValue) | null;
    /**
     * Student (or `null` if the value should not be updated).
     */
    Student?: (BooleanUpdateValue) | null;
};

/**
 *
 *
 * None
 *
 * PaymasterAccount
 *
 * Blacklist
 *
 * Media
 *
 * LoyaltyProgram
 *
 * PreviousComplaint
 *
 * Returning
 *
 * Staff
 *
 * FriendOrFamily
 *
 * TopManagement
 *
 * Important
 *
 * VeryImportant
 *
 * Problematic
 *
 * Cashlist
 *
 * DisabledPerson
 *
 * Military
 *
 * Airline
 *
 * HealthCompliant
 *
 * InRoom
 *
 * WaitingForRoom
 *
 * Student
 */
export type CustomerClassificationsEnum = 'None' | 'PaymasterAccount' | 'Blacklist' | 'Media' | 'LoyaltyProgram' | 'PreviousComplaint' | 'Returning' | 'Staff' | 'FriendOrFamily' | 'TopManagement' | 'Important' | 'VeryImportant' | 'Problematic' | 'Cashlist' | 'DisabledPerson' | 'Military' | 'Airline' | 'HealthCompliant' | 'InRoom' | 'WaitingForRoom' | 'Student';

export type CustomerExtent = {
    /**
     * Whether the response should contain information about customers.
     */
    Customers?: boolean | null;
    /**
     * Whether the response should contain identity documents of customers.
     * @deprecated
     */
    Documents?: boolean | null;
    /**
     * Whether the response should contain addresses of customers.
     */
    Addresses?: boolean | null;
};

export type CustomerFileParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    CustomerId: string;
    /**
     * Name of the file.
     */
    Name: string;
    /**
     * MIME type of the file (e.g. `application/pdf`).
     */
    Type: string;
    /**
     * Base64-encoded data of the file.
     */
    Data: string;
};

export type CustomerFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the chains. Required when using Portfolio Access Tokens, ignored otherwise.
     */
    ChainIds?: Array<(string)> | null;
    /**
     * Interval in which Customer was created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which Customer was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Extent of data to be returned.
     */
    Extent: CustomerExtent;
    /**
     * Interval in which Customer was deleted. `ActivityStates` value `Deleted` should be provided with this filter to get expected results.
     */
    DeletedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
    /**
     * Unique identifiers of Customers. Required if no other filter is provided.
     */
    CustomerIds?: Array<(string)> | null;
    /**
     * Unique identifier of the Company the customer is associated with.
     */
    CompanyIds?: [
        string
    ] | null;
    /**
     * Emails of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    Emails?: Array<(string)> | null;
    /**
     * First names of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    FirstNames?: Array<(string)> | null;
    /**
     * Last names of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    LastNames?: Array<(string)> | null;
    /**
     * Loyalty codes of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    LoyaltyCodes?: Array<(string)> | null;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation: Limitation;
};

export type CustomerItemParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    CustomerIds: Array<(string)>;
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
     */
    Currency?: string | null;
};

export type CustomerItemResult = {
    /**
     * The customers with their items.
     */
    Customers?: Array<CustomerItems> | null;
};

export type CustomerItems = {
    /**
     * Unique identifier of the `Customer`.
     */
    CustomerId: string;
    /**
     * @deprecated
     */
    Items: Array<AccountingItem>;
    /**
     * The open order items (consumed items such as nights or products).
     */
    OrderItems: Array<OrderItemOld>;
    /**
     * The open payment items (such as cash, credit card payments or invoices).
     */
    PaymentItems: Array<PaymentItemOld>;
};

export type CustomerMergeParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the source [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    SourceCustomerId: string;
    /**
     * Unique identifier of the target [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).
     */
    TargetCustomerId: string;
};

/**
 *
 *
 * SendMarketingEmails
 *
 * Invoiceable
 *
 * BillAddressObjection
 *
 * SendMarketingPostalMail
 *
 * SendPartnerMarketingEmails
 *
 * SendPartnerMarketingPostalMail
 *
 * WithdrawCardConsent
 *
 * GuestPhotoConsent (Whether to ask for consent to take a guest photo.)
 *
 * IdPhotosConsent (Whether to ask for consent to take identity document photos.)
 */
export type CustomerOptionEnum = 'SendMarketingEmails' | 'Invoiceable' | 'BillAddressObjection' | 'SendMarketingPostalMail' | 'SendPartnerMarketingEmails' | 'SendPartnerMarketingPostalMail' | 'WithdrawCardConsent' | 'GuestPhotoConsent' | 'IdPhotosConsent';

export type CustomerOptionUpdateParameters = {
    /**
     * Send marketing email (or `null` if the value should not be updated).
     */
    SendMarketingEmails?: (BooleanUpdateValue) | null;
    /**
     * Invoiceable (or `null` if the value should not be updated).
     */
    Invoiceable?: (BooleanUpdateValue) | null;
    /**
     * Bill address objection (or `null` if the value should not be updated).
     */
    BillAddressObjection?: (BooleanUpdateValue) | null;
};

/**
 *
 *
 * None
 *
 * SendMarketingEmails
 *
 * Invoiceable
 *
 * BillAddressObjection
 *
 * SendMarketingPostalMail
 *
 * SendPartnerMarketingEmails
 *
 * SendPartnerMarketingPostalMail
 *
 * WithdrawCardConsent
 *
 * GuestPhotoConsent
 *
 * IdPhotosConsent
 */
export type CustomerOptionsEnum = 'None' | 'SendMarketingEmails' | 'Invoiceable' | 'BillAddressObjection' | 'SendMarketingPostalMail' | 'SendPartnerMarketingEmails' | 'SendPartnerMarketingPostalMail' | 'WithdrawCardConsent' | 'GuestPhotoConsent' | 'IdPhotosConsent';

export type CustomerResult = {
    /**
     * The customers.
     */
    Customers: Array<Customer>;
    /**
     * The identity documents of customers.
     * @deprecated
     */
    Documents?: Array<IdentityDocument> | null;
    /**
     * Unique identifier of the last and hence oldest customer item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older customers. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message; this is true even when using Extents set to false so that no actual data is returned.
     */
    Cursor?: string | null;
};

export type CustomerSearchParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Name to search by (applies to first name, last name, and full name).
     */
    Name?: string | null;
    /**
     * Identifier of [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource) to search by (members of reservation assigned there will be returned).
     */
    ResourceId?: string | null;
    /**
     * Extent of data to be returned.
     */
    Extent?: (CustomerExtent) | null;
};

export type CustomerSearchResult = {
    /**
     * The customer search results.
     */
    Customers: Array<ChargeableCustomer>;
    /**
     * The identity documents of customers.
     * @deprecated
     */
    Documents?: Array<IdentityDocument> | null;
};

export type CustomerUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using `PortfolioAccessTokens`, ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifier of the `Customer` to be updated.
     */
    CustomerId: string;
    /**
     * New title.
     *
     * Mister (Mr.)
     *
     * Miss (Ms.)
     *
     * Misses (Mrs.)
     */
    Title?: (Title) | null;
    /**
     * New first name.
     */
    FirstName?: string | null;
    /**
     * New last name.
     */
    LastName?: string | null;
    /**
     * New second last name.
     */
    SecondLastName?: string | null;
    /**
     * New nationality code as ISO 3166-1 code of the `Country`.
     */
    NationalityCode?: string | null;
    /**
     * Sex of the customer.
     *
     * Male
     *
     * Female
     */
    Sex?: (SexEnum) | null;
    /**
     * New birth date in ISO 8601 format.
     */
    BirthDate?: string | null;
    /**
     * New birth place.
     */
    BirthPlace?: string | null;
    /**
     * Occupation of the customer.
     */
    Occupation?: string | null;
    /**
     * New email address.
     */
    Email?: string | null;
    /**
     * New phone number.
     */
    Phone?: string | null;
    /**
     * Loyalty code of the customer.
     */
    LoyaltyCode?: string | null;
    /**
     * Internal notes about the customer. Old value will be overwritten.
     */
    Notes?: string | null;
    /**
     * New registration number of the customer's car.
     */
    CarRegistrationNumber?: string | null;
    /**
     * Customer's dietary requirements, e.g. Vegan, Halal.
     */
    DietaryRequirements?: string | null;
    /**
     * New tax identification number of the customer.
     */
    TaxIdentificationNumber?: string | null;
    /**
     * Unique identifier of `Company` the customer is associated with.
     */
    CompanyId?: string | null;
    /**
     * New address details.
     */
    Address?: (AddressParameters) | null;
    /**
     * New identity card details.
     * @deprecated
     */
    IdentityCard?: (DocumentParameters) | null;
    /**
     * New passport details.
     * @deprecated
     */
    Passport?: (DocumentParameters) | null;
    /**
     * New visa details.
     * @deprecated
     */
    Visa?: (DocumentParameters) | null;
    /**
     * New drivers license details.
     * @deprecated
     */
    DriversLicense?: (DocumentParameters) | null;
    /**
     * New classifications of the customer.
     */
    Classifications?: Array<CustomerClassificationEnum> | null;
    /**
     * Options of the customer.
     */
    Options?: Array<CustomerOptionEnum> | null;
    /**
     * New Italian destination code of customer.
     */
    ItalianDestinationCode?: (StringUpdateValue) | null;
    /**
     * New Italian fiscal code of customer.
     */
    ItalianFiscalCode?: (StringUpdateValue) | null;
};

export type DateFilterInterval = {
    Start: string;
    End: string;
};

export type DateRestriction = {
    /**
     * Unique identifier of the rate restriction.
     */
    Id?: string;
    /**
     * Unique identifier of the rate.
     */
    RateId?: string;
    /**
     * Whether the rate restriction is inherited from the parent rate.
     */
    IsInherited?: boolean;
    /**
     * Start of the rate restriction in UTC timezone in ISO 8601 format.
     */
    StartUtc?: string | null;
    /**
     * End of the rate restriction in UTC timezone in ISO 8601 format.
     */
    EndUtc?: string | null;
    /**
     * The restricted days of week.
     */
    Days?: Array<(string)> | null;
    /**
     * Identifiers of from external systems.
     */
    ExternalIdentifier?: string | null;
};

export type DateTimeIntervalUtc = {
    StartUtc?: string | null;
    EndUtc?: string | null;
};

export type DaysParameters = {
    /**
     * Monday enabled
     */
    Monday: boolean;
    /**
     * Tuesday enabled
     */
    Tuesday: boolean;
    /**
     * Wednesday enabled
     */
    Wednesday: boolean;
    /**
     * Thursday enabled
     */
    Thursday: boolean;
    /**
     * Friday enabled
     */
    Friday: boolean;
    /**
     * Saturday enabled
     */
    Saturday: boolean;
    /**
     * Sunday enabled
     */
    Sunday: boolean;
};

export type DecimalNullableUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: number | null;
};

export type DecimalUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: number;
};

export type DeleteRestrictionParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the `Restriction`.
     */
    RestrictionIds: Array<(string)>;
};

export type Department = {
    /**
     * Unique identifier of the department.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Whether the department is still active.
     */
    IsActive: boolean;
    /**
     * Name of the department.
     */
    Name: string;
    /**
     * Creation date and time of the department in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the department in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type DepartmentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Department](https://mews-systems.gitbook.io/connector-api/operations/#department).
     */
    DepartmentIds?: Array<(string)> | null;
    /**
     * Interval in which `Department` was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type DepartmentResult = {
    /**
     * The departments of the enterprise.
     */
    Departments: Array<Department>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type DependentRatePricingData = {
    /**
     * Unique identifier of the base rate.
     */
    BaseRateId: string;
    /**
     * Specific amount which shows the difference between this rate and the base rate.
     */
    RelativeAdjustment: number;
    /**
     * Relative amount which shows the difference between this rate and the base rate.
     */
    AbsoluteAdjustment: number;
};

export type DependentRatePricingParameters = {
    /**
     * Unique identifier of the base rate.
     */
    BaseRateId: string;
    /**
     * Relative amount which shows the difference between this rate and the base rate.
     */
    RelativeAdjustment?: number;
    /**
     * Specific amount which shows the difference between this rate and the base rate.
     */
    AbsoluteAdjustment?: number;
};

export type DependentTaxRateStrategy = {
    Value?: number;
    BaseTaxationCodes?: Array<(string)> | null;
};

export type Device = {
    /**
     * Unique identifier of the device.
     */
    Id: string;
    /**
     * Type of the device.
     *
     * Printer ([Printer command data](https://mews-systems.gitbook.io/connector-api/operations/commands#printer-command-data))
     *
     * PaymentTerminal ([Payment terminal command data](https://mews-systems.gitbook.io/connector-api/operations/commands#payment-terminal-command-data))
     *
     * KeyCutter ([Key cutter command data](https://mews-systems.gitbook.io/connector-api/operations/commands#key-cutter-command-data))
     *
     * FiscalMachine ([Fiscal machine command data](https://mews-systems.gitbook.io/connector-api/operations/commands#fiscal-machine-command-data))
     *
     * PassportScanner ([Passport scanner command data](https://mews-systems.gitbook.io/connector-api/operations/commands#passport-scanner-command-data))
     */
    Type: DeviceTypeEnum;
    /**
     * Name of the device.
     */
    Name: string;
    /**
     * Device identifier (for internal purposes).
     */
    Identifier?: string | null;
};

export type DeviceCommand = {
    /**
     * Unique identifier of the command.
     */
    Id: string;
    /**
     * State of the command.
     *
     * Pending (Created in Mews, but not yet received by the client application.)
     *
     * Received (Received by the client application.)
     *
     * Processing (Being processed by the client application.)
     *
     * Processed (Successfully processed command.)
     *
     * Cancelled (A command whose execution has been canceled before (or during) processing.)
     *
     * Error (A command whose execution or processing was terminated by an error.)
     */
    State: DeviceCommandStateEnum;
    /**
     * Creation date and time of the command.
     */
    CreatedUtc: string;
    /**
     * Creator of the command.
     */
    Creator?: (DeviceCommandCreator) | null;
    /**
     * Device that the command should be executed on.
     */
    Device: Device;
    /**
     * Structure of the object depends on [Device type](https://mews-systems.gitbook.io/connector-api/operations/devices#device-type).
     */
    Data: PaymentTerminalCommandData | PrinterCommandData | KeyCutterCommandData | FiscalMachineCommandData | PassportScannerCommandData;
};

export type DeviceCommandAddResult = {
    /**
     * Unique identifier of the created `Command`.
     */
    CommandId: string;
};

export type DeviceCommandCreator = {
    /**
     * First name of the user.
     */
    FirstName?: string | null;
    /**
     * Last name of the user.
     */
    LastName: string;
    /**
     * URL of the profile image.
     */
    ImageUrl?: string | null;
};

export type DeviceCommandData = {
    [key: string]: unknown;
};

export type DeviceCommandFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of [Commands](https://mews-systems.gitbook.io/connector-api/operations/#command) to be returned.
     */
    CommandIds: Array<(string)>;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation?: (Limitation) | null;
};

export type DeviceCommandResult = {
    /**
     * The active commands.
     */
    Commands: Array<DeviceCommand>;
    /**
     * Unique identifier of the last returned command. This can be used in Limitation in a subsequent request to fetch the next batch of commands.
     */
    Cursor?: string | null;
};

export type DeviceCommandResultDiscriminator = 'ItalianFiscalMachine' | 'SaltoMobileKeyDto';

/**
 *
 *
 * Pending (Created in Mews, but not yet received by the client application.)
 *
 * Received (Received by the client application.)
 *
 * Processing (Being processed by the client application.)
 *
 * Processed (Successfully processed command.)
 *
 * Cancelled (A command whose execution has been canceled before (or during) processing.)
 *
 * Error (A command whose execution or processing was terminated by an error.)
 */
export type DeviceCommandStateEnum = 'Pending' | 'Received' | 'Processing' | 'Processed' | 'Cancelled' | 'Error';

export type DeviceCommandUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Identifier of the `Command` to be updated.
     */
    CommandId: string;
    /**
     * New state of the command.
     *
     * Pending (Created in Mews, but not yet received by the client application.)
     *
     * Received (Received by the client application.)
     *
     * Processing (Being processed by the client application.)
     *
     * Processed (Successfully processed command.)
     *
     * Cancelled (A command whose execution has been canceled before (or during) processing.)
     *
     * Error (A command whose execution or processing was terminated by an error.)
     */
    State: DeviceCommandStateEnum;
    /**
     * Progress of the command processing. Only used if the `State` is `Processing`, otherwise ignored.
     */
    Progress?: number | null;
    /**
     * Notes about command execution. Only used if the `State` is `Processed`, `Cancelled` or `Error`, otherwise ignored.
     */
    Notes?: string | null;
};

export type DeviceResult = {
    /**
     * The devices.
     */
    Devices: Array<Device>;
};

/**
 * Type of the device.
 *
 * Printer ([Printer command data](https://mews-systems.gitbook.io/connector-api/operations/commands#printer-command-data))
 *
 * PaymentTerminal ([Payment terminal command data](https://mews-systems.gitbook.io/connector-api/operations/commands#payment-terminal-command-data))
 *
 * KeyCutter ([Key cutter command data](https://mews-systems.gitbook.io/connector-api/operations/commands#key-cutter-command-data))
 *
 * FiscalMachine ([Fiscal machine command data](https://mews-systems.gitbook.io/connector-api/operations/commands#fiscal-machine-command-data))
 *
 * PassportScanner ([Passport scanner command data](https://mews-systems.gitbook.io/connector-api/operations/commands#passport-scanner-command-data))
 */
export type DeviceTypeEnum = 'Printer' | 'PaymentTerminal' | 'KeyCutter' | 'FiscalMachine' | 'PassportScanner';

export type DisableCreditCardParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the `CreditCard` to disable.
     */
    CreditCardId: string;
};

export type DocumentParameters = {
    /**
     * Number of the document (e.g. passport number).
     */
    Number?: string | null;
    /**
     * Expiration date in ISO 8601 format.
     */
    Expiration?: string | null;
    /**
     * Date of issuance in ISO 8601 format.
     */
    Issuance?: string | null;
    /**
     * ISO 3166-1 code of the `Country`.
     */
    IssuingCountryCode?: string | null;
    /**
     * City from which document issued
     */
    IssuingCity?: string | null;
};

export type EarlinessRestriction = {
    /**
     * Unique identifier of the rate restriction.
     */
    Id?: string;
    /**
     * Unique identifier of the rate.
     */
    RateId?: string;
    /**
     * Whether the rate restriction is inherited from the parent rate.
     */
    IsInherited?: boolean;
    /**
     * Start of the rate restriction in UTC timezone in ISO 8601 format.
     */
    StartUtc?: string | null;
    /**
     * End of the rate restriction in UTC timezone in ISO 8601 format.
     */
    EndUtc?: string | null;
    /**
     * The restricted days of week.
     */
    Days?: Array<(string)> | null;
    /**
     * Identifiers of from external systems.
     */
    ExternalIdentifier?: string | null;
    /**
     * The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MinAdvance?: string | null;
    /**
     * The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MaxAdvance?: string | null;
};

export type Enterprise = {
    /**
     * Unique identifier of the enterprise.
     */
    Id: string;
    /**
     * Identifier of the enterprise from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Identifies an enterprise in the external system of a holding company. The holding company may administer multiple portfolios.
     */
    HoldingKey?: string | null;
    /**
     * Unique identifier of the chain to which the enterprise belongs.
     */
    ChainId: string;
    /**
     * Name of the `Chain` to which the enterprise belongs.
     */
    ChainName: string;
    /**
     * Creation date and time of the enterprise in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Creation date and time of the enterprise in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Name of the enterprise.
     */
    Name: string;
    /**
     * IANA timezone identifier of the enterprise.
     */
    TimeZoneIdentifier: string;
    /**
     * Unique identifier of the legal environment where the enterprise resides.
     */
    LegalEnvironmentCode: string;
    /**
     * Unique code of the accommodation environment where the enterprise resides.
     */
    AccommodationEnvironmentCode: string;
    /**
     * Unique code of the accounting environment where the enterprise resides.
     */
    AccountingEnvironmentCode: string;
    /**
     * Unique code of the tax environment where the enterprise resides.
     */
    TaxEnvironmentCode: string;
    /**
     * Language-culture codes of the enterprise default `Language`.
     */
    DefaultLanguageCode: string;
    /**
     * @deprecated
     */
    EditableHistoryInterval: string;
    /**
     * Editable history interval for accounting data in ISO 8601 duration format.
     */
    AccountingEditableHistoryInterval: string;
    /**
     * Editable history interval for operational data in ISO 8601 duration format.
     */
    OperationalEditableHistoryInterval: string;
    /**
     * URL of the enterprise website.
     */
    WebsiteUrl?: string | null;
    /**
     * Email address of the enterprise.
     */
    Email?: string | null;
    /**
     * Phone number of the enterprise.
     */
    Phone?: string | null;
    /**
     * Unique identifier of the `Image` of the enterprise logo.
     */
    LogoImageId?: string | null;
    /**
     * Unique identifier of the `Image` of the enterprise cover.
     */
    CoverImageId?: string | null;
    /**
     * Pricing of the enterprise.
     *
     * Gross (The enterprise shows amount with gross prices.)
     *
     * Net (The enterprise shows amount with net prices.)
     */
    Pricing: PricingModeEnum;
    /**
     * Tax precision used for financial calculations in the enterprise. If `null`, `Currency` precision is used.
     */
    TaxPrecision?: number | null;
    /**
     * Unique identifier of the `Address` of the enterprise.
     */
    AddressId: string;
    /**
     * Address of the enterprise.
     */
    Address: OldAddress;
    /**
     * A list of the group names of the enterprise.
     */
    GroupNames: Array<(string)>;
    /**
     * Subscription information of the enterprise.
     */
    Subscription: EnterpriseSubscription;
    /**
     * Currencies accepted by the enterprise.
     */
    Currencies: Array<CurrencyAcceptance>;
    /**
     * Configuration information containing financial information about the property.
     */
    AccountingConfiguration?: (AccountingConfiguration) | null;
    /**
     * Whether the enterprise is a Portfolio enterprise (see [Multi-property guidelines](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property)).
     */
    IsPortfolio?: boolean;
};

export type EnterpriseFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/#enterprise). If not specified, all enterprises within scope of the Access Token are returned.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Identifiers of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/#enterprise) from external system.
     */
    ExternalIdentifiers?: Array<(string)> | null;
    LinkedUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation: Limitation;
};

export type EnterprisePortfolio = {
    /**
     * Unique identifier of the enterprise.
     */
    Id: string;
    /**
     * Identifier of the enterprise from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Identifies an enterprise in the external system of a holding company. The holding company may administer multiple portfolios.
     */
    HoldingKey?: string | null;
    /**
     * Unique identifier of the chain to which the enterprise belongs.
     */
    ChainId: string;
    /**
     * Name of the `Chain` to which the enterprise belongs.
     */
    ChainName: string;
    /**
     * Creation date and time of the enterprise in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Creation date and time of the enterprise in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Name of the enterprise.
     */
    Name: string;
    /**
     * IANA timezone identifier of the enterprise.
     */
    TimeZoneIdentifier: string;
    /**
     * Unique identifier of the legal environment where the enterprise resides.
     */
    LegalEnvironmentCode: string;
    /**
     * Unique code of the accommodation environment where the enterprise resides.
     */
    AccommodationEnvironmentCode: string;
    /**
     * Unique code of the accounting environment where the enterprise resides.
     */
    AccountingEnvironmentCode: string;
    /**
     * Unique code of the tax environment where the enterprise resides.
     */
    TaxEnvironmentCode: string;
    /**
     * Language-culture codes of the enterprise default `Language`.
     */
    DefaultLanguageCode: string;
    /**
     * @deprecated
     */
    EditableHistoryInterval: string;
    /**
     * Editable history interval for accounting data in ISO 8601 duration format.
     */
    AccountingEditableHistoryInterval: string;
    /**
     * Editable history interval for operational data in ISO 8601 duration format.
     */
    OperationalEditableHistoryInterval: string;
    /**
     * URL of the enterprise website.
     */
    WebsiteUrl?: string | null;
    /**
     * Email address of the enterprise.
     */
    Email?: string | null;
    /**
     * Phone number of the enterprise.
     */
    Phone?: string | null;
    /**
     * Unique identifier of the `Image` of the enterprise logo.
     */
    LogoImageId?: string | null;
    /**
     * Unique identifier of the `Image` of the enterprise cover.
     */
    CoverImageId?: string | null;
    /**
     * Pricing of the enterprise.
     *
     * Gross (The enterprise shows amount with gross prices.)
     *
     * Net (The enterprise shows amount with net prices.)
     */
    Pricing: PricingModeEnum;
    /**
     * Tax precision used for financial calculations in the enterprise. If `null`, `Currency` precision is used.
     */
    TaxPrecision?: number | null;
    /**
     * Unique identifier of the `Address` of the enterprise.
     */
    AddressId: string;
    /**
     * Address of the enterprise.
     */
    Address: OldAddress;
    /**
     * A list of the group names of the enterprise.
     */
    GroupNames: Array<(string)>;
    /**
     * Subscription information of the enterprise.
     */
    Subscription: EnterpriseSubscription;
    /**
     * Date and time when enterprise was added to the portfolio in UTC timezone in ISO 8601 format.
     */
    LinkedUtc: string;
};

export type EnterpriseProfileData = {
    /**
     * Unique identifier of the profile.
     */
    ProfileId: string;
};

export type EnterpriseResult = {
    /**
     * The filtered enterprises.
     */
    Enterprises: Array<EnterprisePortfolio>;
    /**
     * Unique identifier of the last and hence oldest enterprise returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older enterprises.
     */
    Cursor?: string | null;
};

export type EnterpriseScopeCounterDiscriminator = 'Counter' | 'AccountingCounter' | 'AvailabilityBlockCounter' | 'BillCounter' | 'BillPreviewCounter' | 'FiscalCounter' | 'ProformaCounter' | 'RegistrationCardCounter' | 'ServiceOrderCounter' | 'CorrectionBillCounter' | 'PaymentConfirmationBillCounter' | 'CreditNoteBillCounter';

export type EnterpriseSubscription = {
    /**
     * Tax identifier of the `Enterprise`.
     */
    TaxIdentifier?: string | null;
};

export type ExchangeRate = {
    /**
     * Unique identifier of the Exchange Rate.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/configuration/#enterprise) to which the Exchange Rate belongs.
     */
    EnterpriseId: string;
    /**
     * ISO-4217 code of the source [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
     */
    SourceCurrency: string;
    /**
     * ISO-4217 code of the target [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
     */
    TargetCurrency: string;
    /**
     * The exchange rate from the source currency to the target currency.
     */
    Value: number;
};

export type ExchangeRateResult = {
    /**
     * The available exchange rates.
     */
    ExchangeRates: Array<ExchangeRate>;
};

export type Export = {
    /**
     * Unique identifier of the export.
     */
    Id: string;
    Status: ExportStatus;
    EntityType: ExportEntityType;
    /**
     * Files with exported data. Empty if no files are available.
     */
    Files: Array<ExportFileEntry>;
    /**
     * Expiration date and time of the export in UTC timezone in ISO 8601 format. After this time the Exported files may no longer be available for download.
     */
    ExpiresUtc?: string | null;
};

export type ExportAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    EntityType: ExportEntityType;
};

export type ExportAddResult = {
    /**
     * Added export.
     */
    Export: Export;
};

/**
 * Type of exported entities
 */
export type ExportEntityType = 'OrderItem' | 'Payment' | 'Reservation' | 'Customer' | 'Company' | 'Bill' | 'AvailabilityAdjustment' | 'AvailabilityBlock' | 'ResourceBlock';

export type ExportFileEntry = {
    /**
     * URL of the exported file for download in JSON Lines format.
     */
    Url: string;
    /**
     * Total size of the exported file in bytes.
     */
    SizeInBytes: number;
};

export type ExportFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the [Exports](https://mews-systems.gitbook.io/connector-api/operations/#export).
     */
    ExportIds: Array<(string)>;
};

export type ExportResult = {
    /**
     * Requested exports.
     */
    Exports: Array<Export>;
};

/**
 * Current status of the export.
 */
export type ExportStatus = 'Pending' | 'Processing' | 'Success' | 'Failed' | 'Expired';

export type ExtendedAmount = {
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
     */
    Currency: string;
    /**
     * Net value without taxes.
     */
    NetValue: number;
    /**
     * Gross value including all taxes.
     */
    GrossValue: number;
    /**
     * The tax values applied.
     */
    TaxValues: Array<TaxValue>;
    /**
     * Information about individual tax amounts.
     */
    Breakdown: TaxBreakdown;
    Value?: number | null;
    Net?: number | null;
    Tax?: number | null;
    TaxRate?: number | null;
};

export type ExtendedAmountParameters = {
    /**
     * ISO-4217 code of the `Currency`.
     */
    Currency: string;
    /**
     * The tax values applied.
     */
    TaxCodes?: Array<(string)> | null;
    /**
     * Net value in case the item is taxed.
     */
    NetValue?: number | null;
    /**
     * Gross value including all taxes.
     */
    GrossValue?: number | null;
};

export type ExternalPaymentParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company). Company billing may not be enabled for your integration.
     */
    AccountId: string;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer). **Deprecated!**
     * @deprecated
     */
    CustomerId?: string | null;
    /**
     * Unique identifier of an open bill of the customer where to assign the payment.
     */
    BillId?: string | null;
    /**
     * Unique identifier of an [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) to be assigned to the external payment.
     */
    AccountingCategoryId?: string | null;
    /**
     * Unique identifier of the reservation the payment belongs to.
     */
    ReservationId?: string | null;
    /**
     * Amount of the external card payment.
     */
    Amount: ExtendedAmountParameters;
    /**
     * Type of the external payment. (Required for the enterprises based in the French Legal Environment where `Unspecified` is considered as fraud.)
     *
     * Unspecified (Unspecified (unavailable in French Legal Environment))
     *
     * BadDebts (Bad debts)
     *
     * Bacs (Bacs payment)
     *
     * WireTransfer (Wire transfer)
     *
     * Invoice (Invoice)
     *
     * ExchangeRateDifference (Exchange rate difference)
     *
     * Complimentary (Complimentary)
     *
     * Reseller (Reseller)
     *
     * ExchangeRoundingDifference (Exchange rounding difference)
     *
     * Barter (Barter)
     *
     * Commission (Commission)
     *
     * BankCharges (Bank charges)
     *
     * CrossSettlement (Cross settlement)
     *
     * Cash (Cash)
     *
     * CreditCard (Credit card)
     *
     * Prepayment (Prepayment)
     *
     * Cheque (Cheque)
     *
     * Bancontact (Bancontact)
     *
     * IDeal (iDeal)
     *
     * PayPal (PayPal)
     *
     * GiftCard (Gift card)
     *
     * LoyaltyPoints (Loyalty points)
     *
     * ChequeVacances (Chèque-Vacances)
     *
     * OnlinePayment (Online payment)
     *
     * CardCheck (Card check)
     *
     * PaymentHubRedirection (Payment hub redirection)
     *
     * Voucher (Voucher)
     *
     * MasterCard (MasterCard)
     *
     * Visa (Visa)
     *
     * Amex (American Express)
     *
     * Discover (Discover)
     *
     * DinersClub (Diners Club)
     *
     * Jcb (JCB)
     *
     * UnionPay (UnionPay)
     *
     * Twint (TWINT)
     *
     * Reka (Reka)
     *
     * LoyaltyCard (Loyalty card)
     *
     * PosDiningAndSpaReward (POS Dining & Spa Reward)
     *
     * DirectDebit (Direct debit)
     *
     * DepositCheck (Deposit - check)
     *
     * DepositCash (Deposit - cash)
     *
     * DepositCreditCard (Deposit - credit card)
     *
     * DepositWireTransfer (Deposit - wire transfer)
     */
    Type?: (ExternalPaymentTypeEnum) | null;
    /**
     * Identifier of the payment from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Additional payment notes.
     */
    Notes?: string | null;
};

/**
 *
 *
 * Unspecified (Unspecified (unavailable in French Legal Environment))
 *
 * BadDebts (Bad debts)
 *
 * Bacs (Bacs payment)
 *
 * WireTransfer (Wire transfer)
 *
 * Invoice (Invoice)
 *
 * ExchangeRateDifference (Exchange rate difference)
 *
 * Complimentary (Complimentary)
 *
 * Reseller (Reseller)
 *
 * ExchangeRoundingDifference (Exchange rounding difference)
 *
 * Barter (Barter)
 *
 * Commission (Commission)
 *
 * BankCharges (Bank charges)
 *
 * CrossSettlement (Cross settlement)
 *
 * Cash (Cash)
 *
 * CreditCard (Credit card)
 *
 * Prepayment (Prepayment)
 *
 * Cheque (Cheque)
 *
 * Bancontact (Bancontact)
 *
 * IDeal (iDeal)
 *
 * PayPal (PayPal)
 *
 * GiftCard (Gift card)
 *
 * LoyaltyPoints (Loyalty points)
 *
 * ChequeVacances (Chèque-Vacances)
 *
 * OnlinePayment (Online payment)
 *
 * CardCheck (Card check)
 *
 * PaymentHubRedirection (Payment hub redirection)
 *
 * Voucher (Voucher)
 *
 * MasterCard (MasterCard)
 *
 * Visa (Visa)
 *
 * Amex (American Express)
 *
 * Discover (Discover)
 *
 * DinersClub (Diners Club)
 *
 * Jcb (JCB)
 *
 * UnionPay (UnionPay)
 *
 * Twint (TWINT)
 *
 * Reka (Reka)
 *
 * LoyaltyCard (Loyalty card)
 *
 * PosDiningAndSpaReward (POS Dining & Spa Reward)
 *
 * DirectDebit (Direct debit)
 *
 * DepositCheck (Deposit - check)
 *
 * DepositCash (Deposit - cash)
 *
 * DepositCreditCard (Deposit - credit card)
 *
 * DepositWireTransfer (Deposit - wire transfer)
 */
export type ExternalPaymentTypeEnum = 'Unspecified' | 'BadDebts' | 'Bacs' | 'WireTransfer' | 'Invoice' | 'ExchangeRateDifference' | 'Complimentary' | 'Reseller' | 'ExchangeRoundingDifference' | 'Barter' | 'Commission' | 'BankCharges' | 'CrossSettlement' | 'Cash' | 'CreditCard' | 'Prepayment' | 'Cheque' | 'Bancontact' | 'IDeal' | 'PayPal' | 'GiftCard' | 'LoyaltyPoints' | 'ChequeVacances' | 'OnlinePayment' | 'CardCheck' | 'PaymentHubRedirection' | 'Voucher' | 'MasterCard' | 'Visa' | 'Amex' | 'Discover' | 'DinersClub' | 'Jcb' | 'UnionPay' | 'Twint' | 'Reka' | 'LoyaltyCard' | 'PosDiningAndSpaReward' | 'DirectDebit' | 'DepositCheck' | 'DepositCash' | 'DepositCreditCard' | 'DepositWireTransfer';

/**
 *
 *
 * Detailed (Detailed overview. Items are grouped by the reservation, item type and price, and consumption date.)
 *
 * Consumption (Overview by date (no reservation details). Items of the same type and price are grouped by consumption date.)
 *
 * Reservation (Overview by reservation (no date). Items of the same type and price are grouped by reservation.)
 *
 * OrderItem (Consumption overview (not fiscal document). Items are grouped by the item type and price without reservation details and consumption date.)
 *
 * Guest (Overview by guest. Items are grouped by guest, reservation, consumption date, and item type.)
 */
export type FinancialDocumentPdfTemplateTypeEnum = 'Detailed' | 'Consumption' | 'Reservation' | 'OrderItem' | 'Guest';

export type FiscalMachineAdditionalData = {
    /**
     * Type of additional data for Italian fiscal machine.
     *
     * ItalianFiscalMachineData
     *
     * ItalianFiscalMachinePayload
     */
    Discriminator?: (FiscalMachineDataDiscriminatorEnum) | null;
    /**
     * Fiscal machine data for Italian fiscal machine.
     */
    ItalianFiscalMachineData?: (ItalianFiscalMachineDataV20250623) | null;
    /**
     * Fiscal machine payload for Italian fiscal machine.
     */
    ItalianFiscalMachinePayload?: (ItalianFiscalMachinePayloadV20250623) | null;
};

export type FiscalMachineCommandData = DeviceCommandData & {
    /**
     * Identifier of the fiscal machine.
     */
    FiscalMachineId?: string | null;
    /**
     * URL of the fiscal machine API.
     */
    ApiUrl?: string | null;
    /**
     * Custom JSON data.
     */
    FiscalMachineData?: string | null;
    /**
     * The issued bill that should be fiscalized.
     */
    Bill: Bill;
    /**
     * Tax identifier to be used for fiscalization.
     */
    TaxIdentifier?: string | null;
    /**
     * Fiscal machine data; currently only `ItalianFiscalMachineData` is supported.
     */
    BillFiscalMachineData?: (BillFiscalMachineData) | null;
    /**
     * Fiscal machine payload data; currently only `ItalianFiscalMachinePayloadData` is supported.
     */
    PayloadData?: (BillFiscalMachinePayloadData) | null;
};

export type FiscalMachineCommandDataV20250623 = {
    /**
     * Unique identifier of the command.
     */
    Id: string;
    /**
     * State of the command.
     *
     * Pending (Created in Mews, but not yet received by the client application.)
     *
     * Received (Received by the client application.)
     *
     * Processing (Being processed by the client application.)
     *
     * Processed (Successfully processed command.)
     *
     * Cancelled (A command whose execution has been canceled before (or during) processing.)
     *
     * Error (A command whose execution or processing was terminated by an error.)
     */
    State: DeviceCommandStateEnum;
    /**
     * Creation date and time of the command.
     */
    CreatedUtc: string;
    /**
     * Creator of the command.
     */
    Creator?: (ProfileData) | null;
    /**
     * Identifier of the fiscal machine.
     */
    FiscalMachineId: string;
    /**
     * URL of the fiscal machine API.
     */
    ApiUrl: string;
    /**
     * Custom JSON data.
     */
    FiscalMachineData: string;
    /**
     * Tax identifier to be used for fiscalization.
     */
    TaxIdentifier?: string | null;
    /**
     * Device that the command should be executed on.
     */
    Device: Device;
    /**
     * The issued bill that should be fiscalized.
     */
    Bill: BillV20250623;
    /**
     * Additional data of the fiscal machine.
     */
    CommandData?: (FiscalMachineAdditionalData) | null;
};

export type FiscalMachineCommandDataV20250623Result = {
    /**
     * The filtered fiscal machine commands.
     */
    Commands: Array<FiscalMachineCommandDataV20250623>;
    /**
     * Unique identifier of the last returned command. This can be used in Limitation in a subsequent request to fetch the next batch of commands.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * ItalianFiscalMachineData
 *
 * ItalianFiscalMachinePayload
 */
export type FiscalMachineDataDiscriminatorEnum = 'ItalianFiscalMachineData' | 'ItalianFiscalMachinePayload';

/**
 *
 *
 * ItalianFiscalMachine
 */
export type FiscalMachinePayloadDataDiscriminatorEnum = 'ItalianFiscalMachine';

export type FlatTaxRateStrategy = {
    CurrencyCode?: string | null;
    Value?: number;
};

export type GetAllActiveCommandsParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
};

export type GuidIEnumerableUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: Array<(string)> | null;
};

export type GuidNullableUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: string | null;
};

export type GuidUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: string;
};

export type Hours = {
    /**
     * Hour 0 enabled
     */
    Zero: boolean;
    /**
     * Hour 1 enabled
     */
    One: boolean;
    /**
     * Hour 2 enabled
     */
    Two: boolean;
    /**
     * Hour 3 enabled
     */
    Three: boolean;
    /**
     * Hour 4 enabled
     */
    Four: boolean;
    /**
     * Hour 5 enabled
     */
    Five: boolean;
    /**
     * Hour 6 enabled
     */
    Six: boolean;
    /**
     * Hour 7 enabled
     */
    Seven: boolean;
    /**
     * Hour 8 enabled
     */
    Eight: boolean;
    /**
     * Hour 9 enabled
     */
    Nine: boolean;
    /**
     * Hour 10 enabled
     */
    Ten: boolean;
    /**
     * Hour 11 enabled
     */
    Eleven: boolean;
    /**
     * Hour 12 enabled
     */
    Twelve: boolean;
    /**
     * Hour 13 enabled
     */
    Thirteen: boolean;
    /**
     * Hour 14 enabled
     */
    Fourteen: boolean;
    /**
     * Hour 15 enabled
     */
    Fifteen: boolean;
    /**
     * Hour 16 enabled
     */
    Sixteen: boolean;
    /**
     * Hour 17 enabled
     */
    Seventeen: boolean;
    /**
     * Hour 18 enabled
     */
    Eighteen: boolean;
    /**
     * Hour 19 enabled
     */
    Nineteen: boolean;
    /**
     * Hour 20 enabled
     */
    Twenty: boolean;
    /**
     * Hour 21 enabled
     */
    TwentyOne: boolean;
    /**
     * Hour 22 enabled
     */
    TwentyTwo: boolean;
    /**
     * Hour 23 enabled
     */
    TwentyThree: boolean;
};

export type IdealData = {
    /**
     * URL where the customer will be redirected after completing their iDEAL payment.
     */
    RedirectUrl: string;
};

export type IdentityDocument = {
    /**
     * Unique identifier of the document.
     */
    Id?: string;
    /**
     * Identifier of the `Customer`.
     */
    CustomerId?: string;
    /**
     * Type of the document.
     *
     * IdentityCard
     *
     * Passport
     *
     * Visa
     *
     * DriversLicense
     */
    Type?: IdentityDocumentTypeEnum;
    /**
     * Number of the document (e.g. passport number).
     */
    Number?: string | null;
    /**
     * Expiration date in ISO 8601 format.
     */
    Expiration?: string | null;
    /**
     * Date of issuance in ISO 8601 format.
     */
    Issuance?: string | null;
    /**
     * ISO 3166-1 code of the `Country`.
     */
    IssuingCountryCode?: string | null;
    /**
     * City where the document was issued.
     */
    IssuingCity?: string | null;
    /**
     * Identity document support number. Only required for Spanish identity cards in Spanish hotels.
     */
    IdentityDocumentSupportNumber?: string | null;
};

export type IdentityDocumentClearParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifiers of the `Customer` for whom documents will be deleted.
     */
    CustomerIds: Array<(string)>;
};

export type IdentityDocumentDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifiers of the identity documents to be deleted.
     */
    IdentityDocumentIds: Array<(string)>;
};

export type IdentityDocumentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of `Chain`. If not specified, the operation returns data for all chains within scope of the Access Token.
     */
    ChainIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Identity document`.
     */
    IdentityDocumentIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Customer`.
     */
    CustomerIds: Array<(string)>;
    /**
     * Type of the identity document.
     */
    Types?: Array<IdentityDocumentTypeEnum> | null;
};

export type IdentityDocumentResult = {
    /**
     * The identity documents of customers.
     */
    IdentityDocuments: Array<IdentityDocumentV20241025>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * IdentityCard
 *
 * Passport
 *
 * Visa
 *
 * DriversLicense
 */
export type IdentityDocumentTypeEnum = 'IdentityCard' | 'Passport' | 'Visa' | 'DriversLicense';

/**
 * Has same structure as [String update value](https://mews-systems.gitbook.io/connector-api/operations/_objects#string-update-value).
 */
export type IdentityDocumentTypeUpdateValue = {
    /**
     * Type of the document (or `null` if the number should not be updated).
     *
     * IdentityCard
     *
     * Passport
     *
     * Visa
     *
     * DriversLicense
     */
    Value?: IdentityDocumentTypeEnum;
};

export type IdentityDocumentUpdateParameters = {
    /**
     * Unique identifier of the document.
     */
    Id: string;
    /**
     * Type of the document (or `null` if the number should not be updated).
     */
    Type?: (IdentityDocumentTypeUpdateValue) | null;
    /**
     * Number of the document (e.g. passport number or `null` if the number should not be updated).
     */
    Number?: (StringUpdateValue) | null;
    /**
     * Expiration date in ISO 8601 format (or `null` if the expiration date should not be updated).
     */
    ExpirationDate?: (StringUpdateValue) | null;
    /**
     * Date of issuance in ISO 8601 format (or `null` if the issuance date should not be updated).
     */
    IssuanceDate?: (StringUpdateValue) | null;
    /**
     * ISO 3166-1 code of the `Country` (or `null` if the issuing country code should not be updated).
     */
    IssuingCountryCode?: (StringUpdateValue) | null;
    /**
     * City where the document was issued (or `null` if the issuing city should not be updated).
     */
    IssuingCity?: (StringUpdateValue) | null;
    /**
     * Identity document support number. Only required for Spanish identity cards in Spanish hotels.
     */
    IdentityDocumentSupportNumber?: (StringUpdateValue) | null;
};

export type IdentityDocumentV20241025 = {
    /**
     * Unique identifier of the document.
     */
    Id: string;
    /**
     * Identifier of the `Customer`.
     */
    CustomerId: string;
    /**
     * Type of the document.
     *
     * IdentityCard
     *
     * Passport
     *
     * Visa
     *
     * DriversLicense
     */
    Type: IdentityDocumentTypeEnum;
    /**
     * Number of the document (e.g. passport number). The value is an empty string when the number is not collected in certain regions, such as The Netherlands.
     */
    Number: string;
    /**
     * Expiration date in ISO 8601 format.
     */
    ExpirationDate?: string | null;
    /**
     * Date of issuance in ISO 8601 format.
     */
    IssuanceDate?: string | null;
    /**
     * ISO 3166-1 code of the `Country`.
     */
    IssuingCountryCode?: string | null;
    /**
     * City where the document was issued.
     */
    IssuingCity?: string | null;
    /**
     * Identity document support number. Only required for Spanish identity cards in Spanish hotels.
     */
    IdentityDocumentSupportNumber?: string | null;
};

export type IdentityDocumentWriteResult = {
    /**
     * Modified identity documents.
     */
    IdentityDocuments: Array<IdentityDocumentV20241025>;
};

export type IdentityDocumentsAddData = {
    /**
     * Identifier of the `Customer`.
     */
    CustomerId: string;
    /**
     * Type of the document.
     *
     * IdentityCard
     *
     * Passport
     *
     * Visa
     *
     * DriversLicense
     */
    Type: IdentityDocumentTypeEnum;
    /**
     * Number of the document (e.g. passport number). If the number is not collected in certain regions, such as The Netherlands, use an empty string. In all other cases, a value should be supplied.
     */
    Number: string;
    /**
     * Expiration date in ISO 8601 format.
     */
    ExpirationDate?: string | null;
    /**
     * Date of issuance in ISO 8601 format.
     */
    IssuanceDate?: string | null;
    /**
     * ISO 3166-1 code of the `Country`).
     */
    IssuingCountryCode?: string | null;
    /**
     * City where the document was issued.
     */
    IssuingCity?: string | null;
    /**
     * Identity document support number. Only required for Spanish identity cards in Spanish hotels.
     */
    IdentityDocumentSupportNumber?: string | null;
};

export type IdentityDocumentsAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Identity documents to be added.
     */
    IdentityDocuments: Array<IdentityDocumentsAddData>;
};

/**
 *
 *
 * Cover (Resize to fit within the specified size, so the result might be smaller than requested.)
 *
 * CoverExact (Resize and pad to exactly fit within the specified size.)
 *
 * Fit (Resize to fit within the specified size, so the result might be smaller than requested.)
 *
 * FitExact (Resize and pad to exactly fit within the specified size.)
 */
export type ImageResizeModeEnum = 'Cover' | 'CoverExact' | 'Fit' | 'FitExact';

export type ImageSizeParameters = {
    /**
     * Unique identifier of the image.
     */
    ImageId: string;
    /**
     * Desired width of the image.
     */
    Width?: number | null;
    /**
     * Desired height of the image.
     */
    Height?: number | null;
    /**
     * Mode how the image should be resized to the desired width and height.
     *
     * Cover (Resize to fit within the specified size, so the result might be smaller than requested.)
     *
     * CoverExact (Resize and pad to exactly fit within the specified size.)
     *
     * Fit (Resize to fit within the specified size, so the result might be smaller than requested.)
     *
     * FitExact (Resize and pad to exactly fit within the specified size.)
     */
    ResizeMode?: (ImageResizeModeEnum) | null;
};

export type ImageUrl = {
    /**
     * Unique identifier of the image.
     */
    ImageId: string;
    /**
     * URL of the image.
     */
    Url: string;
};

export type ImageUrlParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Parameters of images whose URLs should be returned.
     */
    Images: Array<ImageSizeParameters>;
};

export type ImageUrlResult = {
    /**
     * URLs of the images.
     */
    ImageUrls: Array<ImageUrl>;
};

export type Int32NullableUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: number | null;
};

export type Int32UpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: number;
};

export type InvoicePaymentData = {
    InvoiceId?: string | null;
};

/**
 *
 *
 * Receivable
 *
 * Balancing
 *
 * UnderpaymentBalancingReceivable
 *
 * OverpaymentBalancingReceivable
 *
 * Overpayment
 */
export type InvoicePaymentTypeEnum = 'Receivable' | 'Balancing' | 'UnderpaymentBalancingReceivable' | 'OverpaymentBalancingReceivable' | 'Overpayment';

export type ItalianFiscalMachineData = {
    /**
     * Indicates if the transaction is a refund.
     */
    IsRefund?: boolean;
    /**
     * Number of the rebated receipt.
     */
    RebatedReceiptNumber?: string | null;
    /**
     * Sequence of the rebated receipt.
     */
    RebatedReceiptSequence?: string | null;
    /**
     * Date and time of the rebated receipt in UTC.
     */
    RebatedReceiptDateTimeUtc?: string | null;
    /**
     * Serial number of the printer.
     */
    PrinterSerialNumber?: string | null;
};

export type ItalianFiscalMachineDataV20250623 = {
    /**
     * Indicates if the transaction is a refund.
     */
    IsRefund?: boolean;
    /**
     * Number of the rebated receipt.
     */
    RebatedReceiptNumber?: string | null;
    /**
     * Sequence of the rebated receipt.
     */
    RebatedReceiptSequence?: string | null;
    /**
     * Date and time of the rebated receipt in UTC.
     */
    RebatedReceiptDateTimeUtc?: string | null;
    /**
     * Serial number of the printer.
     */
    PrinterSerialNumber?: string | null;
};

export type ItalianFiscalMachinePayloadV20250623 = {
    /**
     * Base64-encoded data of the file to be printed.
     */
    Payload: string;
};

export type ItalianFiscalMachineResultData = {
    SerialNumber?: string | null;
    Base64Data?: string | null;
};

export type JToken = Array<JToken>;

export type KeyCutterCommandData = DeviceCommandData & {
    /**
     * Identifier of the key cutter.
     */
    KeyCutterId?: string | null;
    /**
     * URL of the key cutter server API.
     */
    ApiUrl?: string | null;
    /**
     * Custom JSON data.
     */
    KeyCutterData?: string | null;
    /**
     * Count of keys to cut.
     */
    KeyCount: number;
    /**
     * Identifiers of locks/rooms the key should open.
     */
    LockIds: Array<(string)>;
    /**
     * Reservation start.
     */
    StartUtc: string;
    /**
     * Reservation end.
     */
    EndUtc: string;
    /**
     * First name of the reservation owner.
     */
    FirstName?: string | null;
    /**
     * Last name of the reservation owner.
     */
    LastName: string;
    /**
     * Normalized first name of the customer without special characters.
     */
    NormalizedFirstName?: string | null;
    /**
     * Normalized last name of the customer without special characters.
     */
    NormalizedLastName?: string | null;
    /**
     * Telephone of the reservation owner.
     */
    Telephone?: string | null;
    /**
     * Email of the reservation owner.
     */
    Email?: string | null;
    /**
     * Unique identifier of the reservation.
     */
    ReservationId?: string | null;
    /**
     * Confirmation number of the reservation in Mews.
     */
    ReservationNumber?: string | null;
};

export type KeyCutterCommandParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the KeyCutter [Device](https://mews-systems.gitbook.io/connector-api/operations/devices/#device) where to encode the key.
     */
    KeyCutterId: string;
    /**
     * Unique identifier of the reservation to encode the key for.
     */
    ReservationId: string;
    /**
     * Count of keys to encode.
     */
    KeyCount: number;
};

export type Language = {
    /**
     * Language-culture code of the language.
     */
    Code?: string | null;
    /**
     * Language-culture code of the fallback language.
     */
    FallbackLanguageCode?: string | null;
    /**
     * English name of the language.
     */
    EnglishName?: string | null;
    /**
     * Local name of the language.
     */
    LocalName?: string | null;
};

export type LanguageResult = {
    /**
     * The supported languages.
     */
    Languages?: Array<Language> | null;
};

export type LanguageTextParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Language-culture codes of the [Languages](https://mews-systems.gitbook.io/connector-api/operations/#language) whose texts to return.
     */
    LanguageCodes: Array<(string)>;
    /**
     * Scope of texts to return.
     */
    Scope: string;
};

export type LanguageTextResult = {
    /**
     * Texts in the specified languages.
     */
    LanguageTexts?: Array<LanguageTexts> | null;
};

export type LanguageTexts = {
    /**
     * Language-culture code of the [Language](https://mews-systems.gitbook.io/connector-api/operations/#language).
     */
    LanguageCode?: string | null;
    /**
     * Texts in the specified language by their keys.
     */
    Texts?: {
        [key: string]: (string | null);
    } | null;
};

/**
 * Ledger balance
 */
export type LedgerBalance = {
    /**
     * Unique identifier of the Enterprise.
     */
    EnterpriseId: string;
    /**
     * Day for which ledger balance applies in ISO 8601 format.
     */
    Date: string;
    /**
     * Type of accounting ledger.
     *
     * Revenue
     *
     * Tax
     *
     * Payment
     *
     * Deposit
     *
     * Guest
     *
     * City
     *
     * NonRevenue
     */
    LedgerType: AccountingLedgerTypeEnum;
    /**
     * Ledger opening balance at the start of the day.
     */
    OpeningBalance: Amount;
    /**
     * Ledger closing balance at the end of the day.
     */
    ClosingBalance: Amount;
};

export type LedgerBalanceParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Date interval over which the ledger balances are created.
     */
    Date: DateFilterInterval;
    /**
     * Accounting ledger types to which ledger balances belong.
     */
    LedgerTypes: Array<AccountingLedgerTypeEnum>;
};

export type LedgerBalanceResult = {
    /**
     * The list of filtered ledger balances.
     */
    LedgerBalances: Array<LedgerBalance> | null;
    /**
     * Unique identifier of the last and hence oldest ledger balance returned. This can be used in Limitation in a subsequent request to fetch the next batch of ledger balances.
     */
    Cursor?: string | null;
};

export type LegalEntityIdentifierUpdateParameters = {
    /**
     * Italian destination code (or `null` if the Italian destination code should not be updated).
     */
    ItDestinationCode?: (StringUpdateValue) | null;
    /**
     * Italian fiscal code (or `null` if the Italian fiscal code should not be updated).
     */
    ItFiscalCode?: (StringUpdateValue) | null;
};

export type LegalEntityIdentifiers = {
    /**
     * Italian destination code.
     */
    ItDestinationCode?: string | null;
    /**
     * Italian fiscal code.
     */
    ItFiscalCode?: string | null;
};

export type LengthRestriction = {
    /**
     * Unique identifier of the rate restriction.
     */
    Id?: string;
    /**
     * Unique identifier of the rate.
     */
    RateId?: string;
    /**
     * Whether the rate restriction is inherited from the parent rate.
     */
    IsInherited?: boolean;
    /**
     * Start of the rate restriction in UTC timezone in ISO 8601 format.
     */
    StartUtc?: string | null;
    /**
     * End of the rate restriction in UTC timezone in ISO 8601 format.
     */
    EndUtc?: string | null;
    /**
     * The restricted days of week.
     */
    Days?: Array<(string)> | null;
    /**
     * Identifiers of from external systems.
     */
    ExternalIdentifier?: string | null;
    /**
     * Minimal reservation length in ISO 8601 duration format.
     */
    MinLength?: string | null;
    /**
     * Maximal reservation length in ISO 8601 duration format.
     */
    MaxLength?: string | null;
};

/**
 * Limitation on the quantity of data returned.
 */
export type Limitation = {
    Count: number;
    Cursor?: string | null;
};

export type LoyaltyMembership = {
    /**
     * Unique identifier of the loyalty membership.
     */
    Id: string;
    /**
     * Unique identifier of the chain.
     */
    ChainId: string;
    /**
     * Unique identifier of the account.
     */
    AccountId: string;
    /**
     * Unique identifier of the loyalty program.
     */
    LoyaltyProgramId: string;
    /**
     * State of the loyalty membership.
     *
     * New
     *
     * Pending
     *
     * Enrolled
     *
     * Canceled
     *
     * Declined
     */
    State: LoyaltyMembershipStateEnum;
    /**
     * Defines the primary loyalty membership.
     */
    IsPrimary: boolean;
    /**
     * Unique identifier for the loyalty membership in the loyalty provider's system.
     */
    ProviderMembershipId?: string | null;
    /**
     * Code of the loyalty membership.
     */
    Code?: string | null;
    /**
     * The loyalty points for the account in that membership.
     */
    Points?: number | null;
    /**
     * Expiration date of the loyalty membership in UTC timezone in ISO 8601 format.
     */
    ExpirationDate?: string | null;
    /**
     * Url of the loyalty membership.
     */
    Url?: string | null;
    /**
     * Unique identifier of the loyalty tier.
     */
    LoyaltyTierId?: string | null;
    /**
     * The profile data of the user who created or last updated the record.
     */
    CreatorProfile: ProfileData;
    /**
     * The profile data of the user who created or last updated the record.
     */
    UpdaterProfile: ProfileData;
};

export type LoyaltyMembershipAddParameters = {
    /**
     * Unique identifier of the customer account.
     */
    AccountId: string;
    /**
     * Unique identifier of the loyalty program.
     */
    LoyaltyProgramId: string;
    /**
     * Defines the primary loyalty membership for the account.
     */
    IsPrimary: boolean;
    /**
     * State of the loyalty membership. The default is `Enrolled`.
     *
     * New
     *
     * Pending
     *
     * Enrolled
     *
     * Canceled
     *
     * Declined
     */
    State?: (LoyaltyMembershipStateEnum) | null;
    /**
     * Loyalty membership code, such as an identification number printed on a loyalty card visible to the customer.
     */
    Code?: string | null;
    /**
     * The loyalty points for the account in that membership.
     */
    Points?: number | null;
    /**
     * Expiration date of the loyalty membership in UTC timezone in ISO 8601 format.
     */
    ExpirationDate?: string | null;
    /**
     * URL of the loyalty membership in external loyalty system.
     */
    Url?: string | null;
    /**
     * Unique identifier of the loyalty tier.
     */
    LoyaltyTierId?: string | null;
};

export type LoyaltyMembershipDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the loyalty memberships to be deleted.
     */
    LoyaltyMembershipIds: Array<(string)>;
};

export type LoyaltyMembershipFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
     */
    ChainIds?: Array<(string)> | null;
    /**
     * The time interval during which the membership was created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * The time interval during which the membership was last updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Unique identifiers of [Loyalty memberships](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-membership).
     */
    LoyaltyMembershipIds?: Array<(string)> | null;
    /**
     * Unique identifiers of accounts (for example [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)) the membership is associated with.
     */
    AccountIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/loyaltyprograms/#loyalty-program).
     */
    LoyaltyProgramIds?: Array<(string)> | null;
    /**
     * States of the loyalty memberships.
     */
    MembershipStates?: Array<LoyaltyMembershipStateEnum> | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
    /**
     * List of loyalty membership codes, such as identification numbers printed on loyalty cards visible to the customer.
     */
    Codes?: Array<(string)> | null;
    /**
     * List of unique loyalty membership identifiers assigned and managed by the external loyalty provider's system.
     */
    ProviderMembershipIds?: Array<(string)> | null;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation: Limitation;
};

export type LoyaltyMembershipResult = {
    /**
     * The loyalty memberships of the enterprise.
     */
    LoyaltyMemberships: Array<LoyaltyMembership>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 * State of the loyalty membership.
 *
 * New
 *
 * Pending
 *
 * Enrolled
 *
 * Canceled
 *
 * Declined
 */
export type LoyaltyMembershipStateEnum = 'New' | 'Pending' | 'Enrolled' | 'Canceled' | 'Declined';

export type LoyaltyMembershipStateUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: LoyaltyMembershipStateEnum;
};

export type LoyaltyMembershipUpdateParameters = {
    /**
     * Unique identifier of the loyalty membership.
     */
    LoyaltyMembershipId: string;
    /**
     * Unique identifier of the loyalty program (or `null` if the program should not be updated).
     */
    LoyaltyProgramId?: (GuidUpdateValue) | null;
    /**
     * State of the loyalty membership, (or `null` if the state should not be updated).
     */
    State?: (LoyaltyMembershipStateUpdateValue) | null;
    /**
     * Boolean value defining the primary loyalty membership for the account (or `null` if the value should not be updated).
     */
    IsPrimary?: (BooleanUpdateValue) | null;
    /**
     * Code of the loyalty membership. (or `null` if the code should not be updated).
     */
    Code?: (StringUpdateValue) | null;
    /**
     * The loyalty points the account has in the loyalty membership (or `null` if the points should not be updated).
     */
    Points?: (Int32NullableUpdateValue) | null;
    /**
     * Expiration date of the loyalty membership in UTC timezone in ISO 8601 format (or `null` if the date should not be updated).
     */
    ExpirationDate?: (StringUpdateValue) | null;
    /**
     * URL of the loyalty membership (or `null` if the URL should not be updated).
     */
    Url?: (StringUpdateValue) | null;
    /**
     * Unique identifier of the loyalty tier (or `null` if the tier should not be updated).
     */
    LoyaltyTierId?: (GuidNullableUpdateValue) | null;
};

export type LoyaltyProgram = {
    /**
     * Unique identifier of the loyalty program.
     */
    Id: string;
    /**
     * Unique identifier of the chain.
     */
    ChainId: string;
    /**
     * Name of the loyalty program.
     */
    Name: string;
    /**
     * Code of the loyalty program.
     */
    Code: string;
    Type?: LoyaltyProgramType | null;
    Subscription?: LoyaltyProgramSubscription | null;
};

export type LoyaltyProgramAddParameters = {
    Name: string;
    Code: string;
    Type?: LoyaltyProgramType | null;
    Subscription?: LoyaltyProgramSubscription | null;
};

export type LoyaltyProgramDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the loyalty programs to be deleted.
     */
    LoyaltyProgramIds: Array<(string)>;
};

export type LoyaltyProgramFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
     */
    ChainIds?: Array<(string)> | null;
    CreatedUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-program).
     */
    LoyaltyProgramIds?: Array<(string)> | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
    Codes?: Array<(string)> | null;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation: Limitation;
};

export type LoyaltyProgramResult = {
    /**
     * Updated loyalty programs.
     */
    LoyaltyPrograms: Array<LoyaltyProgram>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type LoyaltyProgramSubscription = 'Free' | 'Paid';

export type LoyaltyProgramType = 'Hotel' | 'ExternalPartner' | 'SoftBrand' | 'Unknown';

export type LoyaltyProgramUpdateParameters = {
    LoyaltyProgramId: string;
    Name?: (StringUpdateValue) | null;
    Type?: (StringUpdateValue) | null;
    Subscription?: (StringUpdateValue) | null;
};

export type LoyaltyTier = {
    /**
     * Unique identifier of the loyalty tier.
     */
    Id: string;
    /**
     * Unique identifier of the loyalty program of that loyalty tier.
     */
    LoyaltyProgramId: string;
    /**
     * Name of the loyalty tier.
     */
    Name: string;
    /**
     * Code of the loyalty tier.
     */
    Code: string;
    /**
     * Ordering of the loyalty tier.
     */
    Ordering: number;
};

export type LoyaltyTierAddParameters = {
    /**
     * Unique identifier of the loyalty program the tier belongs to.
     */
    LoyaltyProgramId: string;
    /**
     * Name of the loyalty tier.
     */
    Name: string;
    /**
     * Code of the loyalty tier.
     */
    Code: string;
    /**
     * Ordering of the loyalty tier.
     */
    Ordering: number;
};

export type LoyaltyTierDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the loyalty tiers to be deleted.
     */
    LoyaltyTierIds: Array<(string)>;
};

export type LoyaltyTierFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.
     */
    ChainIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-program).
     */
    LoyaltyProgramIds: Array<(string)>;
    /**
     * Unique identifiers of [Loyalty tiers](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-tier).
     */
    LoyaltyTierIds?: Array<(string)> | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
    /**
     * Interval of `Loyalty tier` last update date and time.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation: Limitation;
};

export type LoyaltyTierResult = {
    /**
     * The loyalty tiers of the loyalty program within the chain.
     */
    LoyaltyTiers: Array<LoyaltyTier>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type LoyaltyTierUpdateParameters = {
    /**
     * Unique identifier of the loyalty tier.
     */
    LoyaltyTierId: string;
    /**
     * Name of the loyalty tier \(or `null` if the name should not be updated\).
     */
    Name?: (StringUpdateValue) | null;
    /**
     * Code of the loyalty tier, \(or `null` if the code should not be updated\).
     */
    Code?: (StringUpdateValue) | null;
    /**
     * Ordering of the loyalty tier, \(or `null` if the ordering should not be updated\).
     */
    Ordering?: (Int32UpdateValue) | null;
};

export type LoyaltyTierWriteResult = {
    /**
     * The loyalty tiers of the loyalty program within the chain.
     */
    LoyaltyTiers: Array<LoyaltyTier>;
};

/**
 *
 *
 * Customer
 *
 * Company
 */
export type MergeAccountTypeEnum = 'Customer' | 'Company';

export type Message = {
    /**
     * Unique identifier of the message.
     */
    Id: string;
    /**
     * Unique identifier of the [Message thread](https://mews-systems.gitbook.io/connector-api/operations/messagethreads/#message-thread) which the message belongs to.
     */
    MessageThreadId: string;
    /**
     * Text of the message.
     */
    Text: string;
    Sender: SenderDiscriminator;
    /**
     * Creation date and time of the message in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
};

export type MessageAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    MessageThreadId: string;
    Text: string;
    Identifier?: string | null;
};

export type MessageFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Message threads](https://mews-systems.gitbook.io/connector-api/operations/messagethreads/#message-thread) from where to return messages.
     */
    MessageThreadIds: Array<(string)>;
    CreatedUtc?: (TimeFilterInterval) | null;
};

export type MessageResult = {
    /**
     * The filtered messages.
     */
    Messages: Array<Message>;
    /**
     * Unique identifier of the last and hence oldest message returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older messages.
     */
    Cursor?: string | null;
};

export type MessageThread = {
    /**
     * Unique identifier of the message thread.
     */
    Id: string;
    /**
     * The sender of the original message in the thread.
     */
    OriginalSender: string;
    /**
     * Subject of the message thread.
     */
    Subject: string;
    /**
     * Creation date and time of the message thread in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the message thread in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    IsResolved?: boolean;
};

export type MessageThreadAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * The sender of the original message in the thread.
     */
    OriginalSender: string;
    /**
     * Subject of the message thread.
     */
    Subject: string;
};

export type MessageThreadFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Message threads](https://mews-systems.gitbook.io/connector-api/operations/#message-thread). Required if no other filter is provided.
     */
    MessageThreadIds?: Array<(string)> | null;
    CreatedUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type MessageThreadResult = {
    /**
     * The filtered message threads.
     */
    MessageThreads: Array<MessageThread>;
    /**
     * Unique identifier of the last and hence oldest message thread returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older message threads.
     */
    Cursor?: string | null;
};

/**
 * Mobile key command data
 */
export type MobileKeyData = {
    /**
     * Unique identifier of the mobile key endpoint.
     */
    EndpointId?: string | null;
    /**
     * Label of the mobile key.
     */
    Label?: string | null;
    /**
     * Description of the mobile key.
     */
    Description?: string | null;
    /**
     * Unique identifier of the mobile key for revocation.
     */
    RevokeMobileKeyId?: string | null;
};

export type MultipleAccountMergeParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Accounts to be merged.
     */
    AccountMergeParameters: Array<AccountMergeParameter>;
};

export type MultipleAccountNoteAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Account notes to be added.
     */
    AccountNotes: Array<AccountNoteAddParameters>;
};

export type MultipleAccountNoteDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifiers of the account notes to be deleted.
     */
    AccountNoteIds: Array<(string)>;
};

export type MultipleAccountNoteUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Account notes to be updated.
     */
    AccountNoteUpdates: Array<AccountNoteUpdateParameters>;
};

export type MultipleAccountUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Accounts to be updated.
     */
    AccountUpdates: Array<AccountUpdateParameters>;
};

export type MultipleAccountingItemsUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * List of requested updates.
     */
    AccountingItemUpdates: Array<AccountingItemUpdateParameters>;
};

export type MultipleAddressAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Collection of addresses to be created.
     */
    Addresses: Array<AddressAddParameters>;
};

export type MultipleAddressUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Collection of addresses to be updated.
     */
    AddressUpdates: Array<AddressUpdateParameters>;
};

export type MultipleAvailabilityBlockAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Availability blocks to be added.
     */
    AvailabilityBlocks: Array<AvailabilityBlockAddParameters>;
};

export type MultipleAvailabilityBlockUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Availability blocks to be updated.
     */
    AvailabilityBlocks: Array<AvailabilityBlockUpdateParameters>;
};

export type MultipleBillAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Information about bills to be created.
     */
    Bills: Array<BillAddParameters>;
};

export type MultipleBillingAutomationAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Parameters of the new billing automations to be created.
     */
    BillingAutomations: Array<BillingAutomationAddParameters>;
};

export type MultipleBillingAutomationUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Details of the billing automations to be updated.
     */
    BillingAutomationUpdates: Array<BillingAutomationUpdateParameters>;
};

export type MultipleBillsUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Information about bills to be updated.
     */
    BillsUpdates: Array<BillUpdateParameters>;
};

export type MultipleCompanyContractAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Information about travel agency contracts to be created.
     */
    TravelAgencyContracts: Array<TravelAgencyContractAddParameters>;
};

export type MultipleCompanyContractDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the Travel agency contract to delete.
     */
    TravelAgencyContractIds: Array<(string)>;
    /**
     * Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the travel agency contract belongs to.
     */
    ServiceIds: Array<(string)>;
};

export type MultipleCompanyContractUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Information about travel agency contracts to be updated.
     */
    TravelAgencyContractUpdates: Array<TravelAgencyContractUpdateParameters>;
};

export type MultipleCompanyDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Unique identifiers of the companies to be deleted.
     */
    CompanyIds: Array<(string)>;
};

export type MultipleCreditCardParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    CreditCardIds?: Array<(string)> | null;
};

export type MultipleCustomerParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerIds: Array<(string)>;
};

export type MultipleIdentityDocumentUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Identity documents to be updated.
     */
    IdentityDocuments: Array<IdentityDocumentUpdateParameters>;
};

export type MultipleLoyaltyMembershipAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Loyalty memberships to be added.
     */
    LoyaltyMemberships: Array<LoyaltyMembershipAddParameters>;
};

export type MultipleLoyaltyMembershipUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Loyalty memberships to be updated.
     */
    LoyaltyMembershipUpdates: Array<LoyaltyMembershipUpdateParameters>;
};

export type MultipleLoyaltyProgramAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Loyalty programs to be added.
     */
    LoyaltyPrograms: Array<LoyaltyProgramAddParameters>;
};

export type MultipleLoyaltyProgramUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Loyalty programs to be updated.
     */
    LoyaltyProgramUpdates: Array<LoyaltyProgramUpdateParameters>;
};

export type MultipleLoyaltyTierAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    ChainId?: string | null;
    /**
     * Loyalty tiers to be added.
     */
    LoyaltyTiers: Array<LoyaltyTierAddParameters>;
};

export type MultipleLoyaltyTierUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Loyalty tiers to be updated.
     */
    LoyaltyTierUpdates: Array<LoyaltyTierUpdateParameters>;
};

export type MultipleMessageAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Messages to be added.
     */
    Messages: Array<MessageAddParameters>;
};

export type MultiplePaymentRequestAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Payment requests to be added.
     */
    PaymentRequests: Array<PaymentRequestAddParameters>;
};

export type MultiplePaymentRequestCancelParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Identifiers of payment requests to be canceled.
     */
    PaymentRequestIds: Array<(string)>;
};

/**
 * Parameters for updating rate capacity offsets in an enterprise.
 */
export type MultipleRateCapacityOffsetUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * A list of rate capacity offset updates to apply.
     */
    CapacityOffsetUpdates: Array<RateCapacityOffsetUpdateParameters>;
};

export type MultipleReservationResult = {
    /**
     * Identifiers of the affected `Reservation` entities.
     */
    ReservationIds: Array<(string)>;
};

export type MultipleReservationUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the reservation.
     */
    ReservationId: string;
    /**
     * Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number) (or `null` if the channel number should not be updated).
     */
    ChannelNumber?: (StringUpdateValue) | null;
    /**
     * Reservation start in UTC timezone in ISO 8601 format. (or `null` if the start time should not be updated).
     */
    StartUtc?: (StringUpdateValue) | null;
    /**
     * Reservation end in UTC timezone in ISO 8601 format. (or `null` if the end time should not be updated).
     */
    EndUtc?: (StringUpdateValue) | null;
    /**
     * Date when the optional reservation is released in UTC timezone in ISO 8601 format. (or `null` if the release time should not be updated).
     */
    ReleasedUtc?: (StringUpdateValue) | null;
    /**
     * Number of people per age category the reservation is for. If supplied, the person counts will be replaced. (or `null` if the person counts should not be updated).
     */
    PersonCounts?: (ReservationUpdatePersonCountParameters) | null;
    /**
     * Identifier of the assigned `Resource`.
     */
    AssignedResourceId?: (GuidNullableUpdateValue) | null;
    /**
     * Identifier of the requested `ResourceCategory` (or `null` if resource category should not be updated).
     */
    RequestedCategoryId?: (GuidUpdateValue) | null;
    /**
     * Identifier of the `Company` that mediated the reservation (or `null` if travel agency should not be updated).
     */
    TravelAgencyId?: (GuidNullableUpdateValue) | null;
    /**
     * Identifier of the `Company` on behalf of which the reservation was made (or `null` if company should not be updated).
     */
    CompanyId?: (GuidNullableUpdateValue) | null;
    /**
     * Identifier of the reservation `BusinessSegment` (or `null` if the business segment should not be updated).
     */
    BusinessSegmentId?: (GuidNullableUpdateValue) | null;
    /**
     * `Purpose` of the reservation (or `null` if the purpose should not be updated).
     */
    Purpose?: (StringUpdateValue) | null;
    /**
     * Identifier of the reservation `Rate` (or `null` if the rate should not be updated).
     */
    RateId?: (GuidUpdateValue) | null;
    /**
     * Identifier of `CreditCard` belonging to `Customer` who owns the reservation.  (or `null` if the credit card should not be updated).
     */
    CreditCardId?: (GuidNullableUpdateValue) | null;
    /**
     * Prices for time units of the reservation. E.g. prices for the first or second night. (or `null` if the unit amounts should not be updated).
     */
    TimeUnitPrices?: (ReservationUpdatePerUnitPriceParameters) | null;
    /**
     * Identifier of the `Customer` on whose behalf the reservation was made. (or `null` if the booker should not be updated).
     */
    BookerId?: (GuidNullableUpdateValue) | null;
    /**
     * Whether the reservation should be locked to the assigned `Resource`. Unlocking and assigning reservation to new `Resource` can be done in one call.
     */
    AssignedResourceLocked?: (BooleanUpdateValue) | null;
    /**
     * Unique identifier of the `AvailabilityBlock` the reservation is assigned to.
     */
    AvailabilityBlockId?: (GuidNullableUpdateValue) | null;
    /**
     * Options of the reservations.
     */
    Options?: (ReservationUpdateOptionsParameters) | null;
    /**
     * Array of properties to be updated in each reservation specified.
     */
    ReservationUpdates: Array<ReservationUpdateParameters>;
    /**
     * Indicates whether the system will check and prevent a booking being made in the case of an overbooking, i.e. where there is an insufficient number of resources available to meet the request.
     * @deprecated
     */
    CheckOverbooking?: boolean | null;
    /**
     * Indicates whether the system will check and prevent a booking being made using a restricted rate, e.g. a private rate. The default is true, i.e. the system will normally check for this unless the property is set to false.
     * @deprecated
     */
    CheckRateApplicability?: boolean | null;
    /**
     * Whether the price should be updated to latest value for date/rate/category combination set in Mews. If not specified, the reservation price is updated.
     */
    Reprice?: boolean | null;
    /**
     * Whether the cancellation fees should be applied according to rate cancellation policies. If not specified, the cancellation fees are applied.
     */
    ApplyCancellationFee?: boolean | null;
    /**
     * Reason for updating the reservation. Required when updating the price of the reservation.
     */
    Reason?: string | null;
};

export type MultipleResourceAccessTokenParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Parameters of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
     */
    ResourceAccessTokenParameters: Array<ResourceAccessTokenParameters>;
};

export type MultipleResourceAccessTokenUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Parameters of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
     */
    ResourceAccessTokenUpdates?: Array<ResourceAccessTokenUpdateParameters> | null;
};

export type MultipleResourceBlockAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Resource block parameters.
     */
    ResourceBlocks: Array<ResourceBlockAddParameters>;
};

export type MultipleResourceUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Resource updates.
     */
    ResourceUpdates: Array<ResourceUpdateParameters>;
};

export type MultipleRoutingRuleAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Collection of Routing rules to be added.
     */
    RoutingRules: Array<RoutingRuleAddParameter>;
};

export type MultipleRoutingRuleUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Collection of Routing rules to be updated.
     */
    RoutingRuleUpdates: Array<RoutingRuleUpdateParameters>;
};

export type MultipleServiceOrderNoteAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Notes to be added.
     */
    ServiceOrderNotes: Array<ServiceOrderNoteAddParameters>;
};

export type MultipleServiceOrderNoteUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Notes to be updated.
     */
    ServiceOrderNoteUpdates: Array<ServiceOrderNoteUpdateParameters>;
};

export type MultipleVoucherAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Vouchers to be added.
     */
    VoucherParameters: Array<VoucherAddParameters>;
};

export type MultipleVoucherCodeAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Voucher codes to be added.
     */
    VoucherCodeParameters: Array<VoucherCodeAddParameters>;
};

export type MultipleVoucherCodeDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the voucher codes to be deleted.
     */
    VoucherCodeIds: Array<(string)>;
};

export type MultipleVoucherDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the vouchers to be deleted.
     */
    VoucherIds: Array<(string)>;
};

export type MultipleVoucherUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Details of voucher updates.
     */
    VoucherUpdates: Array<VoucherUpdateParameters>;
};

export type NextAction = {
    /**
     * Determines type of value.
     *
     * RedirectToUrl (Redirect customer to a URL where they can complete their payment.)
     */
    Discriminator: NextActionTypeEnum;
    /**
     * String value depending on `Type`.
     */
    Value: string;
};

/**
 *
 *
 * RedirectToUrl (Redirect customer to a URL where they can complete their payment.)
 */
export type NextActionTypeEnum = 'RedirectToUrl';

export type ObjectData = {
    [key: string]: unknown;
};

/**
 *
 *
 * Vacant
 *
 * ReservedLocked
 *
 * Reserved
 *
 * InternalUse
 *
 * OutOfOrder
 */
export type OccupancyStateEnum = 'Vacant' | 'ReservedLocked' | 'Reserved' | 'InternalUse' | 'OutOfOrder';

export type OldAddress = {
    /**
     * Unique identifier of the address.
     */
    Id?: string;
    /**
     * First line of the address.
     */
    Line1?: string | null;
    /**
     * Second line of the address.
     */
    Line2?: string | null;
    /**
     * The city.
     */
    City?: string | null;
    /**
     * Postal code.
     */
    PostalCode?: string | null;
    /**
     * ISO 3166-1 code of the `Country`.
     */
    CountryCode?: string | null;
    /**
     * ISO 3166-2 code of the administrative division, e.g. `DE-BW`.
     */
    CountrySubdivisionCode?: string | null;
    /**
     * The latitude.
     */
    Latitude?: number | null;
    /**
     * The longitude.
     */
    Longitude?: number | null;
};

export type OldTaxation = {
    Code?: string | null;
    /**
     * @deprecated
     */
    TaxEnvironmentCode?: string | null;
    Name?: string | null;
    LocalName?: string | null;
};

export type OrderAdditionOptions = {
    DisableItemGrouping?: boolean;
};

export type OrderAdditionParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to be ordered.
     */
    ServiceId: string;
    /**
     * Identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) to be charged. Company billing may not be enabled for your integration.
     */
    AccountId?: string | null;
    /**
     * Identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) to be charged.  **Deprecated!**
     * @deprecated
     */
    CustomerId?: string | null;
    Options?: (OrderAdditionOptions) | null;
    /**
     * Parameters of the ordered products.
     */
    ProductOrders?: Array<ProductOrderAdditionData> | null;
    /**
     * Parameters of the ordered custom items.
     */
    Items?: Array<OrderItemAdditionData> | null;
    /**
     * Date and time of the order consumption in UTC timezone in ISO 8601 format. If not specified, current date and time is used. Please note, as order consumption is one-time event, the optional parameters StartUtc and EndUtc in [Product order parameters](https://mews-systems.gitbook.io/connector-api/operations/#product-order-parameters) should not be used.
     */
    ConsumptionUtc?: string | null;
    /**
     * Additional notes of the order.
     */
    Notes?: string | null;
    BusinessSegmentId?: string | null;
    /**
     * Identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) to which the created order will be assigned. The bill needs to be issued to the same account as the order.
     */
    BillId?: string | null;
    LinkedReservationId?: string | null;
};

export type OrderAdditionResult = {
    /**
     * Unique identifier of the created order.
     */
    OrderId?: string;
    ChargeId?: string;
};

export type OrderItem = {
    /**
     * Unique identifier of the order item.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the order item belongs to.
     */
    AccountId?: string | null;
    /**
     * A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), e.g. customer or company.
     *
     * Company
     *
     * Customer
     */
    AccountType?: (AccountTypeEnum) | null;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the order item is assigned to.
     */
    ServiceId: string;
    /**
     * Unique identifier of the [Service order](https://mews-systems.gitbook.io/connector-api/operations/serviceorders/#service-order) the order item is assigned to.
     */
    ServiceOrderId: string;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the order item is assigned to.
     */
    BillId?: string | null;
    /**
     * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the order item belongs to.
     */
    AccountingCategoryId?: string | null;
    /**
     * Name of the order item for billing purposes.
     */
    BillingName?: string | null;
    /**
     * Identifier of the entity from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Unit count of item, i.e. the number of sub-items or units, if applicable.
     */
    UnitCount: number;
    /**
     * Unit amount of item, i.e. the amount of each individual sub-item or unit, if applicable.
     */
    UnitAmount: Amount;
    /**
     * Amount of item; note a negative amount represents a rebate or payment.
     */
    Amount: Amount;
    /**
     * Order item's original amount. Negative amount represents either rebate or a payment. Contains the earliest known value in conversion chain.
     */
    OriginalAmount: Amount;
    /**
     * Revenue type of the item.
     *
     * Service
     *
     * Product
     *
     * Additional
     */
    RevenueType: RevenueTypeEnum;
    /**
     * Unique identifier of the user who created the order item.
     */
    CreatorProfileId: string;
    /**
     * Unique identifier of the user who updated the order item.
     */
    UpdaterProfileId: string;
    /**
     * Creation date and time of the order item created in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the order item in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Date and time of the item consumption in UTC timezone in ISO 8601 format.
     */
    ConsumedUtc: string;
    /**
     * Cancellation date and time of the order item in UTC timezone in ISO 8601 format.
     */
    CanceledUtc?: string | null;
    /**
     * Date and time of the item bill closure in UTC timezone in ISO 8601 format.
     */
    ClosedUtc?: string | null;
    /**
     * Start of the order item in UTC timezone in ISO 8601 format.
     */
    StartUtc?: string | null;
    /**
     * Date and time when the order item was claimed in UTC timezone in ISO 8601 format.
     */
    ClaimedUtc?: string | null;
    /**
     * Accounting state of the order item.
     *
     * Open (Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.)
     *
     * Closed (Order items which carry a non-zero value and have been closed on a bill or invoice.)
     *
     * Inactive (Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.)
     *
     * Canceled (Order items which have been canceled, regardless of whether the item is of zero value.)
     */
    AccountingState: AccountingStateEnum;
    /**
     * Order item type, e.g. whether product order or space order.
     *
     * CancellationFee
     *
     * NightRebate
     *
     * ProductOrderRebate
     *
     * AdditionalExpenseRebate
     *
     * Deposit
     *
     * ExchangeRateDifference
     *
     * CustomItem
     *
     * ServiceCharge
     *
     * CityTax
     *
     * CityTaxDiscount
     *
     * SpaceOrder
     *
     * ProductOrder
     *
     * Surcharge
     *
     * TaxCorrection
     *
     * ResourceUpgradeFee
     *
     * InvoiceFee
     *
     * MulticurrencyFee
     *
     * AllowanceDiscount
     *
     * AllowanceBreakage
     *
     * AllowanceContraBreakage
     */
    Type: OrderItemTypeEnum;
    /**
     * Options of the order item.
     */
    Options: OrderItemOptions;
    /**
     * Additional order item data.
     */
    Data?: (OrderItemData) | null;
    /**
     * Specifies the reason an order item is exempt from tax.
     *
     * IT_N1 (N1 - Escluse ex art.15)
     *
     * IT_N2_2 (N2.2 - Non soggette – altri casi)
     *
     * IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)
     *
     * IT_N4 (N4 - Esenti)
     *
     * IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)
     *
     * PL_ZW (ZW - Zwolniony)
     *
     * PL_NP (NP - Nie podlega)
     */
    TaxExemptionReason?: (TaxExemptionReasonTypeEnum) | null;
    /**
     * Legal reference that states why this order item is exempt from tax.
     */
    TaxExemptionLegalReference?: string | null;
};

export type OrderItemAdditionData = {
    Name: string;
    UnitCount: number;
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    UnitAmount: AmountParameters;
    AccountingCategoryId?: string | null;
    /**
     * @deprecated
     */
    Category?: (AccountingCategoryParameters) | null;
    ExternalIdentifier?: string | null;
};

export type OrderItemAllowanceDiscountData = {
    /**
     * Unique identifier of [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which has been discounted by current item.
     */
    DiscountedOrderItemId: string;
    /**
     * Unique identifier of the allowance product [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which credit has been consumed by current item.
     */
    AllowanceProductOrderItemId: string;
};

export type OrderItemAllowanceProfitsData = {
    /**
     * Unique identifier of the allowance product [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which credit has been consumed by current item.
     */
    AllowanceProductOrderItemId: string;
    /**
     * Type of allowance profit.
     *
     * AllowanceBreakage (Profit of the allowance product.)
     *
     * AllowanceContraBreakage (Accounting balance for profit of the allowance product.)
     *
     * AllowanceLoss (Loss of the allowance product.)
     *
     * AllowanceContraLoss (Accounting balance for loss of the allowance product.)
     */
    AllowanceProfitType: AllowanceProfitTypeEnum;
};

/**
 * Additional order item data.
 */
export type OrderItemData = {
    /**
     * Discriminator pointing to the fields within this object that contains additional data.
     *
     * Rebate (Rebate.)
     *
     * Product (Product.)
     *
     * AllowanceDiscount (Allowance discount.)
     *
     * AllowanceProfits (Allowance profits.)
     */
    Discriminator?: OrderItemDataDiscriminatorEnum;
    /**
     * Contains additional data in the case of rebate item.
     */
    Rebate?: (OrderItemRebateData) | null;
    /**
     * Contains additional data in the case of product item.
     */
    Product?: (OrderItemProductData) | null;
    /**
     * Contains additional data in the case of allowance discount item.
     */
    AllowanceDiscount?: (OrderItemAllowanceDiscountData) | null;
    /**
     * Contains additional data in the case of allowance profits item.
     */
    AllowanceProfits?: (OrderItemAllowanceProfitsData) | null;
};

/**
 *
 *
 * Rebate (Rebate.)
 *
 * Product (Product.)
 *
 * AllowanceDiscount (Allowance discount.)
 *
 * AllowanceProfits (Allowance profits.)
 */
export type OrderItemDataDiscriminatorEnum = 'Rebate' | 'Product' | 'AllowanceDiscount' | 'AllowanceProfits';

export type OrderItemFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Order items](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item). Required if no other filter is provided.
     */
    OrderItemIds?: Array<(string)> | null;
    /**
     * Unique identifiers of specific `Accounts` to which the order items belong to. Required if no other filter is provided.
     */
    AccountIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the service orders ([product service orders](https://mews-systems.gitbook.io/connector-api/operations/productserviceorders/#product-service-order) or [reservations](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06)). Required if no other filter is provided.
     */
    ServiceOrderIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service). Required if no other filter is provided.
     */
    ServiceIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) to which order item is assigned. Required if no other filter is provided.
     */
    BillIds?: Array<(string)> | null;
    /**
     * Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was created. Required if no other filter is provided.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was updated. Required if no other filter is provided.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was consumed. Required if no other filter is provided.
     */
    ConsumedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was canceled. Required if no other filter is provided.
     */
    CanceledUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was closed. Required if no other filter is provided.
     */
    ClosedUtc?: (TimeFilterInterval) | null;
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
     */
    Currency?: string | null;
    /**
     * Accounting state of the item.
     */
    AccountingStates?: Array<AccountingStateEnum> | null;
    /**
     * Order item type, e.g. whether product order or space order.
     */
    Types?: Array<OrderItemTypeEnum> | null;
};

export type OrderItemOld = {
    /**
     * Unique identifier of the item.
     */
    Id?: string;
    /**
     * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the item belongs to.
     */
    AccountId?: string | null;
    /**
     * Unique identifier of the order (or [Reservation](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06) which is a special type of order) the item belongs to.
     */
    OrderId?: string;
    /**
     * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the item is assigned to.
     */
    BillId?: string | null;
    /**
     * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.
     */
    AccountingCategoryId?: string | null;
    /**
     * Unit count of item, i.e. the number of sub-items or units, if applicable.
     */
    UnitCount?: number;
    UnitAmount?: (Amount) | null;
    Amount?: (ExtendedAmount) | null;
    OriginalAmount?: (ExtendedAmount) | null;
    /**
     * Revenue type of the item.
     */
    RevenueType?: string | null;
    CreatorProfileId?: string;
    UpdaterProfileId?: string;
    CreatedUtc?: string | null;
    UpdatedUtc?: string | null;
    /**
     * Date and time of the item consumption in UTC timezone in ISO 8601 format.
     */
    ConsumedUtc?: string | null;
    CanceledUtc?: string | null;
    /**
     * Date and time of the item bill closure in UTC timezone in ISO 8601 format.
     */
    ClosedUtc?: string | null;
    StartUtc?: string | null;
    /**
     * Accounting state of the item.
     */
    AccountingState?: string | null;
    /**
     * Additional data specific to particular order item.
     */
    Data?: {
        Discriminator?: OrderItemTypeOld;
        Value?: RebateOrderItemData | ProductOrderItemData;
    };
};

/**
 * Options of the order item.
 */
export type OrderItemOptions = {
    /**
     * Order item was canceled with reservation cancellation.
     */
    CanceledWithReservation: boolean;
};

export type OrderItemProductData = {
    /**
     * Unique identifier of the [Product](https://mews-systems.gitbook.io/connector-api/operations/products/#product).
     */
    ProductId: string;
    /**
     * Unique identifier of the [Age Category](https://mews-systems.gitbook.io/connector-api/operations/agecategories/#age-category).
     */
    AgeCategoryId?: string | null;
    /**
     * Type of Product, e.g. whether allowance or product.
     *
     * Product
     *
     * Allowance
     */
    ProductType?: (ProductTypeEnum) | null;
};

export type OrderItemRebateData = {
    /**
     * Unique identifier of the [Product](https://mews-systems.gitbook.io/connector-api/operations/products/#product) of the original rebated [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item).
     */
    ProductId: string;
    /**
     * Unique identifier of [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which has been rebated by current item.
     */
    RebatedItemId: string;
};

export type OrderItemResult = {
    /**
     * Set of requested order items.
     */
    OrderItems: Array<OrderItem>;
    /**
     * Unique identifier of the last and hence oldest order item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older order items.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * CancellationFee
 *
 * NightRebate
 *
 * ProductOrderRebate
 *
 * AdditionalExpenseRebate
 *
 * Deposit
 *
 * ExchangeRateDifference
 *
 * CustomItem
 *
 * ServiceCharge
 *
 * CityTax
 *
 * CityTaxDiscount
 *
 * SpaceOrder
 *
 * ProductOrder
 *
 * Surcharge
 *
 * TaxCorrection
 *
 * ResourceUpgradeFee
 *
 * InvoiceFee
 *
 * MulticurrencyFee
 *
 * AllowanceDiscount
 *
 * AllowanceBreakage
 *
 * AllowanceContraBreakage
 */
export type OrderItemTypeEnum = 'CancellationFee' | 'NightRebate' | 'ProductOrderRebate' | 'AdditionalExpenseRebate' | 'Deposit' | 'ExchangeRateDifference' | 'CustomItem' | 'ServiceCharge' | 'CityTax' | 'CityTaxDiscount' | 'SpaceOrder' | 'ProductOrder' | 'Surcharge' | 'TaxCorrection' | 'ResourceUpgradeFee' | 'InvoiceFee' | 'MulticurrencyFee' | 'AllowanceDiscount' | 'AllowanceBreakage' | 'AllowanceContraBreakage';

export type OrderItemTypeOld = 'CancellationFee' | 'Rebate' | 'Deposit' | 'ExchangeRateDifference' | 'CustomItem' | 'Surcharge' | 'SurchargeDiscount' | 'SpaceOrder' | 'ProductOrder' | 'Other' | 'TaxCorrection' | 'ResourceUpgradeFee' | 'InvoiceFee';

export type OrderNote = {
    /**
     * Unique identifier of the service order note.
     */
    Id?: string;
    /**
     * Unique identifier of the `Service order` to which the Service Order Note belongs.
     */
    OrderId?: string;
    /**
     * Content of the service order note.
     */
    Text?: string | null;
    /**
     * A discriminator specifying the type of service order note, e.g. general or channel manager.
     *
     * General
     *
     * ChannelManager
     *
     * SpecialRequest
     */
    Type?: OrderNoteTypeEnum;
    /**
     * Creation date and time of the service order note in UTC timezone in ISO 8601 format.
     */
    CreatedUtc?: string | null;
    /**
     * Last update date and time of the service order note in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc?: string | null;
};

/**
 *
 *
 * General
 *
 * ChannelManager
 *
 * SpecialRequest
 */
export type OrderNoteTypeEnum = 'General' | 'ChannelManager' | 'SpecialRequest';

export type Outlet = {
    /**
     * Unique identifier of the outlet.
     */
    Id: string;
    /**
     * Whether the outlet is still active.
     */
    IsActive: boolean;
    /**
     * Name of the outlet.
     */
    Name: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Creation date and time of the outlet in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the outlet in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type OutletBill = {
    /**
     * Unique identifier of the bill.
     */
    Id: string;
    /**
     * Unique identifier of the Enterprise.
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the [Outlet](https://mews-systems.gitbook.io/connector-api/operations/outlets/#outlet) where the bill was issued.
     */
    OutletId: string;
    /**
     * Number of the bill.
     */
    Number?: string | null;
    /**
     * Date and time of the bill closure in UTC timezone in ISO 8601 format.
     */
    ClosedUtc: string;
    /**
     * Last update date and time of the bill in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Additional notes on the bill.
     */
    Notes?: string | null;
};

export type OutletBillParameters = {
    OutletId: string;
    Number: string;
    ClosedUtc: string;
    Items: Array<OutletItemParameters>;
    AccountId?: string | null;
    Notes?: string | null;
};

export type OutletFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested [Outlets](https://mews-systems.gitbook.io/connector-api/operations/#outlet).
     */
    OutletIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type OutletItem = {
    /**
     * Unique identifier of the item.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the [Outlet bill](https://mews-systems.gitbook.io/connector-api/operations/#outlet-bill) the item belongs to.
     */
    BillId: string;
    /**
     * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.
     */
    AccountingCategoryId?: string | null;
    Type: OutletItemType;
    /**
     * Name of the item.
     */
    Name?: string | null;
    /**
     * Unit count of the item.
     */
    UnitCount: number;
    /**
     * Unit amount of the item.
     */
    UnitAmount: Amount;
    /**
     * Date and time of the item creation in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the item in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Date and time of the item consumption in UTC timezone in ISO 8601 format.
     */
    ConsumedUtc: string;
    /**
     * An identifier of this item from another system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Unique identifier of the payment card `Payment` this item is linked to. This is only applicable to items where `Type` is `Payment`.
     */
    PaymentCardPaymentId?: string | null;
    /**
     * Total price of the reservation.
     * @deprecated
     */
    UnitCost?: (CurrencyValueOld) | null;
};

export type OutletItemParameters = {
    Name: string;
    UnitCount: number;
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    UnitAmount: AmountParameters;
    ConsumedUtc: string;
    Type?: string | null;
    ExternalIdentifier?: string | null;
    Notes?: string | null;
    AccountingCategoryId?: string | null;
    AccountingCategory?: (AccountingCategoryParameters) | null;
    /**
     * @deprecated
     */
    UnitCost?: (CostParameters) | null;
};

export type OutletItemResult = {
    /**
     * The outlet items.
     */
    OutletItems: Array<OutletItem>;
    /**
     * The outlet bills of the items.
     */
    OutletBills: Array<OutletBill>;
    /**
     * Unique identifier of the last and hence oldest outlet item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older outlet items.
     */
    Cursor?: string | null;
};

/**
 * Type of the outlet item.
 */
export type OutletItemType = 'Revenue' | 'NonRevenue' | 'Payment';

export type OutletItemsFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Outlet items](#outlet-item). If not specified, the operation returns data for all [Outlet items](#outlet-item) within scope of the Access Token.
     */
    Ids?: Array<(string)> | null;
    /**
     * Interval in which the [Outlet item](#outlet-item) was consumed. Required if no other filter is provided.
     */
    ConsumedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the [Outlet bill](#outlet-bill) was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the [Outlet bill](#outlet-bill) was closed.
     */
    ClosedUtc?: (TimeFilterInterval) | null;
    /**
     * ISO-4217 code of the [Currency](#currency) the item costs should be converted to.
     */
    Currency?: string | null;
};

export type OutletResult = {
    /**
     * The outlets of the enterprise.
     */
    Outlets: Array<Outlet>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type Parameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
};

/**
 * [Parent product category](https://mews-systems.gitbook.io/connector-api/operations/#parent-product-category).
 */
export type ParentProductCategory = {
    Id: string;
    Names: {
        [key: string]: (string);
    };
};

export type PassportScannerCommandData = DeviceCommandData & {
    /**
     * Identifier of the passport scanner.
     */
    PassportScannerId?: string | null;
    /**
     * Unique identifier of the `Customer` who should be processed.
     */
    CustomerId?: string | null;
    /**
     * Unique identifier of the reservation whose companions should be processed.
     */
    ReservationId?: string | null;
};

export type PaxCount = {
    /**
     * Predicted guest count that will be assigned to the Resource. The guest count must fit within the Resource Category maximum capacity.
     */
    PersonCount: number;
    /**
     * Positive number of adjustments that are assigned to `PersonCount`. The sum of all `UnitCount` in `PaxCounts` should match the adjustment value applied to the interval.
     */
    UnitCount: number;
};

export type Payment = {
    /**
     * Unique identifier of the payment.
     */
    Id: string;
    /**
     * Unique identifier of the `Enterprise`.
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the account (for example `Customer`) the payment belongs to.
     */
    AccountId: string;
    /**
     * A discriminator specifying the account type, e.g. `Customer` or `Company`.
     */
    AccountType?: AccountType | null;
    /**
     * Unique identifier of the `Bill` the payment is assigned to.
     */
    BillId?: string | null;
    /**
     * Unique identifier of the `Reservation` the payment belongs to.
     */
    ReservationId?: string | null;
    /**
     * Unique identifier of the `AccountingCategory` the payment belongs to.
     */
    AccountingCategoryId?: string | null;
    /**
     * Payment's amount, negative amount represents either rebate or a payment.
     */
    Amount: Amount;
    /**
     * Payment's original amount, negative amount represents either rebate or a payment. Contains the earliest known value in conversion chain.
     */
    OriginalAmount: Amount;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Identifier of the settled payment from the external system (ApplePay/GooglePay).
     */
    SettlementId?: string | null;
    /**
     * Date and time of the item consumption in UTC timezone in ISO 8601 format.
     */
    ConsumedUtc?: string | null;
    /**
     * Date and time of the payment bill closure in UTC timezone in ISO 8601 format.
     */
    ClosedUtc?: string | null;
    /**
     * Charged date and time of the payment in UTC timezone in ISO 8601 format.
     */
    ChargedUtc?: string | null;
    /**
     * Creation date and time of the payment created in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the payment in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Date and time of the payment settlement in UTC timezone in ISO 8601 format.
     */
    SettlementUtc: string;
    /**
     * Accounting state of the payment.
     *
     * Open (Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.)
     *
     * Closed (Order items which carry a non-zero value and have been closed on a bill or invoice.)
     *
     * Inactive (Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.)
     *
     * Canceled (Order items which have been canceled, regardless of whether the item is of zero value.)
     */
    AccountingState: AccountingStateEnum;
    /**
     * Payment state of the payment.
     *
     * Charged
     *
     * Canceled
     *
     * Pending
     *
     * Failed
     *
     * Verifying
     */
    State: PaymentStateEnum;
    /**
     * Additional unique identifier of the payment.
     */
    Identifier?: string | null;
    /**
     * Payment type, e.g. whether credit card or cash.
     *
     * Payment
     *
     * CreditCardPayment
     *
     * AlternativePayment
     *
     * CashPayment
     *
     * InvoicePayment
     *
     * ExternalPayment
     *
     * GhostPayment
     *
     * TaxDeductedPayment
     */
    Type: PaymentDiscriminatorEnum;
    /**
     * Payment kind, e.g. whether payment or refund. Value provided only for payments processed by Mews Payments.
     *
     * Payment
     *
     * Chargeback
     *
     * ChargebackReversal
     *
     * Refund
     */
    Kind?: (PaymentKindEnum) | null;
    /**
     * Additional payment data.
     */
    Data?: (PaymentData) | null;
};

export type PaymentCardPaymentData = {
    PaymentCardId?: string | null;
};

export type PaymentCardStorage = {
    /**
     * Key for accessing PCI proxy storage.
     */
    PublicKey: string;
};

export type PaymentCreditCardData = {
    /**
     * Unique identifier of the payment card.
     */
    CreditCardId?: string | null;
    /**
     * The credit card payment transaction.
     */
    Transaction?: (CreditCardTransaction) | null;
};

export type PaymentData = {
    /**
     * Discriminator pointing to the fields within this object that contains additional data.
     *
     * CreditCard
     *
     * Invoice
     *
     * External
     *
     * Ghost
     */
    readonly Discriminator: PaymentDataDiscriminatorEnum;
    /**
     * Contains additional data in the case of a card payment.
     */
    CreditCard?: (PaymentCreditCardData) | null;
    /**
     * Contains additional data in the case of an invoice payment.
     */
    readonly Invoice?: (PaymentInvoiceData) | null;
    /**
     * Contains additional data in the case of an external payment.
     */
    readonly External?: (PaymentExternalData) | null;
    /**
     * Contains additional data in the case of a ghost payment.
     */
    readonly Ghost?: (PaymentGhostData) | null;
};

/**
 *
 *
 * CreditCard
 *
 * Invoice
 *
 * External
 *
 * Ghost
 */
export type PaymentDataDiscriminatorEnum = 'CreditCard' | 'Invoice' | 'External' | 'Ghost';

/**
 *
 *
 * Payment
 *
 * CreditCardPayment
 *
 * AlternativePayment
 *
 * CashPayment
 *
 * InvoicePayment
 *
 * ExternalPayment
 *
 * GhostPayment
 *
 * TaxDeductedPayment
 */
export type PaymentDiscriminatorEnum = 'Payment' | 'CreditCardPayment' | 'AlternativePayment' | 'CashPayment' | 'InvoicePayment' | 'ExternalPayment' | 'GhostPayment' | 'TaxDeductedPayment';

export type PaymentExternalData = {
    /**
     * Type of the external payment. *Except for enterprises based in the French Legal Environment. `Unspecified` is considered as fraud.
     *
     * Unspecified (Unspecified (unavailable in French Legal Environment))
     *
     * BadDebts (Bad debts)
     *
     * Bacs (Bacs payment)
     *
     * WireTransfer (Wire transfer)
     *
     * Invoice (Invoice)
     *
     * ExchangeRateDifference (Exchange rate difference)
     *
     * Complimentary (Complimentary)
     *
     * Reseller (Reseller)
     *
     * ExchangeRoundingDifference (Exchange rounding difference)
     *
     * Barter (Barter)
     *
     * Commission (Commission)
     *
     * BankCharges (Bank charges)
     *
     * CrossSettlement (Cross settlement)
     *
     * Cash (Cash)
     *
     * CreditCard (Credit card)
     *
     * Prepayment (Prepayment)
     *
     * Cheque (Cheque)
     *
     * Bancontact (Bancontact)
     *
     * IDeal (iDeal)
     *
     * PayPal (PayPal)
     *
     * GiftCard (Gift card)
     *
     * LoyaltyPoints (Loyalty points)
     *
     * ChequeVacances (Chèque-Vacances)
     *
     * OnlinePayment (Online payment)
     *
     * CardCheck (Card check)
     *
     * PaymentHubRedirection (Payment hub redirection)
     *
     * Voucher (Voucher)
     *
     * MasterCard (MasterCard)
     *
     * Visa (Visa)
     *
     * Amex (American Express)
     *
     * Discover (Discover)
     *
     * DinersClub (Diners Club)
     *
     * Jcb (JCB)
     *
     * UnionPay (UnionPay)
     *
     * Twint (TWINT)
     *
     * Reka (Reka)
     *
     * LoyaltyCard (Loyalty card)
     *
     * PosDiningAndSpaReward (POS Dining & Spa Reward)
     *
     * DirectDebit (Direct debit)
     *
     * DepositCheck (Deposit - check)
     *
     * DepositCash (Deposit - cash)
     *
     * DepositCreditCard (Deposit - credit card)
     *
     * DepositWireTransfer (Deposit - wire transfer)
     */
    Type: ExternalPaymentTypeEnum;
    /**
     * Identifier of the payment from external system.
     */
    ExternalIdentifier?: string | null;
};

export type PaymentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of specific `Payment` items. Required if no other filter is provided.
     */
    PaymentIds?: Array<(string)> | null;
    /**
     * Unique identifiers of specific `Accounts` to which payments belong. Required if no other filter is provided.
     */
    AccountIds?: Array<(string)> | null;
    /**
     * Unique identifiers of specific `Bill` items to which payments are assigned. Required if no other filter is provided.
     */
    BillIds?: Array<(string)> | null;
    /**
     * Unique identifiers of specific `Reservations` to which payments belong. Required if no other filter is provided.
     */
    ReservationIds?: Array<(string)> | null;
    /**
     * Time interval during which the `Payment` was created. Required if no other filter is provided.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Time interval during which the `Payment` was updated. Required if no other filter is provided.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Time interval during which the `Payment` was charged. Required if no other filter is provided.
     */
    ChargedUtc?: (TimeFilterInterval) | null;
    /**
     * Time interval during which the `Payment` was closed. Required if no other filter is provided.
     */
    ClosedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Payments` were settled.
     */
    SettlementUtc?: (TimeFilterInterval) | null;
    /**
     * ISO-4217 code of the `Currency` the item costs should be converted to.
     */
    Currency?: string | null;
    /**
     * Accounting state of the item.
     */
    AccountingStates?: Array<AccountingState> | null;
    /**
     * Payment state of the item.
     */
    States?: Array<PaymentState> | null;
    /**
     * Payment state of the item.
     *
     * Payment
     *
     * CreditCardPayment
     *
     * AlternativePayment
     *
     * CashPayment
     *
     * InvoicePayment
     *
     * ExternalPayment
     *
     * GhostPayment
     *
     * TaxDeductedPayment
     */
    Type?: (PaymentDiscriminatorEnum) | null;
};

export type PaymentGhostData = {
    /**
     * Unique identifier of the original payment.
     */
    OriginalPaymentId: string;
};

export type PaymentInvoiceData = {
    /**
     * Unique identifier of the invoice `Bill`.
     */
    InvoiceId?: string | null;
    /**
     * Type of the invoice payment.
     *
     * Receivable
     *
     * Balancing
     *
     * UnderpaymentBalancingReceivable
     *
     * OverpaymentBalancingReceivable
     *
     * Overpayment
     */
    Type: InvoicePaymentTypeEnum;
};

/**
 * Payment item
 */
export type PaymentItemOld = {
    /**
     * Unique identifier of the item.
     */
    Id?: string;
    /**
     * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the item belongs to.
     */
    AccountId?: string;
    /**
     * Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the item is assigned to.
     */
    BillId?: string | null;
    /**
     * Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.
     */
    AccountingCategoryId?: string | null;
    Amount?: (ExtendedAmount) | null;
    OriginalAmount?: (ExtendedAmount) | null;
    AmountDefault?: (ExtendedAmount) | null;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Identifier of the settled payment from the external system (ApplePay/GooglePay).
     */
    SettlementId?: string | null;
    /**
     * Date and time of the item consumption in UTC timezone in ISO 8601 format.
     */
    ConsumedUtc?: string | null;
    /**
     * Date and time of the item bill closure in UTC timezone in ISO 8601 format.
     */
    ClosedUtc?: string | null;
    /**
     * Accounting state of the item.
     */
    AccountingState?: string | null;
    /**
     * Payment state of the item.
     */
    State?: string | null;
    Identifier?: string | null;
    /**
     * Additional data specific to particular payment item.
     */
    Data?: {
        Discriminator?: PaymentType;
        Value?: PaymentCardPaymentData | InvoicePaymentData;
    };
};

/**
 *
 *
 * Payment
 *
 * Chargeback
 *
 * ChargebackReversal
 *
 * Refund
 */
export type PaymentKindEnum = 'Payment' | 'Chargeback' | 'ChargebackReversal' | 'Refund';

/**
 *
 *
 * Ideal (iDEAL)
 *
 * PaymentCard (Payment card)
 *
 * ApplePay (Apple Pay)
 *
 * GooglePay (Google Pay)
 *
 * SepaDirectDebit (SEPA Direct Debit)
 *
 * All
 */
export type PaymentMethodsEnum = 'Ideal' | 'PaymentCard' | 'ApplePay' | 'GooglePay' | 'SepaDirectDebit' | 'All';

export type PaymentPlanAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Reservation Id associated with the payment plan.
     */
    ReservationId: string;
    /**
     * Name of the payment plan.
     */
    Name: string;
    /**
     * Data related to the payment request associated with the payment plan created.
     */
    PaymentRequest: PaymentPlanPaymentRequest;
    /**
     * Specifies the month when the payment plan begins collecting payments, in the 'YYYY-MM' format. The month must be in the future and fall within the reservation period.
     */
    StartMonth?: string | null;
};

export type PaymentPlanAddResult = {
    /**
     * Payment request URL associated with the created payment plan.
     */
    PaymentRequestUrl: string;
};

export type PaymentPlanPaymentRequest = {
    /**
     * Allowed payment methods to pay for the payment plan.
     */
    PaymentMethods: Array<PaymentMethodsEnum>;
    /**
     * Message in the payment request.
     */
    Message: string;
    /**
     * Internal note for the payment request.
     */
    Note?: string | null;
    /**
     * Type of payment request to create. If not specified, defaults to `Payment`.
     *
     * Payment
     *
     * PaymentMethod
     */
    PaymentRequestType?: (PaymentPlanPaymentRequestTypeEnum) | null;
    /**
     * Custom expiration date offset in days for the payment request. If not set, it'll expire in one week, unless the first scheduled payment should be executed before. In that case, The expiration date will be set one second before the scheduled payment execution (the last possible moment when we can get the payment method).
     */
    PaymentRequestExpirationOffsetDays?: number | null;
    /**
     * Specifies whether a payment request email is sent to the customer. Defaults to true.
     */
    SendEmail?: boolean | null;
};

/**
 *
 *
 * Payment
 *
 * PaymentMethod
 */
export type PaymentPlanPaymentRequestTypeEnum = 'Payment' | 'PaymentMethod';

export type PaymentRefundParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of specific [Payment](https://mews-systems.gitbook.io/connector-api/operations/payments/#payment).
     */
    PaymentId: string;
    /**
     * Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the payment belongs to.
     */
    AccountId: string;
    /**
     * Refund reason.
     */
    Reason: string;
    /**
     * Refund amount. If not provided, the whole payment will be refunded.
     */
    ValueToRefund?: number | null;
};

export type PaymentRefundResult = {
    /**
     * Unique identifier of specific [Payment](https://mews-systems.gitbook.io/connector-api/operations/payments/#payment).
     */
    PaymentId: string;
    /**
     * Unique identifier of refund.
     */
    RefundId: string;
    /**
     * Type of refund.
     *
     * CreditCardPayment
     *
     * AlternativePayment
     */
    Type: RefundTypeEnum;
    /**
     * Absolute value of the fee.
     */
    Amount: CurrencyValue;
    /**
     * Payment state of the refund.
     *
     * Charged
     *
     * Canceled
     *
     * Pending
     *
     * Failed
     *
     * Verifying
     */
    State: PaymentStateEnum;
};

export type PaymentRequest = {
    /**
     * Unique identifier of the payment request.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) to which the payment request was issued.
     */
    AccountId: string;
    /**
     * @deprecated
     */
    CustomerId?: string | null;
    /**
     * Unique identifier of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations#reservation-group).
     */
    ReservationGroupId?: string | null;
    ReservationId?: string | null;
    State: PaymentRequestState;
    Amount: Amount;
    Type: PaymentRequestType;
    Reason: PaymentRequestReason;
    /**
     * Date and time of the payment request's expiration in ISO 8601 format.
     */
    ExpirationUtc: string;
    /**
     * Description of the payment request.
     */
    Description: string;
    /**
     * Payment request's notes.
     */
    Notes?: string | null;
    /**
     * Creation date and time of the payment request in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the payment request in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type PaymentRequestAddParameters = {
    AccountId: string;
    /**
     * Absolute value of the fee.
     */
    Amount: CurrencyValue;
    Type: PaymentRequestType;
    Reason: PaymentRequestReason;
    ExpirationUtc: string;
    Description: string;
    Notes?: string | null;
    ReservationId?: string | null;
};

export type PaymentRequestFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested [Payment requests](https://mews-systems.gitbook.io/connector-api/operations/#payment-request).
     */
    PaymentRequestIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) accounts to which payment requests were issued.
     */
    AccountIds?: Array<(string)> | null;
    ReservationIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * A list of payment request states to filter by.
     */
    States?: Array<PaymentRequestState> | null;
};

export type PaymentRequestReason = 'Other' | 'PaymentCardMissing' | 'PaymentCardDeclined' | 'Deposit' | 'Prepayment' | 'Fee' | 'RecurringPayment';

export type PaymentRequestResult = {
    /**
     * The filtered payment requests.
     */
    PaymentRequests: Array<PaymentRequest>;
    /**
     * Unique identifier of the last and hence oldest payment request returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older payment requests.
     */
    Cursor?: string | null;
};

export type PaymentRequestState = 'Pending' | 'Completed' | 'Canceled' | 'Expired';

export type PaymentRequestType = 'Payment' | 'Preauthorization';

export type PaymentResult = {
    /**
     * The list of filtered payments.
     */
    Payments: Array<Payment>;
    /**
     * Unique identifier of the last and hence oldest payment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of payments.
     */
    Cursor?: string | null;
};

export type PaymentState = 'Charged' | 'Canceled' | 'Pending' | 'Failed' | 'Verifying';

/**
 *
 *
 * Charged
 *
 * Canceled
 *
 * Pending
 *
 * Failed
 *
 * Verifying
 */
export type PaymentStateEnum = 'Charged' | 'Canceled' | 'Pending' | 'Failed' | 'Verifying';

export type PaymentTerminalCommandAccountData = {
    /**
     * Type of the account.
     *
     * Company
     *
     * Customer
     */
    Discriminator: AccountTypeEnum;
    /**
     * Customer data if the `Discriminator` is `Customer`.
     */
    Customer?: (PaymentTerminalCommandCustomerData) | null;
    /**
     * Company data if the `Discriminator` is `Company`.
     */
    Company?: (PaymentTerminalCommandCompanyData) | null;
};

export type PaymentTerminalCommandCompanyData = {
    /**
     * Name of the company.
     */
    Name: string;
};

export type PaymentTerminalCommandCustomerData = {
    /**
     * Full name of the customer.
     */
    FullName: string;
};

export type PaymentTerminalCommandData = DeviceCommandData & {
    /**
     * Identifier of the payment terminal.
     */
    PaymentTerminalId: string;
    /**
     * @deprecated
     */
    CustomerId: string;
    /**
     * Unique identifier of the account.
     */
    AccountId: string;
    /**
     * @deprecated
     */
    FullName?: string | null;
    /**
     * Identifier of the bill.
     */
    BillId?: string | null;
    /**
     * Identifier of the `Payment`.
     */
    PaymentId?: string | null;
    /**
     * Identifier of the `Preauthorization`.
     */
    PreauthorizationId?: string | null;
    /**
     * Amount to be processed.
     */
    Amount: ExtendedAmount;
    /**
     * Payment fee to be processed.
     */
    Fee?: (ExtendedAmount) | null;
    /**
     * Custom JSON data.
     */
    PaymentTerminalData?: string | null;
    /**
     * Account data for the payment terminal command.
     */
    AccountData: PaymentTerminalCommandAccountData;
};

export type PaymentTerminalCommandParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the payment terminal.
     */
    TerminalId: string;
    /**
     * Unique identifier of the `Customer`.
     */
    CustomerId: string;
    /**
     * The type of payment, e.g. `Preauthorization`.
     *
     * Payment
     *
     * Preauthorization
     */
    Type: PaymentTerminalCommandTypeEnum;
    /**
     * Amount of the payment.
     */
    Amount: CurrencyValueOld;
    /**
     * Unique identifier of the `Bill`.
     */
    BillId?: string | null;
    /**
     * Unique identifier of the `PaymentRequest`.
     */
    PaymentRequestId?: string | null;
    /**
     * Unique identifier of the `Reservation`.
     */
    ReservationId?: string | null;
};

/**
 *
 *
 * Payment
 *
 * Preauthorization
 */
export type PaymentTerminalCommandTypeEnum = 'Payment' | 'Preauthorization';

export type PaymentType = 'CreditCard' | 'Invoice' | 'Cash' | 'Unspecified' | 'BadDebts' | 'WireTransfer' | 'ExchangeRateDifference' | 'ExchangeRoundingDifference' | 'BankCharges' | 'Cheque' | 'Other';

export type PayworksData = {
    MerchantIdentifier?: string | null;
    MerchantSecretKey?: string | null;
    ApiUrl?: string | null;
    Descriptor?: string | null;
    AcceptedCreditCardTypes?: Array<(string)> | null;
};

export type PerUnitPriceParameters = {
    /**
     * Index of the unit. Indexing starts with `0`. E.g. the first night of the reservation has index `0`.
     */
    Index?: number;
    /**
     * Amount of the unit.
     */
    Amount?: (AmountParameters) | null;
};

export type PersonData = {
    [key: string]: unknown;
};

/**
 *
 *
 * AllInOneGroup (All created reservations in the block are added to the same reservation group.)
 *
 * IndividualGroups (Reservations can be picked up in multiple groups, with up to 750 reservations per group.)
 */
export type PickupDistributionEnum = 'AllInOneGroup' | 'IndividualGroups';

export type Preauthorization = {
    /**
     * Unique identifier of the preauthorization.
     */
    Id?: string;
    CustomerId?: string;
    /**
     * Unique identifier of the credit card.
     */
    CreditCardId?: string | null;
    Amount?: (Amount) | null;
    /**
     * State of the preauthorization.
     */
    State?: string | null;
    /**
     * Code of the preauthorization.
     */
    Code?: string | null;
    IsActive?: boolean;
};

export type PreauthorizationResult = {
    /**
     * Preauthorizations of the specified [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    Preauthorizations?: Array<Preauthorization> | null;
};

/**
 *
 *
 * Gross (The enterprise shows amount with gross prices.)
 *
 * Net (The enterprise shows amount with net prices.)
 */
export type PricingModeEnum = 'Gross' | 'Net';

export type PrinterCommandData = DeviceCommandData & {
    /**
     * Number of copies to be printed.
     */
    CopyCount: number;
    /**
     * MIME type of the file to be printed (e.g. `application/pdf`).
     */
    FileType: string;
    /**
     * Base64-encoded data of the file to be printed.
     */
    FileData: string;
    /**
     * Name of the printer.
     */
    PrinterName: string;
    /**
     * Name of the printer driver.
     */
    PrinterDriverName: string;
    /**
     * Name of the printer port.
     */
    PrinterPortName: string;
};

export type PrinterCommandParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the `Printer` `Device` where to print the document.
     */
    PrinterId: string;
    /**
     * Base64 encoded data of PDF document to print.
     */
    Data: string;
    /**
     * Count of copies to be printed.
     */
    CopyCount: number;
};

export type Product = {
    /**
     * Unique identifier of the product.
     */
    Id: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
     */
    ServiceId: string;
    /**
     * Unique identifier of the Product category.
     */
    CategoryId?: string | null;
    /**
     * Unique identifier of [Accounting Category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category).
     */
    AccountingCategoryId?: string | null;
    /**
     * Whether the product is still active.
     */
    IsActive: boolean;
    /**
     * @deprecated
     */
    IsDefault?: boolean;
    /**
     * Name of the product. **Deprecated!** Please use Names
     * @deprecated
     */
    Name?: string | null;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * Name of the product meant to be displayed to customer. **Deprecated!** Please use ExternalNames
     * @deprecated
     */
    ExternalName?: string | null;
    /**
     * All translations of external name.
     */
    ExternalNames: {
        [key: string]: (string);
    };
    /**
     * Short name of the product. **Deprecated!** Please use ShortNames
     * @deprecated
     */
    ShortName?: string | null;
    /**
     * All translations of short name.
     */
    ShortNames: {
        [key: string]: (string);
    };
    /**
     * Description of the product. **Deprecated!** Please use Descriptions
     * @deprecated
     */
    Description?: string | null;
    /**
     * All translations of descriptions.
     */
    Descriptions?: {
        [key: string]: (string);
    } | null;
    /**
     *
     *
     * Once
     *
     * PerTimeUnit
     *
     * PerPersonPerTimeUnit
     *
     * PerPerson
     * @deprecated
     */
    Charging?: ProductChargingModeEnum;
    /**
     * Charging mode of the product.
     *
     * Once
     *
     * PerTimeUnit
     *
     * PerPersonPerTimeUnit
     *
     * PerPerson
     */
    ChargingMode: ProductChargingModeEnum;
    /**
     *
     *
     * Once
     *
     * Daily
     * @deprecated
     */
    Posting?: ProductPostingEnum;
    /**
     * Charging mode of the product.
     *
     * Once
     *
     * PerTimeUnit
     */
    PostingMode: ProductPostingModeEnum;
    /**
     * Options of the product.
     */
    Options: ProductOptions;
    /**
     * Promotions of the product.
     */
    Promotions: Promotions;
    /**
     * Classifications of the product.
     */
    Classifications: ProductClassifications;
    /**
     * Price representing price of the product.
     */
    Price: ExtendedAmount;
    /**
     * @deprecated
     */
    Pricing?: {
        Discriminator?: ProductPricing;
        Value?: ExtendedAmount | RelativeProductPrice;
    };
    /**
     * Unique identifier of the product image.
     */
    ImageIds?: Array<(string)> | null;
    /**
     * Order value for presentation purposes.
     */
    Ordering: number;
    /**
     * Identifier of the product from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Specifies the reason a product is exempt from tax.
     *
     * IT_N1 (N1 - Escluse ex art.15)
     *
     * IT_N2_2 (N2.2 - Non soggette – altri casi)
     *
     * IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)
     *
     * IT_N4 (N4 - Esenti)
     *
     * IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)
     *
     * PL_ZW (ZW - Zwolniony)
     *
     * PL_NP (NP - Nie podlega)
     */
    TaxExemptionReason?: (TaxExemptionReasonTypeEnum) | null;
    /**
     * Legal reference that states why this product is exempt from tax.
     */
    TaxExemptionLegalReference?: string | null;
    /**
     * Creation date and time of the product in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the product in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Consumption moment of the product.
     *
     * ServiceOrderEnd
     *
     * ServiceOrderStart
     *
     * PostingTimeUnit
     *
     * NextTimeUnit
     */
    ConsumptionMoment: ProductConsumptionMomentEnum;
};

export type ProductAgeCategoryPrice = {
    /**
     * Unique identifier of the age category.
     */
    AgeCategoryId: string;
    /**
     * Prices of the product for the resource category in the covered dates.
     */
    Prices: Array<Amount>;
};

export type ProductCategory = {
    /**
     * Unique identifier of the category.
     */
    Id: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) of the resource category.
     */
    ServiceId: string;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * All translations of the short name.
     */
    ShortNames?: {
        [key: string]: (string);
    } | null;
    /**
     * All translations of the description.
     */
    Descriptions?: {
        [key: string]: (string);
    } | null;
    /**
     * [Parent product category](https://mews-systems.gitbook.io/connector-api/operations/#parent-product-category).
     */
    ParentProductCategory?: (ParentProductCategory) | null;
    /**
     * Date and time of the product category update in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Date and time of the product category creation in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Ordering of the category, lower number corresponds to lower category (note that neither uniqueness nor continuous sequence is guaranteed).
     */
    Ordering: number;
};

export type ProductCategoryFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Product category](https://mews-systems.gitbook.io/connector-api/operations/#product-category).
     */
    ProductCategoryIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource categories belong.
     */
    ServiceIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type ProductCategoryResult = {
    /**
     * Product categories.
     */
    ProductCategories: Array<ProductCategory>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * Once
 *
 * PerTimeUnit
 *
 * PerPersonPerTimeUnit
 *
 * PerPerson
 */
export type ProductChargingModeEnum = 'Once' | 'PerTimeUnit' | 'PerPersonPerTimeUnit' | 'PerPerson';

export type ProductClassifications = {
    /**
     * Product is classified as food.
     */
    Food?: boolean;
    /**
     * Product is classified as beverage.
     */
    Beverage?: boolean;
    /**
     * Product is classified as wellness.
     */
    Wellness?: boolean;
    /**
     * Product is classified as city tax.
     */
    CityTax?: boolean;
    /**
     * Product is classified as fee.
     */
    Fee?: boolean;
};

/**
 *
 *
 * ServiceOrderEnd
 *
 * ServiceOrderStart
 *
 * PostingTimeUnit
 *
 * NextTimeUnit
 */
export type ProductConsumptionMomentEnum = 'ServiceOrderEnd' | 'ServiceOrderStart' | 'PostingTimeUnit' | 'NextTimeUnit';

export type ProductDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the products to delete.
     */
    ProductIds: Array<(string)>;
};

export type ProductFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the product.
     */
    ProductIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
     */
    ServiceIds: Array<(string)>;
    /**
     * Interval in which the products were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether or not to include default products for the service, i.e. products which are standard includes and not true extras. For example, the night's stay would be the default product for a room reservation. These may be useful for accounting purposes but should not be displayed to customers for selection. If `ProductIds` are provided, `IncludeDefault` defaults to true, otherwise it defaults to false.
     */
    IncludeDefault?: boolean | null;
};

export type ProductOptions = {
    /**
     * Product should be displayed as part of a package.
     */
    BillAsPackage: boolean;
};

export type ProductOrderAdditionData = {
    ProductId: string;
    Count?: number | null;
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    UnitAmount?: (AmountParameters) | null;
    StartUtc?: string | null;
    EndUtc?: string | null;
    ExternalIdentifier?: string | null;
};

export type ProductOrderItemData = {
    ProductId?: string | null;
    AgeCategoryId?: string | null;
};

/**
 *
 *
 * Once
 *
 * Daily
 */
export type ProductPostingEnum = 'Once' | 'Daily';

/**
 *
 *
 * Once
 *
 * PerTimeUnit
 */
export type ProductPostingModeEnum = 'Once' | 'PerTimeUnit';

export type ProductPriceUpdate = {
    /**
     * New value of the product on the interval. If not specified, removes all price adjustments within the interval.
     */
    Value?: number | null;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc?: string | null;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 24 months if months.
     */
    LastTimeUnitStartUtc?: string | null;
};

export type ProductPriceUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the `Product`.
     */
    ProductId: string;
    /**
     * Price adjustments for specific time intervals.
     */
    PriceUpdates: Array<ProductPriceUpdate>;
};

export type ProductPricing = 'Absolute' | 'Relative';

export type ProductPricingFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the product.
     */
    ProductId: string;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/): 100 hours if hours, 100 days if days, or 24 months if months.
     */
    LastTimeUnitStartUtc: string;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
};

export type ProductPricingResult = {
    /**
     * Unique identifier of the product.
     */
    ProductId: string;
    /**
     * Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.
     */
    TimeUnitStartsUtc: Array<(string)>;
    /**
     * Base prices of the product for each time unit covered by the time interval.
     */
    BaseAmountPrices: Array<Amount>;
    /**
     * Age category prices.
     */
    AgeCategoryPrices: Array<ProductAgeCategoryPrice>;
};

export type ProductResult = {
    /**
     * Products offered with the service.
     */
    Products: Array<Product>;
    /**
     * Products offered specifically to customers.
     */
    CustomerProducts: Array<Product>;
    /**
     * Unique identifier of the last and hence oldest product returned. This can be used in `Limitation` in a subsequent request to fetch the next batch of older products.
     */
    Cursor?: string | null;
};

export type ProductServiceOrderFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Product service order](https://mews-systems.gitbook.io/connector-api/operations/#product-service-order).
     */
    ProductServiceOrderIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
     */
    ServiceIds: Array<(string)>;
    AccountIds?: Array<(string)> | null;
    LinkedReservationIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * A list of product service order states to filter by.
     */
    States?: Array<ServiceOrderState> | null;
};

export type ProductServiceOrderResult = {
    /**
     * The product service order of the enterprise.
     */
    ProductServiceOrders: Array<ServiceOrder>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * Product
 *
 * Allowance
 */
export type ProductTypeEnum = 'Product' | 'Allowance';

/**
 * The profile data of the user who created or last updated the record.
 */
export type ProfileData = {
    Discriminator: ProfileDataDiscriminator;
    /**
     * Enterprise profile data.
     */
    EnterpriseProfile?: (EnterpriseProfileData) | null;
};

export type ProfileDataDiscriminator = 'Personal' | 'Enterprise' | 'Platform' | 'Static' | 'Integration';

export type Promotions = {
    /**
     * Whether it can be promoted before check-in.
     */
    BeforeCheckIn: boolean;
    /**
     * Whether it can be promoted after check-in.
     */
    AfterCheckIn: boolean;
    /**
     * Whether it can be promoted during stay.
     */
    DuringStay: boolean;
    /**
     * Whether it can be promoted before check-out.
     */
    BeforeCheckOut: boolean;
    /**
     * Whether it can be promoted after check-out.
     */
    AfterCheckOut: boolean;
    /**
     * Whether it can be promoted during check-out.
     */
    DuringCheckOut: boolean;
};

export type Rate = {
    /**
     * Unique identifier of the rate.
     */
    Id: string;
    /**
     * Unique identifier of `Rate Group` where the rate belongs.
     */
    GroupId: string;
    /**
     * Unique identifier of the `Service`.
     */
    ServiceId: string;
    /**
     * Unique identifier of the base `Rate`.
     */
    BaseRateId?: string | null;
    /**
     * Indicates if this is a base rate.
     */
    IsBaseRate: boolean;
    /**
     * Unique identifier of the `Business Segment`.
     */
    BusinessSegmentId?: string | null;
    /**
     * Indicates if this rate is active.
     */
    IsActive: boolean;
    /**
     * Indicates if this rate is currently available to customers.
     */
    IsEnabled: boolean;
    /**
     * Indicates if this rate is publicly available.
     */
    IsPublic: boolean;
    /**
     * Indicates if this rate is the default rate for the service. Assigned automatically to the first rate of a service.
     */
    IsDefault: boolean;
    /**
     * Type of the rate.
     *
     * Public
     *
     * Private
     *
     * AvailabilityBlock
     */
    Type: RateTypeEnum;
    /**
     * Name of the rate (in the default language).
     * @deprecated
     */
    Name?: string | null;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * Short name of the rate (in the default language).
     */
    ShortName?: string | null;
    /**
     * Interval in which the rates were updated.
     */
    UpdatedUtc: string;
    /**
     * All translations of the external name of the rate.
     */
    ExternalNames?: {
        [key: string]: (string);
    } | null;
    /**
     * All translations of the description of the rate.
     */
    Description?: {
        [key: string]: (string);
    } | null;
    /**
     * Identifier of the rate from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Specifies the reason a rate is exempt from tax.
     *
     * IT_N1 (N1 - Escluse ex art.15)
     *
     * IT_N2_2 (N2.2 - Non soggette – altri casi)
     *
     * IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)
     *
     * IT_N4 (N4 - Esenti)
     *
     * IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)
     *
     * PL_ZW (ZW - Zwolniony)
     *
     * PL_NP (NP - Nie podlega)
     */
    TaxExemptionReason?: (TaxExemptionReasonTypeEnum) | null;
    /**
     * Legal reference that states why this rate is exempt from tax.
     */
    TaxExemptionLegalReference?: string | null;
};

export type RateAddData = {
    /**
     * Unique identifier of the service.
     */
    ServiceId: string;
    /**
     * Unique identifier of the rate group under which rate is assigned.
     */
    RateGroupId: string;
    /**
     * Whether the rate is available to customers. `false` will be used as a default when not provided.
     */
    IsEnabled?: boolean | null;
    /**
     * Type of the rate.
     *
     * Public
     *
     * Private
     */
    Type?: RateAddTypeEnum;
    /**
     * Unique identifier of the accounting category the rate belongs to.
     */
    AccountingCategoryId?: string | null;
    /**
     * Unique identifier of the business segment.
     */
    BusinessSegmentId?: string | null;
    /**
     * All translations of the name of the rate.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * All translations of the short name of the rate.
     */
    ShortNames?: {
        [key: string]: (string);
    } | null;
    /**
     * All translations of the external name of the rate.
     */
    ExternalNames?: {
        [key: string]: (string);
    } | null;
    /**
     * All translations of the description.
     */
    Descriptions?: {
        [key: string]: (string);
    } | null;
    /**
     * Discriminator in which field inside `Pricing` contains additional data.
     *
     * BaseRatePricing
     *
     * DependentRatePricing
     */
    PricingType: RatePricingDiscriminatorEnum;
    /**
     * Identifier of the rate from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Contains additional data about pricing of the rate.
     */
    Pricing?: (RateAddPricingDataParameters) | null;
};

export type RateAddOptions = {
    HidePriceFromGuest?: boolean;
    IsBonusPointsEligible?: boolean;
};

export type RateAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Information about rates to be created.
     */
    Rates: Array<RateAddData>;
};

export type RateAddPricingDataParameters = {
    /**
     * Additional data for rates with base rate pricing. Used when `PricingType` is `BaseRatePricing`. Defaults are applied if not specified: amount is set to 10000 in default Enterprise's currency and with its default accommodation tax rate code.
     */
    BaseRatePricing?: (BaseRatePricingParameters) | null;
    /**
     * Additional data for rate with dependent rate pricing. Required when `PricingType` is `DependentRatePricing`.
     */
    DependentRatePricing?: (DependentRatePricingParameters) | null;
};

export type RateAddResult = {
    /**
     * Rates that have been added.
     */
    Rates?: Array<Rate> | null;
};

/**
 *
 *
 * Public
 *
 * Private
 */
export type RateAddTypeEnum = 'Public' | 'Private';

export type RateCapacityOffsetUpdateParameters = {
    /**
     * The unique identifier of the `Rate` to update.
     */
    RateId: string;
    /**
     * Amount added to the price when occupancy is less than the Space Category Capacity. Use a negative value to provide a discount for under-occupancy. Set to 'null' if not updated.
     */
    NegativeOccupancyAdjustment?: (DecimalUpdateValue) | null;
    /**
     * Amount added to the price when the Space Category Capacity is exceeded.
     */
    ExtraOccupancyAdjustment?: (DecimalUpdateValue) | null;
};

export type RateDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the rates to be deleted.
     */
    RateIds: Array<(string)>;
};

/**
 * Extent of data to be returned.
 */
export type RateExtent = {
    /**
     * Whether the response should contain rates.
     */
    Rates?: boolean | null;
    /**
     * Whether the response should contain rate groups.
     * @deprecated
     */
    RateGroups?: boolean | null;
    /**
     * Whether the response should contain availability block assignments.
     */
    AvailabilityBlockAssignments?: boolean;
};

export type RateFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Extent of data to be returned. If not specified, both `Rates` and `RateGroups` will be included.
     */
    Extent?: (RateExtent) | null;
    /**
     * Unique identifiers of the requested [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate).
     */
    RateIds?: Array<(string)> | null;
    /**
     * Interval in which `Rate` was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the rates are requested.
     */
    ServiceIds: Array<(string)>;
    /**
     * Identifiers of [Rate](https://mews-systems.gitbook.io/connector-api/operations/#rate) from external systems.
     */
    ExternalIdentifiers?: Array<(string)> | null;
    /**
     * Whether to return only active, only deleted, or both types of record. If not specified, both active and deleted will be returned.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

/**
 * `Rate` entity, without some of the details, e.g. pricing.
 */
export type RateForExtent = {
    /**
     * Unique identifier of the rate.
     */
    Id: string;
    /**
     * Unique identifier of `Rate Group` where the rate belongs.
     */
    GroupId: string;
    /**
     * Unique identifier of the `Service`.
     */
    ServiceId: string;
    /**
     * Unique identifier of the base `Rate`.
     */
    BaseRateId?: string | null;
    /**
     * Whether the rate is a base rate.
     */
    IsBaseRate: boolean;
    /**
     * Unique identifier of the `Business Segment`.
     */
    BusinessSegmentId?: string | null;
    /**
     * Whether the rate is still active.
     */
    IsActive: boolean;
    /**
     * Whether the rate is currently available to customers.
     */
    IsEnabled: boolean;
    /**
     * Whether the rate is publicly available.
     */
    IsPublic: boolean;
    /**
     * Type of the rate.
     *
     * Public
     *
     * Private
     *
     * AvailabilityBlock
     */
    Type: RateTypeEnum;
    /**
     * Name of the rate (in the default language).
     * @deprecated
     */
    Name?: string | null;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * Short name of the rate (in the default language).
     */
    ShortName?: string | null;
    /**
     * Interval in which the rates were updated.
     */
    UpdatedUtc: string;
    /**
     * All translations of the external name of the rate.
     */
    ExternalNames?: {
        [key: string]: (string);
    } | null;
    /**
     * All translations of the description of the rate.
     */
    Description?: {
        [key: string]: (string);
    } | null;
    /**
     * Identifier of the rate from external system.
     */
    ExternalIdentifier?: string | null;
};

export type RateGroup = {
    /**
     * Unique identifier of the rate group.
     */
    Id: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the rate group belongs to.
     */
    ServiceId: string;
    /**
     * Whether the rate group is still active.
     */
    IsActive: boolean;
    /**
     * Creation date and time of the rate group in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the rate group in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Ordering of the rate group.
     */
    Ordering: number;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * All translations of the short name.
     */
    ShortNames?: {
        [key: string]: (string);
    } | null;
    /**
     * All translations of the description.
     */
    Descriptions?: {
        [key: string]: (string);
    } | null;
    /**
     * Identifier of the rate group from external system.
     */
    ExternalIdentifier?: string | null;
};

export type RateGroupFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Rate group](https://mews-systems.gitbook.io/connector-api/operations/#rate-group). Required if ServiceIds filter is not provided.
     */
    RateGroupIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service). Required if RateGroupIds filter is not provided.
     */
    ServiceIds?: Array<(string)> | null;
    /**
     * Identifiers of [Rate group](https://mews-systems.gitbook.io/connector-api/operations/#rate-group) from external systems.
     */
    ExternalIdentifiers?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type RateGroupOld = {
    /**
     * Unique identifier of the rate group.
     */
    Id?: string;
    /**
     * Unique identifier of the Service that the rate group belongs to.
     */
    ServiceId?: string;
    /**
     * Whether the rate group is still active.
     */
    IsActive?: boolean;
    /**
     * Name of the rate group.
     */
    Name?: string | null;
    /**
     * External identifier of the rate group.
     */
    ExternalIdentifier?: string | null;
};

export type RateGroupResult = {
    /**
     * The filtered rate groups.
     */
    RateGroups: Array<RateGroup>;
    /**
     * Unique identifier of the last and hence oldest rate group returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older rate groups.
     */
    Cursor?: string | null;
};

export type RateOptions = {
    HidePriceFromGuest: boolean;
    IsBonusPointsEligible: boolean;
};

export type RatePriceUpdate = {
    /**
     * Unique identifier of the Resource category whose prices to update. If not specified, base price is updated.
     */
    CategoryId?: string | null;
    /**
     * New value of the rate on the interval. If not specified, removes all adjustments within the interval.
     */
    Value?: number | null;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc?: string | null;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 24 months if months.
     */
    LastTimeUnitStartUtc?: string | null;
};

export type RatePriceUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the `Rate`.
     */
    RateId: string;
    /**
     * Unique identifier of the `Product`.
     */
    ProductId?: string | null;
    /**
     * Price adjustments for specific time intervals.
     */
    PriceUpdates: Array<RatePriceUpdate>;
};

export type RatePricing = {
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).
     */
    Currency: string;
    /**
     * @deprecated
     */
    DatesUtc?: Array<(string)> | null;
    /**
     * Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.
     */
    TimeUnitStartsUtc: Array<(string)>;
    /**
     * @deprecated
     */
    BasePrices: Array<(number)>;
    /**
     * Base prices of the rates for each time unit covered by the time interval.
     */
    BaseAmountPrices: Array<Amount>;
    /**
     * Resource category prices.
     */
    CategoryPrices: Array<CategoryPricing>;
    /**
     * Resource category adjustments.
     */
    CategoryAdjustments: Array<CategoryAdjustment>;
    /**
     * Assigns different pricing or occupancy based on the guest's age.
     */
    AgeCategoryAdjustments: Array<AgeCategoryAdjustment>;
    /**
     * Specific amount which shows the difference between this rate and the base rate.
     */
    RelativeAdjustment?: number;
    /**
     * Relative amount which shows the difference between this rate and the base rate.
     */
    AbsoluteAdjustment?: number;
    /**
     * Price adjustment for when the resource booked with this rate is not full to capacity.
     */
    EmptyUnitAdjustment?: number;
    /**
     * Price adjustment for when the resource booked with this rate exceeds capacity.
     */
    ExtraUnitAdjustment?: number;
};

export type RatePricingData = {
    /**
     *
     *
     * BaseRatePricing
     *
     * DependentRatePricing
     */
    readonly Discriminator?: RatePricingDiscriminatorEnum;
    BaseRatePricing?: (BaseRatePricingData) | null;
    readonly DependentRatePricing?: (DependentRatePricingData) | null;
};

/**
 *
 *
 * BaseRatePricing
 *
 * DependentRatePricing
 */
export type RatePricingDiscriminatorEnum = 'BaseRatePricing' | 'DependentRatePricing';

export type RatePricingFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the `Rate`.
     */
    RateId: string;
    /**
     * Unique identifier of the `Product`.
     */
    ProductId?: string | null;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 24 months if months.
     */
    LastTimeUnitStartUtc: string;
};

export type RateRestrictionResult = {
    /**
     * Date restrictions for the rate.
     */
    DateRestrictions: Array<DateRestriction>;
    /**
     * Earliness restrictions for the rates that are only available up to before arrival.
     */
    EarlinessRestrictions: Array<EarlinessRestriction>;
    /**
     * Length restrictions for the rate.
     */
    LengthRestrictions: Array<LengthRestriction>;
};

export type RateResult = {
    /**
     * Rates of the default service.
     */
    Rates: Array<Rate>;
    /**
     * Rate groups of the default service.
     * @deprecated
     */
    RateGroups: Array<RateGroupOld>;
    /**
     * @deprecated
     */
    RateRestrictions: RateRestrictionResult;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type RateSetData = {
    /**
     * Unique identifier of the rate. If it matches an existing rate, that rate will be updated. If no match is found, an error will be returned.
     */
    Id?: string | null;
    /**
     * Unique identifier of the rate in the external system. If `Id` is not provided and `ExternalIdentifier` matches an existing rate, the corresponding rate will be updated. If no match is found, a new rate will be created.
     */
    ExternalIdentifier?: string | null;
    /**
     * Unique identifier of the service. Ignored in case of updating an existing rate.
     */
    ServiceId: string;
    /**
     * Unique identifier of the rate group under which rate is assigned. Empty value means that rate is added to a default group or the current group is kept for update, respectively.
     */
    RateGroupId?: string | null;
    /**
     * Whether the rate is available to customers. `true` will be used as a default if not provided.
     */
    IsEnabled?: boolean | null;
    /**
     * Type of the rate. `Private` will be used as a default if not provided.
     *
     * Public
     *
     * Private
     */
    Type: RateAddTypeEnum;
    /**
     * All translations of the name of the rate.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * All translations of the description.
     */
    Descriptions?: {
        [key: string]: (string);
    } | null;
    /**
     * Rate pricing type. Must match existing pricing type in case of update.
     *
     * BaseRatePricing
     *
     * DependentRatePricing
     */
    PricingType: RatePricingDiscriminatorEnum;
    /**
     * Contains additional data about pricing of the rate.
     */
    Pricing?: (RateSetPricingDataParameters) | null;
};

export type RateSetParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Rates to be added or updated.
     */
    Rates: Array<RateSetData>;
};

export type RateSetPricingDataParameters = {
    /**
     * Additional data for rates with base rate pricing. Used when `PricingType` is `BaseRatePricing`. Defaults are applied if not specified: amount is set to 10000 in default Enterprise's currency and with its default accommodation tax rate code.
     */
    BaseRatePricing?: (BaseRatePricingWithoutAdjustmentsParameters) | null;
    /**
     * Additional data for rate with dependent rate pricing. Required when `PricingType` is `DependentRatePricing`.
     */
    DependentRatePricing?: (DependentRatePricingParameters) | null;
};

export type RateSetResult = {
    /**
     * Rates that were added or updated.
     */
    Rates?: Array<Rate> | null;
};

/**
 *
 *
 * Public
 *
 * Private
 *
 * AvailabilityBlock
 */
export type RateTypeEnum = 'Public' | 'Private' | 'AvailabilityBlock';

export type RebateOrderItemData = {
    RebatedItemId?: string | null;
};

/**
 *
 *
 * CreditCardPayment
 *
 * AlternativePayment
 */
export type RefundTypeEnum = 'CreditCardPayment' | 'AlternativePayment';

export type RelativeProductPrice = {
    /**
     * @deprecated
     */
    Multiplier?: number;
    /**
     * @deprecated
     */
    Target?: string | null;
    /**
     * @deprecated
     */
    TaxRateCodes?: Array<(string)> | null;
    /**
     * @deprecated
     */
    ProductIds?: Array<(string)> | null;
};

export type RelativeTaxRateStrategy = {
    Value?: number;
};

/**
 * The strategy for automatic release of the availability block.
 *
 * FixedRelease (The availability block is released at a fixed time.)
 *
 * RollingRelease (Each availability adjustment is released at a fixed offset from its start.)
 *
 * None (The availability block is not automatically released.)
 */
export type ReleaseStrategyEnum = 'FixedRelease' | 'RollingRelease' | 'None';

export type ReleaseStrategyUpdateValue = {
    /**
     * The strategy for automatic release of the availability block.
     *
     * FixedRelease (The availability block is released at a fixed time.)
     *
     * RollingRelease (Each availability adjustment is released at a fixed offset from its start.)
     *
     * None (The availability block is not automatically released.)
     */
    Value?: ReleaseStrategyEnum;
};

export type Reservation = {
    /**
     * Unique identifier of the reservation.
     */
    Id: string;
    /**
     * Unique identifier of the `Service` that reservation is made against.
     */
    ServiceId: string;
    /**
     * Unique identifier of the Customer or Company who owns the reservation, i.e. the main guest linked to the reservation.
     */
    AccountId: string;
    AccountType: AccountType;
    /**
     * Unique identifier of the user who created the reservation.
     */
    CreatorProfileId: string;
    /**
     * Unique identifier of the user who updated the reservation.
     */
    UpdaterProfileId: string;
    /**
     * Unique identifier of the booker who made the reservation on behalf of the reservation owner, in the special case where the booker is also a registered customer in Mews.
     */
    BookerId?: string | null;
    /**
     * Confirmation number of the reservation in Mews.
     */
    Number: string;
    /**
     * State of the reservation.
     *
     * Inquired (Confirmed neither by the customer nor enterprise.)
     *
     * Confirmed (Confirmed by both parties, before check-in.)
     *
     * Started (Checked in.)
     *
     * Processed (Checked out.)
     *
     * Canceled (Canceled.)
     *
     * Optional (Confirmed by enterprise but not by the guest (the enterprise is holding resource for the guest).)
     *
     * Requested (Confirmed by the customer but not by the enterprise (waitlist).)
     */
    State: ServiceOrderStateEnum;
    /**
     * Origin of the reservation.
     *
     * Distributor (From the Mews Booking Engine or Booking Engine API.)
     *
     * ChannelManager (From a channel manager.)
     *
     * Commander (From Mews Operations.)
     *
     * Import (From an import process.)
     *
     * Connector (From the Mews Connector API.)
     *
     * Navigator (From Mews Guest Services.)
     */
    Origin: ServiceOrderOriginEnum;
    /**
     * Further detail about origin in case of Origin `Commander`.
     *
     * InPerson
     *
     * Channel
     *
     * Phone
     *
     * Email
     *
     * Website
     *
     * Message
     *
     * CallCenter
     */
    CommanderOrigin?: (ServiceOrderCommanderOriginEnum) | null;
    /**
     * Details about the reservation `Origin`.
     */
    OriginDetails?: string | null;
    /**
     * Creation date and time of the reservation in UTC timezone.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the reservation in UTC timezone.
     */
    UpdatedUtc: string;
    /**
     * Cancellation date and time in UTC timezone.
     */
    CancelledUtc?: string | null;
    /**
     * Unique identifier of the `Voucher` that has been used to create reservation.
     */
    VoucherId?: string | null;
    /**
     * Identifier of the reservation `BusinessSegment`.
     */
    BusinessSegmentId?: string | null;
    /**
     * Options of the reservation.
     */
    Options: ServiceOrderOptions;
    /**
     * Identifier of the reservation `Rate`.
     */
    RateId: string;
    /**
     * Unique identifier of the Credit card.
     */
    CreditCardId?: string | null;
    /**
     * Unique identifier of the Reservation group.
     */
    GroupId: string;
    /**
     * Unique identifier of the Resource category.
     */
    RequestedResourceCategoryId: string;
    /**
     * Identifier of the assigned Resource.
     */
    AssignedResourceId?: string | null;
    /**
     * Unique identifier of the Availability block the reservation is assigned to.
     */
    AvailabilityBlockId?: string | null;
    /**
     * Identifier of the `Company` on behalf of which the reservation was made.
     */
    PartnerCompanyId?: string | null;
    /**
     * Identifier of the Travel Agency (`Company`) that mediated the reservation.
     */
    TravelAgencyId?: string | null;
    /**
     * Whether the reservation is locked to the assigned Resource and cannot be moved.
     */
    AssignedResourceLocked?: boolean;
    /**
     * Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number).
     */
    ChannelNumber?: string | null;
    /**
     * Unique number of the reservation within the reservation group.
     */
    ChannelManagerNumber?: string | null;
    /**
     * Cancellation reason of the reservation.
     *
     * Other
     *
     * ConfirmationMissed
     *
     * BookedElsewhere
     *
     * ForceMajeure
     *
     * GuestComplaint
     *
     * NoShow
     *
     * PriceTooHigh
     *
     * ServiceNotAvailable
     *
     * InputError
     *
     * InvalidPayment
     *
     * TravelAgency
     *
     * RequestedByGuest
     *
     * Update
     *
     * BookingAbandoned
     *
     * RequestedByBooker
     */
    CancellationReason?: (ServiceOrderCancellationReasonEnum) | null;
    /**
     * Date when the optional reservation is released in UTC timezone.
     */
    ReleasedUtc?: string | null;
    /**
     * Reservation start or check-in time (if it's earlier than scheduled start) in UTC timezone in ISO 8601 format.
     * @deprecated
     */
    StartUtc: string;
    /**
     * Scheduled end time of reservation in UTC timezone in ISO 8601 format
     * @deprecated
     */
    EndUtc: string;
    /**
     * Scheduled start time of reservation in UTC timezone.
     */
    ScheduledStartUtc: string;
    /**
     * Actual customer check-in time of reservation in UTC timezone.
     */
    ActualStartUtc?: string | null;
    /**
     * Scheduled end time of reservation in UTC timezone in ISO 8601 format.
     */
    ScheduledEndUtc: string;
    /**
     * Actual end time of reservation in UTC timezone in ISO 8601 format.
     */
    ActualEndUtc?: string | null;
    /**
     * Purpose of the reservation.
     *
     * Leisure
     *
     * Business
     *
     * Student
     */
    Purpose?: (ReservationPurposeEnum) | null;
    /**
     * QR code data of the reservation.
     */
    QrCodeData?: string | null;
    /**
     * Number of people per age category the reservation was booked for.
     */
    PersonCounts: Array<ReservationPersonCount>;
};

export type ReservationAdditionParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the `Service` to be reserved.
     */
    ServiceId: string;
    /**
     * Unique identifier of the `ReservationGroup` where the reservations are added. If not specified, a new group is created.
     */
    GroupId?: string | null;
    /**
     * Name of the `ReservationGroup` where the reservations are added to. If `GroupId` is specified, this field is ignored. If not specified, the group name is automatically created.
     */
    GroupName?: string | null;
    /**
     * Parameters of the new reservations.
     */
    Reservations: Array<ReservationData>;
    /**
     * Indicates whether the system will check and prevent a booking being made using a restricted rate, e.g. a private rate. The default is `true`, i.e. the system will normally check for this unless the property is set to `false`.
     */
    CheckRateApplicability?: boolean | null;
    /**
     * Indicates whether the system will check and prevent a booking being made in the case of an overbooking, i.e. where there is an insufficient number of resources available to meet the request. The default is `true`, i.e. the system will normally check for this unless the property is set to `false`.
     */
    CheckOverbooking?: boolean | null;
    /**
     * Whether the confirmation email is sent. Default value is `true`.
     */
    SendConfirmationEmail?: boolean | null;
};

export type ReservationAdditionResult = {
    /**
     * The added reservations.
     */
    Reservations: Array<AddedReservation>;
};

export type ReservationCancellationParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifiers of the reservation to cancel.
     */
    ReservationIds: Array<(string)>;
    /**
     * @deprecated
     */
    ReservationId?: string;
    /**
     * Whether the cancellation fees should be charged according to rate conditions. The default is `false`.
     */
    PostCancellationFee?: boolean | null;
    /**
     * Whether the cancellation email should be sent. The default is `true`.
     */
    SendEmail?: boolean | null;
    /**
     * Additional notes describing the reason for the cancellation.
     */
    Notes?: string;
};

export type ReservationData = {
    /**
     * Identifier of the reservation within the transaction.
     */
    Identifier?: string | null;
    ChannelNumber?: string | null;
    /**
     * State of the newly created reservation (either `Optional`, `Inquired` or `Confirmed`). If not specified, `Confirmed` is used.
     */
    State?: ServiceOrderState | null;
    /**
     * Reservation start in UTC timezone in ISO 8601 format.
     */
    StartUtc: string;
    /**
     * Reservation end in UTC timezone in ISO 8601 format.
     */
    EndUtc: string;
    /**
     * Release date and time of an unconfirmed reservation in UTC timezone in ISO 8601 format.
     */
    ReleasedUtc?: string | null;
    /**
     * @deprecated
     */
    AdultCount?: number;
    /**
     * @deprecated
     */
    ChildCount?: number;
    /**
     * Number of people per age category the reservation was booked for. At least one category with valid count must be provided.
     */
    PersonCounts: Array<ReservationPersonCount>;
    /**
     * Unique identifier of the `Customer` who owns the reservation.
     */
    CustomerId: string;
    /**
     * Unique identifier of the `Customer` on whose behalf the reservation was made.
     */
    BookerId?: string | null;
    /**
     * Identifier of the requested `ResourceCategory`.
     */
    RequestedCategoryId: string;
    /**
     * Identifier of the reservation `Rate`.
     */
    RateId: string;
    /**
     * Voucher code value providing access to specified private `Rate` applied to this reservation.
     */
    VoucherCode?: string | null;
    /**
     * Identifier of `CreditCard` belonging either to the `Customer` who owns the reservation or to the `Booker`.
     */
    CreditCardId?: string | null;
    /**
     * Identifier of the `Company` that mediated the reservation.
     */
    TravelAgencyId?: string | null;
    /**
     * Identifier of the `Company` on behalf of which the reservation was made.
     */
    CompanyId?: string | null;
    /**
     * Identifier of the reservation `BusinessSegment`.
     */
    BusinessSegmentId?: string | null;
    /**
     * Additional notes.
     */
    Notes?: string | null;
    /**
     * Amount of each night of the reservation.
     */
    TimeUnitAmount?: (AmountParameters) | null;
    /**
     * Prices for time units of the reservation. E.g. prices for the first or second night.
     */
    TimeUnitPrices?: Array<PerUnitPriceParameters> | null;
    /**
     * Parameters of the products ordered together with the reservation.
     */
    ProductOrders?: Array<ProductOrderAdditionData> | null;
    /**
     * Unique identifier of the `AvailabilityBlock` the reservation is assigned to.
     */
    AvailabilityBlockId?: string | null;
};

export type ReservationDataParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the `Service` to be priced.
     */
    ServiceId: string;
    /**
     * Parameters of the reservations to price. Note that `CustomerId` is not required when pricing reservations.
     */
    Reservations: Array<ReservationData>;
};

/**
 * Extent of data to be returned. E.g. it is possible to specify that together with the reservations, customers, groups and rates should be also returned.
 */
export type ReservationExtent = {
    /**
     * Whether the response should contain reservations.
     */
    Reservations?: boolean | null;
    /**
     * Whether the response should contain groups of the reservations.
     */
    ReservationGroups?: boolean | null;
    /**
     * Whether the response should contain customers of the reservations.
     */
    Customers?: boolean | null;
    /**
     * Whether the response should contain addresses of the customers.
     */
    CustomerAdresses?: boolean | null;
    /**
     * Whether the response should contain identity documents of the customers.
     */
    CustomerIdentityDocuments?: boolean | null;
    /**
     * Whether the response should contain services reserved by the reservations.
     */
    Services?: boolean | null;
    /**
     * Whether the response should contain products orderable with the reservations.
     */
    Products?: boolean | null;
    /**
     * Whether the response should contain business segmentation.
     */
    BusinessSegments?: boolean | null;
    /**
     * Whether the response should contain resources.
     */
    Resources?: boolean | null;
    /**
     * Whether the response should contain resource categories.
     */
    ResourceCategories?: boolean | null;
    /**
     * Whether the response should contain assignments of the resources to categories.
     */
    ResourceCategoryAssignments?: boolean | null;
    /**
     * Whether the response should contain rates and rate groups.
     */
    Rates?: boolean | null;
    /**
     * Whether the response should contain accounting items.
     */
    Items?: boolean | null;
    /**
     * Whether the response should contain reservation items.
     */
    OrderItems?: boolean | null;
    /**
     * Whether the response should contain notes.
     */
    Notes?: boolean | null;
    /**
     * Whether the response should contain QR code data.
     */
    QrCodeData?: boolean | null;
    /**
     * Whether the response should contain companies.
     */
    Companies?: boolean | null;
    /**
     * States the items should be in. If not specified, items in `Open` or `Closed` states are returned.
     */
    AccountingStates?: Array<AccountingState> | null;
};

export type ReservationFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the reservations are requested.
     */
    ServiceIds: Array<(string)>;
    /**
     * @deprecated
     */
    ServiceId?: string | null;
    /**
     * Unique identifiers of the requested [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group).
     */
    GroupIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2017-04-12).
     */
    ReservationIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) which own the reservations.
     */
    CustomerIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource) assigned to the reservations.
     */
    AssignedResourceIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate) assigned to the reservations.
     */
    RateIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Business segments](https://mews-systems.gitbook.io/connector-api/operations/businesssegments/#business-segment) assigned to the reservations.
     */
    BusinessSegmentIds?: Array<(string)> | null;
    /**
     * Set of numbers or references used by the Channel (i.e. OTA, GDS, CRS, etc.) in case the reservation group originates there, e.g. Booking.com confirmation numbers.
     */
    ChannelNumbers?: Array<(string)> | null;
    /**
     * Confirmation numbers of [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2017-04-12).
     */
    Numbers?: Array<(string)> | null;
    /**
     * Start of the interval in UTC timezone in ISO 8601 format. Required when used in conjunction with the TimeFilter or States search parameter.
     */
    StartUtc?: string | null;
    /**
     * End of the interval in UTC timezone in ISO 8601 format. Required when used in conjunction with the TimeFilter or States search parameter.
     */
    EndUtc?: string | null;
    /**
     * Time filter of the interval. If not specified, reservations Colliding with the interval are returned.
     */
    TimeFilter?: ReservationTimeFilter | null;
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
     */
    Currency?: string | null;
    /**
     * States the reservations should be in. If not specified, reservations in Confirmed, Started or Processed states or reservations specified by ReservationIds regardless of state are returned.
     */
    States?: Array<ServiceOrderStateOld> | null;
    /**
     * Extent of data to be returned. E.g. it is possible to specify that together with the reservations, customers, groups and rates should be also returned.
     */
    Extent: ReservationExtent;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation: Limitation;
};

export type ReservationGroup = {
    /**
     * Unique identifier of the reservation group.
     */
    Id: string;
    /**
     * Name of the reservation group, might be empty or same for multiple groups.
     */
    Name: string;
    /**
     * Name of the corresponding channel manager.
     */
    ChannelManager?: string | null;
    /**
     * Identifier of the channel manager.
     */
    ChannelManagerGroupNumber?: string | null;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise) the reservation group belongs to.
     */
    EnterpriseId: string;
};

export type ReservationGroupFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Reservation Group](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group). Required if no other filter is provided.
     */
    ReservationGroupIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type ReservationGroupOld = {
    /**
     * Unique identifier of the reservation group.
     */
    Id?: string;
    /**
     * Name of the reservation group.
     */
    Name?: string | null;
};

export type ReservationGroupResult = {
    /**
     * The filtered reservation groups.
     */
    ReservationGroups: Array<ReservationGroup>;
    /**
     * Unique identifier of the last and hence oldest reservation group returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older reservation groups.
     */
    Cursor?: string | null;
};

export type ReservationItemParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the reservation.
     */
    ReservationIds: Array<(string)>;
    /**
     * ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.
     */
    Currency?: string | null;
    /**
     * States the items should be in. If not specified, items in Open or Closed states are returned.
     */
    AccountingStates?: Array<(string)> | null;
};

export type ReservationItemResult = {
    /**
     * The reservations with their items.
     */
    Reservations: Array<ReservationItems>;
};

export type ReservationItems = {
    /**
     * Unique identifier of the reservation.
     */
    ReservationId?: string;
    /**
     * Accounting items associated with the reservation.
     */
    Items: Array<AccountingItem>;
    /**
     * Order items associated with the reservation.
     */
    OrderItems: Array<OrderItemOld>;
};

export type ReservationOld = {
    /**
     * Unique identifier of the reservation.
     */
    Id: string;
    /**
     * Unique identifier of the Service that is reserved.
     */
    ServiceId: string;
    /**
     * Unique identifier of the Reservation group.
     */
    GroupId: string;
    /**
     * Confirmation number of the reservation in Mews.
     */
    Number: string;
    /**
     * Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number).
     */
    ChannelNumber?: string | null;
    /**
     * Unique number of the reservation within the reservation group.
     */
    ChannelManagerNumber?: string | null;
    /**
     * Number of the reservation group within a Channel manager that transferred the reservation from Channel to Mews.
     */
    ChannelManagerGroupNumber?: string | null;
    /**
     * Name of the Channel manager (e.g. AvailPro, SiteMinder, TravelClick, etc).
     */
    ChannelManager?: string | null;
    State: ServiceOrderStateOld;
    Origin: ReservationOldOrigin;
    /**
     * Details about the reservation origin.
     */
    OriginDetails?: string | null;
    /**
     * Purpose of the reservation.
     */
    Purpose?: ReservationPurpose | null;
    /**
     * Creation date and time of the reservation in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the reservation in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Cancellation date and time in UTC timezone in ISO 8601 format.
     */
    CancelledUtc?: string | null;
    /**
     * Start of the reservation in UTC timezone in ISO 8601 format. This is either the scheduled reservation start time, or the actual customer check-in time if this is earlier than the scheduled start time.
     */
    StartUtc: string;
    /**
     * End of the reservation (departure) in UTC timezone in ISO 8601 format.
     */
    EndUtc: string;
    /**
     * Date when the optional reservation is released in UTC timezone in ISO 8601 format.
     */
    ReleasedUtc?: string | null;
    /**
     * Identifier of the requested Resource category.
     */
    RequestedCategoryId: string;
    /**
     * Identifier of the assigned Space.
     * @deprecated
     */
    AssignedSpaceId?: string | null;
    /**
     * Whether the reservation is locked to the assigned Space and cannot be moved.
     * @deprecated
     */
    AssignedSpaceLocked?: boolean;
    /**
     * Identifier of the assigned Resource.
     */
    AssignedResourceId?: string | null;
    /**
     * Whether the reservation is locked to the assigned Resource and cannot be moved.
     */
    AssignedResourceLocked: boolean;
    /**
     * Identifier of the reservation Business segment.
     */
    BusinessSegmentId?: string | null;
    /**
     * Identifier of the Company on behalf of which the reservation was made.
     */
    CompanyId?: string | null;
    /**
     * Identifier of the Company that mediated the reservation.
     */
    TravelAgencyId?: string | null;
    /**
     * Unique identifier of the Availability block the reservation is assigned to.
     */
    AvailabilityBlockId?: string | null;
    /**
     * Identifier of the reservation Rate.
     */
    RateId: string;
    /**
     * Unique identifier of the Voucher that has been used to create reservation.
     */
    VoucherId?: string | null;
    /**
     * Unique identifier of the Credit card.
     */
    CreditCardId?: string | null;
    /**
     * Cancellation reason of the reservation.
     */
    CancellationReason?: CancellationReason | null;
    /**
     * Count of adults the reservation was booked for.
     * @deprecated
     */
    AdultCount?: number;
    /**
     * Count of children the reservation was booked for.
     * @deprecated
     */
    ChildCount?: number;
    /**
     * Number of people per age category the reservation was booked for.
     */
    PersonCounts: Array<ReservationPersonCount>;
    /**
     * Unique identifier of the Customer or Company who owns the reservation.
     */
    OwnerId: string;
    /**
     * Unique identifier of the Customer who owns the reservation.
     * @deprecated
     */
    CustomerId: string;
    /**
     * Unique identifier of the Customer on whose behalf the reservation was made.
     */
    BookerId?: string | null;
    /**
     * Unique identifiers of the `Customer`s that will use the resource.
     * @deprecated
     */
    CompanionIds: Array<(string)>;
    /**
     * Channel Manager number.
     * @deprecated
     */
    ChannelManagerId?: string | null;
    /**
     * Options of the reservation.
     */
    Options: ReservationOptions;
};

export type ReservationOldOrigin = 'Distributor' | 'ChannelManager' | 'Import' | 'Connector' | 'Navigator' | 'CommanderInPerson' | 'CommanderChannel' | 'CommanderPhone' | 'CommanderEmail' | 'CommanderWebsite' | 'CommanderMessage' | 'CommanderCallCenter';

export type ReservationOptions = {
    /**
     * Owner of the reservation checked in.
     */
    OwnerCheckedIn: boolean;
    /**
     * All companions of the reservation checked in.
     */
    AllCompanionsCheckedIn: boolean;
    /**
     * Any companion of the reservation checked in.
     */
    AnyCompanionCheckedIn: boolean;
};

export type ReservationPersonCount = {
    /**
     * Unique identifier of the [Age category](https://mews-systems.gitbook.io/connector-api/operations/agecategories#age-category).
     */
    AgeCategoryId: string;
    /**
     * Number of people of a given age category. Only positive value is accepted.
     */
    Count: number;
};

export type ReservationPrice = {
    /**
     * Identifier of the reservation within the transaction.
     */
    Identifier?: string | null;
    /**
     * Total price of the reservation.
     */
    TotalAmount: Amount;
    /**
     * Total price of the reservation.
     * @deprecated
     */
    Total?: (CurrencyValueOld) | null;
};

export type ReservationPricingResult = {
    /**
     * The reservation prices.
     */
    ReservationPrices: Array<ReservationPrice>;
};

export type ReservationProcessingParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the reservation to process.
     */
    ReservationId: string;
    /**
     * Whether closable bills of the reservation members should be automatically closed.
     */
    CloseBills?: boolean | null;
    /**
     * Whether non-zero consumed balance of all reservation members is allowed.
     */
    AllowOpenBalance?: boolean | null;
    /**
     * Required if AllowOpenBalance set to true. Used to provide reason for closing with unbalanced bill.
     */
    Notes?: string | null;
};

export type ReservationProductParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the reservation.
     */
    ReservationId: string;
    /**
     * Unique identifier of the [Product](https://mews-systems.gitbook.io/connector-api/operations/products/#product).
     */
    ProductId: string;
    /**
     * The amount of the products to be added. Note that if the product is charged e.g. per night, count 1 means a single product every night. Count 2 means two products every night.
     */
    Count: number;
    /**
     * Price of the product that overrides the price defined in Mews.
     */
    UnitAmount?: (AmountParameters) | null;
    /**
     * Product start in UTC timezone in ISO 8601 format. For products with charging Once and PerPerson must be set to same value as EndUtc.
     */
    StartUtc?: string | null;
    /**
     * Product end in UTC timezone in ISO 8601 format. For products with charging Once and PerPerson must be set to same value as StartUtc.
     */
    EndUtc?: string | null;
};

export type ReservationPurpose = 'Leisure' | 'Business' | 'Student';

/**
 *
 *
 * Leisure
 *
 * Business
 *
 * Student
 */
export type ReservationPurposeEnum = 'Leisure' | 'Business' | 'Student';

export type ReservationQrCodeData = {
    /**
     * Unique identifier of the reservation.
     */
    ReservationId?: string;
    /**
     * Reservation data for QR code generation.
     */
    Data?: string | null;
};

export type ReservationResult = {
    /**
     * The reservations that collide with the specified interval.
     */
    Reservations?: Array<ReservationOld> | null;
    /**
     * Reservation groups that the reservations are members of.
     */
    ReservationGroups?: Array<ReservationGroupOld> | null;
    /**
     * Customers that are members of the reservations.
     */
    Customers?: Array<Customer> | null;
    /**
     * Services that have been reserved.
     */
    Services?: Array<Service> | null;
    /**
     * Products orderable with reservations.
     */
    Products?: Array<Product> | null;
    /**
     * Assigned resources of the reservations.
     */
    Resources?: Array<Resource> | null;
    /**
     * Resource categories of the resources.
     */
    ResourceCategories?: Array<ResourceCategory> | null;
    /**
     * Assignments of the resources to categories.
     */
    ResourceCategoryAssignments?: Array<ResourceCategoryAssignment> | null;
    /**
     * Business segments of the reservations.
     */
    BusinessSegments?: Array<BusinessSegment> | null;
    /**
     * Rates of the reservations.
     */
    Rates?: Array<RateForExtent> | null;
    /**
     * Rate groups of the reservation rates.
     */
    RateGroups?: Array<RateGroupOld> | null;
    /**
     * Accounting items that are part of the reservations.
     */
    Items?: Array<AccountingItem> | null;
    /**
     * Revenue items of the reservations.
     */
    OrderItems?: Array<OrderItemOld> | null;
    /**
     * Notes of the reservations.
     */
    Notes?: Array<OrderNote> | null;
    /**
     * QR code data of the reservations.
     */
    QrCodeData?: Array<ReservationQrCodeData> | null;
    /**
     * Companies related to the reservations.
     */
    Companies?: Array<Company> | null;
    /**
     * Resource access tokens for the reservations.
     */
    ResourceAccessTokens?: Array<ResourceAccessToken> | null;
    /**
     * Unique identifier of the last and hence oldest reservation returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older reservations.
     */
    Cursor?: string | null;
};

export type ReservationServiceOrderFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2023-06-06).
     */
    ReservationIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service). If not provided, all bookable services are used.
     */
    ServiceIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group).
     */
    ReservationGroupIds?: Array<(string)> | null;
    /**
     * Unique identifiers of accounts (currently only [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer), in the future also [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)) the reservation is associated with.
     */
    AccountIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the `Companies` on behalf of which the reservations were made.
     */
    PartnerCompanyIds?: Array<(string)> | null;
    /**
     * Identifier of the Travel Agencies (`Company`) that mediated the reservations.
     */
    TravelAgencyIds?: Array<(string)> | null;
    /**
     * Reservation confirmation numbers.
     */
    Numbers?: Array<(string)> | null;
    /**
     * Numbers or references used by a Channel (OTA, GDS, CRS, etc.) in case the reservation group originates there, e.g. Booking.com confirmation numbers.
     */
    ChannelNumbers?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources#resource) assigned to the reservations.
     */
    AssignedResourceIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the `Availability blocks` assigned to the reservations.
     */
    AvailabilityBlockIds?: Array<(string)> | null;
    /**
     * Interval in which the [Reservation](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06) was created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Reservations` were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the reservations are active. This is defined for a `Reservation` as the period between the reservation's scheduled start time `ScheduledStartUtc` and its scheduled end time `EndUtc`. Reservation is selected if any part of its interval intersects with the interval specified in `CollidingUtc
     */
    CollidingUtc?: (TimeFilterInterval) | null;
    /**
     * Interval filtering Reservations by their scheduled start time. Cannot be used with `ActualStartUtc`.
     */
    ScheduledStartUtc?: (TimeFilterInterval) | null;
    /**
     * Interval filtering Reservations by their actual start (check-in) time. Cannot be used with `ScheduledStartUtc`. Note that the filter applies only to started or processed reservations.
     */
    ActualStartUtc?: (TimeFilterInterval) | null;
    /**
     * Interval filtering Reservations by their actual end (check-out) time. Cannot be used with `ScheduledEndUtc`.
     */
    ActualEndUtc?: (TimeFilterInterval) | null;
    /**
     * Interval filtering Reservations by their scheduled end time. Cannot be used with `ActualEndUtc`.
     */
    ScheduledEndUtc?: (TimeFilterInterval) | null;
    /**
     * A list of service order states to filter by.
     */
    States?: Array<ServiceOrderStateEnum> | null;
};

export type ReservationServiceOrderResult = {
    /**
     * The reservations of the enterprise.
     */
    Reservations: Array<Reservation>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type ReservationStartParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the reservation to start.
     */
    ReservationId: string;
};

export type ReservationTimeFilter = 'Colliding' | 'Created' | 'Updated' | 'Start' | 'End' | 'Overlapping' | 'Canceled';

export type ReservationUpdateIntervalParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the reservation to be updated.
     */
    ReservationId: string;
    /**
     * New reservation start in UTC timezone in ISO 8601 format.
     */
    StartUtc?: string | null;
    /**
     * New reservation end in UTC timezone in ISO 8601 format.
     */
    EndUtc?: string | null;
    /**
     * Whether cancellation fee should be charged for potentially canceled nights.
     */
    ChargeCancellationFee: boolean;
};

export type ReservationUpdateOptionsParameters = {
    /**
     * True if the owner of the reservation is checked in. (or `null` if the value should not be updated).
     */
    OwnerCheckedIn?: (BooleanUpdateValue) | null;
};

export type ReservationUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the reservation.
     */
    ReservationId: string;
    /**
     * Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number) (or `null` if the channel number should not be updated).
     */
    ChannelNumber?: (StringUpdateValue) | null;
    /**
     * Reservation start in UTC timezone in ISO 8601 format. (or `null` if the start time should not be updated).
     */
    StartUtc?: (StringUpdateValue) | null;
    /**
     * Reservation end in UTC timezone in ISO 8601 format. (or `null` if the end time should not be updated).
     */
    EndUtc?: (StringUpdateValue) | null;
    /**
     * Date when the optional reservation is released in UTC timezone in ISO 8601 format. (or `null` if the release time should not be updated).
     */
    ReleasedUtc?: (StringUpdateValue) | null;
    /**
     * Number of people per age category the reservation is for. If supplied, the person counts will be replaced. (or `null` if the person counts should not be updated).
     */
    PersonCounts?: (ReservationUpdatePersonCountParameters) | null;
    /**
     * Identifier of the assigned `Resource`.
     */
    AssignedResourceId?: (GuidNullableUpdateValue) | null;
    /**
     * Identifier of the requested `ResourceCategory` (or `null` if resource category should not be updated).
     */
    RequestedCategoryId?: (GuidUpdateValue) | null;
    /**
     * Identifier of the `Company` that mediated the reservation (or `null` if travel agency should not be updated).
     */
    TravelAgencyId?: (GuidNullableUpdateValue) | null;
    /**
     * Identifier of the `Company` on behalf of which the reservation was made (or `null` if company should not be updated).
     */
    CompanyId?: (GuidNullableUpdateValue) | null;
    /**
     * Identifier of the reservation `BusinessSegment` (or `null` if the business segment should not be updated).
     */
    BusinessSegmentId?: (GuidNullableUpdateValue) | null;
    /**
     * `Purpose` of the reservation (or `null` if the purpose should not be updated).
     */
    Purpose?: (StringUpdateValue) | null;
    /**
     * Identifier of the reservation `Rate` (or `null` if the rate should not be updated).
     */
    RateId?: (GuidUpdateValue) | null;
    /**
     * Identifier of `CreditCard` belonging to `Customer` who owns the reservation.  (or `null` if the credit card should not be updated).
     */
    CreditCardId?: (GuidNullableUpdateValue) | null;
    /**
     * Prices for time units of the reservation. E.g. prices for the first or second night. (or `null` if the unit amounts should not be updated).
     */
    TimeUnitPrices?: (ReservationUpdatePerUnitPriceParameters) | null;
    /**
     * Identifier of the `Customer` on whose behalf the reservation was made. (or `null` if the booker should not be updated).
     */
    BookerId?: (GuidNullableUpdateValue) | null;
    /**
     * Whether the reservation should be locked to the assigned `Resource`. Unlocking and assigning reservation to new `Resource` can be done in one call.
     */
    AssignedResourceLocked?: (BooleanUpdateValue) | null;
    /**
     * Unique identifier of the `AvailabilityBlock` the reservation is assigned to.
     */
    AvailabilityBlockId?: (GuidNullableUpdateValue) | null;
    /**
     * Options of the reservations.
     */
    Options?: (ReservationUpdateOptionsParameters) | null;
};

export type ReservationUpdatePerUnitPriceParameters = {
    Value?: Array<PerUnitPriceParameters> | null;
};

export type ReservationUpdatePersonCountParameters = {
    Value?: Array<ReservationPersonCount> | null;
};

export type ReservationsChannelManagerDetailsFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the `Reservations`.
     */
    ReservationIds: Array<(string)>;
};

export type ReservationsChannelManagerDetailsResult = {
    /**
     * List of reservation channel manager details.
     */
    ChannelManagerDetails: Array<ChannelManagerDetails>;
};

export type ReservationsUpdateCustomerParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the reservation to be updated.
     */
    ReservationId: string;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerId: string;
};

export type Resource = {
    /**
     * Unique identifier of the resource.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Whether the resource is still active.
     */
    IsActive: boolean;
    /**
     * Identifier of the parent [Resource](https://mews-systems.gitbook.io/connector-api/operations/#resource) (e.g. room of a bed).
     */
    ParentResourceId?: string | null;
    /**
     * Name of the resource (e.g. room number).
     */
    Name: string;
    /**
     * State of the resource.
     */
    State: string;
    /**
     * All translations of the description.
     */
    Descriptions: {
        [key: string]: (string);
    };
    /**
     * Creation date and time of the resource in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the resource in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Additional data of the resource.
     */
    Data: {
        Discriminator?: string;
        Value?: SpaceData | {
    [key: string]: unknown;
};
    };
    /**
     * All translations of external name.
     */
    ExternalNames: {
        [key: string]: (string);
    };
    /**
     * All translations of direction.
     */
    Directions: {
        [key: string]: (string);
    };
};

export type ResourceAccessToken = {
    /**
     * Unique identifier of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Unique identifier of a reservation.
     */
    ServiceOrderId: string;
    /**
     * Unique identifier of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/companionships/#companionship).
     */
    CompanionshipId?: string | null;
    /**
     * Unique identifier of [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
     */
    ResourceId?: string | null;
    Type: ResourceAccessTokenType;
    /**
     * Value of resource access token
     */
    Value?: string | null;
    /**
     * Serial number of [Resource access token type](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token-type).
     */
    SerialNumber?: string | null;
    /**
     * Marks the start of interval in which the resource access token can be used.
     */
    ValidityStartUtc: string;
    /**
     * Marks the end of interval in which the resource access token can be used.
     */
    ValidityEndUtc: string;
    /**
     * Specify permissions of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
     */
    Permissions?: (ResourceAccessTokenPermissions) | null;
    /**
     * Creation date and time of the resource access token in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the resource access token in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Whether the resource access token is still active.
     */
    IsActive: boolean;
};

export type ResourceAccessTokenDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
     */
    Ids?: Array<(string)> | null;
};

export type ResourceAccessTokenFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource access tokens](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token). Required if no other filter is provided.
     */
    ResourceAccessTokenIds?: Array<(string)> | null;
    /**
     * Unique identifiers of reservations. Required if no other filter is provided.
     */
    ServiceOrderIds?: Array<(string)> | null;
    CollidingUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<(string)> | null;
};

export type ResourceAccessTokenParameters = {
    ServiceOrderId?: string;
    CompanionshipId?: string | null;
    ResourceId?: string | null;
    Value?: string | null;
    Type?: string | null;
    SerialNumber?: string | null;
    ValidityStartUtc?: string | null;
    ValidityEndUtc?: string | null;
    Permissions?: (ResourceAccessTokenPermissionsParameters) | null;
};

/**
 * Specify permissions of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).
 */
export type ResourceAccessTokenPermissions = {
    Bed?: boolean;
    Room?: boolean;
    Floor?: boolean;
    Building?: boolean;
};

export type ResourceAccessTokenPermissionsParameters = {
    Bed?: (BooleanUpdateValue) | null;
    Room?: (BooleanUpdateValue) | null;
    Floor?: (BooleanUpdateValue) | null;
    Building?: (BooleanUpdateValue) | null;
};

export type ResourceAccessTokenResult = {
    /**
     * Resource access tokens.
     */
    ResourceAccessTokens?: Array<ResourceAccessToken> | null;
    /**
     * Unique identifier of the last and hence oldest item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older tokens. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message.
     */
    Cursor?: string | null;
};

export type ResourceAccessTokenType = 'PinCode' | 'RfidTag';

export type ResourceAccessTokenUpdateParameters = {
    ResourceAccessTokenId?: string;
    ValidityStartUtc?: (StringUpdateValue) | null;
    ValidityEndUtc?: (StringUpdateValue) | null;
    /**
     * Value of resource access token (or null if the value should not be updated).
     */
    Value?: (StringUpdateValue) | null;
    Permissions?: (ResourceAccessTokenPermissionsParameters) | null;
};

/**
 *
 *
 * OutOfOrderBlocks (Number of resources that are out of order for the resource category (see `Resource Block`).)
 *
 * PublicAvailabilityAdjustment (Number of resources marked as manual availability adjustments.)
 *
 * OtherServiceReservationCount (Number of resources occupied by another service.)
 *
 * Occupied (Number of bookings that have been assigned to the resource category (i.e. reservations and blocks).)
 *
 * ConfirmedReservations (Number of confirmed reservations that have been assigned to the resource category.)
 *
 * OptionalReservations (Number of optional reservations that have been assigned to the resource category.)
 *
 * BlockAvailability (Number of blocked resources (from an availability block / allotment).)
 *
 * AllocatedBlockAvailability (Number of blocked resources that are in a deducting state (from an availability block / allotment).)
 *
 * UsableResources (Number of usable resources (i.e. which are not out of order).)
 *
 * ActiveResources (Number of active resources.)
 */
export type ResourceAvailabilityMetricTypeEnum = 'OutOfOrderBlocks' | 'PublicAvailabilityAdjustment' | 'OtherServiceReservationCount' | 'Occupied' | 'ConfirmedReservations' | 'OptionalReservations' | 'BlockAvailability' | 'AllocatedBlockAvailability' | 'UsableResources' | 'ActiveResources';

export type ResourceBlock = {
    /**
     * Unique identifier of the block.
     */
    Id: string;
    EnterpriseId: string;
    /**
     * Unique identifier of the assigned [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
     */
    AssignedResourceId: string;
    /**
     * Whether the block is still active.
     */
    IsActive: boolean;
    Type: ResourceBlockType;
    /**
     * Start of the block in UTC timezone in ISO 8601 format.
     */
    StartUtc: string;
    /**
     * End of the block in UTC timezone in ISO 8601 format.
     */
    EndUtc: string;
    /**
     * Creation date and time of the block in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the block in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Date and time when the block was deleted (for inactive ones) in UTC timezone in ISO 8601 format.
     */
    DeletedUtc?: string | null;
    /**
     * Name of the resource block.
     */
    Name: string;
    /**
     * Note describing the resource block.
     */
    Notes?: string | null;
};

export type ResourceBlockAddParameters = {
    ResourceId: string;
    Name: string;
    Type: ResourceBlockType;
    StartUtc: string;
    EndUtc: string;
    Notes?: string | null;
};

export type ResourceBlockDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of [Resource blocks](https://mews-systems.gitbook.io/connector-api/operations/#resource-block) to be removed.
     */
    ResourceBlockIds: Array<(string)>;
};

/**
 * Extent of data to be returned.
 */
export type ResourceBlockExtent = {
    Inactive?: boolean;
};

export type ResourceBlockParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Extent of data to be returned.
     * @deprecated
     */
    Extent?: (ResourceBlockExtent) | null;
    /**
     * Unique identifiers of the requested [Resource blocks](https://mews-systems.gitbook.io/connector-api/operations/#resource-block).
     */
    ResourceBlockIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested Assigned [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
     */
    AssignedResourceIds?: Array<(string)> | null;
    /**
     * Whether to return only active, only deleted or both records. Defaults to `Active` if not specified.
     */
    ActivityStates?: Array<ActivityStates> | null;
    CollidingUtc?: (TimeFilterInterval) | null;
    CreatedUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type ResourceBlockResult = {
    /**
     * Resource blocks added.
     */
    ResourceBlocks: Array<ResourceBlock>;
    Cursor?: string | null;
};

export type ResourceBlockType = 'OutOfOrder' | 'InternalUse';

export type ResourceCategory = {
    /**
     * Unique identifier of the category.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) of the resource category.
     */
    ServiceId: string;
    /**
     * Whether the category is still active.
     */
    IsActive: boolean;
    Type: ResourceCategoryType;
    Classification: ResourceClassification;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * All translations of the short name.
     */
    ShortNames: {
        [key: string]: (string);
    };
    /**
     * All translations of the description.
     */
    Descriptions: {
        [key: string]: (string);
    };
    Ordering: number;
    Capacity: number;
    /**
     * Extra capacity that can be served (e.g. extra bed count).
     */
    ExtraCapacity: number;
    /**
     * Identifier of the resource category from external system.
     */
    ExternalIdentifier?: string | null;
    AccountingCategoryId?: string | null;
};

export type ResourceCategoryAssignment = {
    /**
     * Unique identifier of the assignment.
     */
    Id: string;
    /**
     * Whether the assignment is still active.
     */
    IsActive: boolean;
    /**
     * Unique identifier of the [Resource](https://mews-systems.gitbook.io/connector-api/operations/#resource) assigned to the Resource category.
     */
    ResourceId: string;
    /**
     * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).
     */
    CategoryId: string;
    /**
     * Creation date and time of the assignment in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the assignment in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type ResourceCategoryAssignmentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource category assignment](https://mews-systems.gitbook.io/connector-api/operations/resourcecategories/#resource-category-assignment).
     */
    ResourceCategoryAssignmentIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/#resource-category) to which the resource category assignment belong.
     */
    ResourceCategoryIds: Array<(string)>;
    /**
     * Interval in which the resource category assignments were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
    /**
     * Unique identifiers of resources to which the resource category assignments belong.
     */
    ResourceIds?: Array<(string)> | null;
};

export type ResourceCategoryAssignmentResult = {
    /**
     * Resource category assignments.
     */
    ResourceCategoryAssignments: Array<ResourceCategoryAssignment>;
    /**
     * Unique identifier of the last and hence oldest resource category assignment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource category assignments.
     */
    Cursor?: string | null;
};

export type ResourceCategoryAvailabilityV20240122 = {
    /**
     * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources#resource-category).
     */
    ResourceCategoryId: string;
    /**
     * Dictionary keys are names of [Service availability metrics](https://mews-systems.gitbook.io/connector-api/operations/services#service-availability-metrics), values are arrays of integers with metric values for corresponding time unit in `TimeUnitStartsUtc`.
     */
    Metrics: {
        OutOfOrderBlocks?: Array<(number)>;
        PublicAvailabilityAdjustment?: Array<(number)>;
        OtherServiceReservationCount?: Array<(number)>;
        Occupied?: Array<(number)>;
        ConfirmedReservations?: Array<(number)>;
        OptionalReservations?: Array<(number)>;
        BlockAvailability?: Array<(number)>;
        AllocatedBlockAvailability?: Array<(number)>;
        UsableResources?: Array<(number)>;
        ActiveResources?: Array<(number)>;
    };
};

export type ResourceCategoryFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).
     */
    ResourceCategoryIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource categories belong.
     */
    ServiceIds: Array<(string)>;
    /**
     * Interval in which the resource categories were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceCategoryImageAssignment = {
    /**
     * Unique identifier of the assignment.
     */
    Id: string;
    /**
     * Whether the assignment is still active.
     */
    IsActive: boolean;
    /**
     * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).
     */
    CategoryId: string;
    /**
     * Unique identifier of the image assigned to the Resource category.
     */
    ImageId: string;
    /**
     * Creation date and time of the assignment in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the assignment in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type ResourceCategoryImageAssignmentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource category image assignments](https://mews-systems.gitbook.io/connector-api/operations/resourcecategories/#resource-category-image-assignment).
     */
    ResourceCategoryImageAssignmentIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource-category) to which the resource category image assignments belong.
     */
    ResourceCategoryIds: Array<(string)>;
    /**
     * Interval in which the resource category image assignments were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceCategoryImageAssignmentResult = {
    /**
     * Resource category image assignments.
     */
    ResourceCategoryImageAssignments: Array<ResourceCategoryImageAssignment>;
    /**
     * Unique identifier of the last and hence oldest resource category image assignment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource category image assignments.
     */
    Cursor?: string | null;
};

/**
 * The list of `ResourceOccupancyState`s grouped by resource category.
 */
export type ResourceCategoryOccupancyState = {
    /**
     * Unique identifier of the 'Resource category'.
     */
    ResourceCategoryId: string;
    /**
     * The resource occupancy states.
     */
    ResourceOccupancyStates: Array<ResourceOccupancyState>;
};

export type ResourceCategoryResult = {
    /**
     * Resource categories of the resources.
     */
    ResourceCategories: Array<ResourceCategory>;
    /**
     * Unique identifier of the last and hence oldest resource category returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource categories.
     */
    Cursor?: string | null;
};

export type ResourceCategoryType = 'Room' | 'Bed' | 'Dorm' | 'Apartment' | 'Suite' | 'Villa' | 'Site' | 'Office' | 'MeetingRoom' | 'ParkingSpot' | 'Desk' | 'TeamArea' | 'Membership' | 'Tent' | 'CaravanOrRV' | 'UnequippedCampsite' | 'Bike' | 'ExtraBed' | 'Cot' | 'Crib' | 'ConferenceRoom' | 'Rooftop' | 'Garden' | 'Restaurant' | 'Amphitheater' | 'PrivateSpaces';

/**
 *
 *
 * Room
 *
 * Bed
 *
 * Dorm
 *
 * Apartment
 *
 * Suite
 *
 * Villa
 *
 * Site
 *
 * Office
 *
 * MeetingRoom
 *
 * ParkingSpot
 *
 * Desk
 *
 * TeamArea
 *
 * Membership
 *
 * Tent
 *
 * CaravanOrRV
 *
 * UnequippedCampsite
 *
 * Bike
 *
 * ExtraBed
 *
 * Cot
 *
 * Crib
 *
 * ConferenceRoom
 *
 * Rooftop
 *
 * Garden
 *
 * Restaurant
 *
 * Amphitheater
 *
 * PrivateSpaces
 */
export type ResourceCategoryTypeEnum = 'Room' | 'Bed' | 'Dorm' | 'Apartment' | 'Suite' | 'Villa' | 'Site' | 'Office' | 'MeetingRoom' | 'ParkingSpot' | 'Desk' | 'TeamArea' | 'Membership' | 'Tent' | 'CaravanOrRV' | 'UnequippedCampsite' | 'Bike' | 'ExtraBed' | 'Cot' | 'Crib' | 'ConferenceRoom' | 'Rooftop' | 'Garden' | 'Restaurant' | 'Amphitheater' | 'PrivateSpaces';

export type ResourceClassification = 'StandardSingle' | 'StandardDouble' | 'SuperiorTwin' | 'SuperiorDouble' | 'JuniorSuite' | 'SharedOrDorm' | 'Other' | 'SuperiorSingle' | 'Triple' | 'Family' | 'StandardTwin' | 'Studio' | 'SuperiorTripleRoom' | 'OneBedroomApartment' | 'ThreeBedroomsApartment' | 'TwoBedroomsApartment';

export type ResourceDataDiscriminator = 'Space' | 'Object' | 'Person';

/**
 * Extent of data to be returned.
 */
export type ResourceExtent = {
    Resources?: boolean;
    /**
     * @deprecated
     */
    ResourceCategories?: boolean;
    /**
     * @deprecated
     */
    ResourceCategoryAssignments?: boolean;
    /**
     * @deprecated
     */
    ResourceCategoryImageAssignments?: boolean;
    /**
     * @deprecated
     */
    ResourceFeatures?: boolean;
    /**
     * @deprecated
     */
    ResourceFeatureAssignments?: boolean;
    Inactive?: boolean;
};

export type ResourceFeature = {
    /**
     * Unique identifier of the feature.
     */
    Id: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
     */
    ServiceId: string;
    /**
     * Whether the resource feature is still active.
     */
    IsActive: boolean;
    Classification: ResourceFeatureClassification;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * All translations of the short name.
     */
    ShortNames: {
        [key: string]: (string);
    };
    /**
     * All translations of the description.
     */
    Descriptions: {
        [key: string]: (string);
    };
    CreatedUtc: string;
    UpdatedUtc: string;
};

export type ResourceFeatureAssignment = {
    /**
     * Unique identifier of the assignment.
     */
    Id: string;
    /**
     * Whether the assignment is still active.
     */
    IsActive: boolean;
    /**
     * Unique identifier of the [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).
     */
    ResourceId: string;
    /**
     * Unique identifier of the [Resource feature](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature) assigned to the Resource.
     */
    FeatureId: string;
    /**
     * Creation date and time of the assignment in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the assignment in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type ResourceFeatureAssignmentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    ResourceFeatureAssignmentIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource features](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature) to which the resource feature assignments belong.
     */
    ResourceFeatureIds: Array<(string)>;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceFeatureAssignmentResult = {
    /**
     * Resource feature assignments.
     */
    ResourceFeatureAssignments: Array<ResourceFeatureAssignment>;
    /**
     * Unique identifier of the last and hence oldest resource feature assignments returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource feature assignments.
     */
    Cursor?: string | null;
};

export type ResourceFeatureClassification = 'SeaView' | 'RiverView' | 'OceanView' | 'TwinBeds' | 'DoubleBed' | 'RollawayBed' | 'UpperBed' | 'LowerBed' | 'Balcony' | 'AccessibleBathroom' | 'AccessibleRoom' | 'ElevatorAccess' | 'HighFloor' | 'Kitchenette' | 'AirConditioning' | 'PrivateJacuzzi' | 'PrivateSauna' | 'EnsuiteRoom' | 'PrivateBathroom' | 'SharedBathroom';

/**
 *
 *
 * SeaView
 *
 * RiverView
 *
 * OceanView
 *
 * TwinBeds
 *
 * DoubleBed
 *
 * RollawayBed
 *
 * UpperBed
 *
 * LowerBed
 *
 * Balcony
 *
 * AccessibleBathroom
 *
 * AccessibleRoom
 *
 * ElevatorAccess
 *
 * HighFloor
 *
 * Kitchenette
 *
 * AirConditioning
 *
 * PrivateJacuzzi
 *
 * PrivateSauna
 *
 * EnsuiteRoom
 *
 * PrivateBathroom
 *
 * SharedBathroom
 */
export type ResourceFeatureClassificationEnum = 'SeaView' | 'RiverView' | 'OceanView' | 'TwinBeds' | 'DoubleBed' | 'RollawayBed' | 'UpperBed' | 'LowerBed' | 'Balcony' | 'AccessibleBathroom' | 'AccessibleRoom' | 'ElevatorAccess' | 'HighFloor' | 'Kitchenette' | 'AirConditioning' | 'PrivateJacuzzi' | 'PrivateSauna' | 'EnsuiteRoom' | 'PrivateBathroom' | 'SharedBathroom';

export type ResourceFeatureFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Resource features](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature).
     */
    ResourceFeatureIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource features belong.
     */
    ServiceIds: Array<(string)>;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted or both records.
     */
    ActivityStates?: Array<ActivityStates> | null;
};

export type ResourceFeatureResult = {
    /**
     * Resource features.
     */
    ResourceFeatures: Array<ResourceFeature>;
    /**
     * Unique identifier of the last and hence oldest resource features returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource feature.
     */
    Cursor?: string | null;
};

export type ResourceFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the requested [Resources](https://mews-systems.gitbook.io/connector-api/operations/#resource).
     */
    ResourceIds?: Array<(string)> | null;
    Names?: Array<(string)> | null;
    /**
     * Extent of data to be returned.
     */
    Extent?: (ResourceExtent) | null;
    CreatedUtc?: (TimeFilterInterval) | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

/**
 * The occupancy state of a `Resource`.
 */
export type ResourceOccupancyState = {
    /**
     * Unique identifier of the resource.
     */
    ResourceId: string;
    /**
     * Resource state of the resource.
     *
     * Dirty
     *
     * Clean
     *
     * Inspected
     *
     * OutOfService
     *
     * OutOfOrder
     */
    ResourceState: ResourceStateEnum;
    /**
     * State of the resource.
     *
     * Vacant
     *
     * ReservedLocked
     *
     * Reserved
     *
     * InternalUse
     *
     * OutOfOrder
     */
    OccupancyState: OccupancyStateEnum;
};

export type ResourceResult = {
    /**
     * The resources of the enterprise.
     */
    Resources?: Array<Resource> | null;
    /**
     * Categories of resources in the enterprise. **Deprecated!**
     * @deprecated
     */
    ResourceCategories?: Array<ResourceCategory> | null;
    /**
     * Assignments of resources to categories. **Deprecated!**
     * @deprecated
     */
    ResourceCategoryAssignments?: Array<ResourceCategoryAssignment> | null;
    /**
     * Assignments of images to categories. **Deprecated!**
     * @deprecated
     */
    ResourceCategoryImageAssignments?: Array<ResourceCategoryImageAssignment> | null;
    /**
     * Features of resources in the enterprise. **Deprecated!**
     * @deprecated
     */
    ResourceFeatures?: Array<ResourceFeature> | null;
    /**
     * Assignments of resource features to resources. **Deprecated!**
     * @deprecated
     */
    ResourceFeatureAssignments?: Array<ResourceFeatureAssignment> | null;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * Dirty
 *
 * Clean
 *
 * Inspected
 *
 * OutOfService
 *
 * OutOfOrder
 */
export type ResourceStateEnum = 'Dirty' | 'Clean' | 'Inspected' | 'OutOfService' | 'OutOfOrder';

export type ResourceUpdateParameters = {
    ResourceId: string;
    Name?: (StringUpdateValue) | null;
    ParentResourceId?: (GuidNullableUpdateValue) | null;
    Data?: {
        Discriminator?: ResourceDataDiscriminator;
        Value?: SpaceData | {
    [key: string]: unknown;
};
    };
    State?: (StringUpdateValue) | null;
    StateReason?: (StringUpdateValue) | null;
};

export type ResourcesOccupancyStateFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the `Resource category`.
     */
    ResourceCategoryIds: Array<(string)>;
    /**
     * States of the `Resource`
     */
    ResourceStates?: Array<ResourceStateEnum> | null;
    /**
     * Occupancy states of the `Resource`.
     */
    OccupancyStates?: Array<OccupancyStateEnum> | null;
};

export type ResourcesOccupancyStateResult = {
    /**
     * The resource categories.
     */
    ResourceCategoryOccupancyStates: Array<ResourceCategoryOccupancyState>;
};

/**
 * The added restriction.
 */
export type Restriction = {
    /**
     * Unique identifier of the restriction.
     */
    Id: string;
    /**
     * Unique identifier of the `Service`.
     */
    ServiceId: string;
    /**
     * External identifier of the restriction.
     */
    ExternalIdentifier?: string | null;
    /**
     * Restriction origin
     *
     * User (Restriction was created by a user in Mews.)
     *
     * Integration (Restriction was created by a 3rd-party integration.)
     */
    Origin: RestrictionOriginEnum;
    /**
     * The conditions or rules that must be met by a reservation for the restriction to apply.
     */
    Conditions: RestrictionConditions;
    /**
     * The rules that prevent the restriction from applying to a reservation, even when all conditions have been met.
     */
    Exceptions?: (RestrictionExceptions) | null;
};

export type RestrictionAdditionResult = {
    /**
     * The added restrictions.
     */
    Restrictions?: Array<AddedRestriction> | null;
};

export type RestrictionClearData = {
    /**
     * Restriction type.
     *
     * Stay (Guests can't stay within specified dates.)
     *
     * Start (Guests can't check in within specified dates.)
     *
     * End (Guests can't check out within specified dates.)
     */
    Type: RestrictionTypeEnum;
    /**
     * Unique identifier of the exact `Rate` to which the restriction applies.
     */
    ExactRateId?: string | null;
    /**
     * Unique identifier of the base `Rate` to which the restriction applies.
     */
    BaseRateId?: string | null;
    /**
     * Unique identifier of the `Rate group` to which the restriction applies.
     */
    RateGroupId?: string | null;
    /**
     * Unique identifier of the `Resource category` to which the restriction applies.
     */
    ResourceCategoryId?: string | null;
    /**
     * Name of the `Resource category type` to which the restriction applies.
     *
     * Room
     *
     * Bed
     *
     * Dorm
     *
     * Apartment
     *
     * Suite
     *
     * Villa
     *
     * Site
     *
     * Office
     *
     * MeetingRoom
     *
     * ParkingSpot
     *
     * Desk
     *
     * TeamArea
     *
     * Membership
     *
     * Tent
     *
     * CaravanOrRV
     *
     * UnequippedCampsite
     *
     * Bike
     *
     * ExtraBed
     *
     * Cot
     *
     * Crib
     *
     * ConferenceRoom
     *
     * Rooftop
     *
     * Garden
     *
     * Restaurant
     *
     * Amphitheater
     *
     * PrivateSpaces
     */
    ResourceCategoryType?: (ResourceCategoryTypeEnum) | null;
    /**
     * Start date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).
     */
    StartUtc?: string | null;
    /**
     * End date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).
     */
    EndUtc?: string | null;
    /**
     * The days of week to which the restriction applies.
     */
    Days: DaysParameters;
};

/**
 * The conditions or rules that must be met by a reservation for the restriction to apply.
 */
export type RestrictionConditions = {
    /**
     * Restriction type.
     *
     * Stay (Guests can't stay within specified dates.)
     *
     * Start (Guests can't check in within specified dates.)
     *
     * End (Guests can't check out within specified dates.)
     */
    Type: RestrictionTypeEnum;
    /**
     * Unique identifier of the restricted exact `Rate`.
     */
    ExactRateId?: string | null;
    /**
     * Unique identifier of the restricted base `Rate`.
     */
    BaseRateId?: string | null;
    /**
     * Unique identifier of the restricted `Rate group`.
     */
    RateGroupId?: string | null;
    /**
     * Unique identifier of the restricted `Resource category`.
     */
    ResourceCategoryId?: string | null;
    /**
     * Name of the restricted `Resource category type`.
     *
     * Room
     *
     * Bed
     *
     * Dorm
     *
     * Apartment
     *
     * Suite
     *
     * Villa
     *
     * Site
     *
     * Office
     *
     * MeetingRoom
     *
     * ParkingSpot
     *
     * Desk
     *
     * TeamArea
     *
     * Membership
     *
     * Tent
     *
     * CaravanOrRV
     *
     * UnequippedCampsite
     *
     * Bike
     *
     * ExtraBed
     *
     * Cot
     *
     * Crib
     *
     * ConferenceRoom
     *
     * Rooftop
     *
     * Garden
     *
     * Restaurant
     *
     * Amphitheater
     *
     * PrivateSpaces
     */
    ResourceCategoryType?: (ResourceCategoryTypeEnum) | null;
    /**
     * Start date of the restriction time interval, specified in ISO 8601 format and adjusted to UTC - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes) for important information on format and implementation.
     */
    StartUtc?: string | null;
    /**
     * End date of the restriction time interval, specified in ISO 8601 format and adjusted to UTC - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes) for important information on format and implementation.
     */
    EndUtc?: string | null;
    /**
     * The restricted days of week. Defaults to all days when not provided. Ignored when the service uses a time unit longer than a day.
     */
    Days?: Array<(string)> | null;
    /**
     * The restricted hours. Defaults to all hours when not provided.
     */
    Hours?: (Hours) | null;
};

export type RestrictionConditionsData = {
    /**
     * Restriction type.
     *
     * Stay (Guests can't stay within specified dates.)
     *
     * Start (Guests can't check in within specified dates.)
     *
     * End (Guests can't check out within specified dates.)
     */
    Type: RestrictionTypeEnum;
    /**
     * Unique identifier of the exact `Rate` to which the restriction applies.
     */
    ExactRateId?: string | null;
    /**
     * Unique identifier of the base `Rate` to which the restriction applies.
     */
    BaseRateId?: string | null;
    /**
     * Unique identifier of the `Rate group` to which the restriction applies.
     */
    RateGroupId?: string | null;
    /**
     * Unique identifier of the `Resource category` to which the restriction applies.
     */
    ResourceCategoryId?: string | null;
    /**
     * Name of the `Resource category type` to which the restriction applies.
     *
     * Room
     *
     * Bed
     *
     * Dorm
     *
     * Apartment
     *
     * Suite
     *
     * Villa
     *
     * Site
     *
     * Office
     *
     * MeetingRoom
     *
     * ParkingSpot
     *
     * Desk
     *
     * TeamArea
     *
     * Membership
     *
     * Tent
     *
     * CaravanOrRV
     *
     * UnequippedCampsite
     *
     * Bike
     *
     * ExtraBed
     *
     * Cot
     *
     * Crib
     *
     * ConferenceRoom
     *
     * Rooftop
     *
     * Garden
     *
     * Restaurant
     *
     * Amphitheater
     *
     * PrivateSpaces
     */
    ResourceCategoryType?: (ResourceCategoryTypeEnum) | null;
    /**
     * Start date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).
     */
    StartUtc?: string | null;
    /**
     * End date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).
     */
    EndUtc?: string | null;
    /**
     * The restricted days of week. Defaults to all days when not provided. Ignored when the service uses a time unit longer than a day.
     */
    Days?: Array<(string)> | null;
    /**
     * The restricted hours. Defaults to all hours when not provided.
     */
    Hours?: (Hours) | null;
};

export type RestrictionData = {
    /**
     * Identifier of the restriction within the transaction.
     */
    Identifier?: string | null;
    /**
     * External identifier of the restriction.
     */
    ExternalIdentifier?: string | null;
    /**
     * The conditions or rules that must be met by a reservation for the restriction to apply.
     */
    Conditions: RestrictionConditionsData;
    /**
     * The rules that prevent the restriction from applying to a reservation, even when all conditions have been met.
     */
    Exceptions?: (RestrictionExceptionsData) | null;
};

/**
 * The rules that prevent the restriction from applying to a reservation, even when all conditions have been met.
 */
export type RestrictionExceptions = {
    /**
     * The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MinAdvance?: string | null;
    /**
     * The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MaxAdvance?: string | null;
    /**
     * Minimal reservation length in ISO 8601 duration format.
     */
    MinLength?: string | null;
    /**
     * Maximal reservation length in ISO 8601 duration format.
     */
    MaxLength?: string | null;
    /**
     * Value of the minimum price per time unit.
     */
    MinPrice?: (CurrencyValueOld) | null;
    /**
     * Value of the maximum price per time unit.
     */
    MaxPrice?: (CurrencyValueOld) | null;
};

export type RestrictionExceptionsData = {
    /**
     * The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MinAdvance?: string | null;
    /**
     * The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MaxAdvance?: string | null;
    /**
     * Minimal reservation length in ISO 8601 duration format.
     */
    MinLength?: string | null;
    /**
     * Maximal reservation length in ISO 8601 duration format.
     */
    MaxLength?: string | null;
    /**
     * Value of the minimum price per time unit.
     */
    MinPrice?: (CurrencyValueOld) | null;
    /**
     * Value of the maximum price per time unit.
     */
    MaxPrice?: (CurrencyValueOld) | null;
};

export type RestrictionFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * @deprecated
     */
    TimeFilter?: string | null;
    /**
     * @deprecated
     */
    StartUtc?: string | null;
    /**
     * @deprecated
     */
    EndUtc?: string | null;
    /**
     * Interval in which the `Restriction` is active.
     */
    CollidingUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Restriction` was created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the `Restriction` was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Unique identifiers of the `Restriction`.
     */
    RestrictionIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Resource category`.
     */
    ResourceCategoryIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Rate`. Returns all restrictions that affect the given rates, i.e. ones without any `Restriction Conditions`, ones assigned directly to specified rates, ones assigned to `Rate group` of specified rates, or ones inherited from base rates.`.
     */
    RateIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Rate`. Returns only those restrictions which have matching `ExactRateId` set in `Restriction Condition`.
     */
    ExactRateIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Rate`. Returns only those restrictions which have matching `BaseRateId` set in `Restriction Condition`.
     */
    BaseRateIds?: Array<(string)> | null;
    /**
     * Restriction origin. Returns only those restrictions which have matching Origin or all if not specified.
     */
    Origin?: RestrictionOrigin | null;
    /**
     * Unique identifiers of the `Service` from which the restrictions are requested.
     */
    ServiceIds: Array<(string)>;
};

export type RestrictionOrigin = 'User' | 'Integration';

/**
 *
 *
 * User (Restriction was created by a user in Mews.)
 *
 * Integration (Restriction was created by a 3rd-party integration.)
 */
export type RestrictionOriginEnum = 'User' | 'Integration';

export type RestrictionResult = {
    /**
     * Restrictions of the default service.
     */
    Restrictions: Array<Restriction>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type RestrictionSetData = {
    /**
     * Restriction type.
     *
     * Stay (Guests can't stay within specified dates.)
     *
     * Start (Guests can't check in within specified dates.)
     *
     * End (Guests can't check out within specified dates.)
     */
    Type: RestrictionTypeEnum;
    /**
     * Unique identifier of the exact `Rate` to which the restriction applies.
     */
    ExactRateId?: string | null;
    /**
     * Unique identifier of the base `Rate` to which the restriction applies.
     */
    BaseRateId?: string | null;
    /**
     * Unique identifier of the `Rate group` to which the restriction applies.
     */
    RateGroupId?: string | null;
    /**
     * Unique identifier of the `Resource category` to which the restriction applies.
     */
    ResourceCategoryId?: string | null;
    /**
     * Name of the `Resource category type` to which the restriction applies.
     *
     * Room
     *
     * Bed
     *
     * Dorm
     *
     * Apartment
     *
     * Suite
     *
     * Villa
     *
     * Site
     *
     * Office
     *
     * MeetingRoom
     *
     * ParkingSpot
     *
     * Desk
     *
     * TeamArea
     *
     * Membership
     *
     * Tent
     *
     * CaravanOrRV
     *
     * UnequippedCampsite
     *
     * Bike
     *
     * ExtraBed
     *
     * Cot
     *
     * Crib
     *
     * ConferenceRoom
     *
     * Rooftop
     *
     * Garden
     *
     * Restaurant
     *
     * Amphitheater
     *
     * PrivateSpaces
     */
    ResourceCategoryType?: (ResourceCategoryTypeEnum) | null;
    /**
     * Start date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).
     */
    StartUtc?: string | null;
    /**
     * End date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).
     */
    EndUtc?: string | null;
    /**
     * The restricted days of week.
     */
    Days: DaysParameters;
    /**
     * The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MinAdvance?: string | null;
    /**
     * The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.
     */
    MaxAdvance?: string | null;
    /**
     * Minimal reservation length in ISO 8601 duration format.
     */
    MinLength?: string | null;
    /**
     * Maximal reservation length in ISO 8601 duration format.
     */
    MaxLength?: string | null;
    /**
     * Value of the minimum price per time unit.
     */
    MinPrice?: (CurrencyValue) | null;
    /**
     * Value of the maximum price per time unit.
     */
    MaxPrice?: (CurrencyValue) | null;
};

/**
 *
 *
 * Stay (Guests can't stay within specified dates.)
 *
 * Start (Guests can't check in within specified dates.)
 *
 * End (Guests can't check out within specified dates.)
 */
export type RestrictionTypeEnum = 'Stay' | 'Start' | 'End';

/**
 * Revenue type.
 *
 * Service
 *
 * Product
 *
 * Additional
 */
export type RevenueTypeEnum = 'Service' | 'Product' | 'Additional';

export type RoutingRule = {
    /**
     * Unique identifier of the routing rule.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) routing rule is assigned to.
     */
    CompanyId: string;
    CompanyRelation: RoutingRuleCompanyRelation;
    Applicability: RoutingRuleApplicability;
    RouteType: RoutingRuleRouteType;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) routing rule is assigned to.
     */
    ServiceId?: string | null;
    /**
     * Specific items to which the routing rule applies. Returns only if RouteType value is SelectedStayItems.
     */
    SelectedStayItems?: (RoutingRuleStayItems) | null;
    /**
     * Creation date and time of the routing rule in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the routing rule in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type RoutingRuleAddParameter = {
    CompanyId: string;
    ServiceId: string;
    CompanyRelation: RoutingRuleCompanyRelation;
    Applicability: RoutingRuleApplicability;
    RouteType: RoutingRuleRouteType;
    AssignmentTargetType?: RoutingRuleRouteType | null;
    SelectedStayItems?: (RoutingRuleStayItemsAddParameters) | null;
};

export type RoutingRuleApplicability = 'Always' | 'PrepaidOnly';

export type RoutingRuleCompanyRelation = 'PartnerCompany' | 'TravelAgency';

export type RoutingRuleDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the routing rules to be deleted.
     */
    RoutingRuleIds: Array<(string)>;
};

export type RoutingRuleFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company).
     */
    CompanyIds?: Array<(string)> | null;
    /**
     * Unique identifier of the [Routing rule](https://mews-systems.gitbook.io/connector-api/operations/routingrules/#routing-rule).
     */
    RoutingRuleIds?: Array<(string)> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type RoutingRuleResult = {
    /**
     * Collection of Routing rules.
     */
    RoutingRules: Array<RoutingRule>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type RoutingRuleRouteType = 'AllStayItems' | 'SelectedStayItems';

/**
 * Specific items to which the routing rule applies. Returns only if RouteType value is SelectedStayItems.
 */
export type RoutingRuleStayItems = {
    Nights?: boolean;
    CityTax?: boolean;
    ProductCategoryIds?: Array<(string)> | null;
};

export type RoutingRuleStayItemsAddParameters = {
    Nights?: boolean;
    CityTax?: boolean;
    ProductCategoryIds?: Array<(string)> | null;
};

export type RoutingRuleStayItemsUpdateParameters = {
    Nights?: (BooleanUpdateValue) | null;
    CityTax?: (BooleanUpdateValue) | null;
    ProductCategoryIds?: (GuidIEnumerableUpdateValue) | null;
};

export type RoutingRuleUpdateParameters = {
    RoutingRuleId: string;
    CompanyId?: (GuidUpdateValue) | null;
    ServiceId?: (GuidUpdateValue) | null;
    CompanyRelation?: (StringUpdateValue) | null;
    Applicability?: (StringUpdateValue) | null;
    RouteType?: (StringUpdateValue) | null;
    AssignmentTargetType?: (StringUpdateValue) | null;
    SelectedStayItems?: (RoutingRuleStayItemsUpdateParameters) | null;
};

export type Rule = {
    /**
     * Unique identifier of the rule.
     */
    Id: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the rule is assigned to.
     */
    ServiceId: string;
    /**
     * Conditions of the rule.
     */
    Conditions?: (RuleConditions) | null;
    /**
     * Creation date and time of the rule in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the rule in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type RuleAction = {
    /**
     * Unique identifier of the rule action.
     */
    Id?: string;
    /**
     * Unique identifier of the rule.
     */
    RuleId?: string;
    /**
     * Additional information about action.
     */
    Data?: {
        Discriminator?: RuleActionDiscriminator;
        Value?: RuleActionProductData;
    };
};

export type RuleActionDiscriminator = 'Product';

export type RuleActionProductData = {
    ActionType?: string | null;
    ProductId?: string;
};

export type RuleCondition = {
    Value?: string | null;
    ConditionType?: RuleConditionType | null;
};

export type RuleConditionType = 'Equals' | 'NotEquals';

/**
 * Conditions of the rule.
 */
export type RuleConditions = {
    RateId?: (RuleCondition) | null;
    RateGroupId?: (RuleCondition) | null;
    BusinessSegmentId?: (RuleCondition) | null;
    ResourceCategoryId?: (RuleCondition) | null;
    ResourceCategoryType?: (RuleCondition) | null;
    Origin?: (RuleCondition) | null;
    TravelAgencyId?: (RuleCondition) | null;
    MinimumTimeUnitCount?: number | null;
    MaximumTimeUnitCount?: number | null;
};

/**
 * Extent of data to be returned.
 */
export type RuleExtent = {
    RuleActions?: boolean;
    Rates?: boolean;
    RateGroups?: boolean;
    ResourceCategories?: boolean;
    BusinessSegments?: boolean;
};

export type RuleFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    Ids?: Array<(string)> | null;
    /**
     * Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
     */
    ServiceIds: Array<(string)>;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Extent of data to be returned.
     */
    Extent: RuleExtent;
};

export type RuleResult = {
    /**
     * Rules used with reservation creations and modifications.
     */
    Rules?: Array<Rule> | null;
    /**
     * Rule actions applied in rules.
     */
    RuleActions?: Array<RuleAction> | null;
    /**
     * Rates used in conditions.
     */
    Rates?: Array<RateForExtent> | null;
    /**
     * Rate groups used in conditions.
     */
    RateGroups?: Array<RateGroupOld> | null;
    /**
     * Resource categories used in conditions.
     */
    ResourceCategories?: Array<ResourceCategory> | null;
    /**
     * Business segments used in conditions.
     */
    BusinessSegments?: Array<BusinessSegment> | null;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type SaltoMobileKeyDto = {
    Key?: string | null;
    InstallationId?: string | null;
};

export type SearchOperator = 'And' | 'Or';

export type SenderDiscriminator = 'Application' | 'Enterprise';

export type SepaDirectDebitData = {
    /**
     * The customer's bank account number in IBAN format.
     */
    Iban: string;
    /**
     * Full name of the customer.
     */
    Name: string;
    /**
     * Email address of the customer.
     */
    Email: string;
    /**
     * The user agent of the browser from which the Mandate was accepted by the customer.
     */
    UserAgent: string;
    /**
     * The IP address from which the Mandate was accepted by the customer.
     */
    RemoteIpAddress: string;
};

export type Service = {
    /**
     * Unique identifier of the service.
     */
    Id: string;
    /**
     * Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).
     */
    EnterpriseId: string;
    /**
     * Whether the service is still active.
     */
    IsActive: boolean;
    /**
     * Name of the service.
     * @deprecated
     */
    Name: string;
    /**
     * All translations of the name.
     */
    Names: {
        [key: string]: (string);
    };
    /**
     * @deprecated
     */
    StartTime?: string | null;
    /**
     * @deprecated
     */
    EndTime?: string | null;
    /**
     * Options of the service.
     */
    Options: ServiceOptions;
    /**
     * @deprecated
     */
    Promotions?: (Promotions) | null;
    /**
     * @deprecated
     */
    Type?: string | null;
    /**
     * Order value for presentation purposes.
     */
    Ordering: number;
    /**
     * Additional information about the specific service.
     */
    Data: {
        Discriminator?: ServiceDataDiscriminator;
        Value?: BookableServiceData | AdditionalServiceData;
    };
    /**
     * Identifier of the service from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Creation date and time of the service in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the service in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type ServiceAvailabilityFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/#service) whose availability should be returned.
     */
    ServiceId: string;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/): 367 hours if hours, 367 days if days, or 60 months if months.
     */
    LastTimeUnitStartUtc: string;
    /**
     * @deprecated
     */
    StartUtc?: string | null;
    /**
     * @deprecated
     */
    EndUtc?: string | null;
};

export type ServiceAvailabilityFilterParametersV20240122 = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) whose availability should be returned.
     */
    ServiceId: string;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/): 367 hours if hours, 367 days if days, or 60 months if months.
     */
    LastTimeUnitStartUtc: string;
    /**
     * Set of [Service availability metrics](https://mews-systems.gitbook.io/connector-api/operations/services/#service-availability-metrics) to be returned.
     */
    Metrics: Array<ResourceAvailabilityMetricTypeEnum>;
};

export type ServiceAvailabilityResult = {
    /**
     * @deprecated
     */
    DatesUtc?: Array<(string)> | null;
    /**
     * Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.
     */
    TimeUnitStartsUtc: Array<(string)>;
    /**
     * Resource category availabilities.
     */
    CategoryAvailabilities: Array<CategoryAvailability>;
};

export type ServiceAvailabilityResultV20240122 = {
    /**
     * Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.
     */
    TimeUnitStartsUtc: Array<(string)>;
    /**
     * Resource category availabilities. Can be empty if no resource categories are assigned to the service.
     */
    ResourceCategoryAvailabilities: Array<ResourceCategoryAvailabilityV20240122>;
};

export type ServiceAvailabilityUpdateData = {
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units): 367 hours if hours, 367 days if days, or 60 months if months.
     */
    LastTimeUnitStartUtc: string;
    /**
     * @deprecated
     */
    StartUtc?: string | null;
    /**
     * @deprecated
     */
    EndUtc?: string | null;
    /**
     * Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources#resource-category) whose availability to update.
     */
    ResourceCategoryId: string;
    /**
     * Adjustment value to be applied on the interval, can be both positive and negative (relative adjustment, not an absolute number). If specified without `Value` parameter, removes all adjustments within the interval.
     */
    UnitCountAdjustment: Int32NullableUpdateValue;
    /**
     * Unique identifier of the [Availability block](https://mews-systems.gitbook.io/connector-api/operations/availabilityblocks#availability-block) whose availability to update.
     */
    AvailabilityBlockId?: string | null;
    /**
     * Collection of predicted occupancy of availability adjustments. Relates how many adjustments are assigned to each count of guests.
     */
    PaxCounts?: Array<PaxCount> | null;
};

export type ServiceAvailabilityUpdateParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/#service) to update.
     */
    ServiceId: string;
    /**
     * Availability updates.
     */
    AvailabilityUpdates: Array<ServiceAvailabilityUpdateData>;
};

export type ServiceDataDiscriminator = 'Bookable' | 'Additional';

export type ServiceFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).
     */
    ServiceIds?: Array<(string)> | null;
    /**
     * Interval in which `Services` were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
};

/**
 * Options of the service.
 */
export type ServiceOptions = {
    /**
     * Products should be displayed as a single package instead of individual items.
     */
    BillAsPackage: boolean;
};

export type ServiceOrder = {
    Id: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) that service order is made against.
     */
    ServiceId: string;
    AccountId: string;
    AccountType?: AccountType | null;
    CreatorProfileId: string;
    UpdaterProfileId: string;
    BookerId?: string | null;
    Number?: string | null;
    State: ServiceOrderState;
    Origin: ServiceOrderOrigin;
    CommanderOrigin?: ServiceOrderCommanderOrigin | null;
    OriginDetails?: string | null;
    CreatedUtc: string;
    UpdatedUtc: string;
    CancelledUtc?: string | null;
    VoucherId?: string | null;
    BusinessSegmentId?: string | null;
    LinkedReservationId?: string | null;
    Options: ServiceOrderOptions;
};

/**
 *
 *
 * Other
 *
 * ConfirmationMissed
 *
 * BookedElsewhere
 *
 * ForceMajeure
 *
 * GuestComplaint
 *
 * NoShow
 *
 * PriceTooHigh
 *
 * ServiceNotAvailable
 *
 * InputError
 *
 * InvalidPayment
 *
 * TravelAgency
 *
 * RequestedByGuest
 *
 * Update
 *
 * BookingAbandoned
 *
 * RequestedByBooker
 */
export type ServiceOrderCancellationReasonEnum = 'Other' | 'ConfirmationMissed' | 'BookedElsewhere' | 'ForceMajeure' | 'GuestComplaint' | 'NoShow' | 'PriceTooHigh' | 'ServiceNotAvailable' | 'InputError' | 'InvalidPayment' | 'TravelAgency' | 'RequestedByGuest' | 'Update' | 'BookingAbandoned' | 'RequestedByBooker';

export type ServiceOrderCommanderOrigin = 'InPerson' | 'Channel' | 'Phone' | 'Email' | 'Website' | 'Message' | 'CallCenter';

/**
 *
 *
 * InPerson
 *
 * Channel
 *
 * Phone
 *
 * Email
 *
 * Website
 *
 * Message
 *
 * CallCenter
 */
export type ServiceOrderCommanderOriginEnum = 'InPerson' | 'Channel' | 'Phone' | 'Email' | 'Website' | 'Message' | 'CallCenter';

export type ServiceOrderNoteAddParameters = {
    /**
     * Unique identifier of the `Service order` to which note will be added.
     */
    ServiceOrderId: string;
    /**
     * Content of the service order note.
     */
    Text: string;
};

export type ServiceOrderNoteAdditionResult = {
    /**
     * Added service order notes.
     */
    ServiceOrderNotes: Array<OrderNote>;
};

export type ServiceOrderNoteDeleteParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of the service order notes to be deleted.
     */
    ServiceOrderNoteIds: Array<(string)>;
};

export type ServiceOrderNoteFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Service order`. Reservation IDs or Order IDs can be used as service order identifiers.
     */
    ServiceOrderIds: Array<(string)>;
    /**
     * Unique identifiers of `Service order note`. Use this property if you want to fetch specific service order notes.
     */
    ServiceOrderNoteIds?: Array<(string)> | null;
    /**
     * Timestamp in UTC timezone ISO 8601 format when the service order note was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Type of the service order note. Defaults to `["General", "ChannelManager"]`.
     */
    Types?: Array<OrderNoteTypeEnum> | null;
};

export type ServiceOrderNoteResult = {
    /**
     * The collection of service order notes.
     */
    ServiceOrderNotes: Array<OrderNote>;
    /**
     * Unique identifier of the last and hence oldest service order note returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older service order notes.
     */
    Cursor?: string | null;
};

export type ServiceOrderNoteUpdateParameters = {
    /**
     * Unique identifier of the `Service order note`.
     */
    ServiceOrderNoteId: string;
    /**
     * Content of the service order note (or `null` if the content should not be updated).
     */
    Text?: (StringUpdateValue) | null;
};

export type ServiceOrderNoteUpdateResult = {
    /**
     * Updated service order notes.
     */
    ServiceOrderNotes: Array<OrderNote>;
};

export type ServiceOrderOptions = {
    /**
     * Owner of the reservation checked in.
     */
    OwnerCheckedIn: boolean;
    /**
     * All companions of the reservation checked in.
     */
    AllCompanionsCheckedIn: boolean;
    /**
     * Any of the companions of the reservation checked in.
     */
    AnyCompanionCheckedIn: boolean;
    /**
     * Check in was done via Connector API.
     */
    ConnectorCheckIn: boolean;
};

export type ServiceOrderOrigin = 'Distributor' | 'ChannelManager' | 'Commander' | 'Import' | 'Connector' | 'Navigator';

/**
 *
 *
 * Distributor (From the Mews Booking Engine or Booking Engine API.)
 *
 * ChannelManager (From a channel manager.)
 *
 * Commander (From Mews Operations.)
 *
 * Import (From an import process.)
 *
 * Connector (From the Mews Connector API.)
 *
 * Navigator (From Mews Guest Services.)
 */
export type ServiceOrderOriginEnum = 'Distributor' | 'ChannelManager' | 'Commander' | 'Import' | 'Connector' | 'Navigator';

export type ServiceOrderState = 'Inquired' | 'Confirmed' | 'Started' | 'Processed' | 'Canceled' | 'Optional' | 'Requested';

/**
 *
 *
 * Inquired (Confirmed neither by the customer nor enterprise.)
 *
 * Confirmed (Confirmed by both parties, before check-in.)
 *
 * Started (Checked in.)
 *
 * Processed (Checked out.)
 *
 * Canceled (Canceled.)
 *
 * Optional (Confirmed by enterprise but not by the guest (the enterprise is holding resource for the guest).)
 *
 * Requested (Confirmed by the customer but not by the enterprise (waitlist).)
 */
export type ServiceOrderStateEnum = 'Inquired' | 'Confirmed' | 'Started' | 'Processed' | 'Canceled' | 'Optional' | 'Requested';

export type ServiceOrderStateOld = 'Enquired' | 'Confirmed' | 'Started' | 'Processed' | 'Canceled' | 'Optional' | 'Requested';

export type ServiceOverbookingLimit = {
    /**
     * Unique identifier of the service overbooking limit.
     */
    Id: string;
    /**
     * Unique identifier of the `Service`.
     */
    ServiceId: string;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.
     */
    LastTimeUnitStartUtc: string;
    /**
     * Number of overbookings allowed for the `Service`.
     */
    Limit: number;
    /**
     * Timestamp in UTC timezone ISO 8601 format when the service overbooking was created.
     */
    CreatedUtc: string;
    /**
     * Timestamp in UTC timezone ISO 8601 format when the service overbooking was updated.
     */
    UpdatedUtc: string;
    /**
     * Whether the service overbooking limit is still active.
     */
    IsActive: boolean;
};

export type ServiceOverbookingLimitClearData = {
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 60 months if months.
     */
    LastTimeUnitStartUtc: string;
};

export type ServiceOverbookingLimitClearParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) overbooking limits will be set in.
     */
    ServiceId: string;
    /**
     * Collection of service overbooking limits to be cleared.
     */
    ClearServiceOverbookingLimits: Array<ServiceOverbookingLimitClearData>;
};

export type ServiceOverbookingLimitFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Services` associated with the service overbooking limits.
     */
    ServiceIds: Array<(string)>;
    /**
     * Unique identifiers of the service overbooking limits.
     */
    ServiceOverbookingLimitIds?: Array<(string)> | null;
    /**
     * Interval in which the service overbooking limit is active.
     */
    CollidingUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the service overbooking limits were updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Whether to return only active, only deleted, or both types of record. If not specified, only active records will be returned.
     */
    ActivityStates?: Array<ActivityState> | null;
};

export type ServiceOverbookingLimitResult = {
    /**
     * Service overbooking limits of the default service.
     */
    ServiceOverbookingLimits: Array<ServiceOverbookingLimit>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type ServiceOverbookingLimitSetData = {
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.
     */
    FirstTimeUnitStartUtc: string;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units): 367 days.
     */
    LastTimeUnitStartUtc: string;
    /**
     * Number of overbookings allowed for the `Service`. Must be non-negative.
     */
    Limit: number;
};

export type ServiceOverbookingLimitSetParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.
     */
    EnterpriseId?: string | null;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) overbooking limits will be set in.
     */
    ServiceId: string;
    /**
     * Collection of service overbooking limits to be set.
     */
    SetServiceOverbookingLimits: Array<ServiceOverbookingLimitSetData>;
};

export type ServiceResult = {
    /**
     * Services offered by the enterprise.
     */
    Services: Array<Service>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type SetRestrictionParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) restrictions will be set in.
     */
    ServiceId: string;
    /**
     * Parameters of restrictions.
     */
    Data: Array<RestrictionSetData>;
};

export type Sex = 'Male' | 'Female';

/**
 *
 *
 * Male
 *
 * Female
 */
export type SexEnum = 'Male' | 'Female';

export type Source = {
    /**
     * Unique identifier of the source.
     */
    Id: string;
    /**
     * Name of the source.
     */
    Name: string;
    Type: SourceType;
    /**
     * Date and time when the source was last updated, expressed in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Code of the source.
     */
    Code: number;
};

export type SourceAssignment = {
    /**
     * Unique identifier of the source assignement.
     */
    Id: string;
    /**
     * Unique identifier of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
     */
    ReservationGroupId: string;
    /**
     * Unique identifier of the [Source](https://mews-systems.gitbook.io/connector-api/operations/sources/#source).
     */
    SourceId: string;
    /**
     * Specifies the primary source for the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).
     */
    IsPrimary: boolean;
};

export type SourceAssignmentFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the `Reservation group`.
     */
    ReservationGroupIds?: Array<(string)> | null;
    /**
     * Interval of `Reservation group` last update date and time.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type SourceAssignmentFilterParametersV20240920 = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of `Reservation`.
     */
    ReservationIds?: Array<(string)> | null;
};

export type SourceAssignmentResult = {
    /**
     * Assignments between reservation group and sources.
     */
    SourceAssignments: Array<SourceAssignment>;
    /**
     * Unique identifier of the last and hence oldest source assignment returned. This can be used in `Limitation` in a subsequent request to fetch the next batch of older source assignments.
     */
    Cursor: string;
};

export type SourceAssignmentResultV20240920 = {
    /**
     * Assignments between `Reservation` and `Source`.
     */
    SourceAssignments: Array<SourceAssignmentV20240920>;
    /**
     * Opaque pagination cursor which can be used in `Limitation` to fetch newer source assignments.
     */
    Cursor?: string | null;
};

export type SourceAssignmentV20240920 = {
    /**
     * Unique identifier of the source assignment.
     */
    Id: string;
    /**
     * Unique identifier of the `Reservation`.
     */
    ReservationId: string;
    /**
     * Unique identifier of the `Source`.
     */
    SourceId: string;
    /**
     * Specifies whether the source is primary for the `Reservation`.
     */
    IsPrimary: boolean;
};

export type SourceFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifiers of [Sources](https://mews-systems.gitbook.io/connector-api/operations/sources/#source).
     */
    SourceIds?: Array<(string)> | null;
    /**
     * Interval in which the source was updated.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Limitation on the quantity of data returned.
     */
    Limitation: Limitation;
};

export type SourceResult = {
    /**
     * The reservation sources.
     */
    Sources: Array<Source>;
    /**
     * Unique identifier of the last and hence oldest source returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older sources.
     */
    Cursor?: string | null;
};

/**
 * Type of the source.
 */
export type SourceType = 'OnlineTravelAgency' | 'CentralReservationSystem' | 'GlobalDistributionSystem' | 'AlternativeDistributionSystem' | 'SalesAndCateringSystem' | 'PropertyManagementSystem' | 'TourOperatorSystem' | 'OnlineBookingEngine' | 'Kiosk' | 'Agent';

export type SpaceData = {
    FloorNumber: string;
    LocationNotes?: string | null;
};

export type StringUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: string | null;
};

export type SurchargeConfiguration = {
    /**
     * Dictionary keys are `CreditCardType` and values are surcharging fees as a percentage.
     */
    SurchargeFees: {
        MasterCard?: number;
        Visa?: number;
        Amex?: number;
        Discover?: number;
        DinersClub?: number;
        Jcb?: number;
        Maestro?: number;
        UnionPay?: number;
        VPay?: number;
        RuPay?: number;
        Dankort?: number;
        Mir?: number;
        Verve?: number;
        Troy?: number;
        PostFinance?: number;
        Giro?: number;
        Bancomat?: number;
        Bc?: number;
        CarteBleue?: number;
        Eftpos?: number;
        Eps?: number;
        Interac?: number;
        Isracard?: number;
        Meps?: number;
        Nets?: number;
        Bancontact?: number;
    };
    /**
     * Unique identifier of the surcharging `Service`.
     */
    SurchargeServiceId?: string | null;
    /**
     * Surcharging fee `TaxCode`.
     */
    SurchargeTaxCode?: string | null;
};

export type Task = {
    /**
     * Unique identifier of the task.
     */
    Id?: string;
    /**
     * Unique identifier of the enterprise. Required when using Portfolio Access Tokens, ignored otherwise.
     */
    EnterpriseId?: string;
    /**
     * Name (or title) of the task.
     */
    Name: string;
    /**
     * State of the task.
     */
    State: string;
    /**
     * Further description of the task.
     */
    Description?: string | null;
    /**
     * Unique identifier of the Department the task is addressed to.
     */
    DepartmentId?: string | null;
    /**
     * Unique identifier of the service order (reservation or product service order) the task is linked with.
     */
    ServiceOrderId?: string | null;
    /**
     * Creation date and time of the task in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Deadline date and time of the task in UTC timezone in ISO 8601 format.
     */
    DeadlineUtc: string;
    /**
     * Last update date and time of the task in UTC timezone in ISO 8601 format.
     */
    ClosedUtc: string;
};

export type TaskAddParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Department](https://mews-systems.gitbook.io/connector-api/operations/departments/#department) the task is addressed to.
     */
    DepartmentId?: string | null;
    /**
     * Unique identifier of the service order (reservation or product service order) the task is linked with.
     */
    ServiceOrderId?: string | null;
    /**
     * Name (or title) of the task.
     */
    Name: string;
    /**
     * Further decription of the task.
     */
    Description?: string | null;
    /**
     * Deadline of the task in UTC timezone in ISO 8601 format.
     */
    DeadlineUtc: string;
};

export type TaskFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Interval in which the Task was created.
     */
    CreatedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the Task was closed.
     */
    ClosedUtc?: (TimeFilterInterval) | null;
    /**
     * Interval in which the Task has a deadline.
     */
    DeadlineUtc?: (TimeFilterInterval) | null;
    /**
     * Unique identifiers of [Tasks](https://mews-systems.gitbook.io/connector-api/operations/#task).
     */
    TaskIds?: Array<(string)> | null;
    /**
     * Unique identifiers of [Departments](https://mews-systems.gitbook.io/connector-api/operations/departments/#department). Not possible to be used standalone, needs to be used in combination with other filters.
     */
    DepartmentIds?: Array<(string)> | null;
    /**
     * Unique identifiers of service orders (reservations or product service orders).
     */
    ServiceOrderIds?: Array<(string)> | null;
};

export type TaskResult = {
    /**
     * The filtered tasks.
     */
    Tasks: Array<Task>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

export type TaxBreakdown = {
    /**
     * Tax breakdown items per each tax rate applied.
     */
    Items: Array<TaxBreakdownItem>;
};

export type TaxBreakdownItem = {
    /**
     * Tax rate code for the item. `null` for untaxed amounts.
     */
    TaxRateCode?: string | null;
    /**
     * The net value that the tax is calculated from.
     */
    NetValue: number;
    /**
     * The value of the tax.
     */
    TaxValue: number;
};

export type TaxEnvironment = {
    /**
     * Code of the tax environment.
     */
    Code?: string | null;
    /**
     * ISO 3166-1 alpha-3 code of associated country, e.g. USA or GBR.
     */
    CountryCode?: string | null;
    /**
     * If specified, marks the start of the validity interval in UTC timezone in ISO 8601 format.
     */
    ValidityStartUtc?: string | null;
    /**
     * If specified, marks the end of the validity interval in UTC timezone in ISO 8601 format.
     */
    ValidityEndUtc?: string | null;
    /**
     * Codes of the [Taxations](https://mews-systems.gitbook.io/connector-api/operations/#taxation) that are used by this environment.
     */
    TaxationCodes?: Array<(string)> | null;
};

export type TaxEnvironmentResult = {
    /**
     * The supported tax environments.
     */
    TaxEnvironments?: Array<TaxEnvironment> | null;
    /**
     * @deprecated
     */
    Taxations?: Array<OldTaxation> | null;
    /**
     * @deprecated
     */
    TaxRates?: Array<TaxRate> | null;
};

/**
 *
 *
 * IT_N1 (N1 - Escluse ex art.15)
 *
 * IT_N2_2 (N2.2 - Non soggette – altri casi)
 *
 * IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)
 *
 * IT_N4 (N4 - Esenti)
 *
 * IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)
 *
 * PL_ZW (ZW - Zwolniony)
 *
 * PL_NP (NP - Nie podlega)
 */
export type TaxExemptionReasonTypeEnum = 'IT_N1' | 'IT_N2_2' | 'IT_N3_5' | 'IT_N4' | 'IT_N5' | 'PL_ZW' | 'PL_NP';

export type TaxRate = {
    /**
     * Code of the tax rate. To be used when posting revenue items which should be accompanied by the tax rate(s) applicable to the nature of the item and the tax environment.
     */
    Code?: string | null;
    /**
     * Code of the [Taxation](https://mews-systems.gitbook.io/connector-api/operations/#taxation) the rate is part of.
     */
    TaxationCode?: string | null;
    Value?: number;
    ValidityInvervalsUtc?: Array<DateTimeIntervalUtc> | null;
    /**
     * Tax strategy type, e.g. relative, flat or dependent.
     */
    Strategy?: {
        Discriminator?: TaxRateStrategyDiscriminator;
        Value?: RelativeTaxRateStrategy | FlatTaxRateStrategy | DependentTaxRateStrategy;
    };
};

export type TaxRateStrategyDiscriminator = 'Relative' | 'Flat' | 'Dependent';

export type TaxValue = {
    /**
     * Code corresponding to tax type.
     */
    Code?: string | null;
    /**
     * Amount of tax applied.
     */
    Value: number;
};

export type Taxation = {
    /**
     * Code of the taxation.
     */
    Code?: string | null;
    /**
     * Name of the taxation.
     */
    Name?: string | null;
    /**
     * Local name of the taxation.
     */
    LocalName?: string | null;
};

export type TaxationResult = {
    /**
     * The supported taxations.
     */
    Taxations?: Array<Taxation> | null;
    /**
     * The supported tax rates.
     */
    TaxRates?: Array<TaxRate> | null;
};

export type TimeFilterInterval = {
    StartUtc?: string | null;
    EndUtc?: string | null;
};

/**
 *
 *
 * Day
 *
 * Month
 *
 * Hour
 */
export type TimeUnitPeriodEnum = 'Day' | 'Month' | 'Hour';

/**
 * Type of the title prefix of the customer.
 *
 * Note that the value should not be used as-is, but localized. For example, the value `Misses` should be displayed as `Mrs.` in English and `Fr.` in German.
 *
 * Mister (Mr.)
 *
 * Miss (Ms.)
 *
 * Misses (Mrs.)
 */
export type Title = 'Mister' | 'Miss' | 'Misses';

export type TokenizedCreditCardParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).
     */
    CustomerId: string;
    /**
     * Credit card details provided by PCI provider.
     */
    CreditCardData: CreditCardData;
};

export type TravelAgencyContract = {
    /**
     * Unique identifier of the contract.
     */
    Id: string;
    /**
     * Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the contract is related to.
     */
    ServiceId: string;
    /**
     * Unique identifier of the contracted [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company).
     */
    CompanyId: string;
    /**
     * Whether the contract is still active.
     */
    IsActive: boolean;
    /**
     * Whether commission of the travel agency is included in the rate. When CommissionIncluded is not provided in the response, that means commission is unspecified, when set to true it means the the commission is included in the rate and false means the commission in not included in the rate.
     */
    CommissionIncluded?: boolean | null;
    /**
     * Commission of the travel agency.
     */
    Commission?: number | null;
    /**
     * Flat fee added to (or subtracted from) the reservation price when coming from Channel Managers.
     */
    ChannelManagerAbsoluteAdjustment?: number | null;
    /**
     * Percentage of the reservation price added to (or subtracted from) price when coming from Channel Managers.
     */
    ChannelManagerRelativeAdjustment?: number | null;
    /**
     * Options of the travel agency contract.
     */
    Options?: (TravelAgencyContractOptions) | null;
    /**
     * Accounting code of the travel agency contract.
     */
    AccountingCode?: string | null;
    /**
     * The maximum time, when the invoice has to be be paid in ISO 8601 duration format.
     */
    InvoiceDueInterval?: string | null;
    ChannelManagerBusinessSegmentId?: string | null;
    /**
     * Contact person of the travel agency.
     */
    ContactPerson?: string | null;
    /**
     * Contact email of the travel agency.
     */
    ContactEmail?: string | null;
    /**
     * Additional contact info of the travel agency.
     */
    AdditionalContactInfo?: string | null;
    /**
     * Additional notes of the travel agency contract.
     */
    Notes?: string | null;
    /**
     * Creation date and time of the travel agency contract in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the travel agency contract in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
};

export type TravelAgencyContractAddParameters = {
    ServiceId: string;
    CompanyId: string;
    CommissionIncluded?: boolean | null;
    Commission?: number | null;
    ChannelManagerBusinessSegmentId?: string | null;
    ChannelManagerAbsoluteAdjustment?: number | null;
    ChannelManagerRelativeAdjustment?: number | null;
    /**
     * Options of the travel agency contract.
     */
    Options?: (TravelAgencyContractOptions) | null;
    AccountingCode?: string | null;
    InvoiceDueInterval?: string | null;
    ContactPerson?: string | null;
    ContactEmail?: string | null;
    AdditionalContactInfo?: string | null;
    Notes?: string | null;
};

/**
 * Options of the travel agency contract.
 */
export type TravelAgencyContractOptions = {
    IncludeCancellationFeeInCommissionEstimate?: boolean;
    SkipAutomaticSettlement?: boolean;
};

export type TravelAgencyContractOptionsParameters = {
    IncludeCancellationFeeInCommissionEstimate?: (BooleanUpdateValue) | null;
    SkipAutomaticSettlement?: (BooleanUpdateValue) | null;
};

export type TravelAgencyContractUpdateParameters = {
    TravelAgencyContractId: string;
    CommissionIncluded?: (BooleanNullableUpdateValue) | null;
    Commission?: (DecimalNullableUpdateValue) | null;
    ChannelManagerBusinessSegmentId?: (GuidNullableUpdateValue) | null;
    ChannelManagerAbsoluteAdjustment?: (DecimalNullableUpdateValue) | null;
    ChannelManagerRelativeAdjustment?: (DecimalNullableUpdateValue) | null;
    Options?: (TravelAgencyContractOptionsParameters) | null;
    AccountingCode?: (StringUpdateValue) | null;
    InvoiceDueInterval?: (StringUpdateValue) | null;
    ContactPerson?: (StringUpdateValue) | null;
    ContactEmail?: (StringUpdateValue) | null;
    AdditionalContactInfo?: (StringUpdateValue) | null;
    Notes?: (StringUpdateValue) | null;
};

export type Unit = {
    [key: string]: unknown;
};

export type UpdateValueCurrencyValueOld = {
    /**
     * Value in the specified currency.
     */
    Value?: (CurrencyValueOld) | null;
};

export type Voucher = {
    /**
     * Unique identifier of voucher.
     */
    Id: string;
    /**
     * Unique identifier of [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the voucher belongs to.
     */
    ServiceId: string;
    /**
     * Internal name of the voucher.
     */
    Name: string;
    /**
     * Creation date and time of the voucher in UTC timezone in ISO 8601 format.
     */
    CreatedUtc: string;
    /**
     * Last update date and time of the voucher in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc: string;
    /**
     * Type of the voucher.
     *
     * Public
     *
     * PartnerCompany
     *
     * TravelAgency
     */
    Type: VoucherTypeEnum;
    /**
     * Whether voucher is active or deleted.
     * @deprecated
     */
    ActivityState?: ActivityState | null;
    /**
     * Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) the voucher is related to.
     */
    CompanyId?: string | null;
    /**
     * Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) with [Travel agency contract](https://mews-systems.gitbook.io/connector-api/operations/companycontracts/#travel-agency-contract) the voucher is related to.
     */
    TravelAgencyId?: string | null;
    /**
     * Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format (or null if the start time should not be updated).
     */
    OccupiableIntervalStartUtc?: string | null;
    /**
     * End of the time interval, expressed as the timestamp for the start of the last time unit, in UTC timezone ISO 8601 format (or null if the end time should not be updated).
     */
    OccupiableIntervalEndUtc?: string | null;
    /**
     * Identifier of the voucher from external system.
     */
    ExternalIdentifier?: string | null;
    /**
     * Whether the voucher is still active.
     */
    IsActive: boolean;
};

export type VoucherAddParameters = {
    /**
     * Unique identifier of Service.
     */
    ServiceId: string;
    /**
     * Internal name of the voucher.
     */
    Name: string;
    /**
     * Type of the voucher.
     *
     * Public
     *
     * PartnerCompany
     *
     * TravelAgency
     */
    Type: VoucherTypeEnum;
    /**
     * Unique identifier of Company.
     */
    CompanyId?: string | null;
    /**
     * Unique identifiers of Rates.
     */
    AssignedRateIds?: Array<(string)> | null;
    /**
     * Start of the interval in which the voucher can be applied.
     */
    OccupiableIntervalStartUtc?: string | null;
    /**
     * End of the interval in which the voucher can be applied.
     */
    OccupiableIntervalEndUtc?: string | null;
    /**
     * Identifier of the voucher from external system.
     */
    ExternalIdentifier?: string | null;
};

export type VoucherAssignment = {
    /**
     * Unique identifier of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher).
     */
    VoucherId?: string;
    /**
     * Unique identifier of [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate) the voucher is assigned with.
     */
    RateId?: string;
};

export type VoucherCode = {
    /**
     * Unique identifier of the voucher code.
     */
    Id?: string;
    /**
     * Unique identifier of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher) the code belongs to.
     */
    VoucherId?: string;
    /**
     * Value of voucher code used by customers.
     */
    Value?: string | null;
    /**
     * If specified, marks the beginning of interval in which the code can be used.
     */
    ValidityStartUtc?: string | null;
    /**
     * If specified, marks the end of interval in which the code can be used.
     */
    ValidityEndUtc?: string | null;
    /**
     * Creation date and time of the voucher in UTC timezone in ISO 8601 format.
     */
    CreatedUtc?: string | null;
    /**
     * Last update date and time of the voucher in UTC timezone in ISO 8601 format.
     */
    UpdatedUtc?: string | null;
    /**
     * Whether voucher code is active or deleted.
     * @deprecated
     */
    ActivityState?: string | null;
    /**
     * Whether the voucher code is still active.
     */
    IsActive?: boolean;
};

export type VoucherCodeAddParameters = {
    /**
     * Unique identifier of [Voucher](#voucher) the code belongs to.
     */
    VoucherId: string;
    /**
     * Value of voucher code used by customers.
     */
    Value: string;
    /**
     * If specified, marks the beginning of interval in which the code can be used.
     */
    ValidityStartUtc?: string | null;
    /**
     * If specified, marks the end of interval in which the code can be used.
     */
    ValidityEndUtc?: string | null;
};

export type VoucherCodeFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the voucher codes.
     */
    VoucherCodeIds?: Array<(string)> | null;
    /**
     * Unique identifiers of vouchers.
     */
    VoucherIds: Array<(string)>;
    /**
     * Interval of voucher code's last update date and time.
     */
    UpdatedUtc?: (TimeFilterInterval) | null;
};

export type VoucherCodeResult = {
    /**
     * Information about voucher codes used by customers.
     */
    VoucherCodes: Array<VoucherCode>;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 * Extent of data to be returned. Whether only specific voucher info should be returned or related items as well.
 */
export type VoucherExtent = {
    /**
     * Whether the response should contain main information about vouchers.
     */
    Vouchers?: boolean | null;
    /**
     * Whether the response should contain voucher codes used by customers.
     * @deprecated
     */
    VoucherCodes?: boolean | null;
    /**
     * Whether the response should contain assignments between vouchers and Rates.
     */
    VoucherAssignments?: boolean | null;
    /**
     * Whether the response should contain detail of related companies.
     * @deprecated
     */
    Companies?: boolean | null;
    /**
     * Whether the response should contain detail of assigned rates.
     */
    Rates?: boolean | null;
};

export type VoucherFilterParameters = {
    /**
     * Token identifying the client application.
     */
    ClientToken: string;
    /**
     * Access token of the client application.
     */
    AccessToken: string;
    /**
     * Name and version of the client application.
     */
    Client: string;
    /**
     * Limitation on the quantity of data returned and optional Cursor for the starting point of data.
     */
    Limitation: Limitation;
    /**
     * Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.
     */
    EnterpriseIds?: Array<(string)> | null;
    /**
     * Extent of data to be returned. Whether only specific voucher info should be returned or related items as well.
     */
    Extent: VoucherExtent;
    /**
     * Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) where the vouchers belong to.
     */
    ServiceIds: Array<(string)>;
    /**
     * Unique identifiers of vouchers.
     */
    VoucherIds?: Array<(string)> | null;
    /**
     * Unique identifiers of the companies.
     */
    CompanyIds?: Array<(string)> | null;
    /**
     * Value of voucher codes used by customers.
     */
    VoucherCodeValues?: Array<(string)> | null;
    /**
     * Whether to return only active, only deleted, or both types of record. If not specified, both active and deleted records will be returned.
     */
    ActivityStates?: Array<ActivityStates> | null;
    UpdatedUtc?: (TimeFilterInterval) | null;
    /**
     * Identifiers of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher) from external systems.
     */
    ExternalIdentifiers?: Array<(string)> | null;
};

export type VoucherResult = {
    /**
     * Details about vouchers added to the system.
     */
    Vouchers?: Array<Voucher> | null;
    /**
     * Information about voucher codes used by customers.
     */
    VoucherCodes?: Array<VoucherCode> | null;
    /**
     * The assignments between vouchers and [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate).
     */
    VoucherAssignments?: Array<VoucherAssignment> | null;
    /**
     * The assigned rates.
     */
    Rates?: Array<RateForExtent> | null;
    /**
     * The related companies and travel agencies.
     */
    Companies?: Array<Company> | null;
    /**
     * Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.
     */
    Cursor?: string | null;
};

/**
 *
 *
 * Public
 *
 * PartnerCompany
 *
 * TravelAgency
 */
export type VoucherTypeEnum = 'Public' | 'PartnerCompany' | 'TravelAgency';

export type VoucherTypeUpdateValue = {
    /**
     * Value which is to be updated.
     */
    Value?: VoucherTypeEnum;
};

export type VoucherUpdateParameters = {
    /**
     * Unique identifier of the Voucher.
     */
    VoucherId: string;
    /**
     * Internal name of the voucher (or `null` if the name should not be updated).
     */
    Name?: (StringUpdateValue) | null;
    /**
     * Type of the voucher e.g. 'Public', 'PartnerCompany' or 'TravelAgency' (or `null` if the type should not be updated).
     */
    Type?: (VoucherTypeUpdateValue) | null;
    /**
     * Unique identifier of Company (Company or Travel Agency) the voucher is related to. This is required for Type of `PartnerCompany` or `TravelAgency`. Use `null` if Company should not be updated.
     */
    CompanyId?: (GuidNullableUpdateValue) | null;
    /**
     * Unique identifiers of Rates (or `null` should it not be updated).
     */
    AssignedRateIds?: (AssignedRateIds) | null;
    /**
     * Start of the interval in which the voucher can be applied (or `null` if the start time should not be updated).
     */
    OccupiableIntervalStartUtc?: (StringUpdateValue) | null;
    /**
     * End of the interval in which the voucher can be applied (or `null` if the end time should not be updated).
     */
    OccupiableIntervalEndUtc?: (StringUpdateValue) | null;
    /**
     * Identifier of the voucher from external system (or `null` if the identifier should not be updated).
     */
    ExternalIdentifier?: (StringUpdateValue) | null;
};

export type VoucherWriteResult = {
    /**
     * Details about vouchers added to the system.
     */
    Vouchers?: Array<Voucher> | null;
};

export type AccountNotesGetAllData = {
    requestBody?: AccountNoteFilterParameters;
};

export type AccountNotesGetAllResponse = AccountNoteResult | ConnectorApiExceptionResult;

export type AccountNotesAddData = {
    requestBody?: MultipleAccountNoteAddParameters;
};

export type AccountNotesAddResponse = AccountNoteAdditionResult | ConnectorApiExceptionResult;

export type AccountNotesUpdateData = {
    requestBody?: MultipleAccountNoteUpdateParameters;
};

export type AccountNotesUpdateResponse = AccountNoteUpdateResult | ConnectorApiExceptionResult;

export type AccountNotesDeleteData = {
    requestBody?: MultipleAccountNoteDeleteParameters;
};

export type AccountNotesDeleteResponse = Unit | ConnectorApiExceptionResult;

export type AccountingCategoriesGetAllData = {
    requestBody?: AccountingCategoryFilterParameters;
};

export type AccountingCategoriesGetAllResponse = AccountingCategoryResult | ConnectorApiExceptionResult;

export type AccountingItemsUpdateData = {
    requestBody?: MultipleAccountingItemsUpdateParameters;
};

export type AccountingItemsUpdateResponse = AccountingItemResult | ConnectorApiExceptionResult;

export type AccountingItemsGetAllData = {
    requestBody?: AccountingItemParameters;
};

export type AccountingItemsGetAllResponse = AccountingItemResult | ConnectorApiExceptionResult;

export type AccountsUpdateData = {
    requestBody?: MultipleAccountUpdateParameters;
};

export type AccountsUpdateResponse = AccountResult | ConnectorApiExceptionResult;

export type AccountsAddFileData = {
    requestBody?: AccountFileParameters;
};

export type AccountsAddFileResponse = AddAccountFileResult | ConnectorApiExceptionResult;

export type AccountsMergeData = {
    requestBody?: MultipleAccountMergeParameters;
};

export type AccountsMergeResponse = Unit | ConnectorApiExceptionResult;

export type AddressesGetAllData = {
    requestBody?: AddressFilterParameters;
};

export type AddressesGetAllResponse = AddressResultPage | ConnectorApiExceptionResult;

export type AddressesAddData = {
    requestBody?: MultipleAddressAddParameters;
};

export type AddressesAddResponse = AddressResult | ConnectorApiExceptionResult;

export type AddressesUpdateData = {
    requestBody?: MultipleAddressUpdateParameters;
};

export type AddressesUpdateResponse = AddressResult | ConnectorApiExceptionResult;

export type AddressesDeleteData = {
    requestBody?: AddressDeleteParameters;
};

export type AddressesDeleteResponse = Unit | ConnectorApiExceptionResult;

export type AgeCategoriesGetAllData = {
    requestBody?: AgeCategoryParameters;
};

export type AgeCategoriesGetAllResponse = AgeCategoryResult | ConnectorApiExceptionResult;

export type AvailabilityAdjustmentsGetAllData = {
    requestBody?: AvailabilityAdjustmentParameters;
};

export type AvailabilityAdjustmentsGetAllResponse = AvailabilityAdjustmentResult | ConnectorApiExceptionResult;

export type AvailabilityBlocksDeleteData = {
    requestBody?: AvailabilityBlockDeleteParameters;
};

export type AvailabilityBlocksDeleteResponse = Unit | ConnectorApiExceptionResult;

export type AvailabilityBlocksGetAllData = {
    requestBody?: AvailabilityBlockParameters;
};

export type AvailabilityBlocksGetAllResponse = AvailabilityBlockResult | ConnectorApiExceptionResult;

export type AvailabilityBlocksAddData = {
    requestBody?: MultipleAvailabilityBlockAddParameters;
};

export type AvailabilityBlocksAddResponse = AvailabilityBlockAddResult | ConnectorApiExceptionResult;

export type AvailabilityBlocksUpdateData = {
    requestBody?: MultipleAvailabilityBlockUpdateParameters;
};

export type AvailabilityBlocksUpdateResponse = AvailabilityBlockAddResult | ConnectorApiExceptionResult;

export type BillingAutomationsGetAllData = {
    requestBody?: BillingAutomationFilterParameters;
};

export type BillingAutomationsGetAllResponse = BillingAutomationResult | ConnectorApiExceptionResult;

export type BillingAutomationsAddData = {
    requestBody?: MultipleBillingAutomationAddParameters;
};

export type BillingAutomationsAddResponse = BillingAutomationModificationResult | ConnectorApiExceptionResult;

export type BillingAutomationsUpdateData = {
    requestBody?: MultipleBillingAutomationUpdateParameters;
};

export type BillingAutomationsUpdateResponse = BillingAutomationModificationResult | ConnectorApiExceptionResult;

export type BillingAutomationsUpdateAssignmentsData = {
    requestBody?: BillingAutomationAssignmentsUpdateParameters;
};

export type BillingAutomationsUpdateAssignmentsResponse = BillingAutomationAssignmentsUpdateParameters | ConnectorApiExceptionResult;

export type BillingAutomationsDeleteData = {
    requestBody?: BillingAutomationDeleteParameters;
};

export type BillingAutomationsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type BillsUpdateData = {
    requestBody?: MultipleBillsUpdateParameters;
};

export type BillsUpdateResponse = BillsUpdateResult | ConnectorApiExceptionResult;

export type BillsGetAllData = {
    requestBody?: BillFilterParameters;
};

export type BillsGetAllResponse = BillsResult | ConnectorApiExceptionResult;

export type BillsGetPdfData = {
    requestBody?: BillPdfParameters;
};

export type BillsGetPdfResponse = BillPdfResult | ConnectorApiExceptionResult;

export type BillsAddData = {
    requestBody?: MultipleBillAddParameters;
};

export type BillsAddResponse = BillsAddResult | ConnectorApiExceptionResult;

export type BillsDeleteData = {
    requestBody?: BillDeleteParameters;
};

export type BillsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type BillsCloseData = {
    requestBody?: BillCloseParameters;
};

export type BillsCloseResponse = BillsCloseResult | ConnectorApiExceptionResult;

export type BusinessSegmentsGetAllData = {
    requestBody?: BusinessSegmentFilterParameters;
};

export type BusinessSegmentsGetAllResponse = BusinessSegmentResult | ConnectorApiExceptionResult;

export type CancellationPoliciesGetAllData = {
    requestBody?: CancellationPolicyFilterParameters;
};

export type CancellationPoliciesGetAllResponse = CancellationPolicyResult | ConnectorApiExceptionResult;

export type CancellationPoliciesGetByReservationsData = {
    requestBody?: CancellationPolicyByReservationParameters;
};

export type CancellationPoliciesGetByReservationsResponse = CancellationPolicyByReservationResult | ConnectorApiExceptionResult;

export type CancellationPoliciesGetByRatesData = {
    requestBody?: CancellationPolicyByRateParameters;
};

export type CancellationPoliciesGetByRatesResponse = CancellationPolicyByRateResult | ConnectorApiExceptionResult;

export type CashierTransactionsGetAllData = {
    requestBody?: CashierTransactionParameters;
};

export type CashierTransactionsGetAllResponse = CashierTransactionResult | ConnectorApiExceptionResult;

export type CashiersGetAllData = {
    requestBody?: CashierParameters;
};

export type CashiersGetAllResponse = CashierResult | ConnectorApiExceptionResult;

export type CommandsGetAllByIdsData = {
    requestBody?: DeviceCommandFilterParameters;
};

export type CommandsGetAllByIdsResponse = DeviceCommandResult | ConnectorApiExceptionResult;

export type CommandsGetAllActiveData = {
    requestBody?: GetAllActiveCommandsParameters;
};

export type CommandsGetAllActiveResponse = DeviceCommandResult | ConnectorApiExceptionResult;

export type CommandsAddPrinterData = {
    requestBody?: PrinterCommandParameters;
};

export type CommandsAddPrinterResponse = DeviceCommandAddResult | ConnectorApiExceptionResult;

export type CommandsAddKeyCutterData = {
    requestBody?: KeyCutterCommandParameters;
};

export type CommandsAddKeyCutterResponse = DeviceCommandAddResult | ConnectorApiExceptionResult;

export type CommandsAddPaymentTerminalData = {
    requestBody?: PaymentTerminalCommandParameters;
};

export type CommandsAddPaymentTerminalResponse = DeviceCommandAddResult | ConnectorApiExceptionResult;

export type CommandsUpdateData = {
    requestBody?: DeviceCommandUpdateParameters;
};

export type CommandsUpdateResponse = Unit | ConnectorApiExceptionResult;

export type FiscalMachineCommandsGetAllData = {
    requestBody?: CommandsGetAllFilterByCommandIdParameters | CommandsGetAllFilterByStatesParameters;
};

export type FiscalMachineCommandsGetAllResponse = FiscalMachineCommandDataV20250623Result | ConnectorApiExceptionResult;

export type CompaniesAddData = {
    requestBody?: CompanyAddParameters;
};

export type CompaniesAddResponse = CompanyResult | ConnectorApiExceptionResult;

export type CompaniesUpdateData = {
    requestBody?: CompanyUpdateParameters;
};

export type CompaniesUpdateResponse = CompanyResult | ConnectorApiExceptionResult;

export type CompaniesGetAllData = {
    requestBody?: CompanyFilterParameters;
};

export type CompaniesGetAllResponse = CompanyResult | ConnectorApiExceptionResult;

export type CompaniesDeleteData = {
    requestBody?: MultipleCompanyDeleteParameters;
};

export type CompaniesDeleteResponse = Unit | ConnectorApiExceptionResult;

export type CompanionshipsGetAllData = {
    requestBody?: CompanionshipFilterParameters;
};

export type CompanionshipsGetAllResponse = CompanionshipResult | ConnectorApiExceptionResult;

export type CompanyContractsGetAllData = {
    requestBody?: CompanyContractFilterParameters;
};

export type CompanyContractsGetAllResponse = ContractResult | ConnectorApiExceptionResult;

export type CompanyContractsAddData = {
    requestBody?: MultipleCompanyContractAddParameters;
};

export type CompanyContractsAddResponse = ContractResult | ConnectorApiExceptionResult;

export type CompanyContractsUpdateData = {
    requestBody?: MultipleCompanyContractUpdateParameters;
};

export type CompanyContractsUpdateResponse = ContractResult | ConnectorApiExceptionResult;

export type CompanyContractsDeleteData = {
    requestBody?: MultipleCompanyContractDeleteParameters;
};

export type CompanyContractsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type ConfigurationGetData = {
    requestBody?: ConfigurationFilterParameters;
};

export type ConfigurationGetResponse = Configuration | ConnectorApiExceptionResult;

export type CountersGetAllData = {
    requestBody?: CounterFilterParameters;
};

export type CountersGetAllResponse = CounterResult | ConnectorApiExceptionResult;

export type CountriesGetAllData = {
    requestBody?: Parameters;
};

export type CountriesGetAllResponse = CountryResult | ConnectorApiExceptionResult;

export type CreditCardsGetAllData = {
    requestBody?: CreditCardFilterParameters;
};

export type CreditCardsGetAllResponse = CreditCardResult | ConnectorApiExceptionResult;

export type CreditCardsGetAllByIdsData = {
    requestBody?: MultipleCreditCardParameters;
};

export type CreditCardsGetAllByIdsResponse = CreditCardResult | ConnectorApiExceptionResult;

export type CreditCardsGetAllByCustomersData = {
    requestBody?: MultipleCustomerParameters;
};

export type CreditCardsGetAllByCustomersResponse = CreditCardResult | ConnectorApiExceptionResult;

export type CreditCardsAddTokenizedData = {
    requestBody?: TokenizedCreditCardParameters;
};

export type CreditCardsAddTokenizedResponse = AddCreditCardResult | ConnectorApiExceptionResult;

export type CreditCardsChargeData = {
    requestBody?: ChargeCreditCardParameters;
};

export type CreditCardsChargeResponse = ChargeCreditCardResult | ConnectorApiExceptionResult;

export type CreditCardsDisableData = {
    requestBody?: DisableCreditCardParameters;
};

export type CreditCardsDisableResponse = Unit | ConnectorApiExceptionResult;

export type CurrenciesGetAllData = {
    requestBody?: Parameters;
};

export type CurrenciesGetAllResponse = CurrencyResult | ConnectorApiExceptionResult;

export type CustomersGetAllData = {
    requestBody?: CustomerFilterParameters;
};

export type CustomersGetAllResponse = CustomerResult | ConnectorApiExceptionResult;

export type CustomersSearchData = {
    requestBody?: CustomerSearchParameters;
};

export type CustomersSearchResponse = CustomerSearchResult | ConnectorApiExceptionResult;

export type CustomersGetOpenItemsData = {
    requestBody?: CustomerItemParameters;
};

export type CustomersGetOpenItemsResponse = CustomerItemResult | ConnectorApiExceptionResult;

export type CustomersAddData = {
    requestBody?: CustomerAddParameters;
};

export type CustomersAddResponse = Customer | ConnectorApiExceptionResult;

export type CustomersUpdateData = {
    requestBody?: CustomerUpdateParameters;
};

export type CustomersUpdateResponse = Customer | ConnectorApiExceptionResult;

export type CustomersMergeData = {
    requestBody?: CustomerMergeParameters;
};

export type CustomersMergeResponse = Unit | ConnectorApiExceptionResult;

export type CustomersAddFileData = {
    requestBody?: CustomerFileParameters;
};

export type CustomersAddFileResponse = CustomerAddFileResult | ConnectorApiExceptionResult;

export type DepartmentsGetAllData = {
    requestBody?: DepartmentFilterParameters;
};

export type DepartmentsGetAllResponse = DepartmentResult | ConnectorApiExceptionResult;

export type DevicesGetAllData = {
    requestBody?: Parameters;
};

export type DevicesGetAllResponse = DeviceResult | ConnectorApiExceptionResult;

export type EnterprisesGetAllData = {
    requestBody?: EnterpriseFilterParameters;
};

export type EnterprisesGetAllResponse = EnterpriseResult | ConnectorApiExceptionResult;

export type ExchangeRatesGetAllData = {
    requestBody?: CurrencyAcceptanceFilterParameters;
};

export type ExchangeRatesGetAllResponse = ExchangeRateResult | ConnectorApiExceptionResult;

export type ExportsAddData = {
    requestBody?: ExportAddParameters;
};

export type ExportsAddResponse = ExportAddResult | ConnectorApiExceptionResult;

export type ExportsGetAllData = {
    requestBody?: ExportFilterParameters;
};

export type ExportsGetAllResponse = ExportResult | ConnectorApiExceptionResult;

export type IdentityDocumentsGetAllData = {
    requestBody?: IdentityDocumentFilterParameters;
};

export type IdentityDocumentsGetAllResponse = IdentityDocumentResult | ConnectorApiExceptionResult;

export type IdentityDocumentsDeleteData = {
    requestBody?: IdentityDocumentDeleteParameters;
};

export type IdentityDocumentsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type IdentityDocumentsClearData = {
    requestBody?: IdentityDocumentClearParameters;
};

export type IdentityDocumentsClearResponse = Unit | ConnectorApiExceptionResult;

export type IdentityDocumentsUpdateData = {
    requestBody?: MultipleIdentityDocumentUpdateParameters;
};

export type IdentityDocumentsUpdateResponse = IdentityDocumentWriteResult | ConnectorApiExceptionResult;

export type IdentityDocumentsAddData2 = {
    requestBody?: IdentityDocumentsAddParameters;
};

export type IdentityDocumentsAddResponse = IdentityDocumentWriteResult | ConnectorApiExceptionResult;

export type ImagesGetUrlsData = {
    requestBody?: ImageUrlParameters;
};

export type ImagesGetUrlsResponse = ImageUrlResult | ConnectorApiExceptionResult;

export type LanguagesGetAllData = {
    requestBody?: Parameters;
};

export type LanguagesGetAllResponse = LanguageResult | ConnectorApiExceptionResult;

export type LanguagesGetTextsData = {
    requestBody?: LanguageTextParameters;
};

export type LanguagesGetTextsResponse = LanguageTextResult | ConnectorApiExceptionResult;

export type LedgerBalancesGetAllData = {
    requestBody?: LedgerBalanceParameters;
};

export type LedgerBalancesGetAllResponse = LedgerBalanceResult | ConnectorApiExceptionResult;

export type LoyaltyMembershipsGetAllData = {
    requestBody?: LoyaltyMembershipFilterParameters;
};

export type LoyaltyMembershipsGetAllResponse = LoyaltyMembershipResult | ConnectorApiExceptionResult;

export type LoyaltyMembershipsAddData = {
    requestBody?: MultipleLoyaltyMembershipAddParameters;
};

export type LoyaltyMembershipsAddResponse = LoyaltyMembershipResult | ConnectorApiExceptionResult;

export type LoyaltyMembershipsUpdateData = {
    requestBody?: MultipleLoyaltyMembershipUpdateParameters;
};

export type LoyaltyMembershipsUpdateResponse = LoyaltyMembershipResult | ConnectorApiExceptionResult;

export type LoyaltyMembershipsDeleteData = {
    requestBody?: LoyaltyMembershipDeleteParameters;
};

export type LoyaltyMembershipsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type LoyaltyProgramsGetAllData = {
    requestBody?: LoyaltyProgramFilterParameters;
};

export type LoyaltyProgramsGetAllResponse = LoyaltyProgramResult | ConnectorApiExceptionResult;

export type LoyaltyProgramsAddData = {
    requestBody?: MultipleLoyaltyProgramAddParameters;
};

export type LoyaltyProgramsAddResponse = LoyaltyProgramResult | ConnectorApiExceptionResult;

export type LoyaltyProgramsUpdateData = {
    requestBody?: MultipleLoyaltyProgramUpdateParameters;
};

export type LoyaltyProgramsUpdateResponse = LoyaltyProgramResult | ConnectorApiExceptionResult;

export type LoyaltyProgramsDeleteData = {
    requestBody?: LoyaltyProgramDeleteParameters;
};

export type LoyaltyProgramsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type LoyaltyTiersGetAllData = {
    requestBody?: LoyaltyTierFilterParameters;
};

export type LoyaltyTiersGetAllResponse = LoyaltyTierResult | ConnectorApiExceptionResult;

export type LoyaltyTiersAddData = {
    requestBody?: MultipleLoyaltyTierAddParameters;
};

export type LoyaltyTiersAddResponse = LoyaltyTierWriteResult | ConnectorApiExceptionResult;

export type LoyaltyTiersUpdateData = {
    requestBody?: MultipleLoyaltyTierUpdateParameters;
};

export type LoyaltyTiersUpdateResponse = LoyaltyTierWriteResult | ConnectorApiExceptionResult;

export type LoyaltyTiersDeleteData = {
    requestBody?: LoyaltyTierDeleteParameters;
};

export type LoyaltyTiersDeleteResponse = Unit | ConnectorApiExceptionResult;

export type MessageThreadsGetAllData = {
    requestBody?: MessageThreadFilterParameters;
};

export type MessageThreadsGetAllResponse = MessageThreadResult | ConnectorApiExceptionResult;

export type MessageThreadsAddData = {
    requestBody?: MessageThreadAddParameters;
};

export type MessageThreadsAddResponse = MessageThreadResult | ConnectorApiExceptionResult;

export type MessagesGetAllData = {
    requestBody?: MessageFilterParameters;
};

export type MessagesGetAllResponse = MessageResult | ConnectorApiExceptionResult;

export type MessagesAddData = {
    requestBody?: MultipleMessageAddParameters;
};

export type MessagesAddResponse = AddedMessageResult | ConnectorApiExceptionResult;

export type OrderItemsCancelData = {
    requestBody?: CancelOrderItemParameters;
};

export type OrderItemsCancelResponse = Unit | ConnectorApiExceptionResult;

export type OrderItemsGetAllData = {
    requestBody?: OrderItemFilterParameters;
};

export type OrderItemsGetAllResponse = OrderItemResult | ConnectorApiExceptionResult;

export type OrdersAddData = {
    requestBody?: OrderAdditionParameters;
};

export type OrdersAddResponse = OrderAdditionResult | ConnectorApiExceptionResult;

export type OutletBillsAddData = {
    requestBody?: AddOutletBillsParameters;
};

export type OutletBillsAddResponse = AddOutletBillsResult | ConnectorApiExceptionResult;

export type OutletItemsGetAllData = {
    requestBody?: OutletItemsFilterParameters;
};

export type OutletItemsGetAllResponse = OutletItemResult | ConnectorApiExceptionResult;

export type OutletsGetAllData = {
    requestBody?: OutletFilterParameters;
};

export type OutletsGetAllResponse = OutletResult | ConnectorApiExceptionResult;

export type PaymentPlansAddData = {
    requestBody?: PaymentPlanAddParameters;
};

export type PaymentPlansAddResponse = PaymentPlanAddResult | ConnectorApiExceptionResult;

export type PaymentRequestsGetAllData = {
    requestBody?: PaymentRequestFilterParameters;
};

export type PaymentRequestsGetAllResponse = PaymentRequestResult | ConnectorApiExceptionResult;

export type PaymentRequestsAddData = {
    requestBody?: MultiplePaymentRequestAddParameters;
};

export type PaymentRequestsAddResponse = PaymentRequestResult | ConnectorApiExceptionResult;

export type PaymentRequestsCancelData = {
    requestBody?: MultiplePaymentRequestCancelParameters;
};

export type PaymentRequestsCancelResponse = PaymentRequestResult | ConnectorApiExceptionResult;

export type PaymentsGetAllData = {
    requestBody?: PaymentFilterParameters;
};

export type PaymentsGetAllResponse = PaymentResult | ConnectorApiExceptionResult;

export type PaymentsRefundData = {
    requestBody?: PaymentRefundParameters;
};

export type PaymentsRefundResponse = PaymentRefundResult | ConnectorApiExceptionResult;

export type PaymentsAddCreditCardData = {
    requestBody?: CreditCardPaymentParameters;
};

export type PaymentsAddCreditCardResponse = AddCreditCardResult | ConnectorApiExceptionResult;

export type PaymentsAddExternalData = {
    requestBody?: ExternalPaymentParameters;
};

export type PaymentsAddExternalResponse = AddExternalPaymentResult | ConnectorApiExceptionResult;

export type PaymentsAddAlternativeData = {
    requestBody?: AlternativePaymentParameters;
};

export type PaymentsAddAlternativeResponse = AlternativePaymentResult | ConnectorApiExceptionResult;

export type PreauthorizationsGetAllByCustomersData = {
    requestBody?: MultipleCustomerParameters;
};

export type PreauthorizationsGetAllByCustomersResponse = PreauthorizationResult | ConnectorApiExceptionResult;

export type ProductCategoriesGetAllData = {
    requestBody?: ProductCategoryFilterParameters;
};

export type ProductCategoriesGetAllResponse = ProductCategoryResult | ConnectorApiExceptionResult;

export type ProductServiceOrdersGetAllData = {
    requestBody?: ProductServiceOrderFilterParameters;
};

export type ProductServiceOrdersGetAllResponse = ProductServiceOrderResult | ConnectorApiExceptionResult;

export type ProductsGetPricingData = {
    requestBody?: ProductPricingFilterParameters;
};

export type ProductsGetPricingResponse = ProductPricingResult | ConnectorApiExceptionResult;

export type ProductsUpdatePriceData = {
    requestBody?: ProductPriceUpdateParameters;
};

export type ProductsUpdatePriceResponse = Unit | ConnectorApiExceptionResult;

export type ProductsGetAllData = {
    requestBody?: ProductFilterParameters;
};

export type ProductsGetAllResponse = ProductResult | ConnectorApiExceptionResult;

export type ProductsDeleteData = {
    requestBody?: ProductDeleteParameters;
};

export type ProductsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type RateGroupsGetAllData = {
    requestBody?: RateGroupFilterParameters;
};

export type RateGroupsGetAllResponse = RateGroupResult | ConnectorApiExceptionResult;

export type RatesUpdateCapacityOffsetData = {
    requestBody?: MultipleRateCapacityOffsetUpdateParameters;
};

export type RatesUpdateCapacityOffsetResponse = Unit | ConnectorApiExceptionResult;

export type RatesGetAllData = {
    requestBody?: RateFilterParameters;
};

export type RatesGetAllResponse = RateResult | ConnectorApiExceptionResult;

export type RatesAddData = {
    requestBody?: RateAddParameters;
};

export type RatesAddResponse = RateAddResult | ConnectorApiExceptionResult;

export type RatesSetData = {
    requestBody?: RateSetParameters;
};

export type RatesSetResponse = RateSetResult | ConnectorApiExceptionResult;

export type RatesDeleteData = {
    requestBody?: RateDeleteParameters;
};

export type RatesDeleteResponse = Unit | ConnectorApiExceptionResult;

export type RatesGetPricingData = {
    requestBody?: RatePricingFilterParameters;
};

export type RatesGetPricingResponse = RatePricing | ConnectorApiExceptionResult;

export type RatesUpdatePriceData = {
    requestBody?: RatePriceUpdateParameters;
};

export type RatesUpdatePriceResponse = Unit | ConnectorApiExceptionResult;

export type ReservationGroupsGetAllData = {
    requestBody?: ReservationGroupFilterParameters;
};

export type ReservationGroupsGetAllResponse = ReservationGroupResult | ConnectorApiExceptionResult;

export type ReservationsGetChannelManagerDetailsData = {
    requestBody?: ReservationsChannelManagerDetailsFilterParameters;
};

export type ReservationsGetChannelManagerDetailsResponse = ReservationsChannelManagerDetailsResult | ConnectorApiExceptionResult;

export type ReservationsGetAll20230606Data = {
    requestBody?: ReservationServiceOrderFilterParameters;
};

export type ReservationsGetAll20230606Response = ReservationServiceOrderResult | ConnectorApiExceptionResult;

export type ReservationsGetAllData = {
    requestBody?: ReservationFilterParameters;
};

export type ReservationsGetAllResponse = ReservationResult | ConnectorApiExceptionResult;

export type ReservationsPriceData = {
    requestBody?: ReservationDataParameters;
};

export type ReservationsPriceResponse = ReservationPricingResult | ConnectorApiExceptionResult;

export type ReservationsAddData = {
    requestBody?: ReservationAdditionParameters;
};

export type ReservationsAddResponse = ReservationAdditionResult | ConnectorApiExceptionResult;

export type ReservationsUpdateData = {
    requestBody?: MultipleReservationUpdateParameters;
};

export type ReservationsUpdateResponse = ReservationResult | ConnectorApiExceptionResult;

export type ReservationsConfirmData = {
    requestBody?: ConfirmReservationParameters;
};

export type ReservationsConfirmResponse = MultipleReservationResult | ConnectorApiExceptionResult;

export type ReservationsStartData = {
    requestBody?: ReservationStartParameters;
};

export type ReservationsStartResponse = Unit | ConnectorApiExceptionResult;

export type ReservationsProcessData = {
    requestBody?: ReservationProcessingParameters;
};

export type ReservationsProcessResponse = Unit | ConnectorApiExceptionResult;

export type ReservationsCancelData = {
    requestBody?: ReservationCancellationParameters;
};

export type ReservationsCancelResponse = MultipleReservationResult | ConnectorApiExceptionResult;

export type ReservationsUpdateCustomerData = {
    requestBody?: ReservationsUpdateCustomerParameters;
};

export type ReservationsUpdateCustomerResponse = Unit | ConnectorApiExceptionResult;

export type ReservationsUpdateIntervalData = {
    requestBody?: ReservationUpdateIntervalParameters;
};

export type ReservationsUpdateIntervalResponse = Unit | ConnectorApiExceptionResult;

export type ReservationsAddCompanionData = {
    requestBody?: CompanionshipAddParameters;
};

export type ReservationsAddCompanionResponse = CompanionshipAddResult | ConnectorApiExceptionResult;

export type ReservationsDeleteCompanionData = {
    requestBody?: CompanionshipDeleteParameters;
};

export type ReservationsDeleteCompanionResponse = Unit | ConnectorApiExceptionResult;

export type ReservationsAddProductData = {
    requestBody?: ReservationProductParameters;
};

export type ReservationsAddProductResponse = AddProductItemsResult | ConnectorApiExceptionResult;

export type ReservationsGetAllItemsData = {
    requestBody?: ReservationItemParameters;
};

export type ReservationsGetAllItemsResponse = ReservationItemResult | ConnectorApiExceptionResult;

export type ResourceAccessTokensGetAllData = {
    requestBody?: ResourceAccessTokenFilterParameters;
};

export type ResourceAccessTokensGetAllResponse = ResourceAccessTokenResult | ConnectorApiExceptionResult;

export type ResourceAccessTokensAddData = {
    requestBody?: MultipleResourceAccessTokenParameters;
};

export type ResourceAccessTokensAddResponse = ResourceAccessTokenResult | ConnectorApiExceptionResult;

export type ResourceAccessTokensUpdateData = {
    requestBody?: MultipleResourceAccessTokenUpdateParameters;
};

export type ResourceAccessTokensUpdateResponse = ResourceAccessTokenResult | ConnectorApiExceptionResult;

export type ResourceAccessTokensDeleteData = {
    requestBody?: ResourceAccessTokenDeleteParameters;
};

export type ResourceAccessTokensDeleteResponse = Unit | ConnectorApiExceptionResult;

export type ResourceBlocksGetAllData = {
    requestBody?: ResourceBlockParameters;
};

export type ResourceBlocksGetAllResponse = ResourceBlockResult | ConnectorApiExceptionResult;

export type ResourceBlocksAddData = {
    requestBody?: MultipleResourceBlockAddParameters;
};

export type ResourceBlocksAddResponse = ResourceBlockResult | ConnectorApiExceptionResult;

export type ResourceBlocksDeleteData = {
    requestBody?: ResourceBlockDeleteParameters;
};

export type ResourceBlocksDeleteResponse = Unit | ConnectorApiExceptionResult;

export type ResourceCategoriesGetAllData = {
    requestBody?: ResourceCategoryFilterParameters;
};

export type ResourceCategoriesGetAllResponse = ResourceCategoryResult | ConnectorApiExceptionResult;

export type ResourceCategoryAssignmentsGetAllData = {
    requestBody?: ResourceCategoryAssignmentFilterParameters;
};

export type ResourceCategoryAssignmentsGetAllResponse = ResourceCategoryAssignmentResult | ConnectorApiExceptionResult;

export type ResourceCategoryImageAssignmentsGetAllData = {
    requestBody?: ResourceCategoryImageAssignmentFilterParameters;
};

export type ResourceCategoryImageAssignmentsGetAllResponse = ResourceCategoryImageAssignmentResult | ConnectorApiExceptionResult;

export type ResourceFeatureAssignmentsGetAllData = {
    requestBody?: ResourceFeatureAssignmentFilterParameters;
};

export type ResourceFeatureAssignmentsGetAllResponse = ResourceFeatureAssignmentResult | ConnectorApiExceptionResult;

export type ResourceFeaturesGetAllData = {
    requestBody?: ResourceFeatureFilterParameters;
};

export type ResourceFeaturesGetAllResponse = ResourceFeatureResult | ConnectorApiExceptionResult;

export type ResourcesGetAllData = {
    requestBody?: ResourceFilterParameters;
};

export type ResourcesGetAllResponse = ResourceResult | ConnectorApiExceptionResult;

export type ResourcesUpdateData = {
    requestBody?: MultipleResourceUpdateParameters;
};

export type ResourcesUpdateResponse = Unit | ConnectorApiExceptionResult;

export type ResourcesGetOccupancyStateData = {
    requestBody?: ResourcesOccupancyStateFilterParameters;
};

export type ResourcesGetOccupancyStateResponse = ResourcesOccupancyStateResult | ConnectorApiExceptionResult;

export type RestrictionsAddData = {
    requestBody?: AddRestrictionParameters;
};

export type RestrictionsAddResponse = RestrictionAdditionResult | ConnectorApiExceptionResult;

export type RestrictionsDeleteData = {
    requestBody?: DeleteRestrictionParameters;
};

export type RestrictionsDeleteResponse = Unit | ConnectorApiExceptionResult;

export type RestrictionsSetData = {
    requestBody?: SetRestrictionParameters;
};

export type RestrictionsSetResponse = Unit | ConnectorApiExceptionResult;

export type RestrictionsClearData = {
    requestBody?: ClearRestrictionParameters;
};

export type RestrictionsClearResponse = Unit | ConnectorApiExceptionResult;

export type RestrictionsGetAllData = {
    requestBody?: RestrictionFilterParameters;
};

export type RestrictionsGetAllResponse = RestrictionResult | ConnectorApiExceptionResult;

export type RoutingRulesGetAllData = {
    requestBody?: RoutingRuleFilterParameters;
};

export type RoutingRulesGetAllResponse = RoutingRuleResult | ConnectorApiExceptionResult;

export type RoutingRulesAddData = {
    requestBody?: MultipleRoutingRuleAddParameters;
};

export type RoutingRulesAddResponse = RoutingRuleResult | ConnectorApiExceptionResult;

export type RoutingRulesUpdateData = {
    requestBody?: MultipleRoutingRuleUpdateParameters;
};

export type RoutingRulesUpdateResponse = RoutingRuleResult | ConnectorApiExceptionResult;

export type RoutingRulesDeleteData = {
    requestBody?: RoutingRuleDeleteParameters;
};

export type RoutingRulesDeleteResponse = Unit | ConnectorApiExceptionResult;

export type RulesGetAllData = {
    requestBody?: RuleFilterParameters;
};

export type RulesGetAllResponse = RuleResult | ConnectorApiExceptionResult;

export type ServiceOrderNotesAddData = {
    requestBody?: MultipleServiceOrderNoteAddParameters;
};

export type ServiceOrderNotesAddResponse = ServiceOrderNoteAdditionResult | ConnectorApiExceptionResult;

export type ServiceOrderNotesUpdateData = {
    requestBody?: MultipleServiceOrderNoteUpdateParameters;
};

export type ServiceOrderNotesUpdateResponse = ServiceOrderNoteUpdateResult | ConnectorApiExceptionResult;

export type ServiceOrderNotesGetAllData = {
    requestBody?: ServiceOrderNoteFilterParameters;
};

export type ServiceOrderNotesGetAllResponse = ServiceOrderNoteResult | ConnectorApiExceptionResult;

export type ServiceOrderNotesDeleteData = {
    requestBody?: ServiceOrderNoteDeleteParameters;
};

export type ServiceOrderNotesDeleteResponse = Unit | ConnectorApiExceptionResult;

export type ServiceOverbookingLimitsGetAllData = {
    requestBody?: ServiceOverbookingLimitFilterParameters;
};

export type ServiceOverbookingLimitsGetAllResponse = ServiceOverbookingLimitResult | ConnectorApiExceptionResult;

export type ServiceOverbookingLimitsSetData = {
    requestBody?: ServiceOverbookingLimitSetParameters;
};

export type ServiceOverbookingLimitsSetResponse = Unit | ConnectorApiExceptionResult;

export type ServiceOverbookingLimitsClearData = {
    requestBody?: ServiceOverbookingLimitClearParameters;
};

export type ServiceOverbookingLimitsClearResponse = Unit | ConnectorApiExceptionResult;

export type ServicesGetAllData = {
    requestBody?: ServiceFilterParameters;
};

export type ServicesGetAllResponse = ServiceResult | ConnectorApiExceptionResult;

export type ServicesUpdateAvailabilityData = {
    requestBody?: ServiceAvailabilityUpdateParameters;
};

export type ServicesUpdateAvailabilityResponse = Unit | ConnectorApiExceptionResult;

export type ServicesGetAvailabilityData = {
    requestBody?: ServiceAvailabilityFilterParameters;
};

export type ServicesGetAvailabilityResponse = ServiceAvailabilityResult | ConnectorApiExceptionResult;

export type ServicesGetAvailability20240122Data = {
    requestBody?: ServiceAvailabilityFilterParametersV20240122;
};

export type ServicesGetAvailability20240122Response = ServiceAvailabilityResultV20240122 | ConnectorApiExceptionResult;

export type SourceAssignmentsGetAllData = {
    requestBody?: SourceAssignmentFilterParameters;
};

export type SourceAssignmentsGetAllResponse = SourceAssignmentResult | ConnectorApiExceptionResult;

export type SourceAssignmentsGetAll20240920Data = {
    requestBody?: SourceAssignmentFilterParametersV20240920;
};

export type SourceAssignmentsGetAll20240920Response = SourceAssignmentResultV20240920 | ConnectorApiExceptionResult;

export type SourcesGetAllData = {
    requestBody?: SourceFilterParameters;
};

export type SourcesGetAllResponse = SourceResult | ConnectorApiExceptionResult;

export type TasksGetAllData = {
    requestBody?: TaskFilterParameters;
};

export type TasksGetAllResponse = TaskResult | ConnectorApiExceptionResult;

export type TasksAddData = {
    requestBody?: TaskAddParameters;
};

export type TasksAddResponse = AddTaskResult | ConnectorApiExceptionResult;

export type TaxEnvironmentsGetAllData = {
    requestBody?: Parameters;
};

export type TaxEnvironmentsGetAllResponse = TaxEnvironmentResult | ConnectorApiExceptionResult;

export type TaxationsGetAllData = {
    requestBody?: Parameters;
};

export type TaxationsGetAllResponse = TaxationResult | ConnectorApiExceptionResult;

export type VoucherCodesAddData = {
    requestBody?: MultipleVoucherCodeAddParameters;
};

export type VoucherCodesAddResponse = VoucherCodeResult | ConnectorApiExceptionResult;

export type VoucherCodesDeleteData = {
    requestBody?: MultipleVoucherCodeDeleteParameters;
};

export type VoucherCodesDeleteResponse = Unit | ConnectorApiExceptionResult;

export type VoucherCodesGetAllData = {
    requestBody?: VoucherCodeFilterParameters;
};

export type VoucherCodesGetAllResponse = VoucherCodeResult | ConnectorApiExceptionResult;

export type VouchersGetAllData = {
    requestBody?: VoucherFilterParameters;
};

export type VouchersGetAllResponse = VoucherResult | ConnectorApiExceptionResult;

export type VouchersAddData = {
    requestBody?: MultipleVoucherAddParameters;
};

export type VouchersAddResponse = VoucherWriteResult | ConnectorApiExceptionResult;

export type VouchersUpdateData = {
    requestBody?: MultipleVoucherUpdateParameters;
};

export type VouchersUpdateResponse = VoucherWriteResult | ConnectorApiExceptionResult;

export type VouchersDeleteData = {
    requestBody?: MultipleVoucherDeleteParameters;
};

export type VouchersDeleteResponse = Unit | ConnectorApiExceptionResult;

export type $OpenApiTs = {
    '/api/connector/v1/accountNotes/getAll': {
        post: {
            req: {
                requestBody?: AccountNoteFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AccountNoteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accountNotes/add': {
        post: {
            req: {
                requestBody?: MultipleAccountNoteAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AccountNoteAdditionResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accountNotes/update': {
        post: {
            req: {
                requestBody?: MultipleAccountNoteUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AccountNoteUpdateResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accountNotes/delete': {
        post: {
            req: {
                requestBody?: MultipleAccountNoteDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accountingCategories/getAll': {
        post: {
            req: {
                requestBody?: AccountingCategoryFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AccountingCategoryResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accountingItems/update': {
        post: {
            req: {
                requestBody?: MultipleAccountingItemsUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AccountingItemResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accountingItems/getAll': {
        post: {
            req: {
                requestBody?: AccountingItemParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AccountingItemResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accounts/update': {
        post: {
            req: {
                requestBody?: MultipleAccountUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AccountResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accounts/addFile': {
        post: {
            req: {
                requestBody?: AccountFileParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddAccountFileResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/accounts/merge': {
        post: {
            req: {
                requestBody?: MultipleAccountMergeParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/addresses/getAll': {
        post: {
            req: {
                requestBody?: AddressFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddressResultPage;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/addresses/add': {
        post: {
            req: {
                requestBody?: MultipleAddressAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddressResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/addresses/update': {
        post: {
            req: {
                requestBody?: MultipleAddressUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddressResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/addresses/delete': {
        post: {
            req: {
                requestBody?: AddressDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/ageCategories/getAll': {
        post: {
            req: {
                requestBody?: AgeCategoryParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AgeCategoryResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/availabilityAdjustments/getAll': {
        post: {
            req: {
                requestBody?: AvailabilityAdjustmentParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AvailabilityAdjustmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/availabilityBlocks/delete': {
        post: {
            req: {
                requestBody?: AvailabilityBlockDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/availabilityBlocks/getAll': {
        post: {
            req: {
                requestBody?: AvailabilityBlockParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AvailabilityBlockResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/availabilityBlocks/add': {
        post: {
            req: {
                requestBody?: MultipleAvailabilityBlockAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AvailabilityBlockAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/availabilityBlocks/update': {
        post: {
            req: {
                requestBody?: MultipleAvailabilityBlockUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AvailabilityBlockAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/billingAutomations/getAll': {
        post: {
            req: {
                requestBody?: BillingAutomationFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillingAutomationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/billingAutomations/add': {
        post: {
            req: {
                requestBody?: MultipleBillingAutomationAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillingAutomationModificationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/billingAutomations/update': {
        post: {
            req: {
                requestBody?: MultipleBillingAutomationUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillingAutomationModificationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/billingAutomations/updateAssignments': {
        post: {
            req: {
                requestBody?: BillingAutomationAssignmentsUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillingAutomationAssignmentsUpdateParameters;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/billingAutomations/delete': {
        post: {
            req: {
                requestBody?: BillingAutomationDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/bills/update': {
        post: {
            req: {
                requestBody?: MultipleBillsUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillsUpdateResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/bills/getAll': {
        post: {
            req: {
                requestBody?: BillFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillsResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/bills/getPdf': {
        post: {
            req: {
                requestBody?: BillPdfParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillPdfResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/bills/add': {
        post: {
            req: {
                requestBody?: MultipleBillAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillsAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/bills/delete': {
        post: {
            req: {
                requestBody?: BillDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/bills/close': {
        post: {
            req: {
                requestBody?: BillCloseParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BillsCloseResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/businessSegments/getAll': {
        post: {
            req: {
                requestBody?: BusinessSegmentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: BusinessSegmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/cancellationPolicies/getAll': {
        post: {
            req: {
                requestBody?: CancellationPolicyFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CancellationPolicyResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/cancellationPolicies/getByReservations': {
        post: {
            req: {
                requestBody?: CancellationPolicyByReservationParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CancellationPolicyByReservationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/cancellationPolicies/getByRates': {
        post: {
            req: {
                requestBody?: CancellationPolicyByRateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CancellationPolicyByRateResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/cashierTransactions/getAll': {
        post: {
            req: {
                requestBody?: CashierTransactionParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CashierTransactionResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/cashiers/getAll': {
        post: {
            req: {
                requestBody?: CashierParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CashierResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/commands/getAllByIds': {
        post: {
            req: {
                requestBody?: DeviceCommandFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: DeviceCommandResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/commands/getAllActive': {
        post: {
            req: {
                requestBody?: GetAllActiveCommandsParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: DeviceCommandResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/commands/addPrinter': {
        post: {
            req: {
                requestBody?: PrinterCommandParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: DeviceCommandAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/commands/addKeyCutter': {
        post: {
            req: {
                requestBody?: KeyCutterCommandParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: DeviceCommandAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/commands/addPaymentTerminal': {
        post: {
            req: {
                requestBody?: PaymentTerminalCommandParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: DeviceCommandAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/commands/update': {
        post: {
            req: {
                requestBody?: DeviceCommandUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/fiscalMachineCommands/getAll': {
        post: {
            req: {
                requestBody?: CommandsGetAllFilterByCommandIdParameters | CommandsGetAllFilterByStatesParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: FiscalMachineCommandDataV20250623Result;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companies/add': {
        post: {
            req: {
                requestBody?: CompanyAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CompanyResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companies/update': {
        post: {
            req: {
                requestBody?: CompanyUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CompanyResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companies/getAll': {
        post: {
            req: {
                requestBody?: CompanyFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CompanyResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companies/delete': {
        post: {
            req: {
                requestBody?: MultipleCompanyDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companionships/getAll': {
        post: {
            req: {
                requestBody?: CompanionshipFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CompanionshipResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companyContracts/getAll': {
        post: {
            req: {
                requestBody?: CompanyContractFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ContractResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companyContracts/add': {
        post: {
            req: {
                requestBody?: MultipleCompanyContractAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ContractResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companyContracts/update': {
        post: {
            req: {
                requestBody?: MultipleCompanyContractUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ContractResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/companyContracts/delete': {
        post: {
            req: {
                requestBody?: MultipleCompanyContractDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/configuration/get': {
        post: {
            req: {
                requestBody?: ConfigurationFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Configuration;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/counters/getAll': {
        post: {
            req: {
                requestBody?: CounterFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CounterResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/countries/getAll': {
        post: {
            req: {
                requestBody?: Parameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CountryResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/creditCards/getAll': {
        post: {
            req: {
                requestBody?: CreditCardFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CreditCardResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/creditCards/getAllByIds': {
        post: {
            req: {
                requestBody?: MultipleCreditCardParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CreditCardResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/creditCards/getAllByCustomers': {
        post: {
            req: {
                requestBody?: MultipleCustomerParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CreditCardResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/creditCards/addTokenized': {
        post: {
            req: {
                requestBody?: TokenizedCreditCardParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddCreditCardResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/creditCards/charge': {
        post: {
            req: {
                requestBody?: ChargeCreditCardParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ChargeCreditCardResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/creditCards/disable': {
        post: {
            req: {
                requestBody?: DisableCreditCardParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/currencies/getAll': {
        post: {
            req: {
                requestBody?: Parameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CurrencyResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/customers/getAll': {
        post: {
            req: {
                requestBody?: CustomerFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CustomerResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/customers/search': {
        post: {
            req: {
                requestBody?: CustomerSearchParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CustomerSearchResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/customers/getOpenItems': {
        post: {
            req: {
                requestBody?: CustomerItemParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CustomerItemResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/customers/add': {
        post: {
            req: {
                requestBody?: CustomerAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Customer;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/customers/update': {
        post: {
            req: {
                requestBody?: CustomerUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Customer;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/customers/merge': {
        post: {
            req: {
                requestBody?: CustomerMergeParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/customers/addFile': {
        post: {
            req: {
                requestBody?: CustomerFileParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CustomerAddFileResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/departments/getAll': {
        post: {
            req: {
                requestBody?: DepartmentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: DepartmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/devices/getAll': {
        post: {
            req: {
                requestBody?: Parameters;
            };
            res: {
                /**
                 * OK
                 */
                200: DeviceResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/enterprises/getAll': {
        post: {
            req: {
                requestBody?: EnterpriseFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: EnterpriseResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/exchangeRates/getAll': {
        post: {
            req: {
                requestBody?: CurrencyAcceptanceFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ExchangeRateResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/exports/add': {
        post: {
            req: {
                requestBody?: ExportAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ExportAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/exports/getAll': {
        post: {
            req: {
                requestBody?: ExportFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ExportResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/identityDocuments/getAll': {
        post: {
            req: {
                requestBody?: IdentityDocumentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: IdentityDocumentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/identityDocuments/delete': {
        post: {
            req: {
                requestBody?: IdentityDocumentDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/identityDocuments/clear': {
        post: {
            req: {
                requestBody?: IdentityDocumentClearParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/identityDocuments/update': {
        post: {
            req: {
                requestBody?: MultipleIdentityDocumentUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: IdentityDocumentWriteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/identityDocuments/add': {
        post: {
            req: {
                requestBody?: IdentityDocumentsAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: IdentityDocumentWriteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/images/getUrls': {
        post: {
            req: {
                requestBody?: ImageUrlParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ImageUrlResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/languages/getAll': {
        post: {
            req: {
                requestBody?: Parameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LanguageResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/languages/getTexts': {
        post: {
            req: {
                requestBody?: LanguageTextParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LanguageTextResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/ledgerBalances/getAll': {
        post: {
            req: {
                requestBody?: LedgerBalanceParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LedgerBalanceResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyMemberships/getAll': {
        post: {
            req: {
                requestBody?: LoyaltyMembershipFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyMembershipResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyMemberships/add': {
        post: {
            req: {
                requestBody?: MultipleLoyaltyMembershipAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyMembershipResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyMemberships/update': {
        post: {
            req: {
                requestBody?: MultipleLoyaltyMembershipUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyMembershipResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyMemberships/delete': {
        post: {
            req: {
                requestBody?: LoyaltyMembershipDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyPrograms/getAll': {
        post: {
            req: {
                requestBody?: LoyaltyProgramFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyProgramResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyPrograms/add': {
        post: {
            req: {
                requestBody?: MultipleLoyaltyProgramAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyProgramResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyPrograms/update': {
        post: {
            req: {
                requestBody?: MultipleLoyaltyProgramUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyProgramResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyPrograms/delete': {
        post: {
            req: {
                requestBody?: LoyaltyProgramDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyTiers/getAll': {
        post: {
            req: {
                requestBody?: LoyaltyTierFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyTierResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyTiers/add': {
        post: {
            req: {
                requestBody?: MultipleLoyaltyTierAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyTierWriteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyTiers/update': {
        post: {
            req: {
                requestBody?: MultipleLoyaltyTierUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: LoyaltyTierWriteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/loyaltyTiers/delete': {
        post: {
            req: {
                requestBody?: LoyaltyTierDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/messageThreads/getAll': {
        post: {
            req: {
                requestBody?: MessageThreadFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: MessageThreadResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/messageThreads/add': {
        post: {
            req: {
                requestBody?: MessageThreadAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: MessageThreadResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/messages/getAll': {
        post: {
            req: {
                requestBody?: MessageFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: MessageResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/messages/add': {
        post: {
            req: {
                requestBody?: MultipleMessageAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddedMessageResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/orderItems/cancel': {
        post: {
            req: {
                requestBody?: CancelOrderItemParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/orderItems/getAll': {
        post: {
            req: {
                requestBody?: OrderItemFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: OrderItemResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/orders/add': {
        post: {
            req: {
                requestBody?: OrderAdditionParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: OrderAdditionResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/outletBills/add': {
        post: {
            req: {
                requestBody?: AddOutletBillsParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddOutletBillsResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/outletItems/getAll': {
        post: {
            req: {
                requestBody?: OutletItemsFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: OutletItemResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/outlets/getAll': {
        post: {
            req: {
                requestBody?: OutletFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: OutletResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/paymentPlans/add': {
        post: {
            req: {
                requestBody?: PaymentPlanAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: PaymentPlanAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/paymentRequests/getAll': {
        post: {
            req: {
                requestBody?: PaymentRequestFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: PaymentRequestResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/paymentRequests/add': {
        post: {
            req: {
                requestBody?: MultiplePaymentRequestAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: PaymentRequestResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/paymentRequests/cancel': {
        post: {
            req: {
                requestBody?: MultiplePaymentRequestCancelParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: PaymentRequestResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/payments/getAll': {
        post: {
            req: {
                requestBody?: PaymentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: PaymentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/payments/refund': {
        post: {
            req: {
                requestBody?: PaymentRefundParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: PaymentRefundResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/payments/addCreditCard': {
        post: {
            req: {
                requestBody?: CreditCardPaymentParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddCreditCardResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/payments/addExternal': {
        post: {
            req: {
                requestBody?: ExternalPaymentParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddExternalPaymentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/payments/addAlternative': {
        post: {
            req: {
                requestBody?: AlternativePaymentParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AlternativePaymentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/preauthorizations/getAllByCustomers': {
        post: {
            req: {
                requestBody?: MultipleCustomerParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: PreauthorizationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/productCategories/getAll': {
        post: {
            req: {
                requestBody?: ProductCategoryFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ProductCategoryResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/productServiceOrders/getAll': {
        post: {
            req: {
                requestBody?: ProductServiceOrderFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ProductServiceOrderResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/products/getPricing': {
        post: {
            req: {
                requestBody?: ProductPricingFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ProductPricingResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/products/updatePrice': {
        post: {
            req: {
                requestBody?: ProductPriceUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/products/getAll': {
        post: {
            req: {
                requestBody?: ProductFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ProductResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/products/delete': {
        post: {
            req: {
                requestBody?: ProductDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rateGroups/getAll': {
        post: {
            req: {
                requestBody?: RateGroupFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RateGroupResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rates/updateCapacityOffset': {
        post: {
            req: {
                requestBody?: MultipleRateCapacityOffsetUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rates/getAll': {
        post: {
            req: {
                requestBody?: RateFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RateResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rates/add': {
        post: {
            req: {
                requestBody?: RateAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RateAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rates/set': {
        post: {
            req: {
                requestBody?: RateSetParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RateSetResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rates/delete': {
        post: {
            req: {
                requestBody?: RateDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rates/getPricing': {
        post: {
            req: {
                requestBody?: RatePricingFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RatePricing;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rates/updatePrice': {
        post: {
            req: {
                requestBody?: RatePriceUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservationGroups/getAll': {
        post: {
            req: {
                requestBody?: ReservationGroupFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationGroupResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/getChannelManagerDetails': {
        post: {
            req: {
                requestBody?: ReservationsChannelManagerDetailsFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationsChannelManagerDetailsResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/getAll/2023-06-06': {
        post: {
            req: {
                requestBody?: ReservationServiceOrderFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationServiceOrderResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/getAll': {
        post: {
            req: {
                requestBody?: ReservationFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/price': {
        post: {
            req: {
                requestBody?: ReservationDataParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationPricingResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/add': {
        post: {
            req: {
                requestBody?: ReservationAdditionParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationAdditionResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/update': {
        post: {
            req: {
                requestBody?: MultipleReservationUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/confirm': {
        post: {
            req: {
                requestBody?: ConfirmReservationParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: MultipleReservationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/start': {
        post: {
            req: {
                requestBody?: ReservationStartParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/process': {
        post: {
            req: {
                requestBody?: ReservationProcessingParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/cancel': {
        post: {
            req: {
                requestBody?: ReservationCancellationParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: MultipleReservationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/updateCustomer': {
        post: {
            req: {
                requestBody?: ReservationsUpdateCustomerParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/updateInterval': {
        post: {
            req: {
                requestBody?: ReservationUpdateIntervalParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/addCompanion': {
        post: {
            req: {
                requestBody?: CompanionshipAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: CompanionshipAddResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/deleteCompanion': {
        post: {
            req: {
                requestBody?: CompanionshipDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/addProduct': {
        post: {
            req: {
                requestBody?: ReservationProductParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddProductItemsResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/reservations/getAllItems': {
        post: {
            req: {
                requestBody?: ReservationItemParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ReservationItemResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceAccessTokens/getAll': {
        post: {
            req: {
                requestBody?: ResourceAccessTokenFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceAccessTokenResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceAccessTokens/add': {
        post: {
            req: {
                requestBody?: MultipleResourceAccessTokenParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceAccessTokenResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceAccessTokens/update': {
        post: {
            req: {
                requestBody?: MultipleResourceAccessTokenUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceAccessTokenResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceAccessTokens/delete': {
        post: {
            req: {
                requestBody?: ResourceAccessTokenDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceBlocks/getAll': {
        post: {
            req: {
                requestBody?: ResourceBlockParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceBlockResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceBlocks/add': {
        post: {
            req: {
                requestBody?: MultipleResourceBlockAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceBlockResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceBlocks/delete': {
        post: {
            req: {
                requestBody?: ResourceBlockDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceCategories/getAll': {
        post: {
            req: {
                requestBody?: ResourceCategoryFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceCategoryResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceCategoryAssignments/getAll': {
        post: {
            req: {
                requestBody?: ResourceCategoryAssignmentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceCategoryAssignmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceCategoryImageAssignments/getAll': {
        post: {
            req: {
                requestBody?: ResourceCategoryImageAssignmentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceCategoryImageAssignmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceFeatureAssignments/getAll': {
        post: {
            req: {
                requestBody?: ResourceFeatureAssignmentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceFeatureAssignmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resourceFeatures/getAll': {
        post: {
            req: {
                requestBody?: ResourceFeatureFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceFeatureResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resources/getAll': {
        post: {
            req: {
                requestBody?: ResourceFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourceResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resources/update': {
        post: {
            req: {
                requestBody?: MultipleResourceUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/resources/getOccupancyState': {
        post: {
            req: {
                requestBody?: ResourcesOccupancyStateFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ResourcesOccupancyStateResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/restrictions/add': {
        post: {
            req: {
                requestBody?: AddRestrictionParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RestrictionAdditionResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/restrictions/delete': {
        post: {
            req: {
                requestBody?: DeleteRestrictionParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/restrictions/set': {
        post: {
            req: {
                requestBody?: SetRestrictionParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * The request cannot be completed because the data has changed, causing conflict between the state on the client and the server. To get around this error, try refreshing the data on the client and resubmitting the request.
                 */
                409: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/restrictions/clear': {
        post: {
            req: {
                requestBody?: ClearRestrictionParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * The request cannot be completed because the data has changed, causing conflict between the state on the client and the server. To get around this error, try refreshing the data on the client and resubmitting the request.
                 */
                409: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/restrictions/getAll': {
        post: {
            req: {
                requestBody?: RestrictionFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RestrictionResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/routingRules/getAll': {
        post: {
            req: {
                requestBody?: RoutingRuleFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RoutingRuleResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/routingRules/add': {
        post: {
            req: {
                requestBody?: MultipleRoutingRuleAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RoutingRuleResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/routingRules/update': {
        post: {
            req: {
                requestBody?: MultipleRoutingRuleUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RoutingRuleResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/routingRules/delete': {
        post: {
            req: {
                requestBody?: RoutingRuleDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/rules/getAll': {
        post: {
            req: {
                requestBody?: RuleFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: RuleResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/serviceOrderNotes/add': {
        post: {
            req: {
                requestBody?: MultipleServiceOrderNoteAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ServiceOrderNoteAdditionResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/serviceOrderNotes/update': {
        post: {
            req: {
                requestBody?: MultipleServiceOrderNoteUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ServiceOrderNoteUpdateResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/serviceOrderNotes/getAll': {
        post: {
            req: {
                requestBody?: ServiceOrderNoteFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ServiceOrderNoteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/serviceOrderNotes/delete': {
        post: {
            req: {
                requestBody?: ServiceOrderNoteDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/serviceOverbookingLimits/getAll': {
        post: {
            req: {
                requestBody?: ServiceOverbookingLimitFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ServiceOverbookingLimitResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/serviceOverbookingLimits/set': {
        post: {
            req: {
                requestBody?: ServiceOverbookingLimitSetParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/serviceOverbookingLimits/clear': {
        post: {
            req: {
                requestBody?: ServiceOverbookingLimitClearParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/services/getAll': {
        post: {
            req: {
                requestBody?: ServiceFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ServiceResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/services/updateAvailability': {
        post: {
            req: {
                requestBody?: ServiceAvailabilityUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/services/getAvailability': {
        post: {
            req: {
                requestBody?: ServiceAvailabilityFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: ServiceAvailabilityResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/services/getAvailability/2024-01-22': {
        post: {
            req: {
                requestBody?: ServiceAvailabilityFilterParametersV20240122;
            };
            res: {
                /**
                 * OK
                 */
                200: ServiceAvailabilityResultV20240122;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/sourceAssignments/getAll': {
        post: {
            req: {
                requestBody?: SourceAssignmentFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: SourceAssignmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/sourceAssignments/getAll/2024-09-20': {
        post: {
            req: {
                requestBody?: SourceAssignmentFilterParametersV20240920;
            };
            res: {
                /**
                 * OK
                 */
                200: SourceAssignmentResultV20240920;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/sources/getAll': {
        post: {
            req: {
                requestBody?: SourceFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: SourceResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/tasks/getAll': {
        post: {
            req: {
                requestBody?: TaskFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: TaskResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/tasks/add': {
        post: {
            req: {
                requestBody?: TaskAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: AddTaskResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/taxEnvironments/getAll': {
        post: {
            req: {
                requestBody?: Parameters;
            };
            res: {
                /**
                 * OK
                 */
                200: TaxEnvironmentResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/taxations/getAll': {
        post: {
            req: {
                requestBody?: Parameters;
            };
            res: {
                /**
                 * OK
                 */
                200: TaxationResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/voucherCodes/add': {
        post: {
            req: {
                requestBody?: MultipleVoucherCodeAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: VoucherCodeResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/voucherCodes/delete': {
        post: {
            req: {
                requestBody?: MultipleVoucherCodeDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/voucherCodes/getAll': {
        post: {
            req: {
                requestBody?: VoucherCodeFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: VoucherCodeResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/vouchers/getAll': {
        post: {
            req: {
                requestBody?: VoucherFilterParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: VoucherResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/vouchers/add': {
        post: {
            req: {
                requestBody?: MultipleVoucherAddParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: VoucherWriteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/vouchers/update': {
        post: {
            req: {
                requestBody?: MultipleVoucherUpdateParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: VoucherWriteResult;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
    '/api/connector/v1/vouchers/delete': {
        post: {
            req: {
                requestBody?: MultipleVoucherDeleteParameters;
            };
            res: {
                /**
                 * OK
                 */
                200: Unit;
                /**
                 * Server has successfully fulfilled the request and there is no additional information to send back.
                 */
                204: ConnectorApiExceptionResult;
                /**
                 * Error caused by the client app, e.g. in case of malformed request or invalid identifier of a resource. In most cases, such an error signifies a bug in the client app (consumer of the API).
                 */
                400: ConnectorApiExceptionResult;
                /**
                 * Error caused by usage of invalid ClientToken, AccessToken, or you may not have the necessary permission to use the endpoint.
                 */
                401: ConnectorApiExceptionResult;
                /**
                 * Server error that should be reported to the end user of the client app. Happens for example when the server-side validation fails or when a business-logic check is violated.
                 */
                403: ConnectorApiExceptionResult;
                /**
                 * Error caused by heavy request that takes too long to process (typically tens of seconds). To get around this, request data in smaller batches. For more information, see [Request timeouts](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-timeouts)
                 */
                408: ConnectorApiExceptionResult;
                /**
                 * Error caused by too many requests sent in a given amount of time. Response contains `Retry-After` header indicating how long the user agent should wait before making a follow-up request. For more information, see [Request limits](https://mews-systems.gitbook.io/connector-api/guidelines/requests#request-limits).
                 */
                429: ConnectorApiExceptionResult;
                /**
                 * Unexpected error on the Mews side. This may be due to a software fault. If such a situation occurs, the error will be logged and the development team notified, however you can raise an issue through GitHub on our [documentation repository](https://github.com/MewsSystems/gitbook-connector-api).
                 */
                500: ConnectorApiExceptionResult;
            };
        };
    };
};