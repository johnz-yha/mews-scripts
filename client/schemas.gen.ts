// This file is auto-generated by @hey-api/openapi-ts

export const $Account = {
    title: 'Account',
    required: ['Discriminator', 'Id'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the account.',
            format: 'uuid'
        },
        Discriminator: {
            title: 'Account type',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountTypeEnum'
                }
            ],
            description: `Type of the account.

Company

Customer`,
            'x-enumNames': ['Company', 'Customer'],
            'x-enumDescriptions': ['', '']
        },
        Customer: {
            title: 'Customer',
            allOf: [
                {
                    '$ref': '#/components/schemas/CustomerAccount'
                }
            ],
            description: 'Updated customer data.',
            nullable: true
        },
        Company: {
            title: 'Company',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyAccount'
                }
            ],
            description: 'Updated company data.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Account'
} as const;

export const $AccountAddress = {
    title: 'Account address',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the address.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of a [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) or a [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) within the enterprise.',
            format: 'uuid'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain.',
            format: 'uuid',
            nullable: true
        },
        AccountType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AccountType'
                }
            ],
            description: 'A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), e.g. customer or company.',
            nullable: true
        },
        Line1: {
            maxLength: 1023,
            type: 'string',
            description: 'First line of the address.',
            nullable: true
        },
        Line2: {
            maxLength: 255,
            type: 'string',
            description: 'Second line of the address.',
            nullable: true
        },
        City: {
            maxLength: 255,
            type: 'string',
            description: 'The city.',
            nullable: true
        },
        PostalCode: {
            maxLength: 255,
            type: 'string',
            description: 'Postal code.',
            nullable: true
        },
        CountryCode: {
            type: 'string',
            description: 'ISO 3166-1 alpha-2 code of the Country.',
            nullable: true
        },
        CountrySubdivisionCode: {
            type: 'string',
            description: 'ISO 3166-2 code of the administrative division, e.g. DE-BW.',
            nullable: true
        },
        Latitude: {
            type: 'number',
            description: 'The latitude.',
            format: 'double',
            nullable: true
        },
        Longitude: {
            type: 'number',
            description: 'The longitude.',
            format: 'double',
            nullable: true
        },
        UpdatedUtc: {
            type: 'string',
            description: 'Last update date and time of the address in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the address is still active.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountAddress'
} as const;

export const $AccountCompanyUpdateParameters = {
    title: 'Company update parameters',
    type: 'object',
    properties: {
        Email: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Email address (or `null` if the email should not be updated).',
            format: 'email',
            nullable: true
        },
        TaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Tax identification number (or `null` if the tax identification number should not be updated).',
            nullable: true
        },
        BillingCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Billing code (or `null` if the billing code should not be updated).',
            nullable: true
        },
        AccountingCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Accounting code (or `null` if the accounting code should not be updated).',
            nullable: true
        },
        Notes: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Notes (or `null` if the notes should not be updated).',
            nullable: true
        },
        Name: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Name (or `null` if the name should not be updated).',
            nullable: true
        },
        MotherCompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Mother company identifier (or `null` if the mother company identifier should not be updated).',
            nullable: true
        },
        WebsiteUrl: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Website url (or `null` if the website url should not be updated).',
            format: 'uri',
            nullable: true
        },
        InvoiceDueInterval: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Invoice due interval (or `null` if the invoice due interval should not be updated).',
            nullable: true
        },
        Classifications: {
            title: 'Company update classifications',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyClassificationUpdateParameters'
                }
            ],
            description: 'Classifications of the company.',
            nullable: true
        },
        Options: {
            title: 'Company update options',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyOptionUpdateParameters'
                }
            ],
            description: 'Options of the company.',
            nullable: true
        },
        CreditRatingBasic: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            anyOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingBasic'
                }
            ],
            description: 'Basic credit rating (or `null` if the basic credit rating should not be updated).',
            nullable: true
        },
        Department: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Department (or `null` if the department should not be updated).',
            nullable: true
        },
        DunsNumber: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Duns number (or `null` if the duns number should not be updated).',
            nullable: true
        },
        ReferenceId: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Reference identifier (or `null` if the reference identifier should not be updated).',
            nullable: true
        },
        ExternalIdentifier: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'External identifier (or `null` if the external identifier should not be updated).',
            nullable: true
        },
        AdditionalTaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Additional tax identifier (or `null` if the additional tax identifier should not be updated).',
            nullable: true
        },
        Contact: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Contact (or `null` if the contact should not be updated).',
            nullable: true
        },
        ContactPerson: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Contact person (or `null` if the contact person should not be updated).',
            nullable: true
        },
        FiscalIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Fiscal identifier (or `null` if the fiscal identifier should not be updated).',
            nullable: true
        },
        Iata: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'IATA of the company (or `null` if the iata should not be updated).',
            nullable: true
        },
        Telephone: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Telephone number (or `null` if the telephone number should not be updated).',
            nullable: true
        },
        SourceId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Source identifier (or `null` if the source identifier should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountCompanyUpdateParameters'
} as const;

export const $AccountCustomerUpdateParameters = {
    title: 'Customer update parameters',
    type: 'object',
    properties: {
        Email: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Email address (or `null` if the email should not be updated).',
            nullable: true
        },
        TaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Tax identification number (or `null` if the tax identification number should not be updated).',
            nullable: true
        },
        BillingCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Billing code (or `null` if the billing code should not be updated).',
            nullable: true
        },
        AccountingCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Accounting code (or `null` if the accounting code should not be updated).',
            nullable: true
        },
        Notes: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Notes (or `null` if the notes should not be updated).',
            nullable: true
        },
        LastName: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Last name (or `null` if the last name should not be updated).',
            nullable: true
        },
        FirstName: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'First name (or `null` if the first name should not be updated).',
            nullable: true
        },
        SecondLastName: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Second last name (or `null` if the second last name should not be updated).',
            nullable: true
        },
        BirthPlace: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Birth place (or `null` if the birth place should not be updated).',
            nullable: true
        },
        Telephone: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Telephone number (or `null` if the telephone should not be updated).',
            nullable: true
        },
        Occupation: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Occupation (or `null` if the occupation should not be updated).',
            nullable: true
        },
        CarRegistrationNumber: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Car registration number (or `null` if the car registration number should not be updated).',
            nullable: true
        },
        DietaryRequirements: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Dietary requirements (or `null` if the dietary requirements should not be updated).',
            nullable: true
        },
        LoyaltyCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Loyalty code (or `null` if the loyalty code should not be updated).',
            nullable: true
        },
        NationalityCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Nationality code (or `null` if the nationality code should not be updated).',
            nullable: true
        },
        CompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the company (or `null` if the company should not be updated).',
            nullable: true
        },
        BirthDate: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Birth date (or `null` if the birth date should not be updated).',
            nullable: true
        },
        Sex: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Sex (or `null` if the sex should not be updated).',
            nullable: true
        },
        Title: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Title (or `null` if the title should not be updated).',
            nullable: true
        },
        PreferredLanguageCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Preferred language code (or `null` if the preferred language code should not be updated).',
            nullable: true
        },
        Options: {
            title: 'Customer update options',
            allOf: [
                {
                    '$ref': '#/components/schemas/CustomerOptionUpdateParameters'
                }
            ],
            description: 'Options of the customer.',
            nullable: true
        },
        Classifications: {
            title: 'Customer update classifications',
            allOf: [
                {
                    '$ref': '#/components/schemas/CustomerClassificationUpdateParameters'
                }
            ],
            description: 'Classifications of the customer.',
            nullable: true
        },
        LegalEntityIdentifiers: {
            title: 'Customer update legal entity identifiers',
            allOf: [
                {
                    '$ref': '#/components/schemas/LegalEntityIdentifierUpdateParameters'
                }
            ],
            description: 'Legal entity identifiers of the customer.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountCustomerUpdateParameters'
} as const;

export const $AccountFileParameters = {
    title: 'AccountFileParameters',
    required: ['AccessToken', 'AccountId', 'Client', 'ClientToken', 'Data', 'Name', 'Type'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account to which the file will be uploaded to.',
            format: 'uuid'
        },
        Name: {
            maxLength: 1000,
            minLength: 1,
            type: 'string',
            description: 'Uploaded file name.'
        },
        Type: {
            maxLength: 1000,
            minLength: 1,
            type: 'string',
            description: 'Content type of the uploaded file following defined by its MIME type.'
        },
        Data: {
            minLength: 1,
            type: 'string',
            description: 'Uploaded file data serialized in base64 format.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountFileParameters'
} as const;

export const $AccountMergeParameter = {
    title: 'Account merge parameters',
    required: ['AccountType', 'SourceAccountIds', 'TargetAccountId'],
    type: 'object',
    properties: {
        SourceAccountIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the source accounts (`Customer` or `Company`).'
        },
        TargetAccountId: {
            type: 'string',
            description: 'Unique identifier of the target account (`Customer` or `Company`).',
            format: 'uuid'
        },
        AccountType: {
            title: 'Account merge type',
            allOf: [
                {
                    '$ref': '#/components/schemas/MergeAccountTypeEnum'
                }
            ],
            description: `Specifying types of the accounts provided (\`Customer\` or \`Company\`).

Customer

Company`,
            'x-enumNames': ['Customer', 'Company'],
            'x-enumDescriptions': ['', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountMergeParameter'
} as const;

export const $AccountNote = {
    title: 'Account note',
    required: ['AccountId', 'AccountType', 'Classifications', 'Content', 'CreatorProfile', 'Id', 'IsActive', 'UpdaterProfile'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the account note.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account.',
            format: 'uuid'
        },
        Content: {
            minLength: 1,
            type: 'string',
            description: 'The content of the account note.'
        },
        AccountType: {
            title: 'Account type',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountTypeEnum'
                }
            ],
            description: `Specifying type of associated account.

Company

Customer`,
            'x-enumNames': ['Company', 'Customer'],
            'x-enumDescriptions': ['', '']
        },
        Classifications: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountNoteClassificationEnum'
            },
            description: 'Specifying the classifications of the note based on account type.'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the account note is still active.'
        },
        CreatorProfile: {
            title: 'Profile data',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProfileData'
                }
            ],
            description: 'The profile data of the user who created the account note.'
        },
        UpdaterProfile: {
            title: 'Profile data',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProfileData'
                }
            ],
            description: 'The profile data of the user who updated the account note.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNote'
} as const;

export const $AccountNoteAddParameters = {
    title: 'Account note parameters',
    required: ['AccountId', 'Classifications', 'Content'],
    type: 'object',
    properties: {
        AccountId: {
            type: 'string',
            format: 'uuid'
        },
        Content: {
            maxLength: 1000,
            minLength: 1,
            type: 'string',
            description: 'The content of the account note.'
        },
        Classifications: {
            maxItems: 1,
            minItems: 1,
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountNoteClassificationEnum'
            },
            description: 'Specifying the classifications of the note based on account type.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNoteAddParameters'
} as const;

export const $AccountNoteAdditionResult = {
    title: 'AccountNoteAdditionResult',
    required: ['AccountNotes'],
    type: 'object',
    properties: {
        AccountNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountNote'
            },
            description: 'Added account notes.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNoteAdditionResult'
} as const;

export const $AccountNoteClassificationEnum = {
    title: 'Account note classification',
    enum: ['General', 'FoodAndBeverage', 'FrontOffice', 'Reservations', 'Housekeeping', 'Maintenance', 'PreviousStay', 'FamilyRelations', 'Gifts', 'Accounting', 'Complaints', 'Other'],
    type: 'string',
    description: `

General (For Company and Customer)

FoodAndBeverage (Only Customer)

FrontOffice (Only Customer)

Reservations (Only Customer)

Housekeeping (Only Customer)

Maintenance (Only Customer)

PreviousStay (Only Customer)

FamilyRelations (Only Customer)

Gifts (Only Customer)

Accounting (Only Customer)

Complaints (Only Customer)

Other (Only Customer)`,
    'x-enumNames': ['General', 'FoodAndBeverage', 'FrontOffice', 'Reservations', 'Housekeeping', 'Maintenance', 'PreviousStay', 'FamilyRelations', 'Gifts', 'Accounting', 'Complaints', 'Other'],
    'x-enumDescriptions': ['For Company and Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer', 'Only Customer']
} as const;

export const $AccountNoteFilterParameters = {
    title: 'AccountNoteFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Chain`. If not specified, the operation returns data for all chains within scope of the Access Token.',
            nullable: true
        },
        AccountNoteIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Account note](https://mews-systems.gitbook.io/connector-api/operations/#account-note).',
            nullable: true
        },
        AccountIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the accounts ([Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: "Interval of Account note's last update date and time.",
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNoteFilterParameters'
} as const;

export const $AccountNoteResult = {
    title: 'AccountNoteResult',
    required: ['AccountNotes'],
    type: 'object',
    properties: {
        AccountNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountNote'
            },
            description: 'The set of requested account notes.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNoteResult'
} as const;

export const $AccountNoteUpdateClassifications = {
    title: 'Account note update classifications',
    type: 'object',
    properties: {
        General: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Company and Customer: Boolean value defining the general classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        FoodAndBeverage: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the food and beverage classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        FrontOffice: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the front office classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        Reservations: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the reservations classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        Housekeeping: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the housekeeping classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        Maintenance: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the maintenance classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        PreviousStay: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the previous stay classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        FamilyRelations: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the family relations classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        Gifts: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the gifts classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        Accounting: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the accounting classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        Complaints: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the complaints classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        },
        Other: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Customer only: Boolean value defining the other classification for the account note (or `null` if the value should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNoteUpdateClassifications'
} as const;

export const $AccountNoteUpdateParameters = {
    title: 'Account note update parameters',
    required: ['AccountNoteId', 'Classifications'],
    type: 'object',
    properties: {
        AccountNoteId: {
            type: 'string',
            description: 'Unique identifier of the account note.',
            format: 'uuid'
        },
        Content: {
            title: 'String update value',
            maxLength: 1000,
            minLength: 1,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Content of the account note (or `null` if the content should not be updated).',
            nullable: true
        },
        Classifications: {
            title: 'Account note update classifications',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountNoteUpdateClassifications'
                }
            ],
            description: 'Classification of the account note.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNoteUpdateParameters'
} as const;

export const $AccountNoteUpdateResult = {
    title: 'AccountNoteUpdateResult',
    required: ['AccountNotes'],
    type: 'object',
    properties: {
        AccountNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountNote'
            },
            description: 'Updated account notes.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountNoteUpdateResult'
} as const;

export const $AccountParameterDiscriminatorEnum = {
    title: 'Account type discriminator',
    enum: ['Customer', 'Company'],
    type: 'string',
    description: `

Customer

Company`,
    'x-enumNames': ['Customer', 'Company'],
    'x-enumDescriptions': ['', '']
} as const;

export const $AccountResult = {
    title: 'AccountResult',
    required: ['Accounts'],
    type: 'object',
    properties: {
        Accounts: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Account'
            },
            description: 'Updated accounts.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountResult'
} as const;

export const $AccountType = {
    title: 'Account type',
    enum: ['Company', 'Customer'],
    type: 'string'
} as const;

export const $AccountTypeEnum = {
    title: 'Account type',
    enum: ['Company', 'Customer'],
    type: 'string',
    description: `

Company

Customer`,
    'x-enumNames': ['Company', 'Customer'],
    'x-enumDescriptions': ['', '']
} as const;

export const $AccountUpdateParameters = {
    title: 'Account update parameters',
    required: ['Discriminator', 'Id'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the account.',
            format: 'uuid'
        },
        Discriminator: {
            title: 'Account type discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountParameterDiscriminatorEnum'
                }
            ],
            description: `Type of the account.

Customer

Company`,
            'x-enumNames': ['Customer', 'Company'],
            'x-enumDescriptions': ['', '']
        },
        Customer: {
            title: 'Customer update parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountCustomerUpdateParameters'
                }
            ],
            description: 'Customer data to be updated. Required when `Discriminator` is `Customer`.',
            nullable: true
        },
        Company: {
            title: 'Company update parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountCompanyUpdateParameters'
                }
            ],
            description: 'Company data to be updated. Required when `Discriminator` is `Company`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountUpdateParameters'
} as const;

export const $AccountingCategory = {
    title: 'Accounting category',
    required: ['CreatedUtc', 'EnterpriseId', 'Id', 'IsActive', 'Name', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the category.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the accounting category is still active.'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the category.'
        },
        Code: {
            type: 'string',
            description: 'Code of the category within Mews.',
            nullable: true
        },
        ExternalCode: {
            type: 'string',
            description: 'Code of the category in external systems.',
            nullable: true
        },
        LedgerAccountCode: {
            type: 'string',
            description: 'Code of the ledger account (double entry accounting).',
            nullable: true
        },
        PostingAccountCode: {
            type: 'string',
            description: 'Code of the posting account (double entry accounting).',
            nullable: true
        },
        CostCenterCode: {
            type: 'string',
            description: 'Code of cost center.',
            nullable: true
        },
        Classification: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingCategoryClassificationEnum'
                }
            ],
            description: `Classification of the accounting category allowing cross-enterprise reporting.

Accommodation

FoodAndBeverage

Taxes

Payments

ExternalRevenue

SundryIncome

Wellness

Sport

Technology

Facilities

Events

Tourism`,
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the accounting category in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the accounting category in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingCategory'
} as const;

export const $AccountingCategoryClassificationEnum = {
    title: 'Accounting category classification',
    enum: ['Accommodation', 'FoodAndBeverage', 'Taxes', 'Payments', 'ExternalRevenue', 'SundryIncome', 'Wellness', 'Sport', 'Technology', 'Facilities', 'Events', 'Tourism'],
    type: 'string',
    description: `

Accommodation

FoodAndBeverage

Taxes

Payments

ExternalRevenue

SundryIncome

Wellness

Sport

Technology

Facilities

Events

Tourism`,
    'x-enumNames': ['Accommodation', 'FoodAndBeverage', 'Taxes', 'Payments', 'ExternalRevenue', 'SundryIncome', 'Wellness', 'Sport', 'Technology', 'Facilities', 'Events', 'Tourism'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '']
} as const;

export const $AccountingCategoryFilterParameters = {
    title: 'AccountingCategoryFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        AccountingCategoryIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Accounting categories](https://mews-systems.gitbook.io/connector-api/operations/#accounting-category).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Last update date and time of the accounting category in UTC timezone in ISO 8601 format.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingCategoryFilterParameters'
} as const;

export const $AccountingCategoryParameters = {
    title: 'AccountingCategoryParameters',
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingCategoryParameters'
} as const;

export const $AccountingCategoryResult = {
    title: 'AccountingCategoryResult',
    required: ['AccountingCategories'],
    type: 'object',
    properties: {
        AccountingCategories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingCategory'
            },
            description: 'Accounting categories of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingCategoryResult'
} as const;

export const $AccountingCategoryRoutedItemTypes = {
    title: 'Accounting category routed item types',
    required: ['CustomItems', 'Products'],
    type: 'object',
    properties: {
        Products: {
            type: 'boolean',
            description: 'Specifies whether products under the given accounting category are routed.'
        },
        CustomItems: {
            type: 'boolean',
            description: 'Specifies whether custom items under the given accounting category are routed.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingCategoryRoutedItemTypes'
} as const;

export const $AccountingConfiguration = {
    title: 'Accounting configuration',
    required: ['EnabledExternalPaymentTypes', 'SurchargeConfiguration'],
    type: 'object',
    properties: {
        AdditionalTaxIdentifier: {
            maxLength: 50,
            type: 'string',
            description: 'Organization number.',
            nullable: true
        },
        CompanyName: {
            maxLength: 100,
            type: 'string',
            description: 'Legal name of the company.',
            nullable: true
        },
        BankAccountNumber: {
            maxLength: 50,
            type: 'string',
            description: 'Bank account number.',
            nullable: true
        },
        BankName: {
            maxLength: 100,
            type: 'string',
            description: 'Name of the bank.',
            nullable: true
        },
        Iban: {
            maxLength: 40,
            type: 'string',
            description: 'International Bank Account Number.',
            nullable: true
        },
        Bic: {
            maxLength: 11,
            type: 'string',
            description: 'Business Identification Code.',
            nullable: true
        },
        SurchargeConfiguration: {
            title: 'Surcharging fees configuration',
            allOf: [
                {
                    '$ref': '#/components/schemas/SurchargeConfiguration'
                }
            ],
            description: 'Configuration for surcharging fees.'
        },
        EnabledExternalPaymentTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalPaymentTypeEnum'
            },
            description: 'External payment types that are enabled for the enterprise and can be used in `payments/addExternal`.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingConfiguration'
} as const;

export const $AccountingItem = {
    title: 'Accounting item',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountId` instead.'
        },
        OrderId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        ServiceId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        ProductId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        BillId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        InvoiceId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        CreditCardId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        Type: {
            type: 'string',
            nullable: true
        },
        SubType: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Notes: {
            type: 'string',
            nullable: true
        },
        ConsumptionUtc: {
            type: 'string',
            nullable: true
        },
        ClosedUtc: {
            type: 'string',
            nullable: true
        },
        State: {
            type: 'string',
            nullable: true
        },
        SubState: {
            type: 'string',
            nullable: true
        },
        Amount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: '',
            nullable: true
        },
        TaxExemptionReasonCode: {
            type: 'string',
            description: "Code of tax exemption reason. **Restricted!** This property is currently intended for Mews' internal usage and may be subject to change.",
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingItem'
} as const;

export const $AccountingItemExtent = {
    title: 'AccountingItemExtent',
    type: 'object',
    properties: {
        AccountingItems: {
            type: 'boolean'
        },
        OrderItems: {
            type: 'boolean'
        },
        PaymentItems: {
            type: 'boolean'
        },
        CreditCardTransactions: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned. E.g. it is possible to specify that together with the accounting items, credit card transactions should be also returned.',
    'x-schema-id': 'AccountingItemExtent'
} as const;

export const $AccountingItemParameters = {
    title: 'AccountingItemParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'EndUtc', 'Extent', 'StartUtc'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        StartUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        EndUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        Extent: {
            title: 'AccountingItemExtent',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingItemExtent'
                }
            ],
            description: 'Extent of data to be returned. E.g. it is possible to specify that together with the accounting items, credit card transactions should be also returned.'
        },
        ItemIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Accounting items. Required if no other filter is provided.',
            nullable: true
        },
        RebatedItemIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Accounting items we are finding rebates for. Required if no other filter is provided.',
            nullable: true
        },
        ClosedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ConsumedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        TimeFilter: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        Currency: {
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.',
            format: 'currency',
            nullable: true
        },
        States: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'States the accounting items should be in. If not specified, accounting items in Open or Closed states are returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingItemParameters'
} as const;

export const $AccountingItemResult = {
    title: 'AccountingItemResult',
    type: 'object',
    properties: {
        AccountingItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingItem'
            },
            nullable: true,
            deprecated: true
        },
        OrderItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItemOld'
            },
            description: 'Updated order items (consumed items such as nights or products).',
            nullable: true
        },
        PaymentItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentItemOld'
            },
            description: 'Updated payment items (such as cash, credit card payments or invoices).',
            nullable: true
        },
        CreditCardTransactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreditCardTransaction'
            },
            description: 'The credit card payment transactions.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingItemResult'
} as const;

export const $AccountingItemUpdateParameters = {
    title: 'AccountingItemUpdateParameters',
    required: ['AccountingItemId', 'BillId'],
    type: 'object',
    properties: {
        AccountingItemId: {
            type: 'string',
            format: 'uuid'
        },
        AccountId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            nullable: true
        },
        BillId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ]
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AccountingItemUpdateParameters'
} as const;

export const $AccountingLedgerTypeEnum = {
    title: 'Accounting ledger type',
    enum: ['Revenue', 'Tax', 'Payment', 'Deposit', 'Guest', 'City', 'NonRevenue'],
    type: 'string',
    description: `

Revenue

Tax

Payment

Deposit

Guest

City

NonRevenue`,
    'x-enumNames': ['Revenue', 'Tax', 'Payment', 'Deposit', 'Guest', 'City', 'NonRevenue'],
    'x-enumDescriptions': ['', '', '', '', '', '', '']
} as const;

export const $AccountingState = {
    title: 'Order item accounting state',
    enum: ['Open', 'Closed', 'Inactive', 'Canceled'],
    type: 'string',
    'x-enumDescriptions': ['Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.', 'Order items which carry a non-zero value and have been closed on a bill or invoice.', 'Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.', 'Order items which have been canceled, regardless of whether the item is of zero value.']
} as const;

export const $AccountingStateEnum = {
    title: 'Order item accounting state',
    enum: ['Open', 'Closed', 'Inactive', 'Canceled'],
    type: 'string',
    description: `

Open (Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.)

Closed (Order items which carry a non-zero value and have been closed on a bill or invoice.)

Inactive (Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.)

Canceled (Order items which have been canceled, regardless of whether the item is of zero value.)`,
    'x-enumNames': ['Open', 'Closed', 'Inactive', 'Canceled'],
    'x-enumDescriptions': ['Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.', 'Order items which carry a non-zero value and have been closed on a bill or invoice.', 'Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.', 'Order items which have been canceled, regardless of whether the item is of zero value.']
} as const;

export const $ActivityState = {
    title: 'Activity State',
    enum: ['Deleted', 'Active'],
    type: 'string'
} as const;

export const $ActivityStateEnum = {
    title: 'Activity State',
    enum: ['Deleted', 'Active'],
    type: 'string',
    description: `

Deleted

Active`,
    'x-enumNames': ['Deleted', 'Active'],
    'x-enumDescriptions': ['', '']
} as const;

export const $ActivityStates = {
    enum: ['Deleted', 'Active'],
    type: 'string'
} as const;

export const $AddAccountFileResult = {
    title: 'AddAccountFileResult',
    required: ['FileId'],
    type: 'object',
    properties: {
        FileId: {
            type: 'string',
            description: 'Unique identifier of the uploaded file.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddAccountFileResult'
} as const;

export const $AddCreditCardResult = {
    title: 'AddCreditCardResult',
    type: 'object',
    properties: {
        CreditCardId: {
            type: 'string',
            description: 'Unique identifier of the [Credit card](https://mews-systems.gitbook.io/connector-api/operations/creditcards/#credit-card).',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddCreditCardResult'
} as const;

export const $AddExternalPaymentResult = {
    title: 'AddExternalPaymentResult',
    type: 'object',
    properties: {
        ExternalPaymentId: {
            type: 'string',
            description: 'Unique identifier of the [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddExternalPaymentResult'
} as const;

export const $AddOutletBillsParameters = {
    title: 'AddOutletBillsParameters',
    required: ['AccessToken', 'Bills', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Bills: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OutletBillParameters'
            },
            description: 'The new outlet bills.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddOutletBillsParameters'
} as const;

export const $AddOutletBillsResult = {
    title: 'AddOutletBillsResult',
    type: 'object',
    properties: {
        OutletBillIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Array of unique identifiers of the added Outlet bills.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddOutletBillsResult'
} as const;

export const $AddProductItemsResult = {
    title: 'AddProductItemsResult',
    type: 'object',
    properties: {
        ItemIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddProductItemsResult'
} as const;

export const $AddRestrictionParameters = {
    title: 'AddRestrictionParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Restrictions', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) restrictions will be added in.',
            format: 'uuid'
        },
        Restrictions: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RestrictionData'
            },
            description: 'Parameters of restrictions.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddRestrictionParameters'
} as const;

export const $AddTaskResult = {
    title: 'AddTaskResult',
    type: 'object',
    properties: {
        TaskId: {
            type: 'string',
            description: 'Unique identifier of added task.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddTaskResult'
} as const;

export const $AddedMessage = {
    title: 'AddedMessage',
    type: 'object',
    properties: {
        Identifier: {
            type: 'string',
            nullable: true
        },
        Message: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Message'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddedMessage'
} as const;

export const $AddedMessageResult = {
    title: 'AddedMessageResult',
    required: ['Messages'],
    type: 'object',
    properties: {
        Messages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AddedMessage'
            }
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddedMessageResult'
} as const;

export const $AddedReservation = {
    title: 'Added reservation',
    required: ['Reservation'],
    type: 'object',
    properties: {
        Identifier: {
            type: 'string',
            description: 'Identifier of the reservation within the transaction.',
            nullable: true
        },
        Reservation: {
            title: 'Reservation (ver 2017-04-12)',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationOld'
                }
            ],
            description: 'The added reservation.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddedReservation'
} as const;

export const $AddedRestriction = {
    title: 'Added restriction',
    type: 'object',
    properties: {
        Identifier: {
            type: 'string',
            description: 'Identifier of the restriction within the transaction.',
            nullable: true
        },
        Restriction: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Restriction'
                }
            ],
            description: 'The added restriction.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddedRestriction'
} as const;

export const $AdditionalServiceData = {
    title: 'Additional service data',
    required: ['Promotions'],
    type: 'object',
    properties: {
        Promotions: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Promotions'
                }
            ],
            description: 'Promotions of the service.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AdditionalServiceData'
} as const;

export const $Address = {
    title: 'Address',
    type: 'object',
    properties: {
        Line1: {
            type: 'string',
            nullable: true
        },
        Line2: {
            type: 'string',
            nullable: true
        },
        City: {
            type: 'string',
            nullable: true
        },
        PostalCode: {
            type: 'string',
            nullable: true
        },
        SubdivisionCode: {
            type: 'string',
            nullable: true
        },
        CountryCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Address'
} as const;

export const $AddressAddParameters = {
    title: 'Account address parameters',
    required: ['AccountId'],
    type: 'object',
    properties: {
        AccountId: {
            type: 'string',
            description: 'Unique identifier of a Company or a Customer within the enterprise.',
            format: 'uuid'
        },
        Line1: {
            maxLength: 255,
            type: 'string',
            description: 'First line of the address.',
            nullable: true
        },
        Line2: {
            maxLength: 255,
            type: 'string',
            description: 'Second line of the address.',
            nullable: true
        },
        City: {
            maxLength: 255,
            type: 'string',
            description: 'The city.',
            nullable: true
        },
        PostalCode: {
            maxLength: 255,
            type: 'string',
            description: 'Postal code.',
            format: 'postal-code',
            nullable: true
        },
        CountryCode: {
            type: 'string',
            description: 'ISO 3166-1 alpha-2 code of the Country.',
            nullable: true
        },
        CountrySubdivisionCode: {
            type: 'string',
            description: 'ISO 3166-2 code of the administrative division, e.g. `DE-BW`.',
            nullable: true
        },
        Latitude: {
            maximum: 90,
            minimum: -90,
            type: 'number',
            description: 'The latitude in range of -90 to 90.',
            format: 'double',
            nullable: true
        },
        Longitude: {
            maximum: 180,
            minimum: -180,
            type: 'number',
            description: 'The longitude in range of -180 to 180.',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddressAddParameters'
} as const;

export const $AddressDeleteParameters = {
    title: 'AddressDeleteParameters',
    required: ['AccessToken', 'AddressIds', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AddressIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Addresses](https://mews-systems.gitbook.io/connector-api/operations/#account-address) within the enterprise to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddressDeleteParameters'
} as const;

export const $AddressFilterParameters = {
    title: 'AddressFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Chain`. If not specified, the operation returns data for all chains within scope of the Access Token.',
            nullable: true
        },
        AccountIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) or [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) within the enterprise. Required if no other filter is provided.',
            nullable: true
        },
        AddressIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Addresses](https://mews-systems.gitbook.io/connector-api/operations/#account-address) within the enterprise. Use this property if you want to fetch specific addresses. Required if no other filter is provided.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval of Address last update date and time. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddressFilterParameters'
} as const;

export const $AddressParameters = {
    title: 'Address parameters',
    type: 'object',
    properties: {
        Line1: {
            type: 'string',
            description: 'First line of the address.',
            nullable: true
        },
        Line2: {
            type: 'string',
            description: 'Second line of the address.',
            nullable: true
        },
        City: {
            type: 'string',
            description: 'The city.',
            nullable: true
        },
        PostalCode: {
            type: 'string',
            description: 'Postal code.',
            format: 'postal-code',
            nullable: true
        },
        CountryCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the Country.',
            nullable: true
        },
        CountrySubdivisionCode: {
            type: 'string',
            description: 'ISO 3166-2 code of the administrative division, e.g. DE-BW',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'New address details.',
    'x-schema-id': 'AddressParameters'
} as const;

export const $AddressResult = {
    title: 'AddressResult',
    required: ['Addresses'],
    type: 'object',
    properties: {
        Addresses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountAddress'
            },
            description: 'The collection of added or modified Account addresses, containing address and account information.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddressResult'
} as const;

export const $AddressResultPage = {
    title: 'AddressResultPage',
    required: ['Addresses'],
    type: 'object',
    properties: {
        Addresses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountAddress'
            },
            description: 'The collection of Account addresses, containing address and account information.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest address item returned. This can be used in Limitation in a subsequent request to fetch the next batch of older Account address.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddressResultPage'
} as const;

export const $AddressUpdateParameters = {
    title: 'Account address update parameters',
    required: ['AddressId'],
    type: 'object',
    properties: {
        AddressId: {
            type: 'string',
            description: 'Unique identifier of the address.',
            format: 'uuid'
        },
        Line1: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'First line of the address.',
            nullable: true
        },
        Line2: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Second line of the address.',
            nullable: true
        },
        City: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The city.',
            nullable: true
        },
        PostalCode: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Postal code.',
            format: 'postal-code',
            nullable: true
        },
        CountryCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'ISO 3166-1 alpha-2 code of the Country.',
            nullable: true
        },
        CountrySubdivisionCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'ISO 3166-2 code of the administrative division, e.g. `DE-BW`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AddressUpdateParameters'
} as const;

export const $AgeCategory = {
    title: 'Age category',
    required: ['Classification', 'CreatedUtc', 'Id', 'IsActive', 'Names', 'ServiceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of age category.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the age category belongs to.',
            format: 'uuid'
        },
        MinimalAge: {
            type: 'integer',
            description: 'Minimal age for the age category.',
            format: 'int32',
            nullable: true
        },
        MaximalAge: {
            type: 'integer',
            description: 'Maximal age for the age category.',
            format: 'int32',
            nullable: true
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name of the age category.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the short name of the age category.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the age category in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the age category in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Classification: {
            title: 'Age category classification',
            allOf: [
                {
                    '$ref': '#/components/schemas/AgeCategoryClassificationEnum'
                }
            ],
            description: `The classification of the age category.

Adult

Child`,
            'x-enumNames': ['Adult', 'Child'],
            'x-enumDescriptions': ['', '']
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the age category is still active.'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the age category from external system.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AgeCategory'
} as const;

export const $AgeCategoryAdjustment = {
    title: 'Age category adjustment',
    required: ['AbsoluteValue', 'AgeCategoryId', 'Type'],
    type: 'object',
    properties: {
        AgeCategoryId: {
            type: 'string',
            description: 'Unique identifier of the age category.',
            format: 'uuid'
        },
        AbsoluteValue: {
            type: 'number',
            description: 'Absolute value of the adjustment (e.g. `50` represents 50 EUR in case the rate currency is `EUR`).',
            format: 'double'
        },
        Type: {
            title: 'Age category adjustment type',
            allOf: [
                {
                    '$ref': '#/components/schemas/AgeCategoryAdjustmentTypeEnum'
                }
            ],
            description: `Age category adjustment type

ExtraOccupancyAdjustment

NegativeOccupancyAdjustment

StandardOccupancyAdjustment`,
            'x-enumNames': ['ExtraOccupancyAdjustment', 'NegativeOccupancyAdjustment', 'StandardOccupancyAdjustment'],
            'x-enumDescriptions': ['', '', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AgeCategoryAdjustment'
} as const;

export const $AgeCategoryAdjustmentTypeEnum = {
    title: 'Age category adjustment type',
    enum: ['ExtraOccupancyAdjustment', 'NegativeOccupancyAdjustment', 'StandardOccupancyAdjustment'],
    type: 'string',
    description: `

ExtraOccupancyAdjustment

NegativeOccupancyAdjustment

StandardOccupancyAdjustment`,
    'x-enumNames': ['ExtraOccupancyAdjustment', 'NegativeOccupancyAdjustment', 'StandardOccupancyAdjustment'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $AgeCategoryClassificationEnum = {
    title: 'Age category classification',
    enum: ['Adult', 'Child'],
    type: 'string',
    description: `

Adult

Child`,
    'x-enumNames': ['Adult', 'Child'],
    'x-enumDescriptions': ['', '']
} as const;

export const $AgeCategoryParameters = {
    title: 'AgeCategoryParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        AgeCategoryIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Age categories](https://mews-systems.gitbook.io/connector-api/operations/#age-category).',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Services` associated with the age categories. If not provided, defaults to all bookable services.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the age category was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AgeCategoryParameters'
} as const;

export const $AgeCategoryResult = {
    title: 'AgeCategoryResult',
    required: ['AgeCategories'],
    type: 'object',
    properties: {
        AgeCategories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AgeCategory'
            },
            description: 'Age category of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AgeCategoryResult'
} as const;

export const $AllowanceProfitTypeEnum = {
    title: 'Allowance profit type',
    enum: ['AllowanceBreakage', 'AllowanceContraBreakage', 'AllowanceLoss', 'AllowanceContraLoss'],
    type: 'string',
    description: `

AllowanceBreakage (Profit of the allowance product.)

AllowanceContraBreakage (Accounting balance for profit of the allowance product.)

AllowanceLoss (Loss of the allowance product.)

AllowanceContraLoss (Accounting balance for loss of the allowance product.)`,
    'x-enumNames': ['AllowanceBreakage', 'AllowanceContraBreakage', 'AllowanceLoss', 'AllowanceContraLoss'],
    'x-enumDescriptions': ['Profit of the allowance product.', 'Accounting balance for profit of the allowance product.', 'Loss of the allowance product.', 'Accounting balance for loss of the allowance product.']
} as const;

export const $AlternativePaymentMethodDeprecated = {
    title: 'Alternative payment methods',
    enum: ['Ideal', 'ApplePay', 'GooglePay'],
    type: 'string'
} as const;

export const $AlternativePaymentMethodEnum = {
    title: 'Alternative payment method data discriminator',
    enum: ['Ideal', 'ApplePay', 'GooglePay', 'SepaDirectDebit'],
    type: 'string',
    description: `

Ideal (iDEAL data.)

ApplePay (No additional data.)

GooglePay (No additional data.)

SepaDirectDebit (SEPA Direct Debit data.)`,
    'x-enumNames': ['Ideal', 'ApplePay', 'GooglePay', 'SepaDirectDebit'],
    'x-enumDescriptions': ['iDEAL data.', 'No additional data.', 'No additional data.', 'SEPA Direct Debit data.']
} as const;

export const $AlternativePaymentParameters = {
    title: 'AlternativePaymentParameters',
    required: ['AccessToken', 'Amount', 'Client', 'ClientToken', 'CustomerId', 'Data'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            format: 'uuid'
        },
        Amount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.'
        },
        Method: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AlternativePaymentMethodDeprecated'
                }
            ],
            description: 'Payment method to use for the alternative payment.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `Data` instead.'
        },
        RedirectUrl: {
            type: 'string',
            description: 'URL where the customer will be redirected after completing their payment.',
            format: 'uri',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Pass redirect URL to relevant method in `Data` instead.'
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation the payment belongs to.',
            format: 'uuid',
            nullable: true
        },
        Data: {
            title: 'Alternative payment method data',
            allOf: [
                {
                    '$ref': '#/components/schemas/AlternativePaymentsData'
                }
            ],
            description: 'Data specific to particular alternative payment method.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AlternativePaymentParameters'
} as const;

export const $AlternativePaymentResult = {
    title: 'AlternativePaymentResult',
    required: ['PaymentId'],
    type: 'object',
    properties: {
        PaymentId: {
            type: 'string',
            description: 'Unique identifier of the created payment.',
            format: 'uuid'
        },
        NextAction: {
            title: 'Alternative payment next action',
            allOf: [
                {
                    '$ref': '#/components/schemas/NextAction'
                }
            ],
            description: 'Next action to take in order to complete the payment.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AlternativePaymentResult'
} as const;

export const $AlternativePaymentsData = {
    title: 'Alternative payment method data',
    required: ['Discriminator'],
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Alternative payment method data discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/AlternativePaymentMethodEnum'
                }
            ],
            description: `Type of alternative payment method (e.g. \`Ideal\`).

Ideal (iDEAL data.)

ApplePay (No additional data.)

GooglePay (No additional data.)

SepaDirectDebit (SEPA Direct Debit data.)`,
            'x-enumNames': ['Ideal', 'ApplePay', 'GooglePay', 'SepaDirectDebit'],
            'x-enumDescriptions': ['iDEAL data.', 'No additional data.', 'No additional data.', 'SEPA Direct Debit data.']
        },
        SepaDirectDebit: {
            title: 'SEPA Direct Debit data',
            allOf: [
                {
                    '$ref': '#/components/schemas/SepaDirectDebitData'
                }
            ],
            description: 'SEPA Direct Debit payment method data. Required when `Discriminator` is `SepaDirectDebit`.',
            nullable: true
        },
        Ideal: {
            title: 'iDEAL data',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdealData'
                }
            ],
            description: 'iDEAL payment method data. Required when `Discriminator` is `Ideal`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AlternativePaymentsData'
} as const;

export const $Amount = {
    title: 'Amount',
    required: ['Breakdown', 'Currency', 'GrossValue', 'NetValue', 'TaxValues'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).',
            format: 'currency'
        },
        NetValue: {
            type: 'number',
            description: 'Net value without taxes.',
            format: 'double'
        },
        GrossValue: {
            type: 'number',
            description: 'Gross value including all taxes.',
            format: 'double'
        },
        TaxValues: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxValue'
            },
            description: 'The tax values applied.'
        },
        Breakdown: {
            title: 'Tax breakdown',
            allOf: [
                {
                    '$ref': '#/components/schemas/TaxBreakdown'
                }
            ],
            description: 'Information about individual tax amounts.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'Amount'
} as const;

export const $AmountParameters = {
    title: 'Amount parameters',
    required: ['Currency', 'TaxCodes'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            format: 'currency'
        },
        TaxCodes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        NetValue: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        GrossValue: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Price of the product that overrides the price defined in Mews.',
    'x-schema-id': 'AmountParameters'
} as const;

export const $AssignedRateIds = {
    title: 'Assigned rate ids',
    type: 'object',
    properties: {
        Value: {
            maxItems: 10,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of Rates (or `null` should it not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Has same structure as [Array of strings update value](https://mews-systems.gitbook.io/connector-api/operations/_objects#array-of-strings-update-value).',
    'x-schema-id': 'AssignedRateIds'
} as const;

export const $AssociatedAccountIdsUpdate = {
    title: 'Associated account IDs update parameters',
    type: 'object',
    properties: {
        Value: {
            maxItems: 1,
            minItems: 0,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Customer` or `Company` that are associated to the bill. Set to `null` to remove all associated accounts. Note that only single associated account is currently supported.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Has same structure as [Array of strings update value](https://mews-systems.gitbook.io/connector-api/operations/_objects#array-of-strings-update-value).',
    'x-schema-id': 'AssociatedAccountIdsUpdate'
} as const;

export const $AvailabilityAdjustment = {
    title: 'Availability adjustment',
    required: ['ActivityState', 'FirstTimeUnitStartUtc', 'Id', 'IsActive', 'LastTimeUnitStartUtc', 'ResourceCategoryId', 'UnitCount', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the [Availability adjustment](https://mews-systems.gitbook.io/connector-api/operations/#availability-adjustment).',
            format: 'uuid'
        },
        AvailabilityBlockId: {
            type: 'string',
            description: 'Unique identifier of the [Availability block](https://mews-systems.gitbook.io/connector-api/operations/availabilityblocks/#availability-block) which the availability adjustment belongs to.',
            format: 'uuid',
            nullable: true
        },
        ResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource-category) whose availability is updated.',
            format: 'uuid'
        },
        StartUtc: {
            type: 'string',
            description: 'Start of the interval in UTC timezone in ISO 8601 format.',
            nullable: true,
            deprecated: true
        },
        EndUtc: {
            type: 'string',
            description: 'End of the interval in UTC timezone in ISO 8601 format.',
            nullable: true,
            deprecated: true
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/operations/services/#time-unit), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        UnitCount: {
            type: 'integer',
            description: 'Adjustment value applied on the interval.',
            format: 'int32'
        },
        ActivityState: {
            title: 'Activity State',
            allOf: [
                {
                    '$ref': '#/components/schemas/ActivityStateEnum'
                }
            ],
            description: `Shows whether the availability adjustment is active or deleted.

Deleted

Active`,
            deprecated: true,
            'x-enumNames': ['Deleted', 'Active'],
            'x-enumDescriptions': ['', ''],
            'x-deprecatedMessage': 'Use `IsActive` instead.'
        },
        ReleaseOverrideUtc: {
            type: 'string',
            description: 'Exact moment the availability adjustment is released if set; overrides the release strategy of the associated availability block.',
            format: 'date-time',
            nullable: true
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the adjustment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the availability adjustment is still active.'
        },
        PaxCounts: {
            maxItems: 5,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaxCount'
            },
            description: 'Collection of predicted occupancy of availability adjustments. Relates to how many adjustments are assigned to each count of guests.',
            nullable: true
        },
        FirstTimeUnitReleaseUtc: {
            type: 'string',
            description: 'Exact moment the first time unit of the availability adjustment is released based on `ReleaseOverrideUtc` or the `ReleaseStrategy` of the associated availability block, or the `OperationalEditableHistoryInterval` of the associated enterprise if not set, or `null` if `AvailabilityBlockId` is `null`.',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityAdjustment'
} as const;

export const $AvailabilityAdjustmentParameters = {
    title: 'AvailabilityAdjustmentParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        AvailabilityAdjustmentIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Availability adjustments](https://mews-systems.gitbook.io/connector-api/operations/#availability-adjustment).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the availability adjustments were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityState'
            },
            description: 'Whether to return only active, only deleted, or both types of record. If not specified, only active records will be returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityAdjustmentParameters'
} as const;

export const $AvailabilityAdjustmentResult = {
    title: 'AvailabilityAdjustmentResult',
    required: ['AvailabilityAdjustments'],
    type: 'object',
    properties: {
        AvailabilityAdjustments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AvailabilityAdjustment'
            },
            description: 'Availability adjustments.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityAdjustmentResult'
} as const;

export const $AvailabilityBlock = {
    title: 'Availability block',
    required: ['AvailabilityBlockNumber', 'CreatedUtc', 'FirstTimeUnitStartUtc', 'IsActive', 'LastTimeUnitStartUtc', 'PickupDistribution', 'ReleaseStrategy', 'State', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the availability block.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises#enterprise).',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service` the block is assigned to.',
            format: 'uuid'
        },
        RateId: {
            type: 'string',
            description: 'Unique identifier of the `Rate` the block is assigned to.',
            format: 'uuid'
        },
        VoucherId: {
            type: 'string',
            description: 'Unique identifier of the `Voucher` used to access specified private `Rate`.',
            format: 'uuid',
            nullable: true
        },
        BookerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer` on whose behalf the block was made.',
            format: 'uuid',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of the `Company` linked to the block.',
            format: 'uuid',
            nullable: true
        },
        TravelAgencyId: {
            type: 'string',
            description: 'Unique identifier of `Company`with `Travel agency contract` the Availability Block is related to.',
            format: 'uuid',
            nullable: true
        },
        Budget: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'The tentative budget for the total price of reservations in the block.',
            nullable: true
        },
        State: {
            title: 'Availability block state',
            allOf: [
                {
                    '$ref': '#/components/schemas/AvailabilityBlockStateEnum'
                }
            ],
            description: `State of the availability block.

Confirmed (The block deducts availability and can have reservations assigned.)

Optional (The block deducts availability and cannot have reservations assigned.)

Inquired (The block does not deduct availability and cannot have reservations assigned (waitlist).)

Canceled (The block does not deduct availability and cannot have reservations assigned (waitlist).)`,
            'x-enumNames': ['Confirmed', 'Optional', 'Inquired', 'Canceled'],
            'x-enumDescriptions': ['The block deducts availability and can have reservations assigned.', 'The block deducts availability and cannot have reservations assigned.', 'The block does not deduct availability and cannot have reservations assigned (waitlist).', 'The block does not deduct availability and cannot have reservations assigned (waitlist).']
        },
        ReservationPurpose: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationPurposeEnum'
                }
            ],
            description: `The purpose of the block.

Leisure

Business

Student`,
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the block in UTC timezone in ISO 8601 format.'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the block in UTC timezone in ISO 8601 format.'
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format. See [Time units](https://mews-systems.gitbook.io/connector-api/concepts/time-units).'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'End of the time interval, expressed as the timestamp for the start of the last time unit, in UTC timezone ISO 8601 format. See [Time units](https://mews-systems.gitbook.io/connector-api/concepts/time-units).'
        },
        ReleasedUtc: {
            type: 'string',
            description: 'The moment when the block and its availability is released in UTC timezone in ISO 8601 format. Mutually exclusive with `RollingReleaseOffset`; the block will not be automatically released if neither `ReleasedUtc` nor `RollingReleaseOffsetUtc` is specified.',
            nullable: true
        },
        RollingReleaseOffset: {
            type: 'string',
            description: 'Exact offset from the start of availability adjustments to the moment the individual days in the adjustment should be released, in ISO 8601 duration format. Mutually exclusive with `ReleasedUtc`; the block will not be automatically released if neither `ReleasedUtc` nor `RollingReleaseOffsetUtc` is specified.',
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the block from external system.',
            nullable: true
        },
        Name: {
            type: 'string',
            description: 'The name of the block in Mews.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes of the block.',
            nullable: true
        },
        PickupDistribution: {
            title: 'Pickup distribution',
            allOf: [
                {
                    '$ref': '#/components/schemas/PickupDistributionEnum'
                }
            ],
            description: `Whether assigning spaces to reservations within an availability block is done as a single group or divided into individual groups.

AllInOneGroup (All created reservations in the block are added to the same reservation group.)

IndividualGroups (Reservations can be picked up in multiple groups, with up to 750 reservations per group.)`,
            'x-enumNames': ['AllInOneGroup', 'IndividualGroups'],
            'x-enumDescriptions': ['All created reservations in the block are added to the same reservation group.', 'Reservations can be picked up in multiple groups, with up to 750 reservations per group.']
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the `Availability Block` is still active.'
        },
        QuoteId: {
            type: 'string',
            description: 'Unique identifier of the Mews Events quote associated with the availability block.',
            format: 'uuid',
            nullable: true
        },
        AvailabilityBlockNumber: {
            minLength: 1,
            type: 'string',
            description: 'Unique number for a specific availability block within the Mews system.'
        },
        ReleaseStrategy: {
            title: 'Release strategy',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReleaseStrategyEnum'
                }
            ],
            description: `The strategy for automatic release of the availability block.

FixedRelease (The availability block is released at a fixed time.)

RollingRelease (Each availability adjustment is released at a fixed offset from its start.)

None (The availability block is not automatically released.)`,
            'x-enumNames': ['FixedRelease', 'RollingRelease', 'None'],
            'x-enumDescriptions': ['The availability block is released at a fixed time.', 'Each availability adjustment is released at a fixed offset from its start.', 'The availability block is not automatically released.']
        },
        PurchaseOrderNumber: {
            type: 'string',
            description: 'Unique number of the purchase order. This number is propagated to any newly picked up `Reservation` within the block.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlock'
} as const;

export const $AvailabilityBlockAddParameters = {
    title: 'Availability block parameters',
    required: ['FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc', 'RateId', 'ServiceId', 'State'],
    type: 'object',
    properties: {
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) to assign block to.',
            format: 'uuid'
        },
        RateId: {
            type: 'string',
            description: 'Unique identifier of the [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates#rate) to assign block to.',
            format: 'uuid'
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format.'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'End of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format.'
        },
        ReleasedUtc: {
            type: 'string',
            description: 'The moment when the block and its availability is released, in UTC timezone ISO 8601 format. Takes precedence over `RollingReleaseOffset`.',
            format: 'date-time',
            nullable: true
        },
        RollingReleaseOffset: {
            type: 'string',
            description: 'Exact offset from the start of availability adjustments to the moment the availability adjustment should be released, in ISO 8601 duration format. Ignored if `ReleasedUtc` is specified.',
            nullable: true
        },
        Name: {
            type: 'string',
            description: 'The name of the block.',
            nullable: true
        },
        VoucherCode: {
            type: 'string',
            description: 'Voucher code providing access to specified private [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates#rate).',
            nullable: true
        },
        BookerId: {
            type: 'string',
            description: 'Unique identifier of the Booker as a creator of an availability block.',
            format: 'uuid',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies#company).',
            format: 'uuid',
            nullable: true
        },
        TravelAgencyId: {
            type: 'string',
            description: 'Unique identifier of travel agency (`Company` with a `TravelAgencyContract`).',
            format: 'uuid',
            nullable: true
        },
        Budget: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'The tentative budget for the total price of reservations.',
            nullable: true
        },
        ReservationPurpose: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationPurposeEnum'
                }
            ],
            description: `The purpose of the block.

Leisure

Business

Student`,
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the block from external system.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes of the block.',
            nullable: true
        },
        State: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AvailabilityBlockStateEnum'
                }
            ],
            description: `State of the availability block.

Confirmed (The block deducts availability and can have reservations assigned.)

Optional (The block deducts availability and cannot have reservations assigned.)

Inquired (The block does not deduct availability and cannot have reservations assigned (waitlist).)

Canceled (The block does not deduct availability and cannot have reservations assigned (waitlist).)`
        },
        QuoteId: {
            type: 'string',
            description: 'Unique identifier of the Mews Events quote associated with the availability block.',
            format: 'uuid',
            nullable: true
        },
        PurchaseOrderNumber: {
            type: 'string',
            description: 'Unique number of the purchase order. This number is propagated to any newly picked up `Reservation` within the block.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlockAddParameters'
} as const;

export const $AvailabilityBlockAddResult = {
    title: 'AvailabilityBlockAddResult',
    required: ['AvailabilityBlocks'],
    type: 'object',
    properties: {
        AvailabilityBlocks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AvailabilityBlock'
            },
            description: 'Availability blocks.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlockAddResult'
} as const;

export const $AvailabilityBlockAssignment = {
    title: 'AvailabilityBlockAssignment',
    type: 'object',
    properties: {
        RateId: {
            type: 'string',
            format: 'uuid'
        },
        AvailabilityBlockId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlockAssignment'
} as const;

export const $AvailabilityBlockDeleteParameters = {
    title: 'AvailabilityBlockDeleteParameters',
    required: ['AccessToken', 'AvailabilityBlockIds', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AvailabilityBlockIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the Availability block to delete.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlockDeleteParameters'
} as const;

export const $AvailabilityBlockExtent = {
    title: 'Availability block extent',
    type: 'object',
    properties: {
        AvailabilityBlocks: {
            type: 'boolean',
            description: 'Whether the response should contain the general availability blocks.',
            nullable: true
        },
        Adjustments: {
            type: 'boolean',
            description: 'Whether the response should contain individual availability adjustments related to availability blocks.',
            nullable: true
        },
        ServiceOrders: {
            type: 'boolean',
            description: 'Whether the response should contain reservations related to availability blocks.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all reservations (ver 2023-06-06)](https://mews-systems.gitbook.io/connector-api/operations/reservations#get-all-reservations-ver-2023-06-06) instead.'
        },
        Rates: {
            type: 'boolean',
            description: 'Whether the response should contain rates related to availability blocks.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all rates](https://mews-systems.gitbook.io/connector-api/operations/rates#get-all-rates) instead.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'AvailabilityBlockExtent'
} as const;

export const $AvailabilityBlockParameters = {
    title: 'AvailabilityBlockParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Extent', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Extent: {
            title: 'Availability block extent',
            allOf: [
                {
                    '$ref': '#/components/schemas/AvailabilityBlockExtent'
                }
            ],
            description: 'Extent of data to be returned, e.g. it is possible to specify that related service orders (for example reservations) are returned.'
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Services` to which `Availability blocks` are assigned.',
            nullable: true
        },
        AvailabilityBlockIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested `Availability blocks`.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the availability blocks were created.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Availability blocks` were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        CollidingUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Availability blocks` are active.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ReleasedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Availability blocks`are released.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ExternalIdentifiers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Identifiers of `Availability blocks` from external systems.',
            nullable: true
        },
        States: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AvailabilityBlockStateEnum'
            },
            description: 'States the availability blocks should be in.',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlockParameters'
} as const;

export const $AvailabilityBlockResult = {
    title: 'AvailabilityBlockResult',
    type: 'object',
    properties: {
        AvailabilityBlocks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AvailabilityBlock'
            },
            description: 'Availability blocks.',
            nullable: true
        },
        ServiceOrders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationOld'
            },
            description: 'Service orders (for example reservations) linked to availability blocks.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all reservations (ver 2023-06-06)](https://mews-systems.gitbook.io/connector-api/operations/reservations#get-all-reservations-ver-2023-06-06) instead.'
        },
        Adjustments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AvailabilityAdjustment'
            },
            description: 'Availability adjustments of availability blocks.',
            nullable: true
        },
        Rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateForExtent'
            },
            description: `\`Rates\` assigned to the block.`,
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all rates](https://mews-systems.gitbook.io/connector-api/operations/rates#get-all-rates) instead.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last returned availability block. This can be used in Limitation in a subsequent request to fetch the next batch of availability block.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlockResult'
} as const;

export const $AvailabilityBlockStateEnum = {
    title: 'Availability block state',
    enum: ['Confirmed', 'Optional', 'Inquired', 'Canceled'],
    type: 'string',
    description: `

Confirmed (The block deducts availability and can have reservations assigned.)

Optional (The block deducts availability and cannot have reservations assigned.)

Inquired (The block does not deduct availability and cannot have reservations assigned (waitlist).)

Canceled (The block does not deduct availability and cannot have reservations assigned (waitlist).)`,
    'x-enumNames': ['Confirmed', 'Optional', 'Inquired', 'Canceled'],
    'x-enumDescriptions': ['The block deducts availability and can have reservations assigned.', 'The block deducts availability and cannot have reservations assigned.', 'The block does not deduct availability and cannot have reservations assigned (waitlist).', 'The block does not deduct availability and cannot have reservations assigned (waitlist).']
} as const;

export const $AvailabilityBlockUpdateParameters = {
    title: 'Availability block update parameters',
    type: 'object',
    properties: {
        AvailabilityBlockId: {
            type: 'string',
            description: 'Unique identifier of the [Availability block](https://mews-systems.gitbook.io/connector-api/operations/availabilityblocks#availability-block).',
            format: 'uuid'
        },
        Name: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The name of the block (or `null` if the name should not be updated).',
            nullable: true
        },
        FirstTimeUnitStartUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format (or `null` if the start time should not be updated).',
            nullable: true
        },
        LastTimeUnitStartUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'End of the time interval, expressed as the timestamp for the start of the last time unit, in UTC timezone ISO 8601 format (or `null` if the end time should not be updated).',
            nullable: true
        },
        ExternalIdentifier: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Identifier of the block from external system (or `null` if the identifier should not be updated).',
            nullable: true
        },
        State: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'State of the availability block (or `null` if not updated).',
            nullable: true
        },
        ReservationPurpose: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The purpose of the block (or `null` if not updated).',
            nullable: true
        },
        CompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies#company) (or `null` if not updated).',
            nullable: true
        },
        TravelAgencyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the travel agency (i.e. `Company`; or `null` if not updated).',
            nullable: true
        },
        BookerId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the Booker as a creator of an availability block (or `null` if not updated).',
            nullable: true
        },
        Notes: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Additional notes of the block (or `null` if not updated).',
            nullable: true
        },
        Budget: {
            title: 'Currency value (ver 2018-06-07) update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/UpdateValueCurrencyValueOld'
                }
            ],
            description: 'The tentative budget for the total price of reservations (or `null` if not updated).',
            nullable: true
        },
        CancellationReason: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Cancellation reason of the availability block (or `null` if not updated).',
            nullable: true
        },
        CancellationReasonDetail: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Cancellation reason detail of the availability block (or `null` if not updated).',
            nullable: true
        },
        RollingReleaseOffset: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Exact offset from the start of availability adjustments to the moment the availability adjustment should be released, in ISO 8601 duration format. Required if `ReleaseStrategy` is set to `RollingRelease`, ignored otherwise.',
            nullable: true
        },
        ReleasedUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The moment when the block and its availability is released, in UTC timezone ISO 8601 format. Required if `ReleaseStrategy` is set to `FixedRelease`, or used when `ReleaseStrategy` update is unspecified.',
            format: 'date-time',
            nullable: true
        },
        ReleaseStrategy: {
            title: 'Release strategy update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReleaseStrategyUpdateValue'
                }
            ],
            description: 'The strategy for automatic release of the availability block (or `null` if not updated).',
            nullable: true
        },
        QuoteId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the Mews Events quote associated with the availability block (or `null` if not updated).',
            nullable: true
        },
        PurchaseOrderNumber: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Unique number of the purchase order. This number is propagated to any newly picked up `Reservation` within the block.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'AvailabilityBlockUpdateParameters'
} as const;

export const $BaseRatePricingData = {
    title: 'Base rate pricing',
    required: ['Amount'],
    type: 'object',
    properties: {
        Amount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BaseRatePricingData'
} as const;

export const $BaseRatePricingParameters = {
    title: 'Base rate pricing parameters',
    required: ['Amount'],
    type: 'object',
    properties: {
        Amount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.'
        },
        NegativeOccupancyAdjustment: {
            type: 'number',
            description: 'This is the amount added to the price when occupancy of the space is less than the Space Category Capacity. To provide a discount price for under-occupancy, simply use a negative value.',
            format: 'double'
        },
        ExtraOccupancyAdjustment: {
            type: 'number',
            description: 'This is the amount added to the price when the Space Category Capacity is exceeded.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BaseRatePricingParameters'
} as const;

export const $BaseRatePricingWithoutAdjustmentsParameters = {
    title: 'Base rate pricing parameters',
    required: ['Amount'],
    type: 'object',
    properties: {
        Amount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BaseRatePricingWithoutAdjustmentsParameters'
} as const;

export const $Bill = {
    title: 'Bill',
    required: ['AccountId', 'AccountType', 'AssociatedAccountIds', 'CorrectionState', 'CreatedUtc', 'EnterpriseId', 'Id', 'OrderItems', 'PaymentItems', 'Payments', 'Revenue', 'State', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the bill.',
            format: 'uuid'
        },
        Name: {
            type: 'string',
            description: 'Name of the bill.',
            nullable: true
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the `Enterprise`.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (`Customer` or `Company`) the bill is issued to.',
            format: 'uuid'
        },
        AccountType: {
            title: 'Account type',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountTypeEnum'
                }
            ],
            description: `A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), i.e. \`Customer\` or \`Company\`.

Company

Customer`,
            'x-enumNames': ['Company', 'Customer'],
            'x-enumDescriptions': ['', '']
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer` the bill is issued to.',
            format: 'uuid',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountId` instead.'
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of the `Company` specified in `CompanyDetails` or the `Company` the bill is issued to.',
            format: 'uuid',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AssociatedAccountIds` instead.'
        },
        AssociatedAccountIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Customers` or `Companies` that are associated to the bill.',
            nullable: true
        },
        CounterId: {
            type: 'string',
            description: 'Unique identifier of the bill `Counter`.',
            format: 'uuid',
            nullable: true
        },
        State: {
            '$ref': '#/components/schemas/BillState'
        },
        Type: {
            '$ref': '#/components/schemas/BillType'
        },
        Number: {
            type: 'string',
            description: 'Number of the bill.',
            nullable: true
        },
        VariableSymbol: {
            type: 'string',
            description: 'Variable symbol of the bill.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the bill creation in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        IssuedUtc: {
            type: 'string',
            description: 'Date and time of the bill issuance in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        TaxedUtc: {
            type: 'string',
            description: 'Taxation date of the bill in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        PaidUtc: {
            type: 'string',
            description: 'Date when the bill was paid in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        DueUtc: {
            type: 'string',
            description: 'Bill due date and time in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        LastReminderDateUtc: {
            type: 'string',
            description: 'Date and time when an email reminder to pay an invoice was last sent, in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time when the bill was last updated, in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        PurchaseOrderNumber: {
            type: 'string',
            description: 'Unique number of the purchase order from the buyer.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        Options: {
            title: 'Bill options',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillOptions'
                }
            ],
            description: 'Options of the bill.',
            nullable: true
        },
        Revenue: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingItem'
            },
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `orderItems/getAll` with `BillId` instead.'
        },
        Payments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingItem'
            },
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `payments/getAll` with `BillId` instead.'
        },
        OrderItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItemOld'
            },
            description: 'The order items (consumed items such as nights or products) on the bill.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `orderItems/getAll` with `BillId` instead.'
        },
        PaymentItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentItemOld'
            },
            description: 'The payment items (such as cash, credit card payments or invoices) on the bill.',
            nullable: true,
            deprecated: true
        },
        AssigneeData: {
            title: 'Bill assignee data',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/BillAssigneeDataDiscriminator'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BillCompanyData'
                        },
                        {
                            '$ref': '#/components/schemas/BillCustomerData'
                        }
                    ]
                }
            },
            deprecated: true,
            'x-coproduct': true,
            'x-schema-id': 'BillAssigneeDataCoproductOfBillAssigneeDataDiscriminator',
            'x-deprecatedMessage': 'Use `OwnerData` instead.'
        },
        OwnerData: {
            title: 'Bill owner data',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/BillAssigneeDataDiscriminator'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BillCompanyData'
                        },
                        {
                            '$ref': '#/components/schemas/BillCustomerData'
                        }
                    ]
                }
            },
            description: 'Additional information about owner of the bill. Can be a [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company). Persisted at the time of closing of the bill.',
            'x-coproduct': true,
            'x-schema-id': 'BillOwnerDataCoproductOfBillAssigneeDataDiscriminator'
        },
        CompanyDetails: {
            title: 'Bill company data',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillCompanyData'
                }
            ],
            description: 'Additional information about the company assigned to the bill. Not the same as the owner. Persisted at the time of closing of the bill.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AssociatedAccountData` instead.'
        },
        AssociatedAccountData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillAccountData'
            },
            description: 'Additional information about the associated account of the bill. Can be a `Customer` or `Company`. Persisted at the time of closing of the bill. Currently only one account can be associated with a bill, but this may be extended in future.',
            nullable: true
        },
        EnterpriseData: {
            title: 'Bill enterprise data',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillEnterpriseData'
                }
            ],
            description: 'Additional information about the enterprise issuing the bill, including bank account details. Persisted at the time of closing of the bill.',
            nullable: true
        },
        CorrectionState: {
            title: 'Bill correction state',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillCorrectionStateEnum'
                }
            ],
            description: `Whether the bill is a regular bill or a corrective bill.

Bill (Regular bill.)

CorrectiveBill (Corrective bill, i.e. the \`CorrectionType\` is either \`Edit\`, \`Cancellation\`, or \`ReceivablePaymentsBalance\`.)`,
            'x-enumNames': ['Bill', 'CorrectiveBill'],
            'x-enumDescriptions': ['Regular bill.', 'Corrective bill, i.e. the `CorrectionType` is either `Edit`, `Cancellation`, or `ReceivablePaymentsBalance`.']
        },
        CorrectionType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BillCorrectionTypeEnum'
                }
            ],
            description: `Type of correction.

Cancellation

Edit

CreditNote

Reinstatement

ReceivablePaymentsBalance`,
            nullable: true
        },
        CorrectedBillId: {
            type: 'string',
            description: 'The ID of the bill that the corrective bill corrects. If the corrected bill was deleted, this field is `null`.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Bill'
} as const;

export const $BillAccountData = {
    title: 'Associated account bill data',
    type: 'object',
    properties: {
        Discriminator: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BillAssigneeDataDiscriminator'
                }
            ],
            description: 'Determines type of value.',
            nullable: true,
            readOnly: true
        },
        BillCustomerData: {
            title: 'Bill customer data',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillCustomerData'
                }
            ],
            description: 'Associated account bill data for customer.',
            nullable: true
        },
        BillCompanyData: {
            title: 'Bill company data',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillCompanyData'
                }
            ],
            description: 'Associated account bill data for company.',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillAccountData'
} as const;

export const $BillAddParameters = {
    title: 'Bill parameters',
    required: ['AccountId'],
    type: 'object',
    properties: {
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (`Customer` or `Company`) the bill is issued to. Company billing may not be enabled for your integration.',
            format: 'uuid'
        },
        AssociatedAccountId: {
            type: 'string',
            description: 'Account that has a possible link with the owner of the bill.',
            format: 'uuid',
            nullable: true
        },
        Name: {
            type: 'string',
            description: 'Name of the newly created bill.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillAddParameters'
} as const;

export const $BillAssigneeDataDiscriminator = {
    title: 'Bill associated account data discriminator',
    enum: ['BillCustomerData', 'BillCompanyData'],
    type: 'string',
    description: ''
} as const;

export const $BillCloseAccountParameters = {
    title: 'Bill close account parameters',
    required: ['Id'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the associated account (`Customer` or `Company`) the bill is associated to.',
            format: 'uuid'
        },
        TaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Tax identifier of the associated account to be put on a bill.',
            nullable: true
        },
        Address: {
            title: 'Address parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AddressParameters'
                }
            ],
            description: 'Address of the associated account to be displayed on bill. Overrides the default one taken from account profile.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillCloseAccountParameters'
} as const;

export const $BillCloseParameters = {
    title: 'BillCloseParameters',
    required: ['AccessToken', 'BillId', 'Client', 'ClientToken', 'Type'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill) to be closed.',
            format: 'uuid'
        },
        Type: {
            '$ref': '#/components/schemas/BillType'
        },
        BillCounterId: {
            type: 'string',
            description: 'Unique identifier of the [Counter](https://mews-systems.gitbook.io/connector-api/operations/counters/#counter) to be used for closing. Default one is used when no value is provided.',
            format: 'uuid',
            nullable: true
        },
        FiscalMachineId: {
            type: 'string',
            description: 'Unique identifier of the [Fiscal Machine](https://mews-systems.gitbook.io/connector-api/operations/devices/#device) to be used for closing. Default one is used when no value is provided.',
            format: 'uuid',
            nullable: true
        },
        Options: {
            title: 'Bill options parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillOptionsParameters'
                }
            ],
            description: 'Options of the bill. If not provided, both DisplayCustomer and DisplayTaxation are set by default.',
            nullable: true
        },
        TaxedDate: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Date of consumption for tax purposes. Can be used only with `Type` of `Invoice`.',
            nullable: true
        },
        DueDate: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Deadline when bill is due to be paid. Can be used only with `Type` of `Invoice`.',
            nullable: true
        },
        VariableSymbol: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Optional unique identifier of requested payment. Can be used only with `Type` of `Invoice`.',
            nullable: true
        },
        TaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Tax identifier of account to be put on a bill.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountTaxIdentifier` or `AssociatedAccountData` instead.'
        },
        AccountTaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Tax identifier of account to be put on a bill.',
            nullable: true
        },
        CompanyTaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Tax identifier of company to be put on a bill.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountTaxIdentifier` or `AssociatedAccountData` instead.'
        },
        PurchaseOrderNumber: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Unique number of the purchase order from the buyer.',
            nullable: true
        },
        Notes: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Notes to be attached to bill.',
            nullable: true
        },
        Address: {
            title: 'Address parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AddressParameters'
                }
            ],
            description: 'Address of the account to be displayed on bill. Overrides the default one taken from account profile.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountAddress` or `AssociatedAccountData` instead.'
        },
        AccountAddress: {
            title: 'Address parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AddressParameters'
                }
            ],
            description: 'Address of the account to be displayed on bill. Overrides the default one taken from account profile.',
            nullable: true
        },
        AssociatedAccountData: {
            maxItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillCloseAccountParameters'
            },
            description: 'Account data of the associated account on a bill. Currently one object is supported and only populated when the bill is closed.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillCloseParameters'
} as const;

export const $BillCompanyData = {
    title: 'Bill company data',
    required: ['Id', 'Name'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'ID of the `Company`.',
            nullable: true
        },
        Address: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Address'
                }
            ],
            description: 'Address of the company.',
            nullable: true
        },
        LegalIdentifiers: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'The set of `LegalIdentifiers` for the company.',
            nullable: true
        },
        BillingCode: {
            type: 'string',
            description: 'A unique code for Mews to list on invoices it sends to the company.',
            nullable: true
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the company.'
        },
        FiscalIdentifier: {
            type: 'string',
            description: 'Fiscal identifier of the company.',
            nullable: true
        },
        AdditionalTaxIdentifier: {
            type: 'string',
            description: 'Additional tax identifier of the company.',
            nullable: true
        },
        DUNS: {
            type: 'string',
            description: 'DUNS (Data Universal Numbering System) number of the company.',
            nullable: true
        },
        Telephone: {
            type: 'string',
            description: 'Company telephone number.',
            nullable: true
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identifier of the company.',
            nullable: true
        },
        InvoicingEmail: {
            type: 'string',
            description: 'Invoicing email of the company.',
            nullable: true
        },
        Department: {
            type: 'string',
            description: 'Department of the company.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'BillCompanyData'
} as const;

export const $BillCorrectionStateEnum = {
    title: 'Bill correction state',
    enum: ['Bill', 'CorrectiveBill'],
    type: 'string',
    description: `

Bill (Regular bill.)

CorrectiveBill (Corrective bill, i.e. the \`CorrectionType\` is either \`Edit\`, \`Cancellation\`, or \`ReceivablePaymentsBalance\`.)`,
    'x-enumNames': ['Bill', 'CorrectiveBill'],
    'x-enumDescriptions': ['Regular bill.', 'Corrective bill, i.e. the `CorrectionType` is either `Edit`, `Cancellation`, or `ReceivablePaymentsBalance`.']
} as const;

export const $BillCorrectionTypeEnum = {
    title: 'Bill correction type',
    enum: ['Cancellation', 'Edit', 'CreditNote', 'Reinstatement', 'ReceivablePaymentsBalance'],
    type: 'string',
    description: `

Cancellation

Edit

CreditNote

Reinstatement

ReceivablePaymentsBalance`,
    'x-enumNames': ['Cancellation', 'Edit', 'CreditNote', 'Reinstatement', 'ReceivablePaymentsBalance'],
    'x-enumDescriptions': ['', '', '', '', '']
} as const;

export const $BillCustomerData = {
    title: 'Bill customer data',
    required: ['Id', 'LastName'],
    type: 'object',
    properties: {
        Id: {
            minLength: 1,
            type: 'string',
            description: 'ID of the `Customer` to whom the bill was assigned.'
        },
        Address: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Address'
                }
            ],
            description: 'Address of the customer.',
            nullable: true
        },
        LegalIdentifiers: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'The set of `LegalIdentifiers` for the customer.',
            nullable: true
        },
        BillingCode: {
            type: 'string',
            description: 'A unique code for Mews to list on invoices it sends to the customer.',
            nullable: true
        },
        LastName: {
            minLength: 1,
            type: 'string',
            description: 'Last name of the customer.'
        },
        FirstName: {
            type: 'string',
            description: 'First name of the customer.',
            nullable: true
        },
        SecondLastName: {
            type: 'string',
            description: 'Second last name of the customer.',
            nullable: true
        },
        TitlePrefix: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Title'
                }
            ],
            description: `Title prefix of the customer.

Mister (Mr.)

Miss (Ms.)

Misses (Mrs.)`,
            nullable: true
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identifier of the customer.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillCustomerData'
} as const;

export const $BillDeleteParameters = {
    title: 'BillDeleteParameters',
    required: ['AccessToken', 'BillIds', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        BillIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill)s to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillDeleteParameters'
} as const;

export const $BillEnterpriseData = {
    title: 'Bill enterprise data',
    type: 'object',
    properties: {
        AdditionalTaxIdentifier: {
            type: 'string',
            description: 'Enterprise additional tax identifier.',
            nullable: true
        },
        CompanyName: {
            type: 'string',
            description: 'Enterprise company name.',
            nullable: true
        },
        BankAccount: {
            type: 'string',
            description: 'Enterprise bank account.',
            nullable: true
        },
        BankName: {
            type: 'string',
            description: 'Enterprise bank name.',
            nullable: true
        },
        Iban: {
            type: 'string',
            description: 'Enterprise IBAN (International Bank Account Number).',
            nullable: true
        },
        Bic: {
            type: 'string',
            description: 'Enterprise BIC (Bank Identifier Code).',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Additional information about the enterprise issuing the bill, including bank account details. Persisted at the time of closing of the bill.',
    'x-schema-id': 'BillEnterpriseData'
} as const;

export const $BillExtent = {
    title: 'Bill extent',
    type: 'object',
    properties: {
        Items: {
            type: 'boolean',
            description: 'Whether the response should contain payments and revenue items.',
            deprecated: true,
            'x-deprecatedMessage': 'Use `orderItems/getAll` and `payments/getAll` with `BillIds` filter instead.'
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned. E.g. it is possible to specify that together with the bills, payments and revenue items should be also returned. **Deprecated!**',
    'x-schema-id': 'BillExtent'
} as const;

export const $BillFilterParameters = {
    title: 'BillFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Extent: {
            title: 'Bill extent',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillExtent'
                }
            ],
            description: 'Extent of data to be returned. E.g. it is possible to specify that together with the bills, payments and revenue items should be also returned.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `orderItems/getAll` and `payments/getAll` with `BillIds` filter instead.'
        },
        ClosedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Bill` was closed.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        PaidUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Bill` was paid.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        DueUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Bill` is due to be paid.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Bill` was created.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Bill` was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        BillIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Bills`. Required if no other filter is provided.',
            nullable: true
        },
        CustomerIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Customers`.',
            nullable: true
        },
        State: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/BillState'
                }
            ],
            description: 'State the bills should be in. If not specified, `Open` and `Closed` bills are returned.',
            nullable: true
        },
        CorrectionState: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillCorrectionStateEnum'
            },
            description: 'Whether to return regular bills, corrective bills, or both. If `BillIds` are specified, defaults to both, otherwise defaults to `Bill`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillFilterParameters'
} as const;

export const $BillFiscalMachineData = {
    title: 'Fiscal machine data',
    required: ['Discriminator', 'Value'],
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Fiscal machine data discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillFiscalMachineDataDiscriminatorEnum'
                }
            ],
            description: `Discriminator of the object.

ItalianFiscalMachineData`,
            'x-enumNames': ['ItalianFiscalMachineData'],
            'x-enumDescriptions': ['']
        },
        Value: {
            title: 'Fiscal machine data for Italian fiscal machine',
            allOf: [
                {
                    '$ref': '#/components/schemas/ItalianFiscalMachineData'
                }
            ],
            description: 'Structure of the object depends on `Discriminator` (currently only `ItalianFiscalMachineData` is supported).'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillFiscalMachineData'
} as const;

export const $BillFiscalMachineDataDiscriminatorEnum = {
    title: 'Fiscal machine data discriminator',
    enum: ['ItalianFiscalMachineData'],
    type: 'string',
    description: `

ItalianFiscalMachineData`,
    'x-enumNames': ['ItalianFiscalMachineData'],
    'x-enumDescriptions': ['']
} as const;

export const $BillFiscalMachinePayloadData = {
    title: 'Fiscal machine payload',
    required: ['Discriminator', 'Value'],
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Fiscal machine payload discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/FiscalMachinePayloadDataDiscriminatorEnum'
                }
            ],
            description: `Discriminator of the object.

ItalianFiscalMachine`,
            'x-enumNames': ['ItalianFiscalMachine'],
            'x-enumDescriptions': ['']
        },
        Value: {
            minLength: 1,
            type: 'string',
            description: 'Base64-encoded data of the file to be printed.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillFiscalMachinePayloadData'
} as const;

export const $BillOptions = {
    title: 'Bill options',
    type: 'object',
    properties: {
        DisplayCustomer: {
            type: 'boolean',
            description: 'Display customer information on a bill.'
        },
        DisplayTaxation: {
            type: 'boolean',
            description: 'Display taxation detail on a bill.'
        },
        TrackReceivable: {
            type: 'boolean',
            description: 'Tracking of payments is enabled for bill, only applicable for `BillType` of `Invoice`.'
        },
        DisplayCid: {
            type: 'boolean',
            description: 'Display CID number on bill, only applicable for `BillType` of `Invoice`.'
        },
        Rebated: {
            type: 'boolean',
            description: 'Whether the bill is rebated (both fully or partially).'
        }
    },
    additionalProperties: false,
    description: 'Options of the bill.',
    'x-schema-id': 'BillOptions'
} as const;

export const $BillOptionsParameters = {
    title: 'Bill options parameters',
    required: ['DisplayCustomer', 'DisplayTaxation'],
    type: 'object',
    properties: {
        DisplayCustomer: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Display customer information on a bill.'
        },
        DisplayTaxation: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Display taxation detail on a bill.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'BillOptionsParameters'
} as const;

export const $BillPdfFile = {
    title: 'Bill PDF file',
    required: ['Base64Data'],
    type: 'object',
    properties: {
        Base64Data: {
            minLength: 1,
            type: 'string',
            description: 'Base64 encoded PDF file.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillPdfFile'
} as const;

export const $BillPdfParameters = {
    title: 'BillPdfParameters',
    required: ['AccessToken', 'BillId', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/#bill) to be printed.',
            format: 'uuid'
        },
        BillPrintEventId: {
            type: 'string',
            description: 'Unique identifier of the [Bill print event](https://mews-systems.gitbook.io/connector-api/operations/#bill-print-event) returned by previous invocation.',
            format: 'uuid',
            nullable: true
        },
        PdfTemplate: {
            allOf: [
                {
                    '$ref': '#/components/schemas/FinancialDocumentPdfTemplateTypeEnum'
                }
            ],
            description: `Bill PDF template type. If not specified, the default template is used.

Detailed (Detailed overview. Items are grouped by the reservation, item type and price, and consumption date.)

Consumption (Overview by date (no reservation details). Items of the same type and price are grouped by consumption date.)

Reservation (Overview by reservation (no date). Items of the same type and price are grouped by reservation.)

OrderItem (Consumption overview (not fiscal document). Items are grouped by the item type and price without reservation details and consumption date.)

Guest (Overview by guest. Items are grouped by guest, reservation, consumption date, and item type.)`,
            nullable: true
        },
        PrintReason: {
            maxLength: 255,
            type: 'string',
            description: 'The reason for reprinting the bill with different template. Required for France LE.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillPdfParameters'
} as const;

export const $BillPdfResult = {
    title: 'BillPdfResult',
    type: 'object',
    properties: {
        BillId: {
            type: 'string',
            description: 'Unique identifier of the printed bill.',
            format: 'uuid'
        },
        Result: {
            title: 'Bill PDF result discriminator',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/BillPdfResultDiscriminator'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BillPdfFile'
                        },
                        {
                            '$ref': '#/components/schemas/BillPrintEvent'
                        }
                    ]
                }
            },
            'x-coproduct': true,
            'x-schema-id': 'BillPdfResultResultCoproductOfBillPdfResultDiscriminator'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillPdfResult'
} as const;

export const $BillPdfResultDiscriminator = {
    title: 'Bill PDF result discriminator',
    enum: ['BillPdfFile', 'BillPrintEvent'],
    type: 'string',
    description: 'The result of operation.',
    'x-enumDescriptions': ['PDF version of a `Bill` was successfully created, `Value` is `BillPdfFile`.', "PDF version of a `Bill` couldn't be created at this moment (for example bill haven't been reported to authorities yet), `Value` is `BillPrintEvent`"]
} as const;

export const $BillPrintEvent = {
    title: 'Bill print event',
    type: 'object',
    properties: {
        BillPrintEventId: {
            type: 'string',
            description: 'Unique identifier of print event. Must be used in retry calls to retrieve the PDF.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillPrintEvent'
} as const;

export const $BillState = {
    title: 'Bill state',
    enum: ['Open', 'Closed'],
    type: 'string',
    description: 'Whether the bill is `Open` or `Closed`.'
} as const;

export const $BillType = {
    title: 'Bill type',
    enum: ['Receipt', 'Invoice'],
    type: 'string',
    description: 'After a bill is closed, the Bill Type is set to `Receipt` or `Invoice`. `Receipt` indicates that the bill has been fully paid and the balance is zero. `Invoice` indicates that the bill has not yet been fully paid but an invoice has been issued. Prior to closing, Bill Type should not be used.',
    'x-enumDescriptions': ['Default; the bill has been paid in full; only applicable after the bill is closed.', 'Bill has not been paid in full but an invoice has been issued to request payment.']
} as const;

export const $BillUpdateParameters = {
    title: 'Bill update parameters',
    required: ['BillId'],
    type: 'object',
    properties: {
        BillId: {
            type: 'string',
            description: 'Unique identifier of the bill to update.',
            format: 'uuid'
        },
        AccountId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            description: 'Unique identifier of the account (`Customer` or `Company`) the bill is issued to (or null if the account should not be updated).',
            nullable: true
        },
        AssociatedAccountIds: {
            title: 'Associated account IDs update parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AssociatedAccountIdsUpdate'
                }
            ],
            description: 'Unique identifiers of the `Customer` or `Company` that are associated to the bill (or null if the account should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillUpdateParameters'
} as const;

export const $BillV20250623 = {
    title: 'Bill (ver 2025-06-23)',
    required: ['AccountId', 'AssociatedAccountIds', 'CorrectionState', 'CreatedUtc', 'EnterpriseId', 'Id', 'State', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the bill.',
            format: 'uuid'
        },
        Name: {
            type: 'string',
            description: 'Name of the bill.',
            nullable: true
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the `Enterprise`.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (`Customer` or `Company`) the bill is issued to.',
            format: 'uuid'
        },
        AssociatedAccountIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Customers` or `Companies` that are associated to the bill.',
            nullable: true
        },
        CounterId: {
            type: 'string',
            description: 'Unique identifier of the bill `Counter`.',
            format: 'uuid',
            nullable: true
        },
        State: {
            '$ref': '#/components/schemas/BillState'
        },
        Type: {
            '$ref': '#/components/schemas/BillType'
        },
        Number: {
            type: 'string',
            description: 'Number of the bill.',
            nullable: true
        },
        VariableSymbol: {
            type: 'string',
            description: 'Variable symbol of the bill.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the bill creation in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time when the bill was last updated, in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        IssuedUtc: {
            type: 'string',
            description: 'Date and time of the bill issuance in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        TaxedUtc: {
            type: 'string',
            description: 'Taxation date of the bill in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        PaidUtc: {
            type: 'string',
            description: 'Date when the bill was paid in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        DueUtc: {
            type: 'string',
            description: 'Bill due date and time in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        LastReminderDateUtc: {
            type: 'string',
            description: 'Date and time when an email reminder to pay an invoice was last sent, in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        PurchaseOrderNumber: {
            type: 'string',
            description: 'Unique number of the purchase order from the buyer.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        Options: {
            title: 'Bill options',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillOptions'
                }
            ],
            description: 'Options of the bill.',
            nullable: true
        },
        Owner: {
            title: 'Bill owner data',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillAccountData'
                }
            ],
            description: 'Additional information about owner of the bill. Can be a `Customer` or `Company`. Persisted at the time of closing of the bill.',
            nullable: true
        },
        AssociatedAccountsData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillAccountData'
            },
            description: 'Additional information about the associated account of the bill. Can be a `Customer` or `Company`. Persisted at the time of closing of the bill. Currently only one account can be associated with a bill, but this may be extended in future.',
            nullable: true
        },
        EnterpriseData: {
            title: 'Bill enterprise data',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillEnterpriseData'
                }
            ],
            description: 'Additional information about the enterprise issuing the bill, including bank account details. Persisted at the time of closing of the bill.',
            nullable: true
        },
        CorrectionState: {
            title: 'Bill correction state',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillCorrectionStateEnum'
                }
            ],
            description: `Whether the bill is a regular bill or a corrective bill.

Bill (Regular bill.)

CorrectiveBill (Corrective bill, i.e. the \`CorrectionType\` is either \`Edit\`, \`Cancellation\`, or \`ReceivablePaymentsBalance\`.)`,
            'x-enumNames': ['Bill', 'CorrectiveBill'],
            'x-enumDescriptions': ['Regular bill.', 'Corrective bill, i.e. the `CorrectionType` is either `Edit`, `Cancellation`, or `ReceivablePaymentsBalance`.']
        },
        CorrectionType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BillCorrectionTypeEnum'
                }
            ],
            description: `Type of correction.

Cancellation

Edit

CreditNote

Reinstatement

ReceivablePaymentsBalance`,
            nullable: true
        },
        CorrectedBillId: {
            type: 'string',
            description: 'The ID of the bill that the corrective bill corrects. If the corrected bill was deleted, this field is `null`.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillV20250623'
} as const;

export const $BillingAutomation = {
    title: 'Billing automation',
    required: ['AssignmentTargetType', 'BillAggregationType', 'CompaniesWithRelations', 'CreatedUtc', 'EnterpriseId', 'Id', 'Name', 'Prepayment', 'TriggerType'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the billing automation.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise.',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the billing automation.'
        },
        Description: {
            type: 'string',
            description: 'Description of the billing automation.',
            nullable: true
        },
        CompaniesWithRelations: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CompanyWithBillingAutomationRelation'
            },
            description: 'List of companies with relations to the billing automation.'
        },
        Prepayment: {
            title: 'Billing automation prepayment type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationPrepaymentEnum'
                }
            ],
            description: `Type of prepayment.

All (All)

Prepaid (Prepaid)`,
            'x-enumNames': ['All', 'Prepaid'],
            'x-enumDescriptions': ['All', 'Prepaid']
        },
        AssignmentTargetType: {
            title: 'Billing automation assignment target type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationAssignmentTargetTypeEnum'
                }
            ],
            description: `Type of target company and customer assignment behavior.

CompanyAsDetails (The company will be the associated account in the resulting routed bill, and the customer is the owner.)

CompanyAsOwner (The company will be the owner in the resulting routed bill, and the customer might be the associated account.)

NoCompany (The customer will be owner of the bill.)`,
            'x-enumNames': ['CompanyAsDetails', 'CompanyAsOwner', 'NoCompany'],
            'x-enumDescriptions': ['The company will be the associated account in the resulting routed bill, and the customer is the owner.', 'The company will be the owner in the resulting routed bill, and the customer might be the associated account.', 'The customer will be owner of the bill.']
        },
        TriggerType: {
            title: 'Billing automation trigger type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationTriggerTypeEnum'
                }
            ],
            description: `Trigger type of billing automation.

Continuous (Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.)

Recurring (Billing automation is executed monthly.)

Legacy (Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.)`,
            'x-enumNames': ['Continuous', 'Recurring', 'Legacy'],
            'x-enumDescriptions': ['Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.', 'Billing automation is executed monthly.', 'Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.']
        },
        BillAggregationType: {
            title: 'Billing automation bill aggregation type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationBillAggregationTypeEnum'
                }
            ],
            description: `Type of bill aggregation.

OnePerReservation (Create a separate bill for each reservation.)

AggregateByCustomer (Create a separate bill for each reservation owner.)

AggregateAll (Group all moved items on one bill.)

AggregatePerReservationGroup (Create a separate bill for each reservation group.)`,
            'x-enumNames': ['OnePerReservation', 'AggregateByCustomer', 'AggregateAll', 'AggregatePerReservationGroup'],
            'x-enumDescriptions': ['Create a separate bill for each reservation.', 'Create a separate bill for each reservation owner.', 'Group all moved items on one bill.', 'Create a separate bill for each reservation group.']
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the billing automation in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ProcessingStartOffset: {
            type: 'string',
            description: 'Processing start offset. Applicable only if the billing automation `TriggerType` is set to `Reccuring`.',
            nullable: true
        },
        OrderItemConsumptionPeriod: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationOrderItemConsumptionPeriodTypeEnum'
                }
            ],
            description: `Specifies the type of order item consumption period for the billing automation. This value is applicable only when the \`TriggerType\` is set to \`Reccuring\`.

MonthBefore (Only items with a consumption date within the previous month will be routed.)

SameMonthAndMonthBefore (Only items with a consumption date within this and the previous month will be routed.)

SameMonth (Only items with a consumption date within this month will be routed.)

SameMonthAndMonthAfter (Only items with a consumption date within this and the next month will be routed.)

MonthAfter (Only items with a consumption date within the next month will be routed.)`,
            nullable: true
        },
        Assignments: {
            maxItems: 20,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAssignment'
            },
            description: 'List of billing automation assignments.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomation'
} as const;

export const $BillingAutomationAccountingCategoryAssignment = {
    title: 'Billing automation accounting category assignment',
    required: ['AccountingCategoryId', 'ItemTypes'],
    type: 'object',
    properties: {
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the accounting category.',
            format: 'uuid'
        },
        ItemTypes: {
            title: 'Accounting category routed item types',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingCategoryRoutedItemTypes'
                }
            ],
            description: 'Type of the accounting category routed item.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAccountingCategoryAssignment'
} as const;

export const $BillingAutomationAccountingCategoryAssignmentIEnumerableUpdateValue = {
    title: 'Billing automation accounting category assignment array update value',
    type: 'object',
    properties: {
        Value: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAccountingCategoryAssignment'
            },
            description: 'Value which is to be updated.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAccountingCategoryAssignmentIEnumerableUpdateValue'
} as const;

export const $BillingAutomationAddParameters = {
    title: 'Billing automation add parameters',
    required: ['Assignments', 'AssignmentTargetType', 'BillAggregationType', 'Name', 'Prepayment', 'TriggerType'],
    type: 'object',
    properties: {
        Name: {
            maxLength: 255,
            minLength: 1,
            type: 'string',
            description: 'Name of the billing automation.'
        },
        Description: {
            maxLength: 1000,
            type: 'string',
            description: 'Description of the billing automation.',
            nullable: true
        },
        CompaniesWithRelations: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CompanyWithBillingAutomationRelation'
            },
            description: 'List of companies with relations indicating whether the company is considered a travel agency or a company in the reservation. Can only be empty if `AssignmentTargetType` is `CompanyAsDetails` or `NoCompany`.',
            nullable: true
        },
        Prepayment: {
            title: 'Billing automation prepayment type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationPrepaymentEnum'
                }
            ],
            description: `Type of prepayment.

All (All)

Prepaid (Prepaid)`,
            'x-enumNames': ['All', 'Prepaid'],
            'x-enumDescriptions': ['All', 'Prepaid']
        },
        AssignmentTargetType: {
            title: 'Billing automation assignment target type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationAssignmentTargetTypeEnum'
                }
            ],
            description: `Specifies the type of company assignment to the bill. If set to \`NoCompany\`, the \`BillAggregationType\` must be \`AggregateByCustomer\`.

CompanyAsDetails (The company will be the associated account in the resulting routed bill, and the customer is the owner.)

CompanyAsOwner (The company will be the owner in the resulting routed bill, and the customer might be the associated account.)

NoCompany (The customer will be owner of the bill.)`,
            'x-enumNames': ['CompanyAsDetails', 'CompanyAsOwner', 'NoCompany'],
            'x-enumDescriptions': ['The company will be the associated account in the resulting routed bill, and the customer is the owner.', 'The company will be the owner in the resulting routed bill, and the customer might be the associated account.', 'The customer will be owner of the bill.']
        },
        TriggerType: {
            title: 'Billing automation trigger type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationTriggerTypeEnum'
                }
            ],
            description: `Trigger type of billing automation.

Continuous (Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.)

Recurring (Billing automation is executed monthly.)

Legacy (Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.)`,
            'x-enumNames': ['Continuous', 'Recurring', 'Legacy'],
            'x-enumDescriptions': ['Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.', 'Billing automation is executed monthly.', 'Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.']
        },
        BillAggregationType: {
            title: 'Billing automation bill aggregation type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationBillAggregationTypeEnum'
                }
            ],
            description: `Specifies the type of bill aggregation. If the value is not \`AggregateByCustomer\`, the \`AssignmentTargetType\` must be \`CompanyAsOwner\`.

OnePerReservation (Create a separate bill for each reservation.)

AggregateByCustomer (Create a separate bill for each reservation owner.)

AggregateAll (Group all moved items on one bill.)

AggregatePerReservationGroup (Create a separate bill for each reservation group.)`,
            'x-enumNames': ['OnePerReservation', 'AggregateByCustomer', 'AggregateAll', 'AggregatePerReservationGroup'],
            'x-enumDescriptions': ['Create a separate bill for each reservation.', 'Create a separate bill for each reservation owner.', 'Group all moved items on one bill.', 'Create a separate bill for each reservation group.']
        },
        OrderItemConsumptionPeriod: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationOrderItemConsumptionPeriodTypeEnum'
                }
            ],
            description: `Specifies the order item consumption period type for the billing automation. This is required if the \`TriggerType\` is set to \`Reccuring\`.

MonthBefore (Only items with a consumption date within the previous month will be routed.)

SameMonthAndMonthBefore (Only items with a consumption date within this and the previous month will be routed.)

SameMonth (Only items with a consumption date within this month will be routed.)

SameMonthAndMonthAfter (Only items with a consumption date within this and the next month will be routed.)

MonthAfter (Only items with a consumption date within the next month will be routed.)`,
            nullable: true
        },
        ProcessingStartOffset: {
            maxLength: 20,
            type: 'string',
            description: 'Specifies the processing start offset. This is required if the billing automation `TriggerType` is set to `Reccuring`.',
            nullable: true
        },
        Assignments: {
            maxItems: 20,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAssignmentAddParameters'
            },
            description: 'List of billing automation assignments.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAddParameters'
} as const;

export const $BillingAutomationAssignment = {
    title: 'Billing automation assignment',
    required: ['BillingAutomationId', 'Id', 'RoutedItemTypes', 'ServiceId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the billing automation assignment.',
            format: 'uuid'
        },
        BillingAutomationId: {
            type: 'string',
            description: 'Unique identifier of the billing automation.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the related service.',
            format: 'uuid'
        },
        RoutedItemTypes: {
            title: 'Billing automation item types parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationItemTypesParameters'
                }
            ],
            description: 'Type of items that are going to be routed.'
        },
        RateIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Rates` used in billing automation conditions.',
            nullable: true
        },
        ProductCategoryIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Product Categories` used in billing automation conditions.',
            nullable: true
        },
        ProductIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Products` used in billing automation conditions.',
            nullable: true
        },
        AccountingCategoryAssignments: {
            maxItems: 100,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAccountingCategoryAssignment'
            },
            description: 'List of accounting category assignments used in billing automation conditions.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAssignment'
} as const;

export const $BillingAutomationAssignmentAddParameters = {
    title: 'Billing automation assignment add parameters',
    required: ['RoutedItemTypes', 'ServiceId'],
    type: 'object',
    properties: {
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the related service.',
            format: 'uuid'
        },
        RoutedItemTypes: {
            title: 'Billing automation item types parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationItemTypesParameters'
                }
            ],
            description: 'Type of items that are going to be routed.'
        },
        RateIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Rates` that will be applied as billing automation condition.',
            nullable: true
        },
        ProductCategoryIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Product Categories` that will be applied as billing automation condition.',
            nullable: true
        },
        ProductIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Products` that will be applied as billing automation condition.',
            nullable: true
        },
        AccountingCategories: {
            maxItems: 100,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAccountingCategoryAssignment'
            },
            description: 'List of accounting categories that will be applied as billing automation condition.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAssignmentAddParameters'
} as const;

export const $BillingAutomationAssignmentTargetTypeEnum = {
    title: 'Billing automation assignment target type',
    enum: ['CompanyAsDetails', 'CompanyAsOwner', 'NoCompany'],
    type: 'string',
    description: `

CompanyAsDetails (The company will be the associated account in the resulting routed bill, and the customer is the owner.)

CompanyAsOwner (The company will be the owner in the resulting routed bill, and the customer might be the associated account.)

NoCompany (The customer will be owner of the bill.)`,
    'x-enumNames': ['CompanyAsDetails', 'CompanyAsOwner', 'NoCompany'],
    'x-enumDescriptions': ['The company will be the associated account in the resulting routed bill, and the customer is the owner.', 'The company will be the owner in the resulting routed bill, and the customer might be the associated account.', 'The customer will be owner of the bill.']
} as const;

export const $BillingAutomationAssignmentTargetTypeUpdateValue = {
    title: 'Billing automation assignment target type update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Billing automation assignment target type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationAssignmentTargetTypeEnum'
                }
            ],
            description: 'Value which is to be updated.',
            'x-enumNames': ['CompanyAsDetails', 'CompanyAsOwner', 'NoCompany'],
            'x-enumDescriptions': ['The company will be the associated account in the resulting routed bill, and the customer is the owner.', 'The company will be the owner in the resulting routed bill, and the customer might be the associated account.', 'The customer will be owner of the bill.']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAssignmentTargetTypeUpdateValue'
} as const;

export const $BillingAutomationAssignmentUpdateParameters = {
    title: 'Billing automation assignment update parameters',
    required: ['BillingAutomationAssignmentId'],
    type: 'object',
    properties: {
        BillingAutomationAssignmentId: {
            type: 'string',
            description: 'Unique identifier of the billing automation assignment.',
            format: 'uuid'
        },
        RoutedItemTypes: {
            title: 'Billing automation item types update parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationItemTypesUpdateParameters'
                }
            ],
            description: 'Type of items that are going to be routed (or `null` should it not be updated).',
            nullable: true
        },
        RateIds: {
            title: 'Guid array update value',
            maxLength: 100,
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidIEnumerableUpdateValue'
                }
            ],
            description: 'Unique identifiers of `Rates` that will be applied as billing automation condition (or `null` should it not be updated).',
            nullable: true
        },
        ProductCategoryIds: {
            title: 'Guid array update value',
            maxLength: 100,
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidIEnumerableUpdateValue'
                }
            ],
            description: 'Unique identifiers of `Product Categories` that will be applied as billing automation condition (or `null` should it not be updated).',
            nullable: true
        },
        ProductIds: {
            title: 'Guid array update value',
            maxLength: 100,
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidIEnumerableUpdateValue'
                }
            ],
            description: 'Unique identifiers of `Products` that will be applied as billing automation condition (or `null` should it not be updated).',
            nullable: true
        },
        AccountingCategories: {
            title: 'Billing automation accounting category assignment array update value',
            maxLength: 100,
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationAccountingCategoryAssignmentIEnumerableUpdateValue'
                }
            ],
            description: 'List of `Accounting Categories` with their `ItemTypes` that will be applied as billing automation condition (or `null` should it not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAssignmentUpdateParameters'
} as const;

export const $BillingAutomationAssignmentsUpdateParameters = {
    title: 'Billing automation assignments update parameters',
    required: ['AccessToken', 'BillingAutomationId', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        BillingAutomationId: {
            type: 'string',
            description: 'Unique identifier of the billing automation.',
            format: 'uuid'
        },
        AssignmentsToAdd: {
            maxItems: 20,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAssignmentAddParameters'
            },
            description: 'Parameters for adding new assignments (or null if not being updated).',
            nullable: true
        },
        AssignmentsToUpdate: {
            maxItems: 20,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAssignmentUpdateParameters'
            },
            description: 'List of parameters for updating existing assignments (or null if not being updated).',
            nullable: true
        },
        AssignmentIdsToRemove: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'List of unique identifiers for assignments to be removed (or null if not being updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationAssignmentsUpdateParameters'
} as const;

export const $BillingAutomationBillAggregationTypeEnum = {
    title: 'Billing automation bill aggregation type',
    enum: ['OnePerReservation', 'AggregateByCustomer', 'AggregateAll', 'AggregatePerReservationGroup'],
    type: 'string',
    description: `

OnePerReservation (Create a separate bill for each reservation.)

AggregateByCustomer (Create a separate bill for each reservation owner.)

AggregateAll (Group all moved items on one bill.)

AggregatePerReservationGroup (Create a separate bill for each reservation group.)`,
    'x-enumNames': ['OnePerReservation', 'AggregateByCustomer', 'AggregateAll', 'AggregatePerReservationGroup'],
    'x-enumDescriptions': ['Create a separate bill for each reservation.', 'Create a separate bill for each reservation owner.', 'Group all moved items on one bill.', 'Create a separate bill for each reservation group.']
} as const;

export const $BillingAutomationBillAggregationTypeUpdateValue = {
    title: 'Billing automation bill aggregation type update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Billing automation bill aggregation type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationBillAggregationTypeEnum'
                }
            ],
            description: 'Value which is to be updated.',
            'x-enumNames': ['OnePerReservation', 'AggregateByCustomer', 'AggregateAll', 'AggregatePerReservationGroup'],
            'x-enumDescriptions': ['Create a separate bill for each reservation.', 'Create a separate bill for each reservation owner.', 'Group all moved items on one bill.', 'Create a separate bill for each reservation group.']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationBillAggregationTypeUpdateValue'
} as const;

export const $BillingAutomationDeleteParameters = {
    title: 'Billing automation delete parameters',
    required: ['AccessToken', 'BillingAutomationIds', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        BillingAutomationIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the billing automations to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationDeleteParameters'
} as const;

export const $BillingAutomationFilterParameters = {
    title: 'Billing automation filter parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CompanyIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Company` associated with the billing automations.',
            nullable: true
        },
        BillingAutomationIds: {
            maxItems: 100,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of specific `Billing automation` items.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationFilterParameters'
} as const;

export const $BillingAutomationItemTypesParameters = {
    title: 'Billing automation item types parameters',
    required: ['AdditionalExpenses', 'AllCustomItems', 'AllProducts', 'CityTax', 'Deposits', 'SpaceOrder'],
    type: 'object',
    properties: {
        SpaceOrder: {
            type: 'boolean',
            description: 'Space order'
        },
        CityTax: {
            type: 'boolean',
            description: 'City tax'
        },
        AllProducts: {
            type: 'boolean',
            description: 'All products'
        },
        Deposits: {
            type: 'boolean',
            description: 'Deposits'
        },
        AdditionalExpenses: {
            type: 'boolean',
            description: 'Additional expenses'
        },
        AllCustomItems: {
            type: 'boolean',
            description: 'All custom items'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationItemTypesParameters'
} as const;

export const $BillingAutomationItemTypesUpdateParameters = {
    title: 'Billing automation item types update parameters',
    type: 'object',
    properties: {
        SpaceOrder: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Space order (or `null` should it not be updated).',
            nullable: true
        },
        CityTax: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'City tax (or `null` should it not be updated).',
            nullable: true
        },
        AllProducts: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Products (or `null` should it not be updated).',
            nullable: true
        },
        Deposits: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Deposits(or `null` should it not be updated).',
            nullable: true
        },
        AdditionalExpenses: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Additional expenses (or `null` should it not be updated).',
            nullable: true
        },
        AllCustomItems: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Custom items (or `null` should it not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationItemTypesUpdateParameters'
} as const;

export const $BillingAutomationModificationResult = {
    title: 'Billing automation modification result',
    type: 'object',
    properties: {
        BillingAutomations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomation'
            },
            description: 'Billing automations affected by the operation.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationModificationResult'
} as const;

export const $BillingAutomationOrderItemConsumptionPeriodTypeEnum = {
    title: 'Billing automation order item consumption period type',
    enum: ['MonthBefore', 'SameMonthAndMonthBefore', 'SameMonth', 'SameMonthAndMonthAfter', 'MonthAfter'],
    type: 'string',
    description: `

MonthBefore (Only items with a consumption date within the previous month will be routed.)

SameMonthAndMonthBefore (Only items with a consumption date within this and the previous month will be routed.)

SameMonth (Only items with a consumption date within this month will be routed.)

SameMonthAndMonthAfter (Only items with a consumption date within this and the next month will be routed.)

MonthAfter (Only items with a consumption date within the next month will be routed.)`,
    'x-enumNames': ['MonthBefore', 'SameMonthAndMonthBefore', 'SameMonth', 'SameMonthAndMonthAfter', 'MonthAfter'],
    'x-enumDescriptions': ['Only items with a consumption date within the previous month will be routed.', 'Only items with a consumption date within this and the previous month will be routed.', 'Only items with a consumption date within this month will be routed.', 'Only items with a consumption date within this and the next month will be routed.', 'Only items with a consumption date within the next month will be routed.']
} as const;

export const $BillingAutomationOrderItemConsumptionPeriodTypeUpdateValue = {
    title: 'Billing automation order item consumption period type update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Billing automation order item consumption period type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationOrderItemConsumptionPeriodTypeEnum'
                }
            ],
            description: 'Value which is to be updated.',
            'x-enumNames': ['MonthBefore', 'SameMonthAndMonthBefore', 'SameMonth', 'SameMonthAndMonthAfter', 'MonthAfter'],
            'x-enumDescriptions': ['Only items with a consumption date within the previous month will be routed.', 'Only items with a consumption date within this and the previous month will be routed.', 'Only items with a consumption date within this month will be routed.', 'Only items with a consumption date within this and the next month will be routed.', 'Only items with a consumption date within the next month will be routed.']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationOrderItemConsumptionPeriodTypeUpdateValue'
} as const;

export const $BillingAutomationPrepaymentEnum = {
    title: 'Billing automation prepayment type',
    enum: ['All', 'Prepaid'],
    type: 'string',
    description: `

All (All)

Prepaid (Prepaid)`,
    'x-enumNames': ['All', 'Prepaid'],
    'x-enumDescriptions': ['All', 'Prepaid']
} as const;

export const $BillingAutomationPrepaymentUpdateValue = {
    title: 'Billing automation prepayment type update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Billing automation prepayment type',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationPrepaymentEnum'
                }
            ],
            description: 'Value which is to be updated.',
            'x-enumNames': ['All', 'Prepaid'],
            'x-enumDescriptions': ['All', 'Prepaid']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationPrepaymentUpdateValue'
} as const;

export const $BillingAutomationResult = {
    title: 'Billing automation result',
    type: 'object',
    properties: {
        BillingAutomations: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomation'
            },
            description: 'The list of filtered billing automations.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last returned billing automation. This can be used in Limitation in a subsequent request to fetch the next batch of billing automations.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationResult'
} as const;

export const $BillingAutomationTriggerTypeEnum = {
    title: 'Billing automation trigger type',
    enum: ['Continuous', 'Recurring', 'Legacy'],
    type: 'string',
    description: `

Continuous (Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.)

Recurring (Billing automation is executed monthly.)

Legacy (Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.)`,
    'x-enumNames': ['Continuous', 'Recurring', 'Legacy'],
    'x-enumDescriptions': ['Billing automation is continuously triggered by reservation actions, such as creation, updates, and rebates.', 'Billing automation is executed monthly.', 'Billing automation is executed on reservation creation only. Items added later are not transfered to any bill.']
} as const;

export const $BillingAutomationUpdateParameters = {
    title: 'Billing automation update parameters',
    required: ['BillingAutomationId'],
    type: 'object',
    properties: {
        BillingAutomationId: {
            type: 'string',
            description: 'Unique identifier of the billing automation.',
            format: 'uuid'
        },
        Name: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Name of the billing automation (or null should it not be updated).',
            nullable: true
        },
        Description: {
            title: 'String update value',
            maxLength: 1000,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Description of the billing automation (or null should it not be updated).',
            nullable: true
        },
        Companies: {
            title: 'Company with billing automation relation array update value',
            maxLength: 1000,
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyWithBillingAutomationRelationIEnumerableUpdateValue'
                }
            ],
            description: 'List of companies with relations indicating whether the company should be considered as a travel agency or a company in the reservation. This list can only be empty if the `AssignmentTargetType` is `CompanyAsDetails` or `NoCompany`. Set to null if the value is not updated.',
            nullable: true
        },
        Prepayment: {
            title: 'Billing automation prepayment type update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationPrepaymentUpdateValue'
                }
            ],
            description: 'Type of prepayment (or null should it not be updated).',
            nullable: true
        },
        AssignmentTargetType: {
            title: 'Billing automation assignment target type update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationAssignmentTargetTypeUpdateValue'
                }
            ],
            description: 'Specifies the type of company assignment to the bill. If set to `NoCompany`, the `BillAggregationType` must be `AggregateByCustomer`. Set to null if the value is not updated.',
            nullable: true
        },
        BillAggregationType: {
            title: 'Billing automation bill aggregation type update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationBillAggregationTypeUpdateValue'
                }
            ],
            description: 'Defines the aggregation target type for billing automation. If not `AggregateByCustomer`, the `AssignmentTargetType` must be `CompanyAsOwner`. Set to null if the value is not updated.',
            nullable: true
        },
        OrderItemConsumptionPeriod: {
            title: 'Billing automation order item consumption period type update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillingAutomationOrderItemConsumptionPeriodTypeUpdateValue'
                }
            ],
            description: 'Specifies the order item consumption period type for the billing automation. Required if the `TriggerType` is recurring. Can be null if the value is not updated.',
            nullable: true
        },
        ProcessingStartOffset: {
            title: 'String update value',
            maxLength: 20,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Processing start offset. Required if the billing automation `TriggerType` is recurring (or null should it not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillingAutomationUpdateParameters'
} as const;

export const $BillsAddResult = {
    title: 'BillsAddResult',
    required: ['Bills'],
    type: 'object',
    properties: {
        Bills: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Bill'
            },
            description: 'The created bills.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillsAddResult'
} as const;

export const $BillsCloseResult = {
    title: 'BillsCloseResult',
    required: ['Bills'],
    type: 'object',
    properties: {
        Bills: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Bill'
            },
            description: 'The closed bills.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillsCloseResult'
} as const;

export const $BillsResult = {
    title: 'BillsResult',
    required: ['Bills'],
    type: 'object',
    properties: {
        Bills: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Bill'
            },
            description: 'The filtered bills.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest bill returned. This can be used in `Limitation` in a subsequent request to fetch the next batch of older bills.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillsResult'
} as const;

export const $BillsUpdateResult = {
    title: 'BillsUpdateResult',
    required: ['Bills'],
    type: 'object',
    properties: {
        Bills: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Bill'
            },
            description: 'Updated bills.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BillsUpdateResult'
} as const;

export const $BookableServiceData = {
    title: 'Bookable service data',
    required: ['EndOffset', 'OccupancyEndOffset', 'OccupancyStartOffset', 'StartOffset', 'TimeUnit', 'TimeUnitPeriod'],
    type: 'object',
    properties: {
        StartOffset: {
            minLength: 1,
            type: 'string',
            description: 'Offset from the start of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the default start of the service; expressed in ISO 8601 duration format.'
        },
        EndOffset: {
            minLength: 1,
            type: 'string',
            description: 'Offset from the end of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the default end of the service; expressed in ISO 8601 duration format.'
        },
        OccupancyStartOffset: {
            minLength: 1,
            type: 'string',
            description: "Offset from the start of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the occupancy start of the service; expressed in ISO 8601 duration format. 'Occupancy start' is used for availability and reporting purposes, it implies the time at which the booked resource is considered occupied."
        },
        OccupancyEndOffset: {
            minLength: 1,
            type: 'string',
            description: "Offset from the end of the [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/) which defines the occupancy end of the service; expressed in ISO 8601 duration format. 'Occupancy end' is used for availability and reporting purposes, it implies the time at which the booked resource is no longer considered occupied."
        },
        TimeUnit: {
            title: 'Time unit period',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeUnitPeriodEnum'
                }
            ],
            description: `

Day

Month

Hour`,
            deprecated: true,
            'x-enumNames': ['Day', 'Month', 'Hour'],
            'x-enumDescriptions': ['', '', ''],
            'x-deprecatedMessage': 'Use `TimeUnitPeriod` instead.'
        },
        TimeUnitPeriod: {
            title: 'Time unit period',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeUnitPeriodEnum'
                }
            ],
            description: `The length of time or period represented by a [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), for which the service can be booked.

Day

Month

Hour`,
            'x-enumNames': ['Day', 'Month', 'Hour'],
            'x-enumDescriptions': ['', '', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BookableServiceData'
} as const;

export const $BooleanNullableUpdateValue = {
    title: 'Boolean update value',
    type: 'object',
    properties: {
        Value: {
            type: 'boolean',
            description: 'Value which is to be updated.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BooleanNullableUpdateValue'
} as const;

export const $BooleanUpdateValue = {
    title: 'Boolean update value',
    type: 'object',
    properties: {
        Value: {
            type: 'boolean',
            description: 'Value which is to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BooleanUpdateValue'
} as const;

export const $BusinessSegment = {
    title: 'Business segment',
    required: ['CreatedUtc', 'Id', 'IsActive', 'Name', 'ServiceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the business segment.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service`.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the business segment is still active.'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the business segment.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the business segment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the business segment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BusinessSegment'
} as const;

export const $BusinessSegmentFilterParameters = {
    title: 'BusinessSegmentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Ids: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested `Business segment`.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Services` from which the business segments are requested.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval of `Business segment` last update date and time.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BusinessSegmentFilterParameters'
} as const;

export const $BusinessSegmentResult = {
    title: 'BusinessSegmentResult',
    required: ['BusinessSegments'],
    type: 'object',
    properties: {
        BusinessSegments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BusinessSegment'
            },
            description: 'Business segments.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest business segment item returned. This can be used in Limitation in a subsequent request to fetch the next batch of older business segment.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'BusinessSegmentResult'
} as const;

export const $CancelOrderItemParameters = {
    title: 'CancelOrderItemParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'OrderItemIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        OrderItemIds: {
            maxItems: 10,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `OrderItems` to cancel.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancelOrderItemParameters'
} as const;

export const $CancellationFeeExtent = {
    title: 'Cancellation Fee Extent',
    enum: ['TimeUnits', 'Products'],
    type: 'string',
    description: 'Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.'
} as const;

export const $CancellationFeeExtentEnum = {
    title: 'Cancellation Fee Extent',
    enum: ['Nothing', 'TimeUnits', 'Products', 'Everything'],
    type: 'string',
    description: `Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.

Nothing

TimeUnits

Products

Everything`,
    'x-enumNames': ['Nothing', 'TimeUnits', 'Products', 'Everything'],
    'x-enumDescriptions': ['', '', '', '']
} as const;

export const $CancellationPolicy = {
    title: 'Cancellation Policy',
    required: ['AbsoluteFee', 'Applicability', 'ApplicabilityOffset', 'CreatedUtc', 'FeeExtent', 'Id', 'IsActive', 'RateGroupId', 'RelativeFee', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the cancellation policy.',
            format: 'uuid'
        },
        RateGroupId: {
            type: 'string',
            description: 'Unique identifier of the rate group the cancellation policy belongs to.',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the cancellation policy creation in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the cancellation policy update in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Applicability: {
            '$ref': '#/components/schemas/CancellationPolicyApplicability'
        },
        FeeExtent: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CancellationFeeExtent'
            },
            description: 'Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.'
        },
        ApplicabilityOffset: {
            minLength: 1,
            type: 'string',
            description: 'Offset for order start (assuming Applicability is set to Start) from which the fee is applied.'
        },
        FeeMaximumTimeUnits: {
            type: 'integer',
            description: 'Maximum number of time units the cancellation fee is applicable to.',
            format: 'int32',
            nullable: true
        },
        AbsoluteFee: {
            title: 'Currency value (ver 2023-02-02)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValue'
                }
            ],
            description: 'Absolute value of the fee.'
        },
        RelativeFee: {
            type: 'number',
            description: 'Relative value of the fee, as a percentage of the reservation price.',
            format: 'double'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the cancellation policy is still active.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicy'
} as const;

export const $CancellationPolicyApplicability = {
    title: 'Cancellation Policy Applicability',
    enum: ['Creation', 'Start', 'StartDate'],
    type: 'string',
    description: 'Applicability mode of the cancellation policy.'
} as const;

export const $CancellationPolicyApplicabilityEnum = {
    title: 'Cancellation Policy Applicability',
    enum: ['Creation', 'Start', 'StartDate'],
    type: 'string',
    description: `Applicability mode of the cancellation policy.

Creation

Start

StartDate`,
    'x-enumNames': ['Creation', 'Start', 'StartDate'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $CancellationPolicyByRate = {
    title: 'Cancellation policy data grouped by rate',
    required: ['Policies', 'RateId'],
    type: 'object',
    properties: {
        RateId: {
            type: 'string',
            description: 'Unique identifier of the `Rate`.',
            format: 'uuid'
        },
        Policies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CancellationPolicyData'
            },
            description: 'Collection of cancellation policy data.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyByRate'
} as const;

export const $CancellationPolicyByRateParameters = {
    title: 'CancellationPolicyByRateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'RateIds', 'ReservationEndUtc', 'ReservationStartUtc'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        RateIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Rate`.'
        },
        ReservationStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the reservation interval in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ReservationEndUtc: {
            minLength: 1,
            type: 'string',
            description: 'End of the reservation interval in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyByRateParameters'
} as const;

export const $CancellationPolicyByRateResult = {
    title: 'CancellationPolicyByRateResult',
    required: ['CancellationPolicies'],
    type: 'object',
    properties: {
        CancellationPolicies: {
            maxItems: 1300,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CancellationPolicyByRate'
            },
            description: 'List of cancellation policies data grouped by rate.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyByRateResult'
} as const;

export const $CancellationPolicyByReservation = {
    title: 'Cancellation policy data grouped by reservation',
    required: ['Policies', 'ReservationId'],
    type: 'object',
    properties: {
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        Policies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CancellationPolicyData'
            },
            description: 'Collection of cancellation policy data.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyByReservation'
} as const;

export const $CancellationPolicyByReservationParameters = {
    title: 'CancellationPolicyByReservationParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ReservationIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Reservation`.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyByReservationParameters'
} as const;

export const $CancellationPolicyByReservationResult = {
    title: 'CancellationPolicyByReservationResult',
    required: ['CancellationPolicies'],
    type: 'object',
    properties: {
        CancellationPolicies: {
            maxItems: 1300,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CancellationPolicyByReservation'
            },
            description: 'List of cancellation policies data grouped by reservation.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyByReservationResult'
} as const;

export const $CancellationPolicyData = {
    title: 'Cancellation policy data',
    required: ['AbsoluteFee', 'Applicability', 'ApplicabilityOffset', 'FeeExtents', 'RelativeFee'],
    type: 'object',
    properties: {
        Applicability: {
            title: 'Cancellation Policy Applicability',
            allOf: [
                {
                    '$ref': '#/components/schemas/CancellationPolicyApplicabilityEnum'
                }
            ],
            description: `Applicability mode of the cancellation policy.

Creation

Start

StartDate`,
            'x-enumNames': ['Creation', 'Start', 'StartDate'],
            'x-enumDescriptions': ['', '', '']
        },
        FeeExtents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CancellationFeeExtentEnum'
            },
            description: 'Extent for the cancellation fee, i.e. what should be in scope for the automatic payment.'
        },
        ApplicabilityOffset: {
            minLength: 1,
            type: 'string',
            description: 'Offset for order start (assuming Applicability is set to Start) from which the fee is applied in ISO 8601 duration format.'
        },
        FeeMaximumTimeUnits: {
            type: 'integer',
            description: 'Maximum number of time units the cancellation fee is applicable to.',
            format: 'int32',
            nullable: true
        },
        AbsoluteFee: {
            title: 'Currency value (ver 2023-02-02)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValue'
                }
            ],
            description: 'Absolute value of the fee.'
        },
        RelativeFee: {
            type: 'number',
            description: 'Relative value of the fee, as a percentage of the reservation price.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyData'
} as const;

export const $CancellationPolicyFilterParameters = {
    title: 'CancellationPolicyFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).'
        },
        CancellationPolicyIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Cancellation Policy](https://mews-systems.gitbook.io/connector-api/operations/#cancellationpolicy). Required if no other filter is provided.',
            nullable: true
        },
        RateGroupIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Rate group](https://mews-systems.gitbook.io/connector-api/operations/rates/#rategroup). Required if no other filter is provided.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the Cancellation Policy was updated. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted, or both types of record. If not specified, only active records will be returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyFilterParameters'
} as const;

export const $CancellationPolicyResult = {
    title: 'CancellationPolicyResult',
    required: ['CancellationPolicies'],
    type: 'object',
    properties: {
        CancellationPolicies: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CancellationPolicy'
            },
            description: 'The filtered cancellation policies.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest cancellation policy returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older cancellation policies.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CancellationPolicyResult'
} as const;

export const $CancellationReason = {
    enum: ['Other', 'ConfirmationMissed', 'BookedElsewhere', 'ForceMajeure', 'GuestComplaint', 'NoShow', 'PriceTooHigh', 'ServiceNotAvailable', 'InputError', 'InvalidPayment', 'TravelAgency', 'RequestedByGuest', 'Update', 'BookingAbandoned', 'RequestedByBooker'],
    type: 'string'
} as const;

export const $Cashier = {
    title: 'Cashier',
    required: ['CreatedUtc', 'EnterpriseId', 'Id', 'IsActive', 'Name', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the cashier.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the cashier is still active.'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the cashier.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the `Cashier` in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the `Cashier` in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Cashier'
} as const;

export const $CashierParameters = {
    title: 'CashierParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Ids: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Cashier](https://mews-systems.gitbook.io/connector-api/operations/#cashier).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which `Cashier` was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CashierParameters'
} as const;

export const $CashierResult = {
    title: 'CashierResult',
    required: ['Cashiers'],
    type: 'object',
    properties: {
        Cashiers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Cashier'
            },
            description: 'Cashiers in the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CashierResult'
} as const;

export const $CashierTransaction = {
    title: 'Cashier transaction',
    required: ['Amount', 'CashierId', 'CreatedUtc', 'EnterpriseId', 'Id', 'Number'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the transaction.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        CashierId: {
            type: 'string',
            description: 'Unique identifier of the [Cashier](https://mews-systems.gitbook.io/connector-api/operations/cashiers/#cashier).',
            format: 'uuid'
        },
        PaymentId: {
            type: 'string',
            description: 'Unique identifier of the corresponding payment [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).',
            format: 'uuid',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the transaction.'
        },
        Number: {
            minLength: 1,
            type: 'string',
            description: 'Number of the transaction.'
        },
        Notes: {
            type: 'string',
            description: 'Additional notes of the transaction.',
            nullable: true
        },
        Amount: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Total price of the transaction'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CashierTransaction'
} as const;

export const $CashierTransactionParameters = {
    title: 'CashierTransactionParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CashierTransactionIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Cashier transactions.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which Cashier transaction was created.',
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CashierTransactionParameters'
} as const;

export const $CashierTransactionResult = {
    title: 'CashierTransactionResult',
    required: ['CashierTransactions'],
    type: 'object',
    properties: {
        CashierTransactions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CashierTransaction'
            },
            description: 'The collection of cashier transactions.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CashierTransactionResult'
} as const;

export const $CategoryAdjustment = {
    title: 'Resource category adjustment',
    required: ['AbsoluteValue', 'CategoryId', 'RelativeValue'],
    type: 'object',
    properties: {
        CategoryId: {
            type: 'string',
            description: 'Unique identifier of the adjustment category.',
            format: 'uuid'
        },
        ParentCategoryId: {
            type: 'string',
            description: 'Unique identifier of the parent category that serves as a base price for the current category.',
            format: 'uuid',
            nullable: true
        },
        AbsoluteValue: {
            type: 'number',
            description: 'Absolute value of the adjustment (e.g. `50` represents 50 EUR in case the rate currency is `EUR`).',
            format: 'double'
        },
        RelativeValue: {
            type: 'number',
            description: 'Relative value of the adjustment (e.g. `0.5` represents 50% increase).',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CategoryAdjustment'
} as const;

export const $CategoryAvailability = {
    title: 'Resource category availability',
    required: ['Adjustments', 'Availabilities', 'CategoryId'],
    type: 'object',
    properties: {
        CategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources#resource-category).',
            format: 'uuid'
        },
        Availabilities: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            description: 'Absolute availabilities of the resource category in the covered dates.'
        },
        Adjustments: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            description: 'Relative availability adjustments set for resource category in the covered dates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CategoryAvailability'
} as const;

export const $CategoryPricing = {
    title: 'Resource category pricing',
    required: ['AmountPrices', 'CategoryId', 'Prices'],
    type: 'object',
    properties: {
        CategoryId: {
            type: 'string',
            description: 'Unique identifier of the category.',
            format: 'uuid'
        },
        Prices: {
            type: 'array',
            items: {
                type: 'number',
                format: 'double'
            },
            description: 'Prices of the rate for the resource category in the covered dates.',
            deprecated: true,
            'x-deprecatedMessage': 'Use `AmountPrices` instead.'
        },
        AmountPrices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Amount'
            },
            description: 'Prices of the rate for the resource category in the covered dates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CategoryPricing'
} as const;

export const $ChannelManagerDetails = {
    title: 'Reservation channel manager details',
    required: ['CreatedUtc', 'RequestedRateCode', 'ReservationId'],
    type: 'object',
    properties: {
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the `Reservation`.',
            format: 'uuid'
        },
        RequestedRateCode: {
            minLength: 1,
            type: 'string',
            description: 'Rate code requested by the channel manager for this reservation.'
        },
        ChannelManagerName: {
            type: 'string',
            description: 'Name of the Channel Manager associated with this reservation.',
            nullable: true
        },
        ChannelNumber: {
            type: 'string',
            description: 'Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number).',
            nullable: true
        },
        ChannelManagerGroupNumber: {
            type: 'string',
            description: 'Number of the reservation group within a Channel Manager.',
            nullable: true
        },
        ChannelManagerNumber: {
            type: 'string',
            description: 'Unique number of the reservation within the reservation group.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'The timestamp when the Channel Manager reservation was created.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ChannelManagerDetails'
} as const;

export const $ChannelManagerReservation = {
    title: 'ChannelManagerReservation',
    type: 'object',
    properties: {
        ReservationId: {
            type: 'string',
            format: 'uuid'
        },
        RequestedRateCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ChannelManagerReservation'
} as const;

export const $ChargeCreditCardParameters = {
    title: 'CreditCard payment data',
    required: ['AccessToken', 'Amount', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        BillId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category).',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation the payment belongs to.',
            format: 'uuid',
            nullable: true
        },
        Amount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmountParameters'
                }
            ],
            description: 'Amount of the credit card payment.'
        },
        Notes: {
            type: 'string',
            description: 'Additional payment notes.',
            nullable: true
        },
        CreditCardId: {
            type: 'string',
            description: 'Unique identifier of the [Credit card](https://mews-systems.gitbook.io/connector-api/operations/#credit-card).',
            format: 'uuid'
        },
        ReceiptIdentifier: {
            type: 'string',
            description: 'Identifier of the payment receipt.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ChargeCreditCardParameters'
} as const;

export const $ChargeCreditCardResult = {
    title: 'ChargeCreditCardResult',
    type: 'object',
    properties: {
        PaymentId: {
            type: 'string',
            description: 'Unique identifier of the [Payment item](https://mews-systems.gitbook.io/connector-api/operations/accountingitems/#payment-item).',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ChargeCreditCardResult'
} as const;

export const $ChargeableCustomer = {
    title: 'Customer search result',
    required: ['Customer'],
    type: 'object',
    properties: {
        Customer: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Customer'
                }
            ],
            description: 'The found customer.'
        },
        Reservation: {
            title: 'Reservation (ver 2017-04-12)',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationOld'
                }
            ],
            description: 'Reservation of the customer in case they are currently staying in the property.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ChargeableCustomer'
} as const;

export const $ClearRestrictionParameters = {
    title: 'ClearRestrictionParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Data', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) to which the restrictions apply.',
            'x-schema-id': 'HybridIdentifier'
        },
        Data: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RestrictionClearData'
            },
            description: 'Details of the matching conditions and time intervals for clearing restrictions.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ClearRestrictionParameters'
} as const;

export const $CommandsGetAllFilterByCommandIdParameters = {
    title: 'Get all commands by unique identifiers',
    required: ['CommandIds'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/CommandsGetAllFilterParameters'
        }
    ],
    properties: {
        CommandIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the commands to filter by.'
        }
    },
    additionalProperties: false,
    description: 'Filter commands by their unique identifiers.',
    'x-schema-id': 'CommandsGetAllFilterByCommandIdParameters'
} as const;

export const $CommandsGetAllFilterByStatesParameters = {
    title: 'Get all commands by device identifiers and states',
    required: ['DeviceIds', 'States'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/CommandsGetAllFilterParameters'
        }
    ],
    properties: {
        DeviceIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Device` to filter by.'
        },
        States: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DeviceCommandStateEnum'
            },
            description: 'States of the commands to filter by.'
        },
        UpdatedUtc: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the commands were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    description: 'Filter commands by the unique identifiers of `Device` and states, with optional filtering by update interval.',
    'x-schema-id': 'CommandsGetAllFilterByStatesParameters'
} as const;

export const $CommandsGetAllFilterParameters = {
    title: 'Get all commands filter parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CommandsGetAllFilterParameters'
} as const;

export const $Companionship = {
    title: 'Companionship',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/#companionship).',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            format: 'uuid'
        },
        ReservationGroupId: {
            type: 'string',
            description: 'Unique identifier of [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).',
            format: 'uuid'
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of reservation.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Companionship'
} as const;

export const $CompanionshipAddParameters = {
    title: 'CompanionshipAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerId', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the `Reservation`.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer`.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanionshipAddParameters'
} as const;

export const $CompanionshipAddResult = {
    title: 'CompanionshipAddResult',
    required: ['CompanionshipId'],
    type: 'object',
    properties: {
        CompanionshipId: {
            type: 'string',
            description: 'Identifier of the created `Companionship` entity.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanionshipAddResult'
} as const;

export const $CompanionshipDeleteParameters = {
    title: 'CompanionshipDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerId', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the `Reservation`.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer`.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanionshipDeleteParameters'
} as const;

export const $CompanionshipExtent = {
    title: 'CompanionshipExtent',
    type: 'object',
    properties: {
        Reservations: {
            type: 'boolean'
        },
        ReservationGroups: {
            type: 'boolean'
        },
        Customers: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned. E.g. it is possible to specify that together with the companionships, customers, reservations, and reservation groups should be also returned.',
    'x-schema-id': 'CompanionshipExtent'
} as const;

export const $CompanionshipFilterParameters = {
    title: 'CompanionshipFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Extent', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CompanionshipIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/#companionship).',
            nullable: true
        },
        Extent: {
            title: 'CompanionshipExtent',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanionshipExtent'
                }
            ],
            description: 'Extent of data to be returned. E.g. it is possible to specify that together with the companionships, customers, reservations, and reservation groups should be also returned.'
        },
        ReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of reservations.',
            nullable: true
        },
        CustomerIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            nullable: true
        },
        ReservationGroupIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanionshipFilterParameters'
} as const;

export const $CompanionshipResult = {
    title: 'CompanionshipResult',
    type: 'object',
    properties: {
        Companionships: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Companionship'
            },
            description: 'Companionships.',
            nullable: true
        },
        Reservations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationOld'
            },
            description: 'The accompanied reservations.',
            nullable: true
        },
        ReservationGroups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationGroupOld'
            },
            description: 'The accompanied reservation groups.',
            nullable: true
        },
        Customers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Customer'
            },
            description: 'Customers that belong to the companionships.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanionshipResult'
} as const;

export const $Company = {
    title: 'Company',
    required: ['ChainId', 'CreditRating', 'Id', 'IsActive', 'Name', 'Number', 'Options'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the company.',
            format: 'uuid'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain.',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the company.'
        },
        MotherCompanyId: {
            type: 'string',
            description: 'Unique identifier of mother company.',
            format: 'uuid',
            nullable: true
        },
        InvoicingEmail: {
            type: 'string',
            description: 'Email for issuing invoices to the company.',
            format: 'email',
            nullable: true
        },
        WebsiteUrl: {
            type: 'string',
            description: 'The website url of the company.',
            format: 'uri',
            nullable: true
        },
        InvoiceDueInterval: {
            type: 'string',
            description: 'The maximum time, when the invoice has to be be paid in ISO 8601 duration format.',
            nullable: true
        },
        Options: {
            title: 'Company Options',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyOptions'
                }
            ],
            description: 'Options of the company.'
        },
        CreditRating: {
            title: 'Credit Rating',
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRating'
                }
            ],
            description: 'Credit rating to define creditworthiness of the company.'
        },
        Department: {
            type: 'string',
            description: 'The internal segmentation of a company, e.g. sales department.',
            nullable: true
        },
        DunsNumber: {
            type: 'string',
            description: 'The Dun & Bradstreet unique 9-digit DUNS number.',
            nullable: true
        },
        ReferenceIdentifier: {
            type: 'string',
            description: 'External system identifier - custom identifier used by an external system such as an external database.',
            nullable: true
        },
        AccountingCode: {
            type: 'string',
            description: 'Accounting code of the company.',
            nullable: true
        },
        AdditionalTaxIdentifier: {
            type: 'string',
            description: 'Additional tax identifier of the company.',
            nullable: true
        },
        BillingCode: {
            type: 'string',
            description: 'Billing code of the company.',
            nullable: true
        },
        Contact: {
            type: 'string',
            description: 'Other contact details, such as telephone, email or similar.',
            nullable: true
        },
        ContactPerson: {
            type: 'string',
            description: 'Contact person of the company.',
            nullable: true
        },
        ElectronicInvoiceIdentifier: {
            type: 'string',
            description: 'Electronic invoice identifier of the company.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AdditionalTaxIdentifier` instead.'
        },
        Identifier: {
            type: 'string',
            description: 'Fiscal or legal identifier of the company.',
            nullable: true
        },
        Iata: {
            type: 'string',
            description: 'Iata of the company.',
            nullable: true
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the company is still active.'
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        Number: {
            type: 'integer',
            description: 'Unique number of the company.',
            format: 'int64'
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identification number of the company.',
            nullable: true
        },
        Telephone: {
            type: 'string',
            description: 'Contact telephone number.',
            format: 'tel',
            nullable: true
        },
        CreatedUtc: {
            type: 'string',
            description: 'Date of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) creation date and time.',
            format: 'date-time',
            nullable: true
        },
        UpdatedUtc: {
            type: 'string',
            description: 'Date of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) last update date and time.',
            format: 'date-time',
            nullable: true
        },
        Address: {
            title: 'Address',
            allOf: [
                {
                    '$ref': '#/components/schemas/OldAddress'
                }
            ],
            description: '',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use AddressId instead.'
        },
        AddressId: {
            type: 'string',
            description: 'Unique identifier of the company [Address](https://mews-systems.gitbook.io/connector-api/operations/addresses/#account-address).',
            format: 'uuid',
            nullable: true
        },
        MergeTargetId: {
            type: 'string',
            description: 'Unique identifier of the account (Customer) to which this company is linked.',
            format: 'uuid',
            nullable: true
        },
        TaxIdentificationNumber: {
            type: 'string',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use TaxIdentifier instead.'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of company from external system.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Company'
} as const;

export const $CompanyAccount = {
    title: 'Company',
    required: ['ChainId', 'Classifications', 'CreatedUtc', 'Name', 'Options', 'UpdatedUtc', 'UpdaterProfileId'],
    type: 'object',
    properties: {
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain.',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the `Company` in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the `Company` in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdaterProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who updated the company.',
            format: 'uuid'
        },
        Email: {
            type: 'string',
            description: 'Email address of the company.',
            format: 'email',
            nullable: true
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identification number of the company.',
            nullable: true
        },
        BillingCode: {
            type: 'string',
            description: 'Billing code of the company.',
            nullable: true
        },
        AccountingCode: {
            type: 'string',
            description: 'Accounting code of the company.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the company.'
        },
        MotherCompanyId: {
            type: 'string',
            description: 'Unique identifier of mother company.',
            format: 'uuid',
            nullable: true
        },
        WebsiteUrl: {
            type: 'string',
            description: 'The website url of the company.',
            format: 'uri',
            nullable: true
        },
        InvoiceDueInterval: {
            type: 'string',
            description: 'The maximum time (in ISO 8601 duration format), when the invoice has to be be paid.',
            nullable: true
        },
        CreditRatingBasic: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingBasicEnum'
                }
            ],
            description: `Credit rating to define credit worthiness of the company.

CreditOk (Company can book services.)

PaymentRequiredUpfront (Company must pay upfront.)

LocalDecisionRequired (Requires local approval.)`,
            nullable: true
        },
        Department: {
            type: 'string',
            description: 'The internal segmentation of a company, e.g. sales department.',
            nullable: true
        },
        DunsNumber: {
            type: 'string',
            description: 'The Dun & Bradstreet unique 9-digit DUNS number.',
            nullable: true
        },
        ReferenceId: {
            type: 'string',
            description: 'External system identifier - custom identifier used by an external system such as an external database.',
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'Identifier of company from external system.',
            nullable: true
        },
        AdditionalTaxIdentifier: {
            type: 'string',
            description: 'Additional tax identifier of the company.',
            nullable: true
        },
        Contact: {
            type: 'string',
            description: 'Other contact details, such as telephone, email or similar.',
            nullable: true
        },
        ContactPerson: {
            type: 'string',
            description: 'Contact person of the company.',
            nullable: true
        },
        FiscalIdentifier: {
            type: 'string',
            description: 'Fiscal identifier of the company.',
            nullable: true
        },
        Iata: {
            type: 'string',
            description: 'Iata of the company.',
            nullable: true
        },
        Telephone: {
            type: 'string',
            description: 'Contact telephone number.',
            nullable: true
        },
        SourceId: {
            type: 'string',
            description: 'Unique identifier of the `Source`.',
            format: 'uuid',
            nullable: true
        },
        Classifications: {
            title: 'Company classifications',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyAccountClassifications'
                }
            ],
            description: 'Classifications of the company.'
        },
        Options: {
            title: 'Company options',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyAccountOptions'
                }
            ],
            description: 'Options of the company.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'CompanyAccount'
} as const;

export const $CompanyAccountClassifications = {
    title: 'Company classifications',
    type: 'object',
    properties: {
        Corporate: {
            type: 'boolean',
            description: 'Corporate.'
        },
        Internal: {
            type: 'boolean',
            description: 'Internal.'
        },
        Private: {
            type: 'boolean',
            description: 'Private.'
        },
        OnlineTravelAgency: {
            type: 'boolean',
            description: 'Online travel agency.'
        },
        GlobalDistributionSystem: {
            type: 'boolean',
            description: 'Global distribution system.'
        },
        Marketing: {
            type: 'boolean',
            description: 'Marketing.'
        },
        Inactive: {
            type: 'boolean',
            description: 'Inactive.'
        },
        GovernmentEntity: {
            type: 'boolean',
            description: 'Government Entity'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyAccountClassifications'
} as const;

export const $CompanyAccountOptions = {
    title: 'Company options',
    type: 'object',
    properties: {
        Invoiceable: {
            type: 'boolean',
            description: 'Whether the company is invoiceable or not.'
        },
        AddFeesToInvoices: {
            type: 'boolean',
            description: 'Whether the company has an additional fee applied for invoicing or not.'
        },
        AddTaxDeductedPaymentToInvoices: {
            type: 'boolean',
            description: 'Whether tax-deducted payments should be automatically added to invoices.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyAccountOptions'
} as const;

export const $CompanyAddParameters = {
    title: 'CompanyAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Name', 'Options'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the company.'
        },
        MotherCompanyId: {
            type: 'string',
            description: 'Unique identifier of the mother company.',
            format: 'uuid',
            nullable: true
        },
        InvoicingEmail: {
            type: 'string',
            description: 'Email for issuing invoices to the company.',
            format: 'email',
            nullable: true
        },
        WebsiteUrl: {
            type: 'string',
            description: 'The website url of the company.',
            format: 'uri',
            nullable: true
        },
        InvoiceDueInterval: {
            type: 'string',
            description: 'The maximum time, when the invoice has to be be paid in ISO 8601 duration format.',
            nullable: true
        },
        Options: {
            title: 'Company Options Parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyOptionsParameters'
                }
            ],
            description: 'Options of the company.'
        },
        CreditRating: {
            title: 'Credit rating parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingParameters'
                }
            ],
            description: 'Credit rating to define creditworthiness of the company.',
            nullable: true
        },
        Department: {
            type: 'string',
            description: 'The internal segmentation of a company, e.g. sales department.',
            nullable: true
        },
        DunsNumber: {
            type: 'string',
            description: 'The Dun & Bradstreet unique 9-digit DUNS number.',
            nullable: true
        },
        ReferenceIdentifier: {
            type: 'string',
            description: 'External system identifier - custom identifier used by an external system such as an external database.',
            nullable: true
        },
        AccountingCode: {
            type: 'string',
            description: 'Accounting code of the company.',
            nullable: true
        },
        AdditionalTaxIdentifier: {
            type: 'string',
            description: 'Additional tax identifer of the company.',
            nullable: true
        },
        BillingCode: {
            type: 'string',
            description: 'Billing code of the company.',
            nullable: true
        },
        Contact: {
            type: 'string',
            description: 'Other contact details, such as telephone, email or similar.',
            nullable: true
        },
        ContactPerson: {
            type: 'string',
            description: 'Contact person of the company.',
            nullable: true
        },
        Identifier: {
            type: 'string',
            description: 'Fiscal or legal identifier of the company.',
            nullable: true
        },
        Iata: {
            type: 'string',
            description: 'Iata of the company.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Notes of the company.',
            nullable: true
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identification number of the company.',
            nullable: true
        },
        Telephone: {
            type: 'string',
            description: 'Contact telephone number.',
            format: 'tel',
            nullable: true
        },
        Address: {
            title: 'Address parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AddressParameters'
                }
            ],
            description: 'New address details.',
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the company from external system.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyAddParameters'
} as const;

export const $CompanyClassificationUpdateParameters = {
    title: 'Company update classifications',
    type: 'object',
    properties: {
        Corporate: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Corporate (or `null` if the value should not be updated).',
            nullable: true
        },
        Internal: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Internal (or `null` if the value should not be updated).',
            nullable: true
        },
        Private: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Private (or `null` if the value should not be updated).',
            nullable: true
        },
        OnlineTravelAgency: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Online travel agency (or `null` if the value should not be updated).',
            nullable: true
        },
        GlobalDistributionSystem: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Global distribution system (or `null` if the value should not be updated).',
            nullable: true
        },
        Marketing: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Marketing (or `null` if the value should not be updated).',
            nullable: true
        },
        Inactive: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Inactive (or `null` if the value should not be updated).',
            nullable: true
        },
        GovernmentEntity: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Government Entity (or `null` if the value should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyClassificationUpdateParameters'
} as const;

export const $CompanyClassifications = {
    title: 'CompanyClassifications',
    type: 'object',
    properties: {
        Corporate: {
            type: 'boolean'
        },
        Internal: {
            type: 'boolean'
        },
        Private: {
            type: 'boolean'
        },
        OnlineTravelAgency: {
            type: 'boolean'
        },
        GlobalDistributionSystem: {
            type: 'boolean'
        },
        Marketing: {
            type: 'boolean'
        },
        Inactive: {
            type: 'boolean'
        },
        GovernmentEntity: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyClassifications'
} as const;

export const $CompanyClassificationsParameters = {
    title: 'CompanyClassificationsParameters',
    type: 'object',
    properties: {
        Corporate: {
            type: 'boolean'
        },
        Internal: {
            type: 'boolean'
        },
        Private: {
            type: 'boolean'
        },
        OnlineTravelAgency: {
            type: 'boolean'
        },
        GlobalDistributionSystem: {
            type: 'boolean'
        },
        Marketing: {
            type: 'boolean'
        },
        Inactive: {
            type: 'boolean'
        },
        GovernmentEntity: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyClassificationsParameters'
} as const;

export const $CompanyContractFilterParameters = {
    title: 'CompanyContractFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CompanyContractIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the Travel agency contract to fetch.',
            nullable: true
        },
        CompanyIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) assigned with Travel agency contracts.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) where the Travel agency contract belong to.'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyContractFilterParameters'
} as const;

export const $CompanyExtent = {
    title: 'Company Extent',
    type: 'object',
    properties: {
        Inactive: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyExtent'
} as const;

export const $CompanyFilterParameters = {
    title: 'CompanyFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.',
            nullable: true
        },
        MotherCompanyIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of mother `Company`.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        TimeFilter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CompanyTimeFilter'
                }
            ],
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use CreatedUtc or UpdatedUtc instead.'
        },
        StartUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use CreatedUtc or UpdatedUtc instead.'
        },
        EndUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use CreatedUtc or UpdatedUtc instead.'
        },
        Ids: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Companies](https://mews-systems.gitbook.io/connector-api/operations/#company).',
            nullable: true
        },
        ExternalIdentifiers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Identifiers of [Company](https://mews-systems.gitbook.io/connector-api/operations/#company) from external system.',
            nullable: true
        },
        Names: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Names of [Companies](https://mews-systems.gitbook.io/connector-api/operations/#company).',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted, or both types of record. If not specified, both active and deleted records will be returned.',
            nullable: true
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyFilterParameters'
} as const;

export const $CompanyOptionUpdateParameters = {
    title: 'Company update options',
    type: 'object',
    properties: {
        Invoiceable: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Whether the company is invoiceable or not (or `null` if the `Invoiceable` field should not be updated).',
            nullable: true
        },
        AddFeesToInvoices: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Whether the company has an additional fee applied for invoicing or not (or `null` if the `AddFeesToInvoices` field should not be updated).',
            nullable: true
        },
        AddTaxDeductedPaymentToInvoices: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Whether tax-deducted payments should be automatically added to invoices (or `null` if the `AddTaxDeductedPaymentToInvoices` field should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Options of the company.',
    'x-schema-id': 'CompanyOptionUpdateParameters'
} as const;

export const $CompanyOptions = {
    title: 'Company Options',
    type: 'object',
    properties: {
        Invoiceable: {
            type: 'boolean',
            description: 'Whether the company is invoiceable or not.'
        },
        AddFeesToInvoices: {
            type: 'boolean',
            description: 'Whether the company has an additional fee applied for invoicing or not.'
        },
        AddTaxDeductedPaymentToInvoices: {
            type: 'boolean',
            description: 'Whether tax-deducted payments should be automatically added to invoices.'
        }
    },
    additionalProperties: false,
    description: 'Options of the company.',
    'x-schema-id': 'CompanyOptions'
} as const;

export const $CompanyOptionsParameters = {
    title: 'Company Options Parameters',
    type: 'object',
    properties: {
        Invoiceable: {
            type: 'boolean',
            description: 'Whether the company is invoiceable or not.'
        },
        AddFeesToInvoices: {
            type: 'boolean',
            description: 'Whether the company has an additional fee applied for invoicing or not.'
        },
        AddTaxDeductedPaymentToInvoices: {
            type: 'boolean',
            description: 'Whether tax-deducted payments should be automatically added to invoices.'
        }
    },
    additionalProperties: false,
    description: 'Options of the company.',
    'x-schema-id': 'CompanyOptionsParameters'
} as const;

export const $CompanyRelationsParameters = {
    title: 'Company with relations parameters',
    type: 'object',
    properties: {
        PartnerCompany: {
            type: 'boolean',
            description: 'Indicates whether the billing automation will apply if the company added to a reservation is a partner company.'
        },
        TravelAgency: {
            type: 'boolean',
            description: 'Indicates whether the billing automation will apply if the company added to a reservation is a travel agency.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyRelationsParameters'
} as const;

export const $CompanyResult = {
    title: 'CompanyResult',
    required: ['Companies'],
    type: 'object',
    properties: {
        Companies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Company'
            },
            description: 'The company profiles of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest company item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older companies. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message; this is true even when using Extents set to false so that no actual data is returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyResult'
} as const;

export const $CompanyTimeFilter = {
    title: 'Company Time Filter',
    enum: ['Created', 'Updated'],
    type: 'string'
} as const;

export const $CompanyUpdateParameters = {
    title: 'CompanyUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CompanyId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/#company).',
            format: 'uuid'
        },
        Name: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Name of the company (or `null` if the name should not be updated).',
            nullable: true
        },
        MotherCompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the mother company (or `null` if the mother company should not be updated).',
            nullable: true
        },
        InvoicingEmail: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Email for issuing invoices to the company  (or `null` if the email for issuing invoices should not be updated).',
            format: 'email',
            nullable: true
        },
        WebsiteUrl: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The website url of the company (or `null` if the website url should not be updated).',
            format: 'uri',
            nullable: true
        },
        InvoiceDueInterval: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The maximum time, when the invoice has to be be paid in ISO 8601 duration format (or `null` if the interval should not be updated).',
            nullable: true
        },
        Options: {
            title: 'Company update options',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyOptionUpdateParameters'
                }
            ],
            description: 'Options of the company (or `null` if the company options should not be updated).',
            nullable: true
        },
        CreditRating: {
            title: 'Credit rating update parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingUpdateParameters'
                }
            ],
            description: 'Credit rating to define creditworthiness of the company (or `null` if the credit rating should not be updated).',
            nullable: true
        },
        Department: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The internal segmentation of a company, e.g. sales department (or `null` if the department should not be updated).',
            nullable: true
        },
        DunsNumber: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'The Dun & Bradstreet unique 9-digit DUNS number (or `null` if the Duns number should not be updated).',
            nullable: true
        },
        ReferenceIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'External system identifier - custom identifier used by an external system such as an external database (or `null` if the identifier should not be updated).',
            nullable: true
        },
        AccountingCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Accounting code of the company (or `null` if the accounting code should not be updated).',
            nullable: true
        },
        AdditionalTaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Additional tax identifier of the company (or `null` if the additional tax identifier should not be updated).',
            nullable: true
        },
        BillingCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Billing code of the company (or `null` if the billing code should not be updated).',
            nullable: true
        },
        Contact: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Other contact details, such as telephone, email or similar (or `null` if the contact should not be updated).',
            nullable: true
        },
        ContactPerson: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Contact person of the company (or `null` if the contact person should not be updated).',
            nullable: true
        },
        Identifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Fiscal or legal identifier of the company (or `null` if the identifier should not be updated).',
            nullable: true
        },
        Iata: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Iata of the company (or `null` if the Iata should not be updated).',
            nullable: true
        },
        Notes: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Notes of the company (or `null` if the notes should not be updated).',
            nullable: true
        },
        TaxIdentifier: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Tax identification number of the company (or `null` if the tax identifier should not be updated).',
            nullable: true
        },
        Telephone: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Contact telephone number (or `null` if the telephone number should not be updated).',
            format: 'tel',
            nullable: true
        },
        ExternalIdentifier: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Identifier of the company from external system (or `null` if the External Identifier should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyUpdateParameters'
} as const;

export const $CompanyWithBillingAutomationRelation = {
    title: 'Company with billing automation relation',
    required: ['CompanyId', 'CompanyRelations'],
    type: 'object',
    properties: {
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of the company.',
            format: 'uuid'
        },
        CompanyRelations: {
            title: 'Company with relations parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/CompanyRelationsParameters'
                }
            ],
            description: 'Company relations.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyWithBillingAutomationRelation'
} as const;

export const $CompanyWithBillingAutomationRelationIEnumerableUpdateValue = {
    title: 'Company with billing automation relation array update value',
    type: 'object',
    properties: {
        Value: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CompanyWithBillingAutomationRelation'
            },
            description: 'Value which is to be updated.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CompanyWithBillingAutomationRelationIEnumerableUpdateValue'
} as const;

export const $Configuration = {
    title: 'Configuration',
    required: ['Enterprise', 'NowUtc'],
    type: 'object',
    properties: {
        NowUtc: {
            minLength: 1,
            type: 'string',
            description: 'Current server date and time in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Enterprise: {
            title: 'Enterprise',
            allOf: [
                {
                    '$ref': '#/components/schemas/Enterprise'
                }
            ],
            description: 'The enterprise (e.g. hotel, hostel) associated with the access token.'
        },
        Service: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Service'
                }
            ],
            description: 'The reservable service (e.g. accommodation, parking) associated with the access token of the service scoped integration.',
            nullable: true
        },
        PaymentCardStorage: {
            title: 'Payment card storage',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentCardStorage'
                }
            ],
            description: 'Contains information about payment card storage.',
            nullable: true
        },
        IsIdentityDocumentNumberRequired: {
            type: 'boolean',
            description: 'Whether the identity documents for this enterprise include the value of identity document number as required by the legal environment. When `false`, the number is not required, and an empty string can be used in write operations. In read operations, an empty string is returned when an empty string was provided for the number.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Configuration'
} as const;

export const $ConfigurationFilterParameters = {
    title: 'ConfigurationFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/#enterprise), defaults to the enterprise associated with the given access token.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ConfigurationFilterParameters'
} as const;

export const $ConfirmReservationParameters = {
    title: 'ConfirmReservationParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the reservations to confirm.'
        },
        SendConfirmationEmail: {
            type: 'boolean',
            description: 'Wheter the confirmation email is sent. Default value is true.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ConfirmReservationParameters'
} as const;

export const $ConnectorApiExceptionResult = {
    title: 'ConnectorApiExceptionResult',
    type: 'object',
    properties: {
        Message: {
            type: 'string',
            nullable: true
        },
        RequestId: {
            type: 'string',
            nullable: true
        },
        Details: {
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ConnectorApiExceptionResult'
} as const;

export const $ContractResult = {
    title: 'ContractResult',
    required: ['TravelAgencyContracts'],
    type: 'object',
    properties: {
        TravelAgencyContracts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TravelAgencyContract'
            },
            description: 'The updated travel agency contracts.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest contract returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older messages.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ContractResult'
} as const;

export const $Coproduct = {
    title: 'Coproduct',
    required: ['Discriminator', 'Value'],
    type: 'object',
    properties: {
        Discriminator: {
            minLength: 1,
            type: 'string'
        },
        Value: {}
    },
    additionalProperties: false,
    'x-schema-id': 'Coproduct'
} as const;

export const $CoproductParameters = {
    title: 'CoproductParameters',
    type: 'object',
    properties: {
        Discriminator: {
            type: 'string',
            nullable: true
        },
        Value: {
            allOf: [
                {
                    '$ref': '#/components/schemas/JToken'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CoproductParameters'
} as const;

export const $CostParameters = {
    title: 'CostParameters',
    required: ['Amount', 'Currency', 'Tax'],
    type: 'object',
    properties: {
        Amount: {
            type: 'number',
            format: 'double'
        },
        Currency: {
            minLength: 1,
            type: 'string',
            format: 'currency'
        },
        Tax: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CostParameters'
} as const;

export const $Counter = {
    title: 'Counter',
    required: ['CreatedUtc', 'EnterpriseId', 'Format', 'Id', 'IsDefault', 'Name', 'Type', 'UpdatedUtc', 'Value'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the counter.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the counter.'
        },
        IsDefault: {
            type: 'boolean',
            description: 'Whether the counter is used by default.'
        },
        Value: {
            type: 'integer',
            description: 'Current value the counter.',
            format: 'int64'
        },
        Format: {
            minLength: 1,
            type: 'string',
            description: 'Format the counter is displayed in.'
        },
        Type: {
            '$ref': '#/components/schemas/EnterpriseScopeCounterDiscriminator'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the counter in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the counter in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Counter'
} as const;

export const $CounterFilterParameters = {
    title: 'CounterFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CounterIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        Type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EnterpriseScopeCounterDiscriminator'
                }
            ],
            description: 'Type of the counter. If not specified, the operation returns all types.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CounterFilterParameters'
} as const;

export const $CounterResult = {
    title: 'CounterResult',
    required: ['BillCounters', 'BillPreviewCounters', 'Counters', 'ProformaCounters', 'RegistrationCardCounters', 'ServiceOrderCounters'],
    type: 'object',
    properties: {
        Counters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Counter'
            },
            description: 'All types of counters.'
        },
        BillCounters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Counter'
            },
            description: 'The counters used to count closed [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**',
            deprecated: true
        },
        ProformaCounters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Counter'
            },
            description: 'The counters used to count Pro Forma invoices for [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**',
            deprecated: true
        },
        BillPreviewCounters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Counter'
            },
            description: 'The counters used to count bill previews for [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill). **Deprecated!**',
            deprecated: true
        },
        ServiceOrderCounters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Counter'
            },
            description: 'The counters used to count service orders (for example reservations). **Deprecated!**',
            deprecated: true
        },
        RegistrationCardCounters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Counter'
            },
            description: 'The counters used to count registration cards. **Deprecated!**',
            deprecated: true
        },
        Cursor: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CounterResult'
} as const;

export const $Country = {
    title: 'Country',
    required: ['Code', 'EnglishName', 'SovereignCountryCode'],
    type: 'object',
    properties: {
        Code: {
            minLength: 1,
            type: 'string',
            description: 'ISO 3166-1 alpha-2 code, e.g. `CZ` or `SK`.'
        },
        SovereignCountryCode: {
            minLength: 1,
            type: 'string',
            description: 'ISO 3166-1 alpha-2 code of the sovereign country. May differ from `Code` for dependent territories.'
        },
        EnglishName: {
            minLength: 1,
            type: 'string',
            description: 'English name of the country.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Country'
} as const;

export const $CountryGroup = {
    title: 'Country group',
    required: ['Code', 'CountryCodes', 'EnglishName'],
    type: 'object',
    properties: {
        Code: {
            minLength: 1,
            type: 'string',
            description: 'Group code, e.g. `EU`, `SCHENGEN`, `NORDIC`...'
        },
        EnglishName: {
            minLength: 1,
            type: 'string',
            description: 'English name of the country group.'
        },
        CountryCodes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Codes of countries included in the group, in ISO 3166-1 alpha-2 format.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CountryGroup'
} as const;

export const $CountryResult = {
    title: 'CountryResult',
    required: ['Countries', 'CountryGroups', 'CountryRules', 'CountrySubdivisions'],
    type: 'object',
    properties: {
        Countries: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Country'
            },
            description: 'The supported countries.'
        },
        CountrySubdivisions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CountrySubdivision'
            },
            description: 'The supported country subdivisions.'
        },
        CountryRules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CountryRule'
            },
            description: 'Country-specific rules'
        },
        CountryGroups: {
            title: 'Country group',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CountryGroup'
            },
            description: 'The supported country groups.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CountryResult'
} as const;

export const $CountryRule = {
    title: 'Country rules',
    required: ['CountryCode', 'DriverLicenceExpirationDateNotRequired', 'IdentityCardExpirationDateNotRequired'],
    type: 'object',
    properties: {
        CountryCode: {
            minLength: 1,
            type: 'string',
            description: 'ISO 3166-1 alpha-2 code, e.g. US or GB.'
        },
        IdentityCardExpirationDateNotRequired: {
            type: 'boolean',
            description: 'Whether the country requires expiration date for identity card.'
        },
        DriverLicenceExpirationDateNotRequired: {
            type: 'boolean',
            description: "Whether the country requires expiration date for driver's license."
        }
    },
    additionalProperties: false,
    description: 'Country-specific rules',
    'x-schema-id': 'CountryRule'
} as const;

export const $CountrySubdivision = {
    title: 'Country subdivision',
    required: ['Code', 'CountryCode', 'EnglishName'],
    type: 'object',
    properties: {
        Code: {
            minLength: 1,
            type: 'string',
            description: 'ISO 3166-2 code of the administrative division, e.g AU-QLD.'
        },
        CountryCode: {
            minLength: 1,
            type: 'string',
            description: 'ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries#country).'
        },
        EnglishName: {
            minLength: 1,
            type: 'string',
            description: 'English name of the country subdivision.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CountrySubdivision'
} as const;

export const $CreditCard = {
    title: 'Credit card',
    required: ['CreatedUtc', 'CustomerId', 'Id', 'IsActive', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the credit card.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid',
            nullable: true
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the credit card [owner](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the credit card is still active.'
        },
        State: {
            type: 'string',
            description: 'State of the credit card.',
            nullable: true
        },
        Kind: {
            type: 'string',
            description: 'Kind of the credit card.',
            nullable: true
        },
        Format: {
            type: 'string',
            description: 'Format of the credit card.',
            nullable: true
        },
        Type: {
            type: 'string',
            description: 'Type of the credit card.',
            nullable: true
        },
        ObfuscatedNumber: {
            type: 'string',
            description: 'Obfuscated credit card number. At most first six digits and last four digits can be specified, otherwise the digits are replaced with *.',
            nullable: true
        },
        Expiration: {
            type: 'string',
            description: 'Expiration of the credit card in format MM/YYYY.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the credit card in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the credit card in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CreditCard'
} as const;

export const $CreditCardData = {
    title: 'CreditCardData',
    required: ['Expiration', 'StorageData'],
    type: 'object',
    properties: {
        MaskedStorageData: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        StorageData: {
            minLength: 1,
            type: 'string'
        },
        ObfuscatedNumber: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        Expiration: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false,
    description: 'Credit card details provided by PCI provider.',
    'x-schema-id': 'CreditCardData'
} as const;

export const $CreditCardFilterParameters = {
    title: 'CreditCardFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CreditCardIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Credit cards](https://mews-systems.gitbook.io/connector-api/operations/#credit-card). Required if no other filter is provided.',
            nullable: true
        },
        CustomerIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CreditCardFilterParameters'
} as const;

export const $CreditCardParameters = {
    title: 'Credit card parameters',
    required: ['Name', 'Number', 'Type'],
    type: 'object',
    properties: {
        Type: {
            minLength: 1,
            type: 'string',
            description: 'Type of the credit card, one of: `Visa`, `MasterCard`, `Amex`, `Discover`, `DinersClub`, `Jcb`, `EnRoute`, `Maestro`, `UnionPay`.'
        },
        Number: {
            minLength: 1,
            type: 'string',
            description: 'Obfuscated credit card number. At most first six digits and last four digits can be specified, the digits in between should be replaced with `*`. It is possible to provide even more obfuscated number or just last four digits. **Never provide full credit card number**. For example `411111******1111`.'
        },
        Expiration: {
            type: 'string',
            description: 'Expiration of the credit card in format `MM/YYYY`, e.g. `12/2016` or `04/2017`.',
            nullable: true
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the card holder.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'CreditCardParameters'
} as const;

export const $CreditCardPaymentParameters = {
    title: 'CreditCardPaymentParameters',
    required: ['AccessToken', 'Amount', 'Client', 'ClientToken', 'CreditCard', 'CustomerId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of an open bill of the customer where to assign the payment.',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of an [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) to be assigned to the credit card payment.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation the payment belongs to.',
            format: 'uuid',
            nullable: true
        },
        Amount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmountParameters'
                }
            ],
            description: 'Amount of the credit card payment.'
        },
        Notes: {
            type: 'string',
            description: 'Additional payment notes.',
            nullable: true
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            format: 'uuid'
        },
        CreditCard: {
            title: 'Credit card parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditCardParameters'
                }
            ],
            description: ''
        },
        ReceiptIdentifier: {
            type: 'string',
            description: 'Identifier of the payment receipt.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CreditCardPaymentParameters'
} as const;

export const $CreditCardResult = {
    title: 'CreditCardResult',
    type: 'object',
    properties: {
        CreditCards: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreditCard'
            },
            description: 'The credit cards.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CreditCardResult'
} as const;

export const $CreditCardTransaction = {
    title: 'Credit card transaction',
    required: ['ChargedAmount', 'PaymentId'],
    type: 'object',
    properties: {
        PaymentId: {
            type: 'string',
            description: 'Unique identifier of the `PaymentItem`.',
            format: 'uuid'
        },
        SettlementId: {
            type: 'string',
            description: 'Identifier of the settlement.',
            nullable: true
        },
        SettledUtc: {
            type: 'string',
            description: 'Settlement date and time in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        Fee: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: 'Transaction fee - this includes an estimate of bank charges.',
            nullable: true
        },
        AdjustedFee: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: 'Transaction fee (adjusted) - this is the final confirmed transaction fee, including confirmed bank charges.',
            nullable: true
        },
        ChargedAmount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: 'Charged amount of the transaction.'
        },
        SettledAmount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: 'Settled amount of the transaction.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CreditCardTransaction'
} as const;

export const $CreditRating = {
    title: 'Credit Rating',
    type: 'object',
    properties: {
        Basic: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingBasicEnum'
                }
            ],
            description: `Indicates the credit status of a company.

CreditOk (Company can book services.)

PaymentRequiredUpfront (Company must pay upfront.)

LocalDecisionRequired (Requires local approval.)`,
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Credit rating to define creditworthiness of the company.',
    'x-schema-id': 'CreditRating'
} as const;

export const $CreditRatingBasic = {
    title: 'Credit rating basic',
    enum: ['CreditOk', 'PaymentRequiredUpfront', 'LocalDecisionRequired'],
    type: 'string',
    'x-enumDescriptions': ['Company can book services.', 'Company must pay upfront.', 'Requires local approval.']
} as const;

export const $CreditRatingBasicEnum = {
    title: 'Credit rating basic',
    enum: ['CreditOk', 'PaymentRequiredUpfront', 'LocalDecisionRequired'],
    type: 'string',
    description: `

CreditOk (Company can book services.)

PaymentRequiredUpfront (Company must pay upfront.)

LocalDecisionRequired (Requires local approval.)`,
    'x-enumNames': ['CreditOk', 'PaymentRequiredUpfront', 'LocalDecisionRequired'],
    'x-enumDescriptions': ['Company can book services.', 'Company must pay upfront.', 'Requires local approval.']
} as const;

export const $CreditRatingBasicUpdateValue = {
    title: 'Credit rating basic update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Credit rating basic',
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingBasicEnum'
                }
            ],
            description: 'Value which is to be updated.',
            'x-enumNames': ['CreditOk', 'PaymentRequiredUpfront', 'LocalDecisionRequired'],
            'x-enumDescriptions': ['Company can book services.', 'Company must pay upfront.', 'Requires local approval.']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CreditRatingBasicUpdateValue'
} as const;

export const $CreditRatingParameters = {
    title: 'Credit rating parameters',
    type: 'object',
    properties: {
        Basic: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingBasicEnum'
                }
            ],
            description: `Indicates the credit status of a company.

CreditOk (Company can book services.)

PaymentRequiredUpfront (Company must pay upfront.)

LocalDecisionRequired (Requires local approval.)`,
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Credit rating to define creditworthiness of the company.',
    'x-schema-id': 'CreditRatingParameters'
} as const;

export const $CreditRatingUpdateParameters = {
    title: 'Credit rating update parameters',
    type: 'object',
    properties: {
        Basic: {
            title: 'Credit rating basic update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditRatingBasicUpdateValue'
                }
            ],
            description: 'Credit status of a company (or `null` if the credit status should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Credit rating to define creditworthiness of the company.',
    'x-schema-id': 'CreditRatingUpdateParameters'
} as const;

export const $Currency = {
    title: 'Currency',
    required: ['Code', 'Precision'],
    type: 'object',
    properties: {
        Code: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 three-letter code, e.g. USD or GBP.'
        },
        Precision: {
            type: 'integer',
            description: 'Precision of the currency (count of decimal places).',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Currency'
} as const;

export const $CurrencyAcceptance = {
    title: 'Accepted currency',
    required: ['Currency', 'IsDefault', 'IsEnabled'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 code of the `Currency`.',
            format: 'currency'
        },
        IsDefault: {
            type: 'boolean',
            description: 'Whether the currency is a default accounting currency.'
        },
        IsEnabled: {
            type: 'boolean',
            description: 'Whether the currency is enabled for usage.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CurrencyAcceptance'
} as const;

export const $CurrencyAcceptanceFilterParameters = {
    title: 'CurrencyAcceptanceFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Ids: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Exchange Rates. If not specified, the operation returns all exchange rates.',
            nullable: true
        },
        EnterpriseIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/configuration/#enterprise). If not specified, the operation returns the exchange rates for all enterprises within scope of the Access Token.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CurrencyAcceptanceFilterParameters'
} as const;

export const $CurrencyResult = {
    title: 'CurrencyResult',
    required: ['Currencies'],
    type: 'object',
    properties: {
        Currencies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Currency'
            },
            description: 'The supported currencies.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CurrencyResult'
} as const;

export const $CurrencyValue = {
    title: 'Currency value (ver 2023-02-02)',
    required: ['Currency', 'Value'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            format: 'currency'
        },
        Value: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false,
    description: 'Absolute value of the fee.',
    'x-schema-id': 'CurrencyValue'
} as const;

export const $CurrencyValueOld = {
    title: 'Currency value (ver 2018-06-07)',
    required: ['Currency'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            format: 'currency'
        },
        Value: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Net: {
            type: 'number',
            format: 'double',
            nullable: true,
            deprecated: true
        },
        Tax: {
            type: 'number',
            format: 'double',
            nullable: true,
            deprecated: true
        },
        TaxRate: {
            type: 'number',
            format: 'double',
            nullable: true,
            deprecated: true
        }
    },
    additionalProperties: false,
    description: 'Total price of the reservation.',
    'x-schema-id': 'CurrencyValueOld'
} as const;

export const $Customer = {
    title: 'Customer',
    required: ['ChainId', 'Classifications', 'CreatedUtc', 'CreatorProfileId', 'Id', 'IsActive', 'LastName', 'Number', 'Options', 'PreferredSpaceFeatures', 'UpdatedUtc', 'UpdaterProfileId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the customer.',
            format: 'uuid'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain.',
            format: 'uuid'
        },
        Number: {
            minLength: 1,
            type: 'string',
            description: 'Number of the customer.'
        },
        Title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Title'
                }
            ],
            description: `Title of the customer.

Mister (Mr.)

Miss (Ms.)

Misses (Mrs.)`,
            nullable: true
        },
        Sex: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SexEnum'
                }
            ],
            description: `Sex of the customer.

Male

Female`,
            nullable: true
        },
        FirstName: {
            type: 'string',
            description: 'First name of the customer.',
            nullable: true
        },
        LastName: {
            minLength: 1,
            type: 'string',
            description: 'Last name of the customer.'
        },
        SecondLastName: {
            type: 'string',
            description: 'Second last name of the customer.',
            nullable: true
        },
        NationalityCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the [Country](https://mews-systems.gitbook.io/connector-api/operations/countries/#country).',
            nullable: true
        },
        PreferredLanguageCode: {
            type: 'string',
            description: "Language and culture code of the customer's preferred language, according to their profile. For example: `en-GB`, `fr-CA`.",
            nullable: true
        },
        LanguageCode: {
            type: 'string',
            description: "Language and culture code of the customer's language, based on multiple sources. These sources include the preferred language specified in internal data based on previous bookings, and the preferred language of the customer specified in their profile. If neither of these sources are present, we use the native language based on the customer's nationality. The format is, for example, `en-US` or `fr-FR`.",
            nullable: true
        },
        BirthDate: {
            type: 'string',
            description: 'Date of birth in ISO 8601 format.',
            nullable: true
        },
        BirthPlace: {
            type: 'string',
            description: 'Place of birth.',
            nullable: true
        },
        Occupation: {
            type: 'string',
            description: 'Occupation of the customer.',
            nullable: true
        },
        Email: {
            type: 'string',
            description: 'Email address of the customer.',
            nullable: true
        },
        HasOtaEmail: {
            type: 'boolean',
            description: "Whether the customer's email address is a temporary email address from an OTA. For more details, see the [product documentation](https://help.mews.com/s/article/how-to-maintain-ota-guest-profiles-with-verified-email-addresses-obtained-from-the-guest-portal)."
        },
        Phone: {
            type: 'string',
            description: 'Phone number of the customer (possibly mobile).',
            nullable: true
        },
        TaxIdentificationNumber: {
            type: 'string',
            description: 'Tax identification number of the customer.',
            nullable: true
        },
        LoyaltyCode: {
            type: 'string',
            description: 'Loyalty code of the customer.',
            nullable: true
        },
        AccountingCode: {
            type: 'string',
            description: 'Accounting code of the customer.',
            nullable: true
        },
        BillingCode: {
            type: 'string',
            description: 'Billing code of the customer.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Internal notes about the customer.',
            nullable: true
        },
        CarRegistrationNumber: {
            maxLength: 255,
            type: 'string',
            description: "Registration number of the customer's car.",
            nullable: true
        },
        DietaryRequirements: {
            maxLength: 255,
            type: 'string',
            description: "Customer's dietary requirements, e.g. Vegan, Halal.",
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the customer in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the customer in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Passport: {
            title: 'Identity document',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocument'
                }
            ],
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all identity documents](https://mews-systems.gitbook.io/connector-api/operations/identitydocuments#get-all-identity-documents) to fetch identity documents.'
        },
        IdentityCard: {
            title: 'Identity document',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocument'
                }
            ],
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all identity documents](https://mews-systems.gitbook.io/connector-api/operations/identitydocuments#get-all-identity-documents) to fetch identity documents.'
        },
        Visa: {
            title: 'Identity document',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocument'
                }
            ],
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all identity documents](https://mews-systems.gitbook.io/connector-api/operations/identitydocuments#get-all-identity-documents) to fetch identity documents.'
        },
        DriversLicense: {
            title: 'Identity document',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocument'
                }
            ],
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all identity documents](https://mews-systems.gitbook.io/connector-api/operations/identitydocuments#get-all-identity-documents) to fetch identity documents.'
        },
        Address: {
            title: 'Address',
            allOf: [
                {
                    '$ref': '#/components/schemas/OldAddress'
                }
            ],
            description: '',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AddressId` instead.'
        },
        AddressId: {
            type: 'string',
            description: 'Unique identifier of the `Address` of the customer.',
            format: 'uuid',
            nullable: true
        },
        Classifications: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerClassificationsEnum'
            },
            description: 'Classifications of the customer.'
        },
        Options: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerOptionsEnum'
            },
            description: 'Options of the customer.'
        },
        ItalianDestinationCode: {
            type: 'string',
            description: 'Value of Italian destination code.',
            nullable: true
        },
        ItalianFiscalCode: {
            type: 'string',
            description: 'Value of Italian fiscal code.',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) the customer is associated with.',
            format: 'uuid',
            nullable: true
        },
        MergeTargetId: {
            type: 'string',
            description: 'Unique identifier of the account ([Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer)) to which this customer is linked.',
            format: 'uuid',
            nullable: true
        },
        ActivityState: {
            type: 'string',
            description: '[Activity State](https://mews-systems.gitbook.io/connector-api/operations/#activity-state) of customer record, i.e. whether active or deleted.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `IsActive` instead.'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the customer record is still active.'
        },
        PreferredSpaceFeatures: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceFeatureClassification'
            },
            description: 'A list of room preferences, such as view type, bed type, and amenities.'
        },
        CreatorProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who created the customer.',
            format: 'uuid'
        },
        UpdaterProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who last updated the customer.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Customer'
} as const;

export const $CustomerAccount = {
    title: 'Customer',
    required: ['ChainId', 'Classifications', 'CreatedUtc', 'LastName', 'LegalEntityIdentifiers', 'Options', 'UpdatedUtc', 'UpdaterProfileId'],
    type: 'object',
    properties: {
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain.',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the customer in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the customer in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdaterProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who updated the customer.',
            format: 'uuid'
        },
        Email: {
            type: 'string',
            description: 'Email address of the customer.',
            format: 'email',
            nullable: true
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identification number of the customer.',
            nullable: true
        },
        BillingCode: {
            type: 'string',
            description: 'Billing code of the customer.',
            nullable: true
        },
        AccountingCode: {
            type: 'string',
            description: 'Accounting code of the customer.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Internal notes about the customer.',
            nullable: true
        },
        LastName: {
            minLength: 1,
            type: 'string',
            description: 'Last name of the customer.'
        },
        FirstName: {
            type: 'string',
            description: 'First name of the customer.',
            nullable: true
        },
        SecondLastName: {
            type: 'string',
            description: 'Second last name of the customer.',
            nullable: true
        },
        BirthPlace: {
            type: 'string',
            description: 'Place of birth.',
            nullable: true
        },
        Telephone: {
            type: 'string',
            description: 'Telephone number of the customer (possibly mobile).',
            nullable: true
        },
        Occupation: {
            type: 'string',
            description: 'Occupation of the customer.',
            nullable: true
        },
        CarRegistrationNumber: {
            maxLength: 255,
            type: 'string',
            description: "Registration number of the customer's car.",
            nullable: true
        },
        DietaryRequirements: {
            maxLength: 255,
            type: 'string',
            description: 'Dietary requirements of the customer.',
            nullable: true
        },
        LoyaltyCode: {
            type: 'string',
            description: 'Loyalty code of the customer.',
            nullable: true
        },
        NationalityCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the `Country`.',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of `Company` the customer is associated with.',
            format: 'uuid',
            nullable: true
        },
        BirthDate: {
            type: 'string',
            description: 'Date of birth in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        Sex: {
            type: 'string',
            description: 'Sex of the customer.',
            nullable: true
        },
        Title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Title'
                }
            ],
            description: `Title prefix of the customer.

Mister (Mr.)

Miss (Ms.)

Misses (Mrs.)`,
            nullable: true
        },
        PreferredLanguageCode: {
            type: 'string',
            description: "Language and culture code of the customer's preferred language. E.g. `en-US` or `fr-FR`.",
            nullable: true
        },
        Options: {
            title: 'Customer options',
            allOf: [
                {
                    '$ref': '#/components/schemas/CustomerAccountOptions'
                }
            ],
            description: 'Options of the customer.'
        },
        Classifications: {
            title: 'Customer classifications',
            allOf: [
                {
                    '$ref': '#/components/schemas/CustomerAccountClassifications'
                }
            ],
            description: 'Classifications of the customer.'
        },
        LegalEntityIdentifiers: {
            title: 'Customer legal identifiers',
            allOf: [
                {
                    '$ref': '#/components/schemas/LegalEntityIdentifiers'
                }
            ],
            description: 'Legal entity identifiers of the customer.'
        }
    },
    additionalProperties: false,
    description: 'Updated customer data.',
    'x-schema-id': 'CustomerAccount'
} as const;

export const $CustomerAccountClassifications = {
    title: 'Customer classifications',
    type: 'object',
    properties: {
        PaymasterAccount: {
            type: 'boolean',
            description: 'Paymaster account.'
        },
        Blacklist: {
            type: 'boolean',
            description: 'Blacklist.'
        },
        Media: {
            type: 'boolean',
            description: 'Media.'
        },
        LoyaltyProgram: {
            type: 'boolean',
            description: 'Loyalty program.'
        },
        PreviousComplaint: {
            type: 'boolean',
            description: 'Previous complaint.'
        },
        Returning: {
            type: 'boolean',
            description: 'Returning.'
        },
        Staff: {
            type: 'boolean',
            description: 'Staff.'
        },
        FriendOrFamily: {
            type: 'boolean',
            description: 'Friend or family.'
        },
        TopManagement: {
            type: 'boolean',
            description: 'Top management.'
        },
        Important: {
            type: 'boolean',
            description: 'Important.'
        },
        VeryImportant: {
            type: 'boolean',
            description: 'Very important.'
        },
        Problematic: {
            type: 'boolean',
            description: 'Problematic.'
        },
        Cashlist: {
            type: 'boolean',
            description: 'Cash list.'
        },
        DisabledPerson: {
            type: 'boolean',
            description: 'Disabled person.'
        },
        Military: {
            type: 'boolean',
            description: 'Military.'
        },
        Airline: {
            type: 'boolean',
            description: 'Airline.'
        },
        HealthCompliant: {
            type: 'boolean',
            description: 'Health compliant.'
        },
        InRoom: {
            type: 'boolean',
            description: 'In room.'
        },
        WaitingForRoom: {
            type: 'boolean',
            description: 'Waiting for room.'
        },
        Student: {
            type: 'boolean',
            description: 'Student.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerAccountClassifications'
} as const;

export const $CustomerAccountOptions = {
    title: 'Customer options',
    type: 'object',
    properties: {
        SendMarketingEmails: {
            type: 'boolean',
            description: 'Send marketing emails.'
        },
        Invoiceable: {
            type: 'boolean',
            description: 'Invoiceable.'
        },
        BillAddressObjection: {
            type: 'boolean',
            description: 'Bill address objection.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerAccountOptions'
} as const;

export const $CustomerAddFileResult = {
    title: 'CustomerAddFileResult',
    required: ['FileId'],
    type: 'object',
    properties: {
        FileId: {
            type: 'string',
            description: 'Unique identifier of the uploaded file.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerAddFileResult'
} as const;

export const $CustomerAddParameters = {
    title: 'CustomerAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LastName', 'OverwriteExisting'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Title: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Title'
                }
            ],
            description: 'Title prefix of the customer.',
            nullable: true
        },
        FirstName: {
            type: 'string',
            description: 'First name of the customer.',
            nullable: true
        },
        LastName: {
            minLength: 1,
            type: 'string',
            description: 'Last name of the customer.'
        },
        SecondLastName: {
            type: 'string',
            description: 'Second last name of the customer.',
            nullable: true
        },
        NationalityCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the `Country`.',
            nullable: true
        },
        Sex: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Sex'
                }
            ],
            description: 'Sex of the customer.',
            nullable: true
        },
        BirthDate: {
            type: 'string',
            description: 'Date of birth in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        BirthPlace: {
            type: 'string',
            description: 'Place of birth.',
            nullable: true
        },
        Occupation: {
            type: 'string',
            description: 'Occupation of the customer.',
            nullable: true
        },
        Email: {
            type: 'string',
            description: 'Email address of the customer.',
            format: 'email',
            nullable: true
        },
        Phone: {
            type: 'string',
            description: 'Phone number of the customer (possibly mobile).',
            format: 'tel',
            nullable: true
        },
        LoyaltyCode: {
            type: 'string',
            description: 'Loyalty code of the customer.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Internal notes about the customer.',
            nullable: true
        },
        CarRegistrationNumber: {
            maxLength: 255,
            type: 'string',
            description: "Registration number of the customer's car.",
            nullable: true
        },
        DietaryRequirements: {
            maxLength: 255,
            type: 'string',
            description: "Customer's dietary requirements, e.g. Vegan, Halal.",
            nullable: true
        },
        TaxIdentificationNumber: {
            type: 'string',
            description: 'Tax identification number of the customer.',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of `Company` the customer is associated with.',
            format: 'uuid',
            nullable: true
        },
        Address: {
            title: 'Address parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AddressParameters'
                }
            ],
            description: 'Address of the customer.',
            nullable: true
        },
        IdentityCard: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'Identity card details of the customer.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Add identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#add-identity-documents) to add document.'
        },
        Passport: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'Passport details of the customer.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Add identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#add-identity-documents) to add document.'
        },
        Visa: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'Visa details of the customer.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Add identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#add-identity-documents) to add document.'
        },
        DriversLicense: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'Drivers license details of the customer.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Add identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#add-identity-documents) to add document.'
        },
        Classifications: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerClassificationEnum'
            },
            description: 'Classifications of the customer.',
            nullable: true
        },
        Options: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerOptionEnum'
            },
            description: 'Options of the customer.',
            nullable: true
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using `PortfolioAccessTokens`, ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        OverwriteExisting: {
            type: 'boolean',
            description: 'Whether an existing customer should be overwritten in case of duplicity. This applies only to basic personal information (`Title`, `FirstName`, `LastName`, ...).'
        },
        ItalianDestinationCode: {
            type: 'string',
            description: 'Value of Italian destination code.',
            nullable: true
        },
        ItalianFiscalCode: {
            type: 'string',
            description: 'Value of Italian fiscal code.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerAddParameters'
} as const;

export const $CustomerClassificationEnum = {
    title: 'Customer classification',
    enum: ['PaymasterAccount', 'Blacklist', 'Media', 'LoyaltyProgram', 'PreviousComplaint', 'Returning', 'Staff', 'FriendOrFamily', 'TopManagement', 'Important', 'VeryImportant', 'Problematic', 'Cashlist', 'DisabledPerson', 'Military', 'Airline', 'HealthCompliant', 'InRoom', 'WaitingForRoom', 'Student'],
    type: 'string',
    description: `

PaymasterAccount

Blacklist

Media

LoyaltyProgram

PreviousComplaint

Returning

Staff

FriendOrFamily

TopManagement

Important

VeryImportant

Problematic

Cashlist

DisabledPerson

Military

Airline

HealthCompliant

InRoom

WaitingForRoom

Student`,
    'x-enumNames': ['PaymasterAccount', 'Blacklist', 'Media', 'LoyaltyProgram', 'PreviousComplaint', 'Returning', 'Staff', 'FriendOrFamily', 'TopManagement', 'Important', 'VeryImportant', 'Problematic', 'Cashlist', 'DisabledPerson', 'Military', 'Airline', 'HealthCompliant', 'InRoom', 'WaitingForRoom', 'Student'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
} as const;

export const $CustomerClassificationUpdateParameters = {
    title: 'Customer update classifications',
    type: 'object',
    properties: {
        PaymasterAccount: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Paymaster account (or `null` if the value should not be updated).',
            nullable: true
        },
        Blacklist: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Blacklist (or `null` if the value should not be updated).',
            nullable: true
        },
        Media: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Media (or `null` if the value should not be updated).',
            nullable: true
        },
        LoyaltyProgram: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Loyalty program (or `null` if the value should not be updated).',
            nullable: true
        },
        PreviousComplaint: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Previous complaint (or `null` if the value should not be updated).',
            nullable: true
        },
        Returning: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Returning (or `null` if the value should not be updated).',
            nullable: true
        },
        Staff: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Staff (or `null` if the value should not be updated).',
            nullable: true
        },
        FriendOrFamily: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Friend or family (or `null` if the value should not be updated).',
            nullable: true
        },
        TopManagement: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Top management (or `null` if the value should not be updated).',
            nullable: true
        },
        Important: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Important (or `null` if the value should not be updated).',
            nullable: true
        },
        VeryImportant: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Very important (or `null` if the value should not be updated).',
            nullable: true
        },
        Problematic: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Problematic (or `null` if the value should not be updated).',
            nullable: true
        },
        Cashlist: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Cashlist (or `null` if the value should not be updated).',
            nullable: true
        },
        DisabledPerson: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Disabled person (or `null` if the value should not be updated).',
            nullable: true
        },
        Military: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Military (or `null` if the value should not be updated).',
            nullable: true
        },
        Airline: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Airline (or `null` if the value should not be updated).',
            nullable: true
        },
        HealthCompliant: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Health compliant (or `null` if the value should not be updated).',
            nullable: true
        },
        InRoom: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'In room (or `null` if the value should not be updated).',
            nullable: true
        },
        WaitingForRoom: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Waiting for room (or `null` if the value should not be updated).',
            nullable: true
        },
        Student: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Student (or `null` if the value should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerClassificationUpdateParameters'
} as const;

export const $CustomerClassificationsEnum = {
    title: 'Customer classification',
    enum: ['None', 'PaymasterAccount', 'Blacklist', 'Media', 'LoyaltyProgram', 'PreviousComplaint', 'Returning', 'Staff', 'FriendOrFamily', 'TopManagement', 'Important', 'VeryImportant', 'Problematic', 'Cashlist', 'DisabledPerson', 'Military', 'Airline', 'HealthCompliant', 'InRoom', 'WaitingForRoom', 'Student'],
    type: 'string',
    description: `

None

PaymasterAccount

Blacklist

Media

LoyaltyProgram

PreviousComplaint

Returning

Staff

FriendOrFamily

TopManagement

Important

VeryImportant

Problematic

Cashlist

DisabledPerson

Military

Airline

HealthCompliant

InRoom

WaitingForRoom

Student`,
    'x-enumNames': ['None', 'PaymasterAccount', 'Blacklist', 'Media', 'LoyaltyProgram', 'PreviousComplaint', 'Returning', 'Staff', 'FriendOrFamily', 'TopManagement', 'Important', 'VeryImportant', 'Problematic', 'Cashlist', 'DisabledPerson', 'Military', 'Airline', 'HealthCompliant', 'InRoom', 'WaitingForRoom', 'Student'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
} as const;

export const $CustomerExtent = {
    title: 'Customer extent',
    type: 'object',
    properties: {
        Customers: {
            type: 'boolean',
            description: 'Whether the response should contain information about customers.',
            nullable: true
        },
        Documents: {
            type: 'boolean',
            description: 'Whether the response should contain identity documents of customers.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all identity documents](https://mews-systems.gitbook.io/connector-api/operations/identitydocuments#get-all-identity-documents) instead.'
        },
        Addresses: {
            type: 'boolean',
            description: 'Whether the response should contain addresses of customers.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'CustomerExtent'
} as const;

export const $CustomerFileParameters = {
    title: 'CustomerFileParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerId', 'Data', 'Name', 'Type'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the file.'
        },
        Type: {
            minLength: 1,
            type: 'string',
            description: 'MIME type of the file (e.g. `application/pdf`).'
        },
        Data: {
            minLength: 1,
            type: 'string',
            description: 'Base64-encoded data of the file.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerFileParameters'
} as const;

export const $CustomerFilterParameters = {
    title: 'CustomerFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Extent', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the chains. Required when using Portfolio Access Tokens, ignored otherwise.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which Customer was created.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which Customer was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Extent: {
            title: 'Customer extent',
            allOf: [
                {
                    '$ref': '#/components/schemas/CustomerExtent'
                }
            ],
            description: 'Extent of data to be returned.'
        },
        DeletedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which Customer was deleted. `ActivityStates` value `Deleted` should be provided with this filter to get expected results.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        },
        CustomerIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of Customers. Required if no other filter is provided.',
            nullable: true
        },
        CompanyIds: {
            maxItems: 1,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the Company the customer is associated with.',
            nullable: true
        },
        Emails: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Emails of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).',
            nullable: true
        },
        FirstNames: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'First names of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).',
            nullable: true
        },
        LastNames: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Last names of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).',
            nullable: true
        },
        LoyaltyCodes: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Loyalty codes of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).',
            nullable: true
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerFilterParameters'
} as const;

export const $CustomerItemParameters = {
    title: 'CustomerItemParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        CustomerIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/#customer).'
        },
        Currency: {
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerItemParameters'
} as const;

export const $CustomerItemResult = {
    title: 'CustomerItemResult',
    type: 'object',
    properties: {
        Customers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerItems'
            },
            description: 'The customers with their items.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerItemResult'
} as const;

export const $CustomerItems = {
    title: 'Customer items',
    required: ['CustomerId', 'Items', 'OrderItems', 'PaymentItems'],
    type: 'object',
    properties: {
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer`.',
            format: 'uuid'
        },
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingItem'
            },
            deprecated: true,
            'x-deprecatedMessage': 'Use `OrderItems` and `PaymentItems` instead.'
        },
        OrderItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItemOld'
            },
            description: 'The open order items (consumed items such as nights or products).'
        },
        PaymentItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentItemOld'
            },
            description: 'The open payment items (such as cash, credit card payments or invoices).'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerItems'
} as const;

export const $CustomerMergeParameters = {
    title: 'CustomerMergeParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'SourceCustomerId', 'TargetCustomerId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        SourceCustomerId: {
            type: 'string',
            description: 'Unique identifier of the source [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).',
            format: 'uuid'
        },
        TargetCustomerId: {
            type: 'string',
            description: 'Unique identifier of the target [Customer](https://mews-systems.gitbook.io/connector-api/operations/#customer).',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerMergeParameters'
} as const;

export const $CustomerOptionEnum = {
    title: 'Customer option',
    enum: ['SendMarketingEmails', 'Invoiceable', 'BillAddressObjection', 'SendMarketingPostalMail', 'SendPartnerMarketingEmails', 'SendPartnerMarketingPostalMail', 'WithdrawCardConsent', 'GuestPhotoConsent', 'IdPhotosConsent'],
    type: 'string',
    description: `

SendMarketingEmails

Invoiceable

BillAddressObjection

SendMarketingPostalMail

SendPartnerMarketingEmails

SendPartnerMarketingPostalMail

WithdrawCardConsent

GuestPhotoConsent (Whether to ask for consent to take a guest photo.)

IdPhotosConsent (Whether to ask for consent to take identity document photos.)`,
    'x-enumNames': ['SendMarketingEmails', 'Invoiceable', 'BillAddressObjection', 'SendMarketingPostalMail', 'SendPartnerMarketingEmails', 'SendPartnerMarketingPostalMail', 'WithdrawCardConsent', 'GuestPhotoConsent', 'IdPhotosConsent'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', 'Whether to ask for consent to take a guest photo.', 'Whether to ask for consent to take identity document photos.']
} as const;

export const $CustomerOptionUpdateParameters = {
    title: 'Customer update options',
    type: 'object',
    properties: {
        SendMarketingEmails: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Send marketing email (or `null` if the value should not be updated).',
            nullable: true
        },
        Invoiceable: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Invoiceable (or `null` if the value should not be updated).',
            nullable: true
        },
        BillAddressObjection: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Bill address objection (or `null` if the value should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerOptionUpdateParameters'
} as const;

export const $CustomerOptionsEnum = {
    title: 'Customer option',
    enum: ['None', 'SendMarketingEmails', 'Invoiceable', 'BillAddressObjection', 'SendMarketingPostalMail', 'SendPartnerMarketingEmails', 'SendPartnerMarketingPostalMail', 'WithdrawCardConsent', 'GuestPhotoConsent', 'IdPhotosConsent'],
    type: 'string',
    description: `

None

SendMarketingEmails

Invoiceable

BillAddressObjection

SendMarketingPostalMail

SendPartnerMarketingEmails

SendPartnerMarketingPostalMail

WithdrawCardConsent

GuestPhotoConsent

IdPhotosConsent`,
    'x-enumNames': ['None', 'SendMarketingEmails', 'Invoiceable', 'BillAddressObjection', 'SendMarketingPostalMail', 'SendPartnerMarketingEmails', 'SendPartnerMarketingPostalMail', 'WithdrawCardConsent', 'GuestPhotoConsent', 'IdPhotosConsent'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '']
} as const;

export const $CustomerResult = {
    title: 'CustomerResult',
    required: ['Customers'],
    type: 'object',
    properties: {
        Customers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Customer'
            },
            description: 'The customers.'
        },
        Documents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityDocument'
            },
            description: 'The identity documents of customers.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all identity documents](https://mews-systems.gitbook.io/connector-api/operations/identitydocuments#get-all-identity-documents) to fetch identity documents.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest customer item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older customers. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message; this is true even when using Extents set to false so that no actual data is returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerResult'
} as const;

export const $CustomerSearchParameters = {
    title: 'CustomerSearchParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Name: {
            type: 'string',
            description: 'Name to search by (applies to first name, last name, and full name).',
            nullable: true
        },
        ResourceId: {
            type: 'string',
            description: 'Identifier of [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource) to search by (members of reservation assigned there will be returned).',
            format: 'uuid',
            nullable: true
        },
        Extent: {
            title: 'Customer extent',
            allOf: [
                {
                    '$ref': '#/components/schemas/CustomerExtent'
                }
            ],
            description: 'Extent of data to be returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerSearchParameters'
} as const;

export const $CustomerSearchResult = {
    title: 'CustomerSearchResult',
    required: ['Customers'],
    type: 'object',
    properties: {
        Customers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChargeableCustomer'
            },
            description: 'The customer search results.'
        },
        Documents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityDocument'
            },
            description: 'The identity documents of customers.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Get all identity documents](https://mews-systems.gitbook.io/connector-api/operations/identitydocuments#get-all-identity-documents) to fetch identity documents.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerSearchResult'
} as const;

export const $CustomerUpdateParameters = {
    title: 'CustomerUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using `PortfolioAccessTokens`, ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer` to be updated.',
            format: 'uuid'
        },
        Title: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Title'
                }
            ],
            description: `New title.

Mister (Mr.)

Miss (Ms.)

Misses (Mrs.)`,
            nullable: true
        },
        FirstName: {
            type: 'string',
            description: 'New first name.',
            nullable: true
        },
        LastName: {
            type: 'string',
            description: 'New last name.',
            nullable: true
        },
        SecondLastName: {
            type: 'string',
            description: 'New second last name.',
            nullable: true
        },
        NationalityCode: {
            type: 'string',
            description: 'New nationality code as ISO 3166-1 code of the `Country`.',
            nullable: true
        },
        Sex: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SexEnum'
                }
            ],
            description: `Sex of the customer.

Male

Female`,
            nullable: true
        },
        BirthDate: {
            type: 'string',
            description: 'New birth date in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        BirthPlace: {
            type: 'string',
            description: 'New birth place.',
            nullable: true
        },
        Occupation: {
            type: 'string',
            description: 'Occupation of the customer.',
            nullable: true
        },
        Email: {
            type: 'string',
            description: 'New email address.',
            format: 'email',
            nullable: true
        },
        Phone: {
            type: 'string',
            description: 'New phone number.',
            format: 'tel',
            nullable: true
        },
        LoyaltyCode: {
            type: 'string',
            description: 'Loyalty code of the customer.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Internal notes about the customer. Old value will be overwritten.',
            nullable: true
        },
        CarRegistrationNumber: {
            maxLength: 255,
            type: 'string',
            description: "New registration number of the customer's car.",
            nullable: true
        },
        DietaryRequirements: {
            maxLength: 255,
            type: 'string',
            description: "Customer's dietary requirements, e.g. Vegan, Halal.",
            nullable: true
        },
        TaxIdentificationNumber: {
            type: 'string',
            description: 'New tax identification number of the customer.',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of `Company` the customer is associated with.',
            format: 'uuid',
            nullable: true
        },
        Address: {
            title: 'Address parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AddressParameters'
                }
            ],
            description: 'New address details.',
            nullable: true
        },
        IdentityCard: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'New identity card details.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Update identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#update-identity-documents) to update document.'
        },
        Passport: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'New passport details.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Update identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#update-identity-documents) to update document.'
        },
        Visa: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'New visa details.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Update identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#update-identity-documents) to update document.'
        },
        DriversLicense: {
            title: 'Identity document parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DocumentParameters'
                }
            ],
            description: 'New drivers license details.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use [Update identity documents](https://github.com/MewsSystems/gitbook-connector-api/pull/identitydocuments.md#update-identity-documents) to update document.'
        },
        Classifications: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerClassificationEnum'
            },
            description: 'New classifications of the customer.',
            nullable: true
        },
        Options: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerOptionEnum'
            },
            description: 'Options of the customer.',
            nullable: true
        },
        ItalianDestinationCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'New Italian destination code of customer.',
            nullable: true
        },
        ItalianFiscalCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'New Italian fiscal code of customer.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'CustomerUpdateParameters'
} as const;

export const $DateFilterInterval = {
    title: 'DateFilterInterval',
    required: ['End', 'Start'],
    type: 'object',
    properties: {
        Start: {
            minLength: 1,
            type: 'string',
            format: 'date'
        },
        End: {
            minLength: 1,
            type: 'string',
            format: 'date'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DateFilterInterval'
} as const;

export const $DateRestriction = {
    title: 'Date restriction',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate restriction.',
            format: 'uuid'
        },
        RateId: {
            type: 'string',
            description: 'Unique identifier of the rate.',
            format: 'uuid'
        },
        IsInherited: {
            type: 'boolean',
            description: 'Whether the rate restriction is inherited from the parent rate.'
        },
        StartUtc: {
            type: 'string',
            description: 'Start of the rate restriction in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End of the rate restriction in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        Days: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The restricted days of week.',
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'Identifiers of from external systems.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DateRestriction'
} as const;

export const $DateTimeIntervalUtc = {
    title: 'DateTimeIntervalUtc',
    type: 'object',
    properties: {
        StartUtc: {
            type: 'string',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DateTimeIntervalUtc'
} as const;

export const $DaysParameters = {
    title: 'Days parameters',
    required: ['Friday', 'Monday', 'Saturday', 'Sunday', 'Thursday', 'Tuesday', 'Wednesday'],
    type: 'object',
    properties: {
        Monday: {
            type: 'boolean',
            description: 'Monday enabled'
        },
        Tuesday: {
            type: 'boolean',
            description: 'Tuesday enabled'
        },
        Wednesday: {
            type: 'boolean',
            description: 'Wednesday enabled'
        },
        Thursday: {
            type: 'boolean',
            description: 'Thursday enabled'
        },
        Friday: {
            type: 'boolean',
            description: 'Friday enabled'
        },
        Saturday: {
            type: 'boolean',
            description: 'Saturday enabled'
        },
        Sunday: {
            type: 'boolean',
            description: 'Sunday enabled'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DaysParameters'
} as const;

export const $DecimalNullableUpdateValue = {
    title: 'Decimal update value',
    type: 'object',
    properties: {
        Value: {
            type: 'number',
            description: 'Value which is to be updated.',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DecimalNullableUpdateValue'
} as const;

export const $DecimalUpdateValue = {
    title: 'Decimal update value',
    type: 'object',
    properties: {
        Value: {
            type: 'number',
            description: 'Value which is to be updated.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DecimalUpdateValue'
} as const;

export const $DeleteRestrictionParameters = {
    title: 'DeleteRestrictionParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'RestrictionIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        RestrictionIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Restriction`.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeleteRestrictionParameters'
} as const;

export const $Department = {
    title: 'Department',
    required: ['CreatedUtc', 'EnterpriseId', 'Id', 'IsActive', 'Name', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the department.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the department is still active.'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the department.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the department in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the department in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Department'
} as const;

export const $DepartmentFilterParameters = {
    title: 'DepartmentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        DepartmentIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Department](https://mews-systems.gitbook.io/connector-api/operations/#department).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which `Department` was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DepartmentFilterParameters'
} as const;

export const $DepartmentResult = {
    title: 'DepartmentResult',
    required: ['Departments'],
    type: 'object',
    properties: {
        Departments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Department'
            },
            description: 'The departments of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DepartmentResult'
} as const;

export const $DependentRatePricingData = {
    title: 'Dependent rate pricing',
    required: ['AbsoluteAdjustment', 'BaseRateId', 'RelativeAdjustment'],
    type: 'object',
    properties: {
        BaseRateId: {
            type: 'string',
            description: 'Unique identifier of the base rate.',
            format: 'uuid'
        },
        RelativeAdjustment: {
            type: 'number',
            description: 'Specific amount which shows the difference between this rate and the base rate.',
            format: 'double'
        },
        AbsoluteAdjustment: {
            type: 'number',
            description: 'Relative amount which shows the difference between this rate and the base rate.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DependentRatePricingData'
} as const;

export const $DependentRatePricingParameters = {
    title: 'Dependent rate pricing parameters',
    required: ['BaseRateId'],
    type: 'object',
    properties: {
        BaseRateId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the base rate.',
            'x-schema-id': 'HybridIdentifier'
        },
        RelativeAdjustment: {
            type: 'number',
            description: 'Relative amount which shows the difference between this rate and the base rate.',
            format: 'double'
        },
        AbsoluteAdjustment: {
            type: 'number',
            description: 'Specific amount which shows the difference between this rate and the base rate.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DependentRatePricingParameters'
} as const;

export const $DependentTaxRateStrategy = {
    title: 'DependentTaxRateStrategy',
    type: 'object',
    properties: {
        Value: {
            type: 'number',
            format: 'double'
        },
        BaseTaxationCodes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DependentTaxRateStrategy'
} as const;

export const $Device = {
    title: 'Device',
    required: ['Id', 'Name', 'Type'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the device.',
            format: 'uuid'
        },
        Type: {
            title: 'Device type',
            allOf: [
                {
                    '$ref': '#/components/schemas/DeviceTypeEnum'
                }
            ],
            description: `Type of the device.

Printer ([Printer command data](https://mews-systems.gitbook.io/connector-api/operations/commands#printer-command-data))

PaymentTerminal ([Payment terminal command data](https://mews-systems.gitbook.io/connector-api/operations/commands#payment-terminal-command-data))

KeyCutter ([Key cutter command data](https://mews-systems.gitbook.io/connector-api/operations/commands#key-cutter-command-data))

FiscalMachine ([Fiscal machine command data](https://mews-systems.gitbook.io/connector-api/operations/commands#fiscal-machine-command-data))

PassportScanner ([Passport scanner command data](https://mews-systems.gitbook.io/connector-api/operations/commands#passport-scanner-command-data))`,
            'x-enumNames': ['Printer', 'PaymentTerminal', 'KeyCutter', 'FiscalMachine', 'PassportScanner'],
            'x-enumDescriptions': ['[Printer command data](https://mews-systems.gitbook.io/connector-api/operations/commands#printer-command-data)', '[Payment terminal command data](https://mews-systems.gitbook.io/connector-api/operations/commands#payment-terminal-command-data)', '[Key cutter command data](https://mews-systems.gitbook.io/connector-api/operations/commands#key-cutter-command-data)', '[Fiscal machine command data](https://mews-systems.gitbook.io/connector-api/operations/commands#fiscal-machine-command-data)', '[Passport scanner command data](https://mews-systems.gitbook.io/connector-api/operations/commands#passport-scanner-command-data)']
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the device.'
        },
        Identifier: {
            type: 'string',
            description: 'Device identifier (for internal purposes).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Device'
} as const;

export const $DeviceCommand = {
    title: 'Command',
    required: ['CreatedUtc', 'Data', 'Device', 'Id', 'State'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the command.',
            format: 'uuid'
        },
        State: {
            title: 'Command state',
            allOf: [
                {
                    '$ref': '#/components/schemas/DeviceCommandStateEnum'
                }
            ],
            description: `State of the command.

Pending (Created in Mews, but not yet received by the client application.)

Received (Received by the client application.)

Processing (Being processed by the client application.)

Processed (Successfully processed command.)

Cancelled (A command whose execution has been canceled before (or during) processing.)

Error (A command whose execution or processing was terminated by an error.)`,
            'x-enumNames': ['Pending', 'Received', 'Processing', 'Processed', 'Cancelled', 'Error'],
            'x-enumDescriptions': ['Created in Mews, but not yet received by the client application.', 'Received by the client application.', 'Being processed by the client application.', 'Successfully processed command.', 'A command whose execution has been canceled before (or during) processing.', 'A command whose execution or processing was terminated by an error.']
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the command.',
            format: 'date-time'
        },
        Creator: {
            title: 'User',
            allOf: [
                {
                    '$ref': '#/components/schemas/DeviceCommandCreator'
                }
            ],
            description: 'Creator of the command.',
            nullable: true
        },
        Device: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Device'
                }
            ],
            description: 'Device that the command should be executed on.'
        },
        Data: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PaymentTerminalCommandData'
                },
                {
                    '$ref': '#/components/schemas/PrinterCommandData'
                },
                {
                    '$ref': '#/components/schemas/KeyCutterCommandData'
                },
                {
                    '$ref': '#/components/schemas/FiscalMachineCommandData'
                },
                {
                    '$ref': '#/components/schemas/PassportScannerCommandData'
                }
            ],
            description: 'Structure of the object depends on [Device type](https://mews-systems.gitbook.io/connector-api/operations/devices#device-type).'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeviceCommand'
} as const;

export const $DeviceCommandAddResult = {
    title: 'DeviceCommandAddResult',
    required: ['CommandId'],
    type: 'object',
    properties: {
        CommandId: {
            type: 'string',
            description: 'Unique identifier of the created `Command`.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeviceCommandAddResult'
} as const;

export const $DeviceCommandCreator = {
    title: 'User',
    required: ['LastName'],
    type: 'object',
    properties: {
        FirstName: {
            type: 'string',
            description: 'First name of the user.',
            nullable: true
        },
        LastName: {
            minLength: 1,
            type: 'string',
            description: 'Last name of the user.'
        },
        ImageUrl: {
            type: 'string',
            description: 'URL of the profile image.',
            format: 'uri',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeviceCommandCreator'
} as const;

export const $DeviceCommandData = {
    type: 'object',
    additionalProperties: false
} as const;

export const $DeviceCommandFilterParameters = {
    title: 'DeviceCommandFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CommandIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        CommandIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Commands](https://mews-systems.gitbook.io/connector-api/operations/#command) to be returned.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeviceCommandFilterParameters'
} as const;

export const $DeviceCommandResult = {
    title: 'DeviceCommandResult',
    required: ['Commands'],
    type: 'object',
    properties: {
        Commands: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DeviceCommand'
            },
            description: 'The active commands.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last returned command. This can be used in Limitation in a subsequent request to fetch the next batch of commands.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeviceCommandResult'
} as const;

export const $DeviceCommandResultDiscriminator = {
    enum: ['ItalianFiscalMachine', 'SaltoMobileKeyDto'],
    type: 'string'
} as const;

export const $DeviceCommandStateEnum = {
    title: 'Command state',
    enum: ['Pending', 'Received', 'Processing', 'Processed', 'Cancelled', 'Error'],
    type: 'string',
    description: `

Pending (Created in Mews, but not yet received by the client application.)

Received (Received by the client application.)

Processing (Being processed by the client application.)

Processed (Successfully processed command.)

Cancelled (A command whose execution has been canceled before (or during) processing.)

Error (A command whose execution or processing was terminated by an error.)`,
    'x-enumNames': ['Pending', 'Received', 'Processing', 'Processed', 'Cancelled', 'Error'],
    'x-enumDescriptions': ['Created in Mews, but not yet received by the client application.', 'Received by the client application.', 'Being processed by the client application.', 'Successfully processed command.', 'A command whose execution has been canceled before (or during) processing.', 'A command whose execution or processing was terminated by an error.']
} as const;

export const $DeviceCommandUpdateParameters = {
    title: 'DeviceCommandUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CommandId', 'State'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        CommandId: {
            type: 'string',
            description: 'Identifier of the `Command` to be updated.',
            format: 'uuid'
        },
        State: {
            allOf: [
                {
                    '$ref': '#/components/schemas/DeviceCommandStateEnum'
                }
            ],
            description: `New state of the command.

Pending (Created in Mews, but not yet received by the client application.)

Received (Received by the client application.)

Processing (Being processed by the client application.)

Processed (Successfully processed command.)

Cancelled (A command whose execution has been canceled before (or during) processing.)

Error (A command whose execution or processing was terminated by an error.)`
        },
        Progress: {
            type: 'number',
            description: 'Progress of the command processing. Only used if the `State` is `Processing`, otherwise ignored.',
            format: 'double',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Notes about command execution. Only used if the `State` is `Processed`, `Cancelled` or `Error`, otherwise ignored.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeviceCommandUpdateParameters'
} as const;

export const $DeviceResult = {
    title: 'DeviceResult',
    required: ['Devices'],
    type: 'object',
    properties: {
        Devices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Device'
            },
            description: 'The devices.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DeviceResult'
} as const;

export const $DeviceTypeEnum = {
    title: 'Device type',
    enum: ['Printer', 'PaymentTerminal', 'KeyCutter', 'FiscalMachine', 'PassportScanner'],
    type: 'string',
    description: `Type of the device.

Printer ([Printer command data](https://mews-systems.gitbook.io/connector-api/operations/commands#printer-command-data))

PaymentTerminal ([Payment terminal command data](https://mews-systems.gitbook.io/connector-api/operations/commands#payment-terminal-command-data))

KeyCutter ([Key cutter command data](https://mews-systems.gitbook.io/connector-api/operations/commands#key-cutter-command-data))

FiscalMachine ([Fiscal machine command data](https://mews-systems.gitbook.io/connector-api/operations/commands#fiscal-machine-command-data))

PassportScanner ([Passport scanner command data](https://mews-systems.gitbook.io/connector-api/operations/commands#passport-scanner-command-data))`,
    'x-enumNames': ['Printer', 'PaymentTerminal', 'KeyCutter', 'FiscalMachine', 'PassportScanner'],
    'x-enumDescriptions': ['[Printer command data](https://mews-systems.gitbook.io/connector-api/operations/commands#printer-command-data)', '[Payment terminal command data](https://mews-systems.gitbook.io/connector-api/operations/commands#payment-terminal-command-data)', '[Key cutter command data](https://mews-systems.gitbook.io/connector-api/operations/commands#key-cutter-command-data)', '[Fiscal machine command data](https://mews-systems.gitbook.io/connector-api/operations/commands#fiscal-machine-command-data)', '[Passport scanner command data](https://mews-systems.gitbook.io/connector-api/operations/commands#passport-scanner-command-data)']
} as const;

export const $DisableCreditCardParameters = {
    title: 'DisableCreditCardParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CreditCardId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        CreditCardId: {
            type: 'string',
            description: 'Unique identifier of the `CreditCard` to disable.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'DisableCreditCardParameters'
} as const;

export const $DocumentParameters = {
    title: 'Identity document parameters',
    type: 'object',
    properties: {
        Number: {
            type: 'string',
            description: 'Number of the document (e.g. passport number).',
            nullable: true
        },
        Expiration: {
            type: 'string',
            description: 'Expiration date in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        Issuance: {
            type: 'string',
            description: 'Date of issuance in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        IssuingCountryCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the `Country`.',
            nullable: true
        },
        IssuingCity: {
            type: 'string',
            description: 'City from which document issued',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'DocumentParameters'
} as const;

export const $EarlinessRestriction = {
    title: 'Earliness restriction',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate restriction.',
            format: 'uuid'
        },
        RateId: {
            type: 'string',
            description: 'Unique identifier of the rate.',
            format: 'uuid'
        },
        IsInherited: {
            type: 'boolean',
            description: 'Whether the rate restriction is inherited from the parent rate.'
        },
        StartUtc: {
            type: 'string',
            description: 'Start of the rate restriction in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End of the rate restriction in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        Days: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The restricted days of week.',
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'Identifiers of from external systems.',
            nullable: true
        },
        MinAdvance: {
            type: 'string',
            description: 'The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            nullable: true
        },
        MaxAdvance: {
            type: 'string',
            description: 'The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'EarlinessRestriction'
} as const;

export const $Enterprise = {
    title: 'Enterprise',
    required: ['AccommodationEnvironmentCode', 'AccountingEditableHistoryInterval', 'AccountingEnvironmentCode', 'Address', 'AddressId', 'ChainId', 'ChainName', 'CreatedUtc', 'Currencies', 'DefaultLanguageCode', 'EditableHistoryInterval', 'GroupNames', 'Id', 'LegalEnvironmentCode', 'Name', 'OperationalEditableHistoryInterval', 'Pricing', 'Subscription', 'TaxEnvironmentCode', 'TimeZoneIdentifier', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the enterprise.',
            format: 'uuid'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the enterprise from external system.',
            nullable: true
        },
        HoldingKey: {
            maxLength: 255,
            type: 'string',
            description: 'Identifies an enterprise in the external system of a holding company. The holding company may administer multiple portfolios.',
            nullable: true
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain to which the enterprise belongs.',
            format: 'uuid'
        },
        ChainName: {
            minLength: 1,
            type: 'string',
            description: 'Name of the `Chain` to which the enterprise belongs.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the enterprise in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the enterprise in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the enterprise.'
        },
        TimeZoneIdentifier: {
            minLength: 1,
            type: 'string',
            description: 'IANA timezone identifier of the enterprise.'
        },
        LegalEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the legal environment where the enterprise resides.'
        },
        AccommodationEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique code of the accommodation environment where the enterprise resides.'
        },
        AccountingEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique code of the accounting environment where the enterprise resides.'
        },
        TaxEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique code of the tax environment where the enterprise resides.'
        },
        DefaultLanguageCode: {
            minLength: 1,
            type: 'string',
            description: 'Language-culture codes of the enterprise default `Language`.'
        },
        EditableHistoryInterval: {
            minLength: 1,
            type: 'string',
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountingEditableHistoryInterval` and `OperationalEditableHistoryInterval` instead.'
        },
        AccountingEditableHistoryInterval: {
            minLength: 1,
            type: 'string',
            description: 'Editable history interval for accounting data in ISO 8601 duration format.'
        },
        OperationalEditableHistoryInterval: {
            minLength: 1,
            type: 'string',
            description: 'Editable history interval for operational data in ISO 8601 duration format.'
        },
        WebsiteUrl: {
            type: 'string',
            description: 'URL of the enterprise website.',
            format: 'uri',
            nullable: true
        },
        Email: {
            type: 'string',
            description: 'Email address of the enterprise.',
            format: 'email',
            nullable: true
        },
        Phone: {
            type: 'string',
            description: 'Phone number of the enterprise.',
            format: 'tel',
            nullable: true
        },
        LogoImageId: {
            type: 'string',
            description: 'Unique identifier of the `Image` of the enterprise logo.',
            format: 'uuid',
            nullable: true
        },
        CoverImageId: {
            type: 'string',
            description: 'Unique identifier of the `Image` of the enterprise cover.',
            format: 'uuid',
            nullable: true
        },
        Pricing: {
            title: 'Pricing',
            allOf: [
                {
                    '$ref': '#/components/schemas/PricingModeEnum'
                }
            ],
            description: `Pricing of the enterprise.

Gross (The enterprise shows amount with gross prices.)

Net (The enterprise shows amount with net prices.)`,
            'x-enumNames': ['Gross', 'Net'],
            'x-enumDescriptions': ['The enterprise shows amount with gross prices.', 'The enterprise shows amount with net prices.']
        },
        TaxPrecision: {
            type: 'integer',
            description: 'Tax precision used for financial calculations in the enterprise. If `null`, `Currency` precision is used.',
            format: 'int32',
            nullable: true
        },
        AddressId: {
            type: 'string',
            description: 'Unique identifier of the `Address` of the enterprise.',
            format: 'uuid'
        },
        Address: {
            title: 'Address',
            allOf: [
                {
                    '$ref': '#/components/schemas/OldAddress'
                }
            ],
            description: 'Address of the enterprise.'
        },
        GroupNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'A list of the group names of the enterprise.'
        },
        Subscription: {
            title: 'Enterprise subscription',
            allOf: [
                {
                    '$ref': '#/components/schemas/EnterpriseSubscription'
                }
            ],
            description: 'Subscription information of the enterprise.'
        },
        Currencies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CurrencyAcceptance'
            },
            description: 'Currencies accepted by the enterprise.'
        },
        AccountingConfiguration: {
            title: 'Accounting configuration',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingConfiguration'
                }
            ],
            description: 'Configuration information containing financial information about the property.',
            nullable: true
        },
        IsPortfolio: {
            type: 'boolean',
            description: 'Whether the enterprise is a Portfolio enterprise (see [Multi-property guidelines](https://mews-systems.gitbook.io/connector-api/guidelines/multi-property)).'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'Enterprise'
} as const;

export const $EnterpriseFilterParameters = {
    title: 'EnterpriseFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Enterprises](https://mews-systems.gitbook.io/connector-api/operations/#enterprise). If not specified, all enterprises within scope of the Access Token are returned.',
            nullable: true
        },
        ExternalIdentifiers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Identifiers of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/#enterprise) from external system.',
            nullable: true
        },
        LinkedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'EnterpriseFilterParameters'
} as const;

export const $EnterprisePortfolio = {
    title: 'Enterprise',
    required: ['AccommodationEnvironmentCode', 'AccountingEditableHistoryInterval', 'AccountingEnvironmentCode', 'Address', 'AddressId', 'ChainId', 'ChainName', 'CreatedUtc', 'DefaultLanguageCode', 'EditableHistoryInterval', 'GroupNames', 'Id', 'LegalEnvironmentCode', 'LinkedUtc', 'Name', 'OperationalEditableHistoryInterval', 'Pricing', 'Subscription', 'TaxEnvironmentCode', 'TimeZoneIdentifier', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the enterprise.',
            format: 'uuid'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the enterprise from external system.',
            nullable: true
        },
        HoldingKey: {
            maxLength: 255,
            type: 'string',
            description: 'Identifies an enterprise in the external system of a holding company. The holding company may administer multiple portfolios.',
            nullable: true
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain to which the enterprise belongs.',
            format: 'uuid'
        },
        ChainName: {
            minLength: 1,
            type: 'string',
            description: 'Name of the `Chain` to which the enterprise belongs.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the enterprise in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the enterprise in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the enterprise.'
        },
        TimeZoneIdentifier: {
            minLength: 1,
            type: 'string',
            description: 'IANA timezone identifier of the enterprise.'
        },
        LegalEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the legal environment where the enterprise resides.'
        },
        AccommodationEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique code of the accommodation environment where the enterprise resides.'
        },
        AccountingEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique code of the accounting environment where the enterprise resides.'
        },
        TaxEnvironmentCode: {
            minLength: 1,
            type: 'string',
            description: 'Unique code of the tax environment where the enterprise resides.'
        },
        DefaultLanguageCode: {
            minLength: 1,
            type: 'string',
            description: 'Language-culture codes of the enterprise default `Language`.'
        },
        EditableHistoryInterval: {
            minLength: 1,
            type: 'string',
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountingEditableHistoryInterval` and `OperationalEditableHistoryInterval` instead.'
        },
        AccountingEditableHistoryInterval: {
            minLength: 1,
            type: 'string',
            description: 'Editable history interval for accounting data in ISO 8601 duration format.'
        },
        OperationalEditableHistoryInterval: {
            minLength: 1,
            type: 'string',
            description: 'Editable history interval for operational data in ISO 8601 duration format.'
        },
        WebsiteUrl: {
            type: 'string',
            description: 'URL of the enterprise website.',
            format: 'uri',
            nullable: true
        },
        Email: {
            type: 'string',
            description: 'Email address of the enterprise.',
            format: 'email',
            nullable: true
        },
        Phone: {
            type: 'string',
            description: 'Phone number of the enterprise.',
            format: 'tel',
            nullable: true
        },
        LogoImageId: {
            type: 'string',
            description: 'Unique identifier of the `Image` of the enterprise logo.',
            format: 'uuid',
            nullable: true
        },
        CoverImageId: {
            type: 'string',
            description: 'Unique identifier of the `Image` of the enterprise cover.',
            format: 'uuid',
            nullable: true
        },
        Pricing: {
            title: 'Pricing',
            allOf: [
                {
                    '$ref': '#/components/schemas/PricingModeEnum'
                }
            ],
            description: `Pricing of the enterprise.

Gross (The enterprise shows amount with gross prices.)

Net (The enterprise shows amount with net prices.)`,
            'x-enumNames': ['Gross', 'Net'],
            'x-enumDescriptions': ['The enterprise shows amount with gross prices.', 'The enterprise shows amount with net prices.']
        },
        TaxPrecision: {
            type: 'integer',
            description: 'Tax precision used for financial calculations in the enterprise. If `null`, `Currency` precision is used.',
            format: 'int32',
            nullable: true
        },
        AddressId: {
            type: 'string',
            description: 'Unique identifier of the `Address` of the enterprise.',
            format: 'uuid'
        },
        Address: {
            title: 'Address',
            allOf: [
                {
                    '$ref': '#/components/schemas/OldAddress'
                }
            ],
            description: 'Address of the enterprise.'
        },
        GroupNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'A list of the group names of the enterprise.'
        },
        Subscription: {
            title: 'Enterprise subscription',
            allOf: [
                {
                    '$ref': '#/components/schemas/EnterpriseSubscription'
                }
            ],
            description: 'Subscription information of the enterprise.'
        },
        LinkedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time when enterprise was added to the portfolio in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'EnterprisePortfolio'
} as const;

export const $EnterpriseProfileData = {
    title: 'Enterprise profile data',
    required: ['ProfileId'],
    type: 'object',
    properties: {
        ProfileId: {
            type: 'string',
            description: 'Unique identifier of the profile.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'EnterpriseProfileData'
} as const;

export const $EnterpriseResult = {
    title: 'EnterpriseResult',
    required: ['Enterprises'],
    type: 'object',
    properties: {
        Enterprises: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnterprisePortfolio'
            },
            description: 'The filtered enterprises.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest enterprise returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older enterprises.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'EnterpriseResult'
} as const;

export const $EnterpriseScopeCounterDiscriminator = {
    enum: ['Counter', 'AccountingCounter', 'AvailabilityBlockCounter', 'BillCounter', 'BillPreviewCounter', 'FiscalCounter', 'ProformaCounter', 'RegistrationCardCounter', 'ServiceOrderCounter', 'CorrectionBillCounter', 'PaymentConfirmationBillCounter', 'CreditNoteBillCounter'],
    type: 'string'
} as const;

export const $EnterpriseSubscription = {
    title: 'Enterprise subscription',
    type: 'object',
    properties: {
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identifier of the `Enterprise`.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'EnterpriseSubscription'
} as const;

export const $ExchangeRate = {
    title: 'Exchange rate',
    required: ['EnterpriseId', 'Id', 'SourceCurrency', 'TargetCurrency', 'Value'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the Exchange Rate.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/configuration/#enterprise) to which the Exchange Rate belongs.',
            format: 'uuid'
        },
        SourceCurrency: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 code of the source [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).',
            format: 'currency'
        },
        TargetCurrency: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 code of the target [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).',
            format: 'currency'
        },
        Value: {
            type: 'number',
            description: 'The exchange rate from the source currency to the target currency.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExchangeRate'
} as const;

export const $ExchangeRateResult = {
    title: 'ExchangeRateResult',
    required: ['ExchangeRates'],
    type: 'object',
    properties: {
        ExchangeRates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExchangeRate'
            },
            description: 'The available exchange rates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExchangeRateResult'
} as const;

export const $Export = {
    title: 'Export',
    required: ['EntityType', 'Files', 'Id', 'Status'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the export.',
            format: 'uuid'
        },
        Status: {
            '$ref': '#/components/schemas/ExportStatus'
        },
        EntityType: {
            '$ref': '#/components/schemas/ExportEntityType'
        },
        Files: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExportFileEntry'
            },
            description: 'Files with exported data. Empty if no files are available.'
        },
        ExpiresUtc: {
            type: 'string',
            description: 'Expiration date and time of the export in UTC timezone in ISO 8601 format. After this time the Exported files may no longer be available for download.',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Export'
} as const;

export const $ExportAddParameters = {
    title: 'ExportAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'EntityType'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EntityType: {
            '$ref': '#/components/schemas/ExportEntityType'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExportAddParameters'
} as const;

export const $ExportAddResult = {
    title: 'ExportAddResult',
    required: ['Export'],
    type: 'object',
    properties: {
        Export: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Export'
                }
            ],
            description: 'Added export.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExportAddResult'
} as const;

export const $ExportEntityType = {
    title: 'Exported entity type',
    enum: ['OrderItem', 'Payment', 'Reservation', 'Customer', 'Company', 'Bill', 'AvailabilityAdjustment', 'AvailabilityBlock', 'ResourceBlock'],
    type: 'string',
    description: 'Type of exported entities'
} as const;

export const $ExportFileEntry = {
    title: 'Export file entry',
    required: ['SizeInBytes', 'Url'],
    type: 'object',
    properties: {
        Url: {
            minLength: 1,
            type: 'string',
            description: 'URL of the exported file for download in JSON Lines format.',
            format: 'uri'
        },
        SizeInBytes: {
            type: 'integer',
            description: 'Total size of the exported file in bytes.',
            format: 'int64'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExportFileEntry'
} as const;

export const $ExportFilterParameters = {
    title: 'ExportFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ExportIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ExportIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Exports](https://mews-systems.gitbook.io/connector-api/operations/#export).'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExportFilterParameters'
} as const;

export const $ExportResult = {
    title: 'ExportResult',
    required: ['Exports'],
    type: 'object',
    properties: {
        Exports: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Export'
            },
            description: 'Requested exports.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExportResult'
} as const;

export const $ExportStatus = {
    title: 'Export status',
    enum: ['Pending', 'Processing', 'Success', 'Failed', 'Expired'],
    type: 'string',
    description: 'Current status of the export.'
} as const;

export const $ExtendedAmount = {
    title: 'Extended amount',
    required: ['Breakdown', 'Currency', 'GrossValue', 'NetValue', 'TaxValues'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).',
            format: 'currency'
        },
        NetValue: {
            type: 'number',
            description: 'Net value without taxes.',
            format: 'double'
        },
        GrossValue: {
            type: 'number',
            description: 'Gross value including all taxes.',
            format: 'double'
        },
        TaxValues: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxValue'
            },
            description: 'The tax values applied.'
        },
        Breakdown: {
            title: 'Tax breakdown',
            allOf: [
                {
                    '$ref': '#/components/schemas/TaxBreakdown'
                }
            ],
            description: 'Information about individual tax amounts.'
        },
        Value: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Net: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Tax: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        TaxRate: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'ExtendedAmount'
} as const;

export const $ExtendedAmountParameters = {
    title: 'Amount parameters',
    required: ['Currency'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 code of the `Currency`.',
            format: 'currency'
        },
        TaxCodes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The tax values applied.',
            nullable: true
        },
        NetValue: {
            type: 'number',
            description: 'Net value in case the item is taxed.',
            format: 'double',
            nullable: true
        },
        GrossValue: {
            type: 'number',
            description: 'Gross value including all taxes.',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'ExtendedAmountParameters'
} as const;

export const $ExternalPaymentParameters = {
    title: 'ExternalPaymentParameters',
    required: ['AccessToken', 'AccountId', 'Amount', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company). Company billing may not be enabled for your integration.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer). **Deprecated!**',
            format: 'uuid',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountId`.'
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of an open bill of the customer where to assign the payment.',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of an [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) to be assigned to the external payment.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation the payment belongs to.',
            format: 'uuid',
            nullable: true
        },
        Amount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmountParameters'
                }
            ],
            description: 'Amount of the external card payment.'
        },
        Type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ExternalPaymentTypeEnum'
                }
            ],
            description: `Type of the external payment. (Required for the enterprises based in the French Legal Environment where \`Unspecified\` is considered as fraud.)

Unspecified (Unspecified (unavailable in French Legal Environment))

BadDebts (Bad debts)

Bacs (Bacs payment)

WireTransfer (Wire transfer)

Invoice (Invoice)

ExchangeRateDifference (Exchange rate difference)

Complimentary (Complimentary)

Reseller (Reseller)

ExchangeRoundingDifference (Exchange rounding difference)

Barter (Barter)

Commission (Commission)

BankCharges (Bank charges)

CrossSettlement (Cross settlement)

Cash (Cash)

CreditCard (Credit card)

Prepayment (Prepayment)

Cheque (Cheque)

Bancontact (Bancontact)

IDeal (iDeal)

PayPal (PayPal)

GiftCard (Gift card)

LoyaltyPoints (Loyalty points)

ChequeVacances (Chèque-Vacances)

OnlinePayment (Online payment)

CardCheck (Card check)

PaymentHubRedirection (Payment hub redirection)

Voucher (Voucher)

MasterCard (MasterCard)

Visa (Visa)

Amex (American Express)

Discover (Discover)

DinersClub (Diners Club)

Jcb (JCB)

UnionPay (UnionPay)

Twint (TWINT)

Reka (Reka)

LoyaltyCard (Loyalty card)

PosDiningAndSpaReward (POS Dining & Spa Reward)

DirectDebit (Direct debit)

DepositCheck (Deposit - check)

DepositCash (Deposit - cash)

DepositCreditCard (Deposit - credit card)

DepositWireTransfer (Deposit - wire transfer)`,
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'Identifier of the payment from external system.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional payment notes.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ExternalPaymentParameters'
} as const;

export const $ExternalPaymentTypeEnum = {
    title: 'External payment type',
    enum: ['Unspecified', 'BadDebts', 'Bacs', 'WireTransfer', 'Invoice', 'ExchangeRateDifference', 'Complimentary', 'Reseller', 'ExchangeRoundingDifference', 'Barter', 'Commission', 'BankCharges', 'CrossSettlement', 'Cash', 'CreditCard', 'Prepayment', 'Cheque', 'Bancontact', 'IDeal', 'PayPal', 'GiftCard', 'LoyaltyPoints', 'ChequeVacances', 'OnlinePayment', 'CardCheck', 'PaymentHubRedirection', 'Voucher', 'MasterCard', 'Visa', 'Amex', 'Discover', 'DinersClub', 'Jcb', 'UnionPay', 'Twint', 'Reka', 'LoyaltyCard', 'PosDiningAndSpaReward', 'DirectDebit', 'DepositCheck', 'DepositCash', 'DepositCreditCard', 'DepositWireTransfer'],
    type: 'string',
    description: `

Unspecified (Unspecified (unavailable in French Legal Environment))

BadDebts (Bad debts)

Bacs (Bacs payment)

WireTransfer (Wire transfer)

Invoice (Invoice)

ExchangeRateDifference (Exchange rate difference)

Complimentary (Complimentary)

Reseller (Reseller)

ExchangeRoundingDifference (Exchange rounding difference)

Barter (Barter)

Commission (Commission)

BankCharges (Bank charges)

CrossSettlement (Cross settlement)

Cash (Cash)

CreditCard (Credit card)

Prepayment (Prepayment)

Cheque (Cheque)

Bancontact (Bancontact)

IDeal (iDeal)

PayPal (PayPal)

GiftCard (Gift card)

LoyaltyPoints (Loyalty points)

ChequeVacances (Chèque-Vacances)

OnlinePayment (Online payment)

CardCheck (Card check)

PaymentHubRedirection (Payment hub redirection)

Voucher (Voucher)

MasterCard (MasterCard)

Visa (Visa)

Amex (American Express)

Discover (Discover)

DinersClub (Diners Club)

Jcb (JCB)

UnionPay (UnionPay)

Twint (TWINT)

Reka (Reka)

LoyaltyCard (Loyalty card)

PosDiningAndSpaReward (POS Dining & Spa Reward)

DirectDebit (Direct debit)

DepositCheck (Deposit - check)

DepositCash (Deposit - cash)

DepositCreditCard (Deposit - credit card)

DepositWireTransfer (Deposit - wire transfer)`,
    'x-enumNames': ['Unspecified', 'BadDebts', 'Bacs', 'WireTransfer', 'Invoice', 'ExchangeRateDifference', 'Complimentary', 'Reseller', 'ExchangeRoundingDifference', 'Barter', 'Commission', 'BankCharges', 'CrossSettlement', 'Cash', 'CreditCard', 'Prepayment', 'Cheque', 'Bancontact', 'IDeal', 'PayPal', 'GiftCard', 'LoyaltyPoints', 'ChequeVacances', 'OnlinePayment', 'CardCheck', 'PaymentHubRedirection', 'Voucher', 'MasterCard', 'Visa', 'Amex', 'Discover', 'DinersClub', 'Jcb', 'UnionPay', 'Twint', 'Reka', 'LoyaltyCard', 'PosDiningAndSpaReward', 'DirectDebit', 'DepositCheck', 'DepositCash', 'DepositCreditCard', 'DepositWireTransfer'],
    'x-enumDescriptions': ['Unspecified (unavailable in French Legal Environment)', 'Bad debts', 'Bacs payment', 'Wire transfer', 'Invoice', 'Exchange rate difference', 'Complimentary', 'Reseller', 'Exchange rounding difference', 'Barter', 'Commission', 'Bank charges', 'Cross settlement', 'Cash', 'Credit card', 'Prepayment', 'Cheque', 'Bancontact', 'iDeal', 'PayPal', 'Gift card', 'Loyalty points', 'Chèque-Vacances', 'Online payment', 'Card check', 'Payment hub redirection', 'Voucher', 'MasterCard', 'Visa', 'American Express', 'Discover', 'Diners Club', 'JCB', 'UnionPay', 'TWINT', 'Reka', 'Loyalty card', 'POS Dining & Spa Reward', 'Direct debit', 'Deposit - check', 'Deposit - cash', 'Deposit - credit card', 'Deposit - wire transfer']
} as const;

export const $FinancialDocumentPdfTemplateTypeEnum = {
    title: 'Bill PDF template type',
    enum: ['Detailed', 'Consumption', 'Reservation', 'OrderItem', 'Guest'],
    type: 'string',
    description: `

Detailed (Detailed overview. Items are grouped by the reservation, item type and price, and consumption date.)

Consumption (Overview by date (no reservation details). Items of the same type and price are grouped by consumption date.)

Reservation (Overview by reservation (no date). Items of the same type and price are grouped by reservation.)

OrderItem (Consumption overview (not fiscal document). Items are grouped by the item type and price without reservation details and consumption date.)

Guest (Overview by guest. Items are grouped by guest, reservation, consumption date, and item type.)`,
    'x-enumNames': ['Detailed', 'Consumption', 'Reservation', 'OrderItem', 'Guest'],
    'x-enumDescriptions': ['Detailed overview. Items are grouped by the reservation, item type and price, and consumption date.', 'Overview by date (no reservation details). Items of the same type and price are grouped by consumption date.', 'Overview by reservation (no date). Items of the same type and price are grouped by reservation.', 'Consumption overview (not fiscal document). Items are grouped by the item type and price without reservation details and consumption date.', 'Overview by guest. Items are grouped by guest, reservation, consumption date, and item type.']
} as const;

export const $FiscalMachineAdditionalData = {
    title: 'FiscalMachineAdditionalData',
    type: 'object',
    properties: {
        Discriminator: {
            allOf: [
                {
                    '$ref': '#/components/schemas/FiscalMachineDataDiscriminatorEnum'
                }
            ],
            description: `Type of additional data for Italian fiscal machine.

ItalianFiscalMachineData

ItalianFiscalMachinePayload`,
            nullable: true
        },
        ItalianFiscalMachineData: {
            title: 'Italian fiscal machine data',
            allOf: [
                {
                    '$ref': '#/components/schemas/ItalianFiscalMachineDataV20250623'
                }
            ],
            description: 'Fiscal machine data for Italian fiscal machine.',
            nullable: true
        },
        ItalianFiscalMachinePayload: {
            title: 'Italian fiscal machine payload.',
            allOf: [
                {
                    '$ref': '#/components/schemas/ItalianFiscalMachinePayloadV20250623'
                }
            ],
            description: 'Fiscal machine payload for Italian fiscal machine.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'FiscalMachineAdditionalData'
} as const;

export const $FiscalMachineCommandData = {
    title: 'Fiscal machine command data',
    required: ['Bill'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/DeviceCommandData'
        }
    ],
    properties: {
        FiscalMachineId: {
            type: 'string',
            description: 'Identifier of the fiscal machine.',
            nullable: true
        },
        ApiUrl: {
            type: 'string',
            description: 'URL of the fiscal machine API.',
            nullable: true
        },
        FiscalMachineData: {
            type: 'string',
            description: 'Custom JSON data.',
            nullable: true
        },
        Bill: {
            title: 'Bill',
            allOf: [
                {
                    '$ref': '#/components/schemas/Bill'
                }
            ],
            description: 'The issued bill that should be fiscalized.'
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identifier to be used for fiscalization.',
            nullable: true
        },
        BillFiscalMachineData: {
            title: 'Fiscal machine data',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillFiscalMachineData'
                }
            ],
            description: 'Fiscal machine data; currently only `ItalianFiscalMachineData` is supported.',
            nullable: true
        },
        PayloadData: {
            title: 'Fiscal machine payload',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillFiscalMachinePayloadData'
                }
            ],
            description: 'Fiscal machine payload data; currently only `ItalianFiscalMachinePayloadData` is supported.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'FiscalMachineCommandData'
} as const;

export const $FiscalMachineCommandDataV20250623 = {
    title: 'Fiscal machine command data (ver. 2025-06-23)',
    required: ['ApiUrl', 'Bill', 'CreatedUtc', 'Device', 'FiscalMachineData', 'FiscalMachineId', 'Id', 'State'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the command.',
            format: 'uuid'
        },
        State: {
            title: 'Command state',
            allOf: [
                {
                    '$ref': '#/components/schemas/DeviceCommandStateEnum'
                }
            ],
            description: `State of the command.

Pending (Created in Mews, but not yet received by the client application.)

Received (Received by the client application.)

Processing (Being processed by the client application.)

Processed (Successfully processed command.)

Cancelled (A command whose execution has been canceled before (or during) processing.)

Error (A command whose execution or processing was terminated by an error.)`,
            'x-enumNames': ['Pending', 'Received', 'Processing', 'Processed', 'Cancelled', 'Error'],
            'x-enumDescriptions': ['Created in Mews, but not yet received by the client application.', 'Received by the client application.', 'Being processed by the client application.', 'Successfully processed command.', 'A command whose execution has been canceled before (or during) processing.', 'A command whose execution or processing was terminated by an error.']
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the command.',
            format: 'date-time'
        },
        Creator: {
            title: 'Profile data',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProfileData'
                }
            ],
            description: 'Creator of the command.',
            nullable: true
        },
        FiscalMachineId: {
            minLength: 1,
            type: 'string',
            description: 'Identifier of the fiscal machine.'
        },
        ApiUrl: {
            minLength: 1,
            type: 'string',
            description: 'URL of the fiscal machine API.'
        },
        FiscalMachineData: {
            minLength: 1,
            type: 'string',
            description: 'Custom JSON data.'
        },
        TaxIdentifier: {
            type: 'string',
            description: 'Tax identifier to be used for fiscalization.',
            nullable: true
        },
        Device: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Device'
                }
            ],
            description: 'Device that the command should be executed on.'
        },
        Bill: {
            title: 'Bill (ver 2025-06-23)',
            allOf: [
                {
                    '$ref': '#/components/schemas/BillV20250623'
                }
            ],
            description: 'The issued bill that should be fiscalized.'
        },
        CommandData: {
            allOf: [
                {
                    '$ref': '#/components/schemas/FiscalMachineAdditionalData'
                }
            ],
            description: 'Additional data of the fiscal machine.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'FiscalMachineCommandDataV20250623'
} as const;

export const $FiscalMachineCommandDataV20250623Result = {
    title: 'FiscalMachineCommandDataV20250623Result',
    required: ['Commands'],
    type: 'object',
    properties: {
        Commands: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FiscalMachineCommandDataV20250623'
            },
            description: 'The filtered fiscal machine commands.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last returned command. This can be used in Limitation in a subsequent request to fetch the next batch of commands.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'FiscalMachineCommandDataV20250623Result'
} as const;

export const $FiscalMachineDataDiscriminatorEnum = {
    title: 'Fiscal machine data discriminator',
    enum: ['ItalianFiscalMachineData', 'ItalianFiscalMachinePayload'],
    type: 'string',
    description: `

ItalianFiscalMachineData

ItalianFiscalMachinePayload`,
    'x-enumNames': ['ItalianFiscalMachineData', 'ItalianFiscalMachinePayload'],
    'x-enumDescriptions': ['', '']
} as const;

export const $FiscalMachinePayloadDataDiscriminatorEnum = {
    title: 'Fiscal machine payload discriminator',
    enum: ['ItalianFiscalMachine'],
    type: 'string',
    description: `

ItalianFiscalMachine`,
    'x-enumNames': ['ItalianFiscalMachine'],
    'x-enumDescriptions': ['']
} as const;

export const $FlatTaxRateStrategy = {
    title: 'FlatTaxRateStrategy',
    type: 'object',
    properties: {
        CurrencyCode: {
            type: 'string',
            nullable: true
        },
        Value: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'FlatTaxRateStrategy'
} as const;

export const $GetAllActiveCommandsParameters = {
    title: 'GetAllActiveCommandsParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'GetAllActiveCommandsParameters'
} as const;

export const $GuidIEnumerableUpdateValue = {
    title: 'Guid array update value',
    type: 'object',
    properties: {
        Value: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Value which is to be updated.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'GuidIEnumerableUpdateValue'
} as const;

export const $GuidNullableUpdateValue = {
    title: 'Guid update value',
    type: 'object',
    properties: {
        Value: {
            type: 'string',
            description: 'Value which is to be updated.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'GuidNullableUpdateValue'
} as const;

export const $GuidUpdateValue = {
    title: 'Guid update value',
    type: 'object',
    properties: {
        Value: {
            type: 'string',
            description: 'Value which is to be updated.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'GuidUpdateValue'
} as const;

export const $Hours = {
    title: 'Hours',
    required: ['Eight', 'Eighteen', 'Eleven', 'Fifteen', 'Five', 'Four', 'Fourteen', 'Nine', 'Nineteen', 'One', 'Seven', 'Seventeen', 'Six', 'Sixteen', 'Ten', 'Thirteen', 'Three', 'Twelve', 'Twenty', 'TwentyOne', 'TwentyThree', 'TwentyTwo', 'Two', 'Zero'],
    type: 'object',
    properties: {
        Zero: {
            type: 'boolean',
            description: 'Hour 0 enabled'
        },
        One: {
            type: 'boolean',
            description: 'Hour 1 enabled'
        },
        Two: {
            type: 'boolean',
            description: 'Hour 2 enabled'
        },
        Three: {
            type: 'boolean',
            description: 'Hour 3 enabled'
        },
        Four: {
            type: 'boolean',
            description: 'Hour 4 enabled'
        },
        Five: {
            type: 'boolean',
            description: 'Hour 5 enabled'
        },
        Six: {
            type: 'boolean',
            description: 'Hour 6 enabled'
        },
        Seven: {
            type: 'boolean',
            description: 'Hour 7 enabled'
        },
        Eight: {
            type: 'boolean',
            description: 'Hour 8 enabled'
        },
        Nine: {
            type: 'boolean',
            description: 'Hour 9 enabled'
        },
        Ten: {
            type: 'boolean',
            description: 'Hour 10 enabled'
        },
        Eleven: {
            type: 'boolean',
            description: 'Hour 11 enabled'
        },
        Twelve: {
            type: 'boolean',
            description: 'Hour 12 enabled'
        },
        Thirteen: {
            type: 'boolean',
            description: 'Hour 13 enabled'
        },
        Fourteen: {
            type: 'boolean',
            description: 'Hour 14 enabled'
        },
        Fifteen: {
            type: 'boolean',
            description: 'Hour 15 enabled'
        },
        Sixteen: {
            type: 'boolean',
            description: 'Hour 16 enabled'
        },
        Seventeen: {
            type: 'boolean',
            description: 'Hour 17 enabled'
        },
        Eighteen: {
            type: 'boolean',
            description: 'Hour 18 enabled'
        },
        Nineteen: {
            type: 'boolean',
            description: 'Hour 19 enabled'
        },
        Twenty: {
            type: 'boolean',
            description: 'Hour 20 enabled'
        },
        TwentyOne: {
            type: 'boolean',
            description: 'Hour 21 enabled'
        },
        TwentyTwo: {
            type: 'boolean',
            description: 'Hour 22 enabled'
        },
        TwentyThree: {
            type: 'boolean',
            description: 'Hour 23 enabled'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Hours'
} as const;

export const $IdealData = {
    title: 'iDEAL data',
    required: ['RedirectUrl'],
    type: 'object',
    properties: {
        RedirectUrl: {
            minLength: 1,
            type: 'string',
            description: 'URL where the customer will be redirected after completing their iDEAL payment.',
            format: 'uri'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdealData'
} as const;

export const $IdentityDocument = {
    title: 'Identity document',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the document.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Identifier of the `Customer`.',
            format: 'uuid'
        },
        Type: {
            title: 'Document type',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocumentTypeEnum'
                }
            ],
            description: `Type of the document.

IdentityCard

Passport

Visa

DriversLicense`,
            'x-enumNames': ['IdentityCard', 'Passport', 'Visa', 'DriversLicense'],
            'x-enumDescriptions': ['', '', '', '']
        },
        Number: {
            type: 'string',
            description: 'Number of the document (e.g. passport number).',
            nullable: true
        },
        Expiration: {
            type: 'string',
            description: 'Expiration date in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        Issuance: {
            type: 'string',
            description: 'Date of issuance in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        IssuingCountryCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the `Country`.',
            nullable: true
        },
        IssuingCity: {
            type: 'string',
            description: 'City where the document was issued.',
            nullable: true
        },
        IdentityDocumentSupportNumber: {
            type: 'string',
            description: 'Identity document support number. Only required for Spanish identity cards in Spanish hotels.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocument'
} as const;

export const $IdentityDocumentClearParameters = {
    title: 'IdentityDocumentClearParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        CustomerIds: {
            maxItems: 10,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Customer` for whom documents will be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentClearParameters'
} as const;

export const $IdentityDocumentDeleteParameters = {
    title: 'IdentityDocumentDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'IdentityDocumentIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        IdentityDocumentIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the identity documents to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentDeleteParameters'
} as const;

export const $IdentityDocumentFilterParameters = {
    title: 'IdentityDocumentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerIds', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Chain`. If not specified, the operation returns data for all chains within scope of the Access Token.',
            nullable: true
        },
        IdentityDocumentIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Identity document`.',
            nullable: true
        },
        CustomerIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Customer`.'
        },
        Types: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityDocumentTypeEnum'
            },
            description: 'Type of the identity document.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentFilterParameters'
} as const;

export const $IdentityDocumentResult = {
    title: 'IdentityDocumentResult',
    required: ['IdentityDocuments'],
    type: 'object',
    properties: {
        IdentityDocuments: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityDocumentV20241025'
            },
            description: 'The identity documents of customers.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentResult'
} as const;

export const $IdentityDocumentTypeEnum = {
    title: 'Document type',
    enum: ['IdentityCard', 'Passport', 'Visa', 'DriversLicense'],
    type: 'string',
    description: `

IdentityCard

Passport

Visa

DriversLicense`,
    'x-enumNames': ['IdentityCard', 'Passport', 'Visa', 'DriversLicense'],
    'x-enumDescriptions': ['', '', '', '']
} as const;

export const $IdentityDocumentTypeUpdateValue = {
    title: 'Identity document type update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Document type',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocumentTypeEnum'
                }
            ],
            description: `Type of the document (or \`null\` if the number should not be updated).

IdentityCard

Passport

Visa

DriversLicense`,
            'x-enumNames': ['IdentityCard', 'Passport', 'Visa', 'DriversLicense'],
            'x-enumDescriptions': ['', '', '', '']
        }
    },
    additionalProperties: false,
    description: 'Has same structure as [String update value](https://mews-systems.gitbook.io/connector-api/operations/_objects#string-update-value).',
    'x-schema-id': 'IdentityDocumentTypeUpdateValue'
} as const;

export const $IdentityDocumentUpdateParameters = {
    title: 'Identity document update parameters',
    required: ['Id'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the document.',
            format: 'uuid'
        },
        Type: {
            title: 'Identity document type update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocumentTypeUpdateValue'
                }
            ],
            description: 'Type of the document (or `null` if the number should not be updated).',
            nullable: true
        },
        Number: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Number of the document (e.g. passport number or `null` if the number should not be updated).',
            nullable: true
        },
        ExpirationDate: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Expiration date in ISO 8601 format (or `null` if the expiration date should not be updated).',
            format: 'date',
            nullable: true
        },
        IssuanceDate: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Date of issuance in ISO 8601 format (or `null` if the issuance date should not be updated).',
            format: 'date',
            nullable: true
        },
        IssuingCountryCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'ISO 3166-1 code of the `Country` (or `null` if the issuing country code should not be updated).',
            nullable: true
        },
        IssuingCity: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'City where the document was issued (or `null` if the issuing city should not be updated).',
            nullable: true
        },
        IdentityDocumentSupportNumber: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Identity document support number. Only required for Spanish identity cards in Spanish hotels.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentUpdateParameters'
} as const;

export const $IdentityDocumentV20241025 = {
    title: 'Identity document (ver 2024-10-25)',
    required: ['CustomerId', 'Id', 'Number', 'Type'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the document.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Identifier of the `Customer`.',
            format: 'uuid'
        },
        Type: {
            title: 'Document type',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocumentTypeEnum'
                }
            ],
            description: `Type of the document.

IdentityCard

Passport

Visa

DriversLicense`,
            'x-enumNames': ['IdentityCard', 'Passport', 'Visa', 'DriversLicense'],
            'x-enumDescriptions': ['', '', '', '']
        },
        Number: {
            minLength: 1,
            type: 'string',
            description: 'Number of the document (e.g. passport number). The value is an empty string when the number is not collected in certain regions, such as The Netherlands.'
        },
        ExpirationDate: {
            type: 'string',
            description: 'Expiration date in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        IssuanceDate: {
            type: 'string',
            description: 'Date of issuance in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        IssuingCountryCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the `Country`.',
            nullable: true
        },
        IssuingCity: {
            type: 'string',
            description: 'City where the document was issued.',
            nullable: true
        },
        IdentityDocumentSupportNumber: {
            type: 'string',
            description: 'Identity document support number. Only required for Spanish identity cards in Spanish hotels.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentV20241025'
} as const;

export const $IdentityDocumentWriteResult = {
    title: 'IdentityDocumentWriteResult',
    required: ['IdentityDocuments'],
    type: 'object',
    properties: {
        IdentityDocuments: {
            maxItems: 10,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityDocumentV20241025'
            },
            description: 'Modified identity documents.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentWriteResult'
} as const;

export const $IdentityDocumentsAddData = {
    title: 'Identity document parameters',
    required: ['CustomerId', 'Number', 'Type'],
    type: 'object',
    properties: {
        CustomerId: {
            type: 'string',
            description: 'Identifier of the `Customer`.',
            format: 'uuid'
        },
        Type: {
            title: 'Document type',
            allOf: [
                {
                    '$ref': '#/components/schemas/IdentityDocumentTypeEnum'
                }
            ],
            description: `Type of the document.

IdentityCard

Passport

Visa

DriversLicense`,
            'x-enumNames': ['IdentityCard', 'Passport', 'Visa', 'DriversLicense'],
            'x-enumDescriptions': ['', '', '', '']
        },
        Number: {
            minLength: 1,
            type: 'string',
            description: 'Number of the document (e.g. passport number). If the number is not collected in certain regions, such as The Netherlands, use an empty string. In all other cases, a value should be supplied.'
        },
        ExpirationDate: {
            type: 'string',
            description: 'Expiration date in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        IssuanceDate: {
            type: 'string',
            description: 'Date of issuance in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        IssuingCountryCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the `Country`).',
            nullable: true
        },
        IssuingCity: {
            type: 'string',
            description: 'City where the document was issued.',
            nullable: true
        },
        IdentityDocumentSupportNumber: {
            type: 'string',
            description: 'Identity document support number. Only required for Spanish identity cards in Spanish hotels.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentsAddData'
} as const;

export const $IdentityDocumentsAddParameters = {
    title: 'Identity document add parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'IdentityDocuments'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        IdentityDocuments: {
            maxItems: 10,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityDocumentsAddData'
            },
            description: 'Identity documents to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'IdentityDocumentsAddParameters'
} as const;

export const $ImageResizeModeEnum = {
    title: 'Image resize mode',
    enum: ['Cover', 'CoverExact', 'Fit', 'FitExact'],
    type: 'string',
    description: `

Cover (Resize to fit within the specified size, so the result might be smaller than requested.)

CoverExact (Resize and pad to exactly fit within the specified size.)

Fit (Resize to fit within the specified size, so the result might be smaller than requested.)

FitExact (Resize and pad to exactly fit within the specified size.)`,
    'x-enumNames': ['Cover', 'CoverExact', 'Fit', 'FitExact'],
    'x-enumDescriptions': ['Resize to fit within the specified size, so the result might be smaller than requested.', 'Resize and pad to exactly fit within the specified size.', 'Resize to fit within the specified size, so the result might be smaller than requested.', 'Resize and pad to exactly fit within the specified size.']
} as const;

export const $ImageSizeParameters = {
    title: 'Image size parameters',
    required: ['ImageId'],
    type: 'object',
    properties: {
        ImageId: {
            type: 'string',
            description: 'Unique identifier of the image.',
            format: 'uuid'
        },
        Width: {
            type: 'integer',
            description: 'Desired width of the image.',
            format: 'int32',
            nullable: true
        },
        Height: {
            type: 'integer',
            description: 'Desired height of the image.',
            format: 'int32',
            nullable: true
        },
        ResizeMode: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ImageResizeModeEnum'
                }
            ],
            description: `Mode how the image should be resized to the desired width and height.

Cover (Resize to fit within the specified size, so the result might be smaller than requested.)

CoverExact (Resize and pad to exactly fit within the specified size.)

Fit (Resize to fit within the specified size, so the result might be smaller than requested.)

FitExact (Resize and pad to exactly fit within the specified size.)`,
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ImageSizeParameters'
} as const;

export const $ImageUrl = {
    title: 'Image URL',
    required: ['ImageId', 'Url'],
    type: 'object',
    properties: {
        ImageId: {
            type: 'string',
            description: 'Unique identifier of the image.',
            format: 'uuid'
        },
        Url: {
            minLength: 1,
            type: 'string',
            description: 'URL of the image.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ImageUrl'
} as const;

export const $ImageUrlParameters = {
    title: 'ImageUrlParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Images'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImageSizeParameters'
            },
            description: 'Parameters of images whose URLs should be returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ImageUrlParameters'
} as const;

export const $ImageUrlResult = {
    title: 'ImageUrlResult',
    required: ['ImageUrls'],
    type: 'object',
    properties: {
        ImageUrls: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImageUrl'
            },
            description: 'URLs of the images.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ImageUrlResult'
} as const;

export const $Int32NullableUpdateValue = {
    title: 'Int32 update value',
    type: 'object',
    properties: {
        Value: {
            type: 'integer',
            description: 'Value which is to be updated.',
            format: 'int32',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Int32NullableUpdateValue'
} as const;

export const $Int32UpdateValue = {
    title: 'Int32 update value',
    type: 'object',
    properties: {
        Value: {
            type: 'integer',
            description: 'Value which is to be updated.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Int32UpdateValue'
} as const;

export const $InvoicePaymentData = {
    title: 'InvoicePaymentData',
    type: 'object',
    properties: {
        InvoiceId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'InvoicePaymentData'
} as const;

export const $InvoicePaymentTypeEnum = {
    title: 'Invoice payment type',
    enum: ['Receivable', 'Balancing', 'UnderpaymentBalancingReceivable', 'OverpaymentBalancingReceivable', 'Overpayment'],
    type: 'string',
    description: `

Receivable

Balancing

UnderpaymentBalancingReceivable

OverpaymentBalancingReceivable

Overpayment`,
    'x-enumNames': ['Receivable', 'Balancing', 'UnderpaymentBalancingReceivable', 'OverpaymentBalancingReceivable', 'Overpayment'],
    'x-enumDescriptions': ['', '', '', '', '']
} as const;

export const $ItalianFiscalMachineData = {
    title: 'Fiscal machine data for Italian fiscal machine',
    type: 'object',
    properties: {
        IsRefund: {
            type: 'boolean',
            description: 'Indicates if the transaction is a refund.'
        },
        RebatedReceiptNumber: {
            type: 'string',
            description: 'Number of the rebated receipt.',
            nullable: true
        },
        RebatedReceiptSequence: {
            type: 'string',
            description: 'Sequence of the rebated receipt.',
            nullable: true
        },
        RebatedReceiptDateTimeUtc: {
            type: 'string',
            description: 'Date and time of the rebated receipt in UTC.',
            format: 'date-time',
            nullable: true
        },
        PrinterSerialNumber: {
            type: 'string',
            description: 'Serial number of the printer.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ItalianFiscalMachineData'
} as const;

export const $ItalianFiscalMachineDataV20250623 = {
    title: 'Italian fiscal machine data',
    type: 'object',
    properties: {
        IsRefund: {
            type: 'boolean',
            description: 'Indicates if the transaction is a refund.'
        },
        RebatedReceiptNumber: {
            type: 'string',
            description: 'Number of the rebated receipt.',
            nullable: true
        },
        RebatedReceiptSequence: {
            type: 'string',
            description: 'Sequence of the rebated receipt.',
            nullable: true
        },
        RebatedReceiptDateTimeUtc: {
            type: 'string',
            description: 'Date and time of the rebated receipt in UTC.',
            format: 'date-time',
            nullable: true
        },
        PrinterSerialNumber: {
            type: 'string',
            description: 'Serial number of the printer.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ItalianFiscalMachineDataV20250623'
} as const;

export const $ItalianFiscalMachinePayloadV20250623 = {
    title: 'Italian fiscal machine payload.',
    required: ['Payload'],
    type: 'object',
    properties: {
        Payload: {
            minLength: 1,
            type: 'string',
            description: 'Base64-encoded data of the file to be printed.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ItalianFiscalMachinePayloadV20250623'
} as const;

export const $ItalianFiscalMachineResultData = {
    title: 'ItalianFiscalMachineResultData',
    type: 'object',
    properties: {
        SerialNumber: {
            type: 'string',
            nullable: true
        },
        Base64Data: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ItalianFiscalMachineResultData'
} as const;

export const $JToken = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/JToken'
    }
} as const;

export const $KeyCutterCommandData = {
    title: 'Key cutter command data',
    required: ['EndUtc', 'KeyCount', 'LastName', 'LockIds', 'StartUtc'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/DeviceCommandData'
        }
    ],
    properties: {
        KeyCutterId: {
            type: 'string',
            description: 'Identifier of the key cutter.',
            nullable: true
        },
        ApiUrl: {
            type: 'string',
            description: 'URL of the key cutter server API.',
            nullable: true
        },
        KeyCutterData: {
            type: 'string',
            description: 'Custom JSON data.',
            nullable: true
        },
        KeyCount: {
            type: 'integer',
            description: 'Count of keys to cut.',
            format: 'int32'
        },
        LockIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Identifiers of locks/rooms the key should open.'
        },
        StartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Reservation start.',
            format: 'date-time'
        },
        EndUtc: {
            minLength: 1,
            type: 'string',
            description: 'Reservation end.',
            format: 'date-time'
        },
        FirstName: {
            type: 'string',
            description: 'First name of the reservation owner.',
            nullable: true
        },
        LastName: {
            minLength: 1,
            type: 'string',
            description: 'Last name of the reservation owner.'
        },
        NormalizedFirstName: {
            type: 'string',
            description: 'Normalized first name of the customer without special characters.',
            nullable: true
        },
        NormalizedLastName: {
            type: 'string',
            description: 'Normalized last name of the customer without special characters.',
            nullable: true
        },
        Telephone: {
            type: 'string',
            description: 'Telephone of the reservation owner.',
            nullable: true
        },
        Email: {
            type: 'string',
            description: 'Email of the reservation owner.',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid',
            nullable: true
        },
        ReservationNumber: {
            type: 'string',
            description: 'Confirmation number of the reservation in Mews.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'KeyCutterCommandData'
} as const;

export const $KeyCutterCommandParameters = {
    title: 'KeyCutterCommandParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'KeyCount', 'KeyCutterId', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        KeyCutterId: {
            type: 'string',
            description: 'Unique identifier of the KeyCutter [Device](https://mews-systems.gitbook.io/connector-api/operations/devices/#device) where to encode the key.',
            format: 'uuid'
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation to encode the key for.',
            format: 'uuid'
        },
        KeyCount: {
            type: 'integer',
            description: 'Count of keys to encode.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'KeyCutterCommandParameters'
} as const;

export const $Language = {
    title: 'Language',
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            description: 'Language-culture code of the language.',
            nullable: true
        },
        FallbackLanguageCode: {
            type: 'string',
            description: 'Language-culture code of the fallback language.',
            nullable: true
        },
        EnglishName: {
            type: 'string',
            description: 'English name of the language.',
            nullable: true
        },
        LocalName: {
            type: 'string',
            description: 'Local name of the language.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Language'
} as const;

export const $LanguageResult = {
    title: 'LanguageResult',
    type: 'object',
    properties: {
        Languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            description: 'The supported languages.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LanguageResult'
} as const;

export const $LanguageTextParameters = {
    title: 'LanguageTextParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LanguageCodes', 'Scope'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        LanguageCodes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Language-culture codes of the [Languages](https://mews-systems.gitbook.io/connector-api/operations/#language) whose texts to return.'
        },
        Scope: {
            minLength: 1,
            type: 'string',
            description: 'Scope of texts to return.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LanguageTextParameters'
} as const;

export const $LanguageTextResult = {
    title: 'LanguageTextResult',
    type: 'object',
    properties: {
        LanguageTexts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LanguageTexts'
            },
            description: 'Texts in the specified languages.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LanguageTextResult'
} as const;

export const $LanguageTexts = {
    title: 'Language texts',
    type: 'object',
    properties: {
        LanguageCode: {
            type: 'string',
            description: 'Language-culture code of the [Language](https://mews-systems.gitbook.io/connector-api/operations/#language).',
            nullable: true
        },
        Texts: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            description: 'Texts in the specified language by their keys.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LanguageTexts'
} as const;

export const $LedgerBalance = {
    title: 'LedgerBalance',
    required: ['ClosingBalance', 'Date', 'EnterpriseId', 'LedgerType', 'OpeningBalance'],
    type: 'object',
    properties: {
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the Enterprise.',
            format: 'uuid'
        },
        Date: {
            minLength: 1,
            type: 'string',
            description: 'Day for which ledger balance applies in ISO 8601 format.',
            format: 'date'
        },
        LedgerType: {
            title: 'Accounting ledger type',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingLedgerTypeEnum'
                }
            ],
            description: `Type of accounting ledger.

Revenue

Tax

Payment

Deposit

Guest

City

NonRevenue`,
            'x-enumNames': ['Revenue', 'Tax', 'Payment', 'Deposit', 'Guest', 'City', 'NonRevenue'],
            'x-enumDescriptions': ['', '', '', '', '', '', '']
        },
        OpeningBalance: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: 'Ledger opening balance at the start of the day.'
        },
        ClosingBalance: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: 'Ledger closing balance at the end of the day.'
        }
    },
    additionalProperties: false,
    description: 'Ledger balance',
    'x-schema-id': 'LedgerBalance'
} as const;

export const $LedgerBalanceParameters = {
    title: 'LedgerBalanceParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Date', 'LedgerTypes', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Date: {
            allOf: [
                {
                    '$ref': '#/components/schemas/DateFilterInterval'
                }
            ],
            description: 'Date interval over which the ledger balances are created.',
            'x-max-interval-in-months': 1
        },
        LedgerTypes: {
            minItems: 1,
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingLedgerTypeEnum'
            },
            description: 'Accounting ledger types to which ledger balances belong.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LedgerBalanceParameters'
} as const;

export const $LedgerBalanceResult = {
    title: 'LedgerBalanceResult',
    required: ['LedgerBalances'],
    type: 'object',
    properties: {
        LedgerBalances: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LedgerBalance'
            },
            description: 'The list of filtered ledger balances.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest ledger balance returned. This can be used in Limitation in a subsequent request to fetch the next batch of ledger balances.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LedgerBalanceResult'
} as const;

export const $LegalEntityIdentifierUpdateParameters = {
    title: 'Customer update legal entity identifiers',
    type: 'object',
    properties: {
        ItDestinationCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Italian destination code (or `null` if the Italian destination code should not be updated).',
            nullable: true
        },
        ItFiscalCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Italian fiscal code (or `null` if the Italian fiscal code should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LegalEntityIdentifierUpdateParameters'
} as const;

export const $LegalEntityIdentifiers = {
    title: 'Customer legal identifiers',
    type: 'object',
    properties: {
        ItDestinationCode: {
            type: 'string',
            description: 'Italian destination code.',
            nullable: true
        },
        ItFiscalCode: {
            type: 'string',
            description: 'Italian fiscal code.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LegalEntityIdentifiers'
} as const;

export const $LengthRestriction = {
    title: 'Length restriction',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate restriction.',
            format: 'uuid'
        },
        RateId: {
            type: 'string',
            description: 'Unique identifier of the rate.',
            format: 'uuid'
        },
        IsInherited: {
            type: 'boolean',
            description: 'Whether the rate restriction is inherited from the parent rate.'
        },
        StartUtc: {
            type: 'string',
            description: 'Start of the rate restriction in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End of the rate restriction in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        Days: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The restricted days of week.',
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'Identifiers of from external systems.',
            nullable: true
        },
        MinLength: {
            type: 'string',
            description: 'Minimal reservation length in ISO 8601 duration format.',
            nullable: true
        },
        MaxLength: {
            type: 'string',
            description: 'Maximal reservation length in ISO 8601 duration format.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LengthRestriction'
} as const;

export const $Limitation = {
    title: 'Limitation',
    required: ['Count'],
    type: 'object',
    properties: {
        Count: {
            type: 'integer',
            format: 'int32'
        },
        Cursor: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Limitation on the quantity of data returned.',
    'x-schema-id': 'Limitation'
} as const;

export const $LoyaltyMembership = {
    title: 'Loyalty membership',
    required: ['AccountId', 'ChainId', 'CreatorProfile', 'Id', 'IsPrimary', 'LoyaltyProgramId', 'State', 'UpdaterProfile'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the loyalty membership.',
            format: 'uuid'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account.',
            format: 'uuid'
        },
        LoyaltyProgramId: {
            type: 'string',
            description: 'Unique identifier of the loyalty program.',
            format: 'uuid'
        },
        State: {
            title: 'Loyalty membership state',
            allOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyMembershipStateEnum'
                }
            ],
            description: `State of the loyalty membership.

New

Pending

Enrolled

Canceled

Declined`,
            'x-enumNames': ['New', 'Pending', 'Enrolled', 'Canceled', 'Declined'],
            'x-enumDescriptions': ['', '', '', '', '']
        },
        IsPrimary: {
            type: 'boolean',
            description: 'Defines the primary loyalty membership.'
        },
        ProviderMembershipId: {
            type: 'string',
            description: "Unique identifier for the loyalty membership in the loyalty provider's system.",
            nullable: true
        },
        Code: {
            type: 'string',
            description: 'Code of the loyalty membership.',
            nullable: true
        },
        Points: {
            type: 'integer',
            description: 'The loyalty points for the account in that membership.',
            format: 'int32',
            nullable: true
        },
        ExpirationDate: {
            type: 'string',
            description: 'Expiration date of the loyalty membership in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        Url: {
            type: 'string',
            description: 'Url of the loyalty membership.',
            nullable: true
        },
        LoyaltyTierId: {
            type: 'string',
            description: 'Unique identifier of the loyalty tier.',
            format: 'uuid',
            nullable: true
        },
        CreatorProfile: {
            title: 'Profile data',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProfileData'
                }
            ],
            description: 'The profile data of the user who created or last updated the record.'
        },
        UpdaterProfile: {
            title: 'Profile data',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProfileData'
                }
            ],
            description: 'The profile data of the user who created or last updated the record.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyMembership'
} as const;

export const $LoyaltyMembershipAddParameters = {
    title: 'Loyalty membership parameters',
    required: ['AccountId', 'IsPrimary', 'LoyaltyProgramId'],
    type: 'object',
    properties: {
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the customer account.',
            format: 'uuid'
        },
        LoyaltyProgramId: {
            type: 'string',
            description: 'Unique identifier of the loyalty program.',
            format: 'uuid'
        },
        IsPrimary: {
            type: 'boolean',
            description: 'Defines the primary loyalty membership for the account.'
        },
        State: {
            allOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyMembershipStateEnum'
                }
            ],
            description: `State of the loyalty membership. The default is \`Enrolled\`.

New

Pending

Enrolled

Canceled

Declined`,
            nullable: true
        },
        Code: {
            maxLength: 255,
            type: 'string',
            description: 'Loyalty membership code, such as an identification number printed on a loyalty card visible to the customer.',
            nullable: true
        },
        Points: {
            type: 'integer',
            description: 'The loyalty points for the account in that membership.',
            format: 'int32',
            nullable: true
        },
        ExpirationDate: {
            type: 'string',
            description: 'Expiration date of the loyalty membership in UTC timezone in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        Url: {
            type: 'string',
            description: 'URL of the loyalty membership in external loyalty system.',
            format: 'uri',
            nullable: true
        },
        LoyaltyTierId: {
            type: 'string',
            description: 'Unique identifier of the loyalty tier.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyMembershipAddParameters'
} as const;

export const $LoyaltyMembershipDeleteParameters = {
    title: 'Loyalty membership delete parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyMembershipIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        LoyaltyMembershipIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the loyalty memberships to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyMembershipDeleteParameters'
} as const;

export const $LoyaltyMembershipFilterParameters = {
    title: 'Loyalty membership filter parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'The time interval during which the membership was created.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'The time interval during which the membership was last updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        LoyaltyMembershipIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Loyalty memberships](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-membership).',
            nullable: true
        },
        AccountIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of accounts (for example [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)) the membership is associated with.',
            nullable: true
        },
        LoyaltyProgramIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/loyaltyprograms/#loyalty-program).',
            nullable: true
        },
        MembershipStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyMembershipStateEnum'
            },
            description: 'States of the loyalty memberships.',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        },
        Codes: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'List of loyalty membership codes, such as identification numbers printed on loyalty cards visible to the customer.',
            nullable: true
        },
        ProviderMembershipIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: "List of unique loyalty membership identifiers assigned and managed by the external loyalty provider's system.",
            nullable: true
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyMembershipFilterParameters'
} as const;

export const $LoyaltyMembershipResult = {
    title: 'Loyalty membership result',
    required: ['LoyaltyMemberships'],
    type: 'object',
    properties: {
        LoyaltyMemberships: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyMembership'
            },
            description: 'The loyalty memberships of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyMembershipResult'
} as const;

export const $LoyaltyMembershipStateEnum = {
    title: 'Loyalty membership state',
    enum: ['New', 'Pending', 'Enrolled', 'Canceled', 'Declined'],
    type: 'string',
    description: `State of the loyalty membership.

New

Pending

Enrolled

Canceled

Declined`,
    'x-enumNames': ['New', 'Pending', 'Enrolled', 'Canceled', 'Declined'],
    'x-enumDescriptions': ['', '', '', '', '']
} as const;

export const $LoyaltyMembershipStateUpdateValue = {
    title: 'Loyalty membership state update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Loyalty membership state',
            allOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyMembershipStateEnum'
                }
            ],
            description: 'Value which is to be updated.',
            'x-enumNames': ['New', 'Pending', 'Enrolled', 'Canceled', 'Declined'],
            'x-enumDescriptions': ['', '', '', '', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyMembershipStateUpdateValue'
} as const;

export const $LoyaltyMembershipUpdateParameters = {
    title: 'Loyalty membership update parameters',
    required: ['LoyaltyMembershipId'],
    type: 'object',
    properties: {
        LoyaltyMembershipId: {
            type: 'string',
            description: 'Unique identifier of the loyalty membership.',
            format: 'uuid'
        },
        LoyaltyProgramId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            description: 'Unique identifier of the loyalty program (or `null` if the program should not be updated).',
            nullable: true
        },
        State: {
            title: 'Loyalty membership state update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyMembershipStateUpdateValue'
                }
            ],
            description: 'State of the loyalty membership, (or `null` if the state should not be updated).',
            nullable: true
        },
        IsPrimary: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Boolean value defining the primary loyalty membership for the account (or `null` if the value should not be updated).',
            nullable: true
        },
        Code: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Code of the loyalty membership. (or `null` if the code should not be updated).',
            nullable: true
        },
        Points: {
            title: 'Int32 update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/Int32NullableUpdateValue'
                }
            ],
            description: 'The loyalty points the account has in the loyalty membership (or `null` if the points should not be updated).',
            nullable: true
        },
        ExpirationDate: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Expiration date of the loyalty membership in UTC timezone in ISO 8601 format (or `null` if the date should not be updated).',
            format: 'date',
            nullable: true
        },
        Url: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'URL of the loyalty membership (or `null` if the URL should not be updated).',
            format: 'uri',
            nullable: true
        },
        LoyaltyTierId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the loyalty tier (or `null` if the tier should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyMembershipUpdateParameters'
} as const;

export const $LoyaltyProgram = {
    title: 'Loyalty program',
    required: ['ChainId', 'Code', 'Id', 'Name'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the loyalty program.',
            format: 'uuid'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain.',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the loyalty program.'
        },
        Code: {
            minLength: 1,
            type: 'string',
            description: 'Code of the loyalty program.'
        },
        Type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyProgramType'
                }
            ],
            nullable: true
        },
        Subscription: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyProgramSubscription'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyProgram'
} as const;

export const $LoyaltyProgramAddParameters = {
    title: 'LoyaltyProgramAddParameters',
    required: ['Code', 'Name'],
    type: 'object',
    properties: {
        Name: {
            maxLength: 100,
            minLength: 1,
            type: 'string'
        },
        Code: {
            maxLength: 50,
            minLength: 1,
            type: 'string'
        },
        Type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyProgramType'
                }
            ],
            nullable: true
        },
        Subscription: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyProgramSubscription'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyProgramAddParameters'
} as const;

export const $LoyaltyProgramDeleteParameters = {
    title: 'LoyaltyProgramDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyProgramIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        LoyaltyProgramIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the loyalty programs to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyProgramDeleteParameters'
} as const;

export const $LoyaltyProgramFilterParameters = {
    title: 'LoyaltyProgramFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        LoyaltyProgramIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-program).',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        },
        Codes: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyProgramFilterParameters'
} as const;

export const $LoyaltyProgramResult = {
    title: 'LoyaltyProgramResult',
    required: ['LoyaltyPrograms'],
    type: 'object',
    properties: {
        LoyaltyPrograms: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyProgram'
            },
            description: 'Updated loyalty programs.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyProgramResult'
} as const;

export const $LoyaltyProgramSubscription = {
    enum: ['Free', 'Paid'],
    type: 'string'
} as const;

export const $LoyaltyProgramType = {
    enum: ['Hotel', 'ExternalPartner', 'SoftBrand', 'Unknown'],
    type: 'string'
} as const;

export const $LoyaltyProgramUpdateParameters = {
    title: 'LoyaltyProgramUpdateParameters',
    required: ['LoyaltyProgramId'],
    type: 'object',
    properties: {
        LoyaltyProgramId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        Type: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            anyOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyProgramType'
                }
            ],
            nullable: true
        },
        Subscription: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            anyOf: [
                {
                    '$ref': '#/components/schemas/LoyaltyProgramSubscription'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyProgramUpdateParameters'
} as const;

export const $LoyaltyTier = {
    title: 'Loyalty tier',
    required: ['Code', 'Id', 'LoyaltyProgramId', 'Name', 'Ordering'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the loyalty tier.',
            format: 'uuid'
        },
        LoyaltyProgramId: {
            type: 'string',
            description: 'Unique identifier of the loyalty program of that loyalty tier.',
            format: 'uuid'
        },
        Name: {
            maxLength: 50,
            minLength: 1,
            type: 'string',
            description: 'Name of the loyalty tier.'
        },
        Code: {
            maxLength: 50,
            minLength: 1,
            type: 'string',
            description: 'Code of the loyalty tier.'
        },
        Ordering: {
            type: 'integer',
            description: 'Ordering of the loyalty tier.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyTier'
} as const;

export const $LoyaltyTierAddParameters = {
    title: 'Loyalty tier add parameters',
    required: ['Code', 'LoyaltyProgramId', 'Name', 'Ordering'],
    type: 'object',
    properties: {
        LoyaltyProgramId: {
            type: 'string',
            description: 'Unique identifier of the loyalty program the tier belongs to.',
            format: 'uuid'
        },
        Name: {
            maxLength: 50,
            minLength: 1,
            type: 'string',
            description: 'Name of the loyalty tier.'
        },
        Code: {
            maxLength: 50,
            minLength: 1,
            type: 'string',
            description: 'Code of the loyalty tier.'
        },
        Ordering: {
            type: 'integer',
            description: 'Ordering of the loyalty tier.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyTierAddParameters'
} as const;

export const $LoyaltyTierDeleteParameters = {
    title: 'LoyaltyTierDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyTierIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        LoyaltyTierIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the loyalty tiers to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyTierDeleteParameters'
} as const;

export const $LoyaltyTierFilterParameters = {
    title: 'LoyaltyTierFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'LoyaltyProgramIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the chain. If not specified, the operation returns data for all chains within scope of the Access Token.',
            nullable: true
        },
        LoyaltyProgramIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Loyalty programs](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-program).'
        },
        LoyaltyTierIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Loyalty tiers](https://mews-systems.gitbook.io/connector-api/operations/#loyalty-tier).',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval of `Loyalty tier` last update date and time.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyTierFilterParameters'
} as const;

export const $LoyaltyTierResult = {
    title: 'LoyaltyTierResult',
    required: ['LoyaltyTiers'],
    type: 'object',
    properties: {
        LoyaltyTiers: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyTier'
            },
            description: 'The loyalty tiers of the loyalty program within the chain.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyTierResult'
} as const;

export const $LoyaltyTierUpdateParameters = {
    title: 'Loyalty tier update parameters',
    required: ['LoyaltyTierId'],
    type: 'object',
    properties: {
        LoyaltyTierId: {
            type: 'string',
            description: 'Unique identifier of the loyalty tier.',
            format: 'uuid'
        },
        Name: {
            title: 'String update value',
            maxLength: 50,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Name of the loyalty tier \\(or `null` if the name should not be updated\\).',
            nullable: true
        },
        Code: {
            title: 'String update value',
            maxLength: 50,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Code of the loyalty tier, \\(or `null` if the code should not be updated\\).',
            nullable: true
        },
        Ordering: {
            title: 'Int32 update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/Int32UpdateValue'
                }
            ],
            description: 'Ordering of the loyalty tier, \\(or `null` if the ordering should not be updated\\).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyTierUpdateParameters'
} as const;

export const $LoyaltyTierWriteResult = {
    title: 'LoyaltyTierWriteResult',
    required: ['LoyaltyTiers'],
    type: 'object',
    properties: {
        LoyaltyTiers: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyTier'
            },
            description: 'The loyalty tiers of the loyalty program within the chain.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'LoyaltyTierWriteResult'
} as const;

export const $MergeAccountTypeEnum = {
    title: 'Account merge type',
    enum: ['Customer', 'Company'],
    type: 'string',
    description: `

Customer

Company`,
    'x-enumNames': ['Customer', 'Company'],
    'x-enumDescriptions': ['', '']
} as const;

export const $Message = {
    title: 'Message',
    required: ['CreatedUtc', 'Id', 'MessageThreadId', 'Sender', 'Text'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the message.',
            format: 'uuid'
        },
        MessageThreadId: {
            type: 'string',
            description: 'Unique identifier of the [Message thread](https://mews-systems.gitbook.io/connector-api/operations/messagethreads/#message-thread) which the message belongs to.',
            format: 'uuid'
        },
        Text: {
            minLength: 1,
            type: 'string',
            description: 'Text of the message.'
        },
        Sender: {
            '$ref': '#/components/schemas/SenderDiscriminator'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the message in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Message'
} as const;

export const $MessageAddParameters = {
    title: 'MessageAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'MessageThreadId', 'Text'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        MessageThreadId: {
            type: 'string',
            format: 'uuid'
        },
        Text: {
            minLength: 1,
            type: 'string'
        },
        Identifier: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MessageAddParameters'
} as const;

export const $MessageFilterParameters = {
    title: 'MessageFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'MessageThreadIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        MessageThreadIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Message threads](https://mews-systems.gitbook.io/connector-api/operations/messagethreads/#message-thread) from where to return messages.'
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 1
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MessageFilterParameters'
} as const;

export const $MessageResult = {
    title: 'MessageResult',
    required: ['Messages'],
    type: 'object',
    properties: {
        Messages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Message'
            },
            description: 'The filtered messages.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest message returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older messages.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MessageResult'
} as const;

export const $MessageThread = {
    title: 'Message thread',
    required: ['CreatedUtc', 'Id', 'OriginalSender', 'Subject', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the message thread.',
            format: 'uuid'
        },
        OriginalSender: {
            minLength: 1,
            type: 'string',
            description: 'The sender of the original message in the thread.'
        },
        Subject: {
            minLength: 1,
            type: 'string',
            description: 'Subject of the message thread.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the message thread in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the message thread in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        IsResolved: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MessageThread'
} as const;

export const $MessageThreadAddParameters = {
    title: 'MessageThreadAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'OriginalSender', 'Subject'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        OriginalSender: {
            minLength: 1,
            type: 'string',
            description: 'The sender of the original message in the thread.'
        },
        Subject: {
            minLength: 1,
            type: 'string',
            description: 'Subject of the message thread.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MessageThreadAddParameters'
} as const;

export const $MessageThreadFilterParameters = {
    title: 'MessageThreadFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        MessageThreadIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Message threads](https://mews-systems.gitbook.io/connector-api/operations/#message-thread). Required if no other filter is provided.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MessageThreadFilterParameters'
} as const;

export const $MessageThreadResult = {
    title: 'MessageThreadResult',
    required: ['MessageThreads'],
    type: 'object',
    properties: {
        MessageThreads: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MessageThread'
            },
            description: 'The filtered message threads.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest message thread returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older message threads.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MessageThreadResult'
} as const;

export const $MobileKeyData = {
    title: 'MobileKeyData',
    type: 'object',
    properties: {
        EndpointId: {
            type: 'string',
            description: 'Unique identifier of the mobile key endpoint.',
            nullable: true
        },
        Label: {
            type: 'string',
            description: 'Label of the mobile key.',
            nullable: true
        },
        Description: {
            type: 'string',
            description: 'Description of the mobile key.',
            nullable: true
        },
        RevokeMobileKeyId: {
            type: 'string',
            description: 'Unique identifier of the mobile key for revocation.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Mobile key command data',
    'x-schema-id': 'MobileKeyData'
} as const;

export const $MultipleAccountMergeParameters = {
    title: 'MultipleAccountMergeParameters',
    required: ['AccessToken', 'AccountMergeParameters', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        AccountMergeParameters: {
            maxItems: 10,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountMergeParameter'
            },
            description: 'Accounts to be merged.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAccountMergeParameters'
} as const;

export const $MultipleAccountNoteAddParameters = {
    title: 'MultipleAccountNoteAddParameters',
    required: ['AccessToken', 'AccountNotes', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AccountNotes: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountNoteAddParameters'
            },
            description: 'Account notes to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAccountNoteAddParameters'
} as const;

export const $MultipleAccountNoteDeleteParameters = {
    title: 'MultipleAccountNoteDeleteParameters',
    required: ['AccessToken', 'AccountNoteIds', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AccountNoteIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the account notes to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAccountNoteDeleteParameters'
} as const;

export const $MultipleAccountNoteUpdateParameters = {
    title: 'MultipleAccountNoteUpdateParameters',
    required: ['AccessToken', 'AccountNoteUpdates', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AccountNoteUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountNoteUpdateParameters'
            },
            description: 'Account notes to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAccountNoteUpdateParameters'
} as const;

export const $MultipleAccountUpdateParameters = {
    title: 'MultipleAccountUpdateParameters',
    required: ['AccessToken', 'AccountUpdates', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AccountUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountUpdateParameters'
            },
            description: 'Accounts to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAccountUpdateParameters'
} as const;

export const $MultipleAccountingItemsUpdateParameters = {
    title: 'MultipleAccountingItemsUpdateParameters',
    required: ['AccessToken', 'AccountingItemUpdates', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AccountingItemUpdates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingItemUpdateParameters'
            },
            description: 'List of requested updates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAccountingItemsUpdateParameters'
} as const;

export const $MultipleAddressAddParameters = {
    title: 'MultipleAddressAddParameters',
    required: ['AccessToken', 'Addresses', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        Addresses: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AddressAddParameters'
            },
            description: 'Collection of addresses to be created.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAddressAddParameters'
} as const;

export const $MultipleAddressUpdateParameters = {
    title: 'MultipleAddressUpdateParameters',
    required: ['AccessToken', 'AddressUpdates', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AddressUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AddressUpdateParameters'
            },
            description: 'Collection of addresses to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAddressUpdateParameters'
} as const;

export const $MultipleAvailabilityBlockAddParameters = {
    title: 'MultipleAvailabilityBlockAddParameters',
    required: ['AccessToken', 'AvailabilityBlocks', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AvailabilityBlocks: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AvailabilityBlockAddParameters'
            },
            description: 'Availability blocks to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAvailabilityBlockAddParameters'
} as const;

export const $MultipleAvailabilityBlockUpdateParameters = {
    title: 'MultipleAvailabilityBlockUpdateParameters',
    required: ['AccessToken', 'AvailabilityBlocks', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        AvailabilityBlocks: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AvailabilityBlockUpdateParameters'
            },
            description: 'Availability blocks to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleAvailabilityBlockUpdateParameters'
} as const;

export const $MultipleBillAddParameters = {
    title: 'MultipleBillAddParameters',
    required: ['AccessToken', 'Bills', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        Bills: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillAddParameters'
            },
            description: 'Information about bills to be created.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleBillAddParameters'
} as const;

export const $MultipleBillingAutomationAddParameters = {
    title: 'Multiple billing automation add parameters',
    required: ['AccessToken', 'BillingAutomations', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        BillingAutomations: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationAddParameters'
            },
            description: 'Parameters of the new billing automations to be created.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleBillingAutomationAddParameters'
} as const;

export const $MultipleBillingAutomationUpdateParameters = {
    title: 'Multiple billing automation update parameters',
    required: ['AccessToken', 'BillingAutomationUpdates', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        BillingAutomationUpdates: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillingAutomationUpdateParameters'
            },
            description: 'Details of the billing automations to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleBillingAutomationUpdateParameters'
} as const;

export const $MultipleBillsUpdateParameters = {
    title: 'MultipleBillsUpdateParameters',
    required: ['AccessToken', 'BillsUpdates', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        BillsUpdates: {
            maxItems: 10,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BillUpdateParameters'
            },
            description: 'Information about bills to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleBillsUpdateParameters'
} as const;

export const $MultipleCompanyContractAddParameters = {
    title: 'MultipleCompanyContractAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'TravelAgencyContracts'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        TravelAgencyContracts: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TravelAgencyContractAddParameters'
            },
            description: 'Information about travel agency contracts to be created.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleCompanyContractAddParameters'
} as const;

export const $MultipleCompanyContractDeleteParameters = {
    title: 'MultipleCompanyContractDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ServiceIds', 'TravelAgencyContractIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        TravelAgencyContractIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Travel agency contract to delete.'
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the travel agency contract belongs to.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleCompanyContractDeleteParameters'
} as const;

export const $MultipleCompanyContractUpdateParameters = {
    title: 'MultipleCompanyContractUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'TravelAgencyContractUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        TravelAgencyContractUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TravelAgencyContractUpdateParameters'
            },
            description: 'Information about travel agency contracts to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleCompanyContractUpdateParameters'
} as const;

export const $MultipleCompanyDeleteParameters = {
    title: 'MultipleCompanyDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CompanyIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        CompanyIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the companies to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleCompanyDeleteParameters'
} as const;

export const $MultipleCreditCardParameters = {
    title: 'MultipleCreditCardParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        CreditCardIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleCreditCardParameters'
} as const;

export const $MultipleCustomerParameters = {
    title: 'MultipleCustomerParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        CustomerIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleCustomerParameters'
} as const;

export const $MultipleIdentityDocumentUpdateParameters = {
    title: 'Multiple identity document update parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'IdentityDocuments'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        IdentityDocuments: {
            maxItems: 10,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityDocumentUpdateParameters'
            },
            description: 'Identity documents to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleIdentityDocumentUpdateParameters'
} as const;

export const $MultipleLoyaltyMembershipAddParameters = {
    title: 'MultipleLoyaltyMembershipAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyMemberships'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        LoyaltyMemberships: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyMembershipAddParameters'
            },
            description: 'Loyalty memberships to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleLoyaltyMembershipAddParameters'
} as const;

export const $MultipleLoyaltyMembershipUpdateParameters = {
    title: 'MultipleLoyaltyMembershipUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyMembershipUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        LoyaltyMembershipUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyMembershipUpdateParameters'
            },
            description: 'Loyalty memberships to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleLoyaltyMembershipUpdateParameters'
} as const;

export const $MultipleLoyaltyProgramAddParameters = {
    title: 'MultipleLoyaltyProgramAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyPrograms'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        LoyaltyPrograms: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyProgramAddParameters'
            },
            description: 'Loyalty programs to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleLoyaltyProgramAddParameters'
} as const;

export const $MultipleLoyaltyProgramUpdateParameters = {
    title: 'MultipleLoyaltyProgramUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyProgramUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        LoyaltyProgramUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyProgramUpdateParameters'
            },
            description: 'Loyalty programs to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleLoyaltyProgramUpdateParameters'
} as const;

export const $MultipleLoyaltyTierAddParameters = {
    title: 'MultipleLoyaltyTierAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyTiers'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ChainId: {
            type: 'string',
            description: 'Unique identifier of the chain. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        LoyaltyTiers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyTierAddParameters'
            },
            description: 'Loyalty tiers to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleLoyaltyTierAddParameters'
} as const;

export const $MultipleLoyaltyTierUpdateParameters = {
    title: 'MultipleLoyaltyTierUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'LoyaltyTierUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        LoyaltyTierUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LoyaltyTierUpdateParameters'
            },
            description: 'Loyalty tiers to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleLoyaltyTierUpdateParameters'
} as const;

export const $MultipleMessageAddParameters = {
    title: 'MultipleMessageAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Messages'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Messages: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MessageAddParameters'
            },
            description: 'Messages to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleMessageAddParameters'
} as const;

export const $MultiplePaymentRequestAddParameters = {
    title: 'MultiplePaymentRequestAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'PaymentRequests'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        PaymentRequests: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentRequestAddParameters'
            },
            description: 'Payment requests to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultiplePaymentRequestAddParameters'
} as const;

export const $MultiplePaymentRequestCancelParameters = {
    title: 'MultiplePaymentRequestCancelParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'PaymentRequestIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        PaymentRequestIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Identifiers of payment requests to be canceled.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultiplePaymentRequestCancelParameters'
} as const;

export const $MultipleRateCapacityOffsetUpdateParameters = {
    title: 'MultipleRateCapacityOffsetUpdateParameters',
    required: ['AccessToken', 'CapacityOffsetUpdates', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        CapacityOffsetUpdates: {
            maxItems: 50,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateCapacityOffsetUpdateParameters'
            },
            description: 'A list of rate capacity offset updates to apply.'
        }
    },
    additionalProperties: false,
    description: 'Parameters for updating rate capacity offsets in an enterprise.',
    'x-schema-id': 'MultipleRateCapacityOffsetUpdateParameters'
} as const;

export const $MultipleReservationResult = {
    title: 'MultipleReservationResult',
    required: ['ReservationIds'],
    type: 'object',
    properties: {
        ReservationIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Identifiers of the affected `Reservation` entities.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleReservationResult'
} as const;

export const $MultipleReservationUpdateParameters = {
    title: 'Reservation updates',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationId', 'ReservationUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        ChannelNumber: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number) (or `null` if the channel number should not be updated).',
            nullable: true
        },
        StartUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Reservation start in UTC timezone in ISO 8601 format. (or `null` if the start time should not be updated).',
            nullable: true
        },
        EndUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Reservation end in UTC timezone in ISO 8601 format. (or `null` if the end time should not be updated).',
            nullable: true
        },
        ReleasedUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Date when the optional reservation is released in UTC timezone in ISO 8601 format. (or `null` if the release time should not be updated).',
            nullable: true
        },
        PersonCounts: {
            title: 'Person counts update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationUpdatePersonCountParameters'
                }
            ],
            description: 'Number of people per age category the reservation is for. If supplied, the person counts will be replaced. (or `null` if the person counts should not be updated).',
            nullable: true
        },
        AssignedResourceId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the assigned `Resource`.',
            nullable: true
        },
        RequestedCategoryId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            description: 'Identifier of the requested `ResourceCategory` (or `null` if resource category should not be updated).',
            nullable: true
        },
        TravelAgencyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the `Company` that mediated the reservation (or `null` if travel agency should not be updated).',
            nullable: true
        },
        CompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the `Company` on behalf of which the reservation was made (or `null` if company should not be updated).',
            nullable: true
        },
        BusinessSegmentId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the reservation `BusinessSegment` (or `null` if the business segment should not be updated).',
            nullable: true
        },
        Purpose: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: `\`Purpose\` of the reservation (or \`null\` if the purpose should not be updated).`,
            nullable: true
        },
        RateId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            description: 'Identifier of the reservation `Rate` (or `null` if the rate should not be updated).',
            nullable: true
        },
        CreditCardId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of `CreditCard` belonging to `Customer` who owns the reservation.  (or `null` if the credit card should not be updated).',
            nullable: true
        },
        TimeUnitPrices: {
            title: 'Time unit amount update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationUpdatePerUnitPriceParameters'
                }
            ],
            description: 'Prices for time units of the reservation. E.g. prices for the first or second night. (or `null` if the unit amounts should not be updated).',
            nullable: true
        },
        BookerId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the `Customer` on whose behalf the reservation was made. (or `null` if the booker should not be updated).',
            nullable: true
        },
        AssignedResourceLocked: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Whether the reservation should be locked to the assigned `Resource`. Unlocking and assigning reservation to new `Resource` can be done in one call.',
            nullable: true
        },
        AvailabilityBlockId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the `AvailabilityBlock` the reservation is assigned to.',
            nullable: true
        },
        Options: {
            title: 'Reservations options parameters update values',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationUpdateOptionsParameters'
                }
            ],
            description: 'Options of the reservations.',
            nullable: true
        },
        ReservationUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationUpdateParameters'
            },
            description: 'Array of properties to be updated in each reservation specified.'
        },
        CheckOverbooking: {
            type: 'boolean',
            description: 'Indicates whether the system will check and prevent a booking being made in the case of an overbooking, i.e. where there is an insufficient number of resources available to meet the request.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'The value will be ignored.'
        },
        CheckRateApplicability: {
            type: 'boolean',
            description: 'Indicates whether the system will check and prevent a booking being made using a restricted rate, e.g. a private rate. The default is true, i.e. the system will normally check for this unless the property is set to false.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'The value will be ignored.'
        },
        Reprice: {
            type: 'boolean',
            description: 'Whether the price should be updated to latest value for date/rate/category combination set in Mews. If not specified, the reservation price is updated.',
            nullable: true
        },
        ApplyCancellationFee: {
            type: 'boolean',
            description: 'Whether the cancellation fees should be applied according to rate cancellation policies. If not specified, the cancellation fees are applied.',
            nullable: true
        },
        Reason: {
            type: 'string',
            description: 'Reason for updating the reservation. Required when updating the price of the reservation.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleReservationUpdateParameters'
} as const;

export const $MultipleResourceAccessTokenParameters = {
    title: 'MultipleResourceAccessTokenParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ResourceAccessTokenParameters'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ResourceAccessTokenParameters: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceAccessTokenParameters'
            },
            description: 'Parameters of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleResourceAccessTokenParameters'
} as const;

export const $MultipleResourceAccessTokenUpdateParameters = {
    title: 'MultipleResourceAccessTokenUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ResourceAccessTokenUpdates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceAccessTokenUpdateParameters'
            },
            description: 'Parameters of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleResourceAccessTokenUpdateParameters'
} as const;

export const $MultipleResourceBlockAddParameters = {
    title: 'MultipleResourceBlockAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ResourceBlocks'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ResourceBlocks: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceBlockAddParameters'
            },
            description: 'Resource block parameters.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleResourceBlockAddParameters'
} as const;

export const $MultipleResourceUpdateParameters = {
    title: 'MultipleResourceUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ResourceUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ResourceUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceUpdateParameters'
            },
            description: 'Resource updates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleResourceUpdateParameters'
} as const;

export const $MultipleRoutingRuleAddParameters = {
    title: 'MultipleRoutingRuleAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'RoutingRules'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        RoutingRules: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoutingRuleAddParameter'
            },
            description: 'Collection of Routing rules to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleRoutingRuleAddParameters'
} as const;

export const $MultipleRoutingRuleUpdateParameters = {
    title: 'MultipleRoutingRuleUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'RoutingRuleUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        RoutingRuleUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoutingRuleUpdateParameters'
            },
            description: 'Collection of Routing rules to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleRoutingRuleUpdateParameters'
} as const;

export const $MultipleServiceOrderNoteAddParameters = {
    title: 'MultipleServiceOrderNoteAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ServiceOrderNotes'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceOrderNotes: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOrderNoteAddParameters'
            },
            description: 'Notes to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleServiceOrderNoteAddParameters'
} as const;

export const $MultipleServiceOrderNoteUpdateParameters = {
    title: 'MultipleServiceOrderNoteUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ServiceOrderNoteUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceOrderNoteUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOrderNoteUpdateParameters'
            },
            description: 'Notes to be updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleServiceOrderNoteUpdateParameters'
} as const;

export const $MultipleVoucherAddParameters = {
    title: 'MultipleVoucherAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'VoucherParameters'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        VoucherParameters: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VoucherAddParameters'
            },
            description: 'Vouchers to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleVoucherAddParameters'
} as const;

export const $MultipleVoucherCodeAddParameters = {
    title: 'MultipleVoucherCodeAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'VoucherCodeParameters'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        VoucherCodeParameters: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VoucherCodeAddParameters'
            },
            description: 'Voucher codes to be added.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleVoucherCodeAddParameters'
} as const;

export const $MultipleVoucherCodeDeleteParameters = {
    title: 'MultipleVoucherCodeDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'VoucherCodeIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        VoucherCodeIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the voucher codes to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleVoucherCodeDeleteParameters'
} as const;

export const $MultipleVoucherDeleteParameters = {
    title: 'MultipleVoucherDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'VoucherIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        VoucherIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the vouchers to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleVoucherDeleteParameters'
} as const;

export const $MultipleVoucherUpdateParameters = {
    title: 'MultipleVoucherUpdateParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'VoucherUpdates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        VoucherUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VoucherUpdateParameters'
            },
            description: 'Details of voucher updates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'MultipleVoucherUpdateParameters'
} as const;

export const $NextAction = {
    title: 'Alternative payment next action',
    required: ['Discriminator', 'Value'],
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Payment next action discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/NextActionTypeEnum'
                }
            ],
            description: `Determines type of value.

RedirectToUrl (Redirect customer to a URL where they can complete their payment.)`,
            'x-enumNames': ['RedirectToUrl'],
            'x-enumDescriptions': ['Redirect customer to a URL where they can complete their payment.']
        },
        Value: {
            minLength: 1,
            type: 'string',
            description: 'String value depending on `Type`.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'NextAction'
} as const;

export const $NextActionTypeEnum = {
    title: 'Payment next action discriminator',
    enum: ['RedirectToUrl'],
    type: 'string',
    description: `

RedirectToUrl (Redirect customer to a URL where they can complete their payment.)`,
    'x-enumNames': ['RedirectToUrl'],
    'x-enumDescriptions': ['Redirect customer to a URL where they can complete their payment.']
} as const;

export const $ObjectData = {
    type: 'object',
    additionalProperties: false
} as const;

export const $OccupancyStateEnum = {
    title: 'Occupancy State',
    enum: ['Vacant', 'ReservedLocked', 'Reserved', 'InternalUse', 'OutOfOrder'],
    type: 'string',
    description: `

Vacant

ReservedLocked

Reserved

InternalUse

OutOfOrder`,
    'x-enumNames': ['Vacant', 'ReservedLocked', 'Reserved', 'InternalUse', 'OutOfOrder'],
    'x-enumDescriptions': ['', '', '', '', '']
} as const;

export const $OldAddress = {
    title: 'Address',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the address.',
            format: 'uuid'
        },
        Line1: {
            type: 'string',
            description: 'First line of the address.',
            nullable: true
        },
        Line2: {
            type: 'string',
            description: 'Second line of the address.',
            nullable: true
        },
        City: {
            type: 'string',
            description: 'The city.',
            nullable: true
        },
        PostalCode: {
            type: 'string',
            description: 'Postal code.',
            nullable: true
        },
        CountryCode: {
            type: 'string',
            description: 'ISO 3166-1 code of the `Country`.',
            nullable: true
        },
        CountrySubdivisionCode: {
            type: 'string',
            description: 'ISO 3166-2 code of the administrative division, e.g. `DE-BW`.',
            nullable: true
        },
        Latitude: {
            type: 'number',
            description: 'The latitude.',
            format: 'double',
            nullable: true
        },
        Longitude: {
            type: 'number',
            description: 'The longitude.',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'OldAddress'
} as const;

export const $OldTaxation = {
    title: 'OldTaxation',
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            nullable: true
        },
        TaxEnvironmentCode: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        LocalName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OldTaxation'
} as const;

export const $OrderAdditionOptions = {
    title: 'OrderAdditionOptions',
    type: 'object',
    properties: {
        DisableItemGrouping: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderAdditionOptions'
} as const;

export const $OrderAdditionParameters = {
    title: 'OrderAdditionParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise). Required when using a [Portfolio Access Token](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ServiceId: {
            type: 'string',
            description: 'Identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to be ordered.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) or [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) to be charged. Company billing may not be enabled for your integration.',
            format: 'uuid',
            nullable: true
        },
        CustomerId: {
            type: 'string',
            description: 'Identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) to be charged.  **Deprecated!**',
            format: 'uuid',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountId`.'
        },
        Options: {
            title: 'OrderAdditionOptions',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderAdditionOptions'
                }
            ],
            nullable: true
        },
        ProductOrders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductOrderAdditionData'
            },
            description: 'Parameters of the ordered products.',
            nullable: true
        },
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItemAdditionData'
            },
            description: 'Parameters of the ordered custom items.',
            nullable: true
        },
        ConsumptionUtc: {
            type: 'string',
            description: 'Date and time of the order consumption in UTC timezone in ISO 8601 format. If not specified, current date and time is used. Please note, as order consumption is one-time event, the optional parameters StartUtc and EndUtc in [Product order parameters](https://mews-systems.gitbook.io/connector-api/operations/#product-order-parameters) should not be used.',
            format: 'date-time',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes of the order.',
            nullable: true
        },
        BusinessSegmentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        BillId: {
            type: 'string',
            description: 'Identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) to which the created order will be assigned. The bill needs to be issued to the same account as the order.',
            format: 'uuid',
            nullable: true
        },
        LinkedReservationId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderAdditionParameters'
} as const;

export const $OrderAdditionResult = {
    title: 'OrderAdditionResult',
    type: 'object',
    properties: {
        OrderId: {
            type: 'string',
            description: 'Unique identifier of the created order.',
            format: 'uuid'
        },
        ChargeId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderAdditionResult'
} as const;

export const $OrderItem = {
    title: 'Order item',
    required: ['AccountingState', 'Amount', 'ConsumedUtc', 'CreatedUtc', 'CreatorProfileId', 'EnterpriseId', 'Id', 'Options', 'OriginalAmount', 'RevenueType', 'ServiceId', 'ServiceOrderId', 'Type', 'UnitAmount', 'UnitCount', 'UpdatedUtc', 'UpdaterProfileId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the order item.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the order item belongs to.',
            format: 'uuid',
            nullable: true
        },
        AccountType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountTypeEnum'
                }
            ],
            description: `A discriminator specifying the [type of account](https://mews-systems.gitbook.io/connector-api/operations/accounts/#account-type), e.g. customer or company.

Company

Customer`,
            nullable: true
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the order item is assigned to.',
            format: 'uuid'
        },
        ServiceOrderId: {
            type: 'string',
            description: 'Unique identifier of the [Service order](https://mews-systems.gitbook.io/connector-api/operations/serviceorders/#service-order) the order item is assigned to.',
            format: 'uuid'
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the order item is assigned to.',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the order item belongs to.',
            format: 'uuid',
            nullable: true
        },
        BillingName: {
            type: 'string',
            description: 'Name of the order item for billing purposes.',
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'Identifier of the entity from external system.',
            nullable: true
        },
        UnitCount: {
            type: 'integer',
            description: 'Unit count of item, i.e. the number of sub-items or units, if applicable.',
            format: 'int32'
        },
        UnitAmount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: 'Unit amount of item, i.e. the amount of each individual sub-item or unit, if applicable.'
        },
        Amount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: 'Amount of item; note a negative amount represents a rebate or payment.'
        },
        OriginalAmount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: "Order item's original amount. Negative amount represents either rebate or a payment. Contains the earliest known value in conversion chain."
        },
        RevenueType: {
            title: 'Revenue type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RevenueTypeEnum'
                }
            ],
            description: `Revenue type of the item.

Service

Product

Additional`,
            'x-enumNames': ['Service', 'Product', 'Additional'],
            'x-enumDescriptions': ['', '', '']
        },
        CreatorProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who created the order item.',
            format: 'uuid'
        },
        UpdaterProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who updated the order item.',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the order item created in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the order item in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ConsumedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the item consumption in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        CanceledUtc: {
            type: 'string',
            description: 'Cancellation date and time of the order item in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        ClosedUtc: {
            type: 'string',
            description: 'Date and time of the item bill closure in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        StartUtc: {
            type: 'string',
            description: 'Start of the order item in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        ClaimedUtc: {
            type: 'string',
            description: 'Date and time when the order item was claimed in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        AccountingState: {
            title: 'Order item accounting state',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingStateEnum'
                }
            ],
            description: `Accounting state of the order item.

Open (Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.)

Closed (Order items which carry a non-zero value and have been closed on a bill or invoice.)

Inactive (Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.)

Canceled (Order items which have been canceled, regardless of whether the item is of zero value.)`,
            'x-enumNames': ['Open', 'Closed', 'Inactive', 'Canceled'],
            'x-enumDescriptions': ['Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.', 'Order items which carry a non-zero value and have been closed on a bill or invoice.', 'Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.', 'Order items which have been canceled, regardless of whether the item is of zero value.']
        },
        Type: {
            title: 'Order item type',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemTypeEnum'
                }
            ],
            description: `Order item type, e.g. whether product order or space order.

CancellationFee

NightRebate

ProductOrderRebate

AdditionalExpenseRebate

Deposit

ExchangeRateDifference

CustomItem

ServiceCharge

CityTax

CityTaxDiscount

SpaceOrder

ProductOrder

Surcharge

TaxCorrection

ResourceUpgradeFee

InvoiceFee

MulticurrencyFee

AllowanceDiscount

AllowanceBreakage

AllowanceContraBreakage`,
            'x-enumNames': ['CancellationFee', 'NightRebate', 'ProductOrderRebate', 'AdditionalExpenseRebate', 'Deposit', 'ExchangeRateDifference', 'CustomItem', 'ServiceCharge', 'CityTax', 'CityTaxDiscount', 'SpaceOrder', 'ProductOrder', 'Surcharge', 'TaxCorrection', 'ResourceUpgradeFee', 'InvoiceFee', 'MulticurrencyFee', 'AllowanceDiscount', 'AllowanceBreakage', 'AllowanceContraBreakage'],
            'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
        },
        Options: {
            title: 'Order item options',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemOptions'
                }
            ],
            description: 'Options of the order item.'
        },
        Data: {
            title: 'Order item data',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemData'
                }
            ],
            description: 'Additional order item data.',
            nullable: true
        },
        TaxExemptionReason: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaxExemptionReasonTypeEnum'
                }
            ],
            description: `Specifies the reason an order item is exempt from tax.

IT_N1 (N1 - Escluse ex art.15)

IT_N2_2 (N2.2 - Non soggette – altri casi)

IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)

IT_N4 (N4 - Esenti)

IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)

PL_ZW (ZW - Zwolniony)

PL_NP (NP - Nie podlega)`,
            nullable: true
        },
        TaxExemptionLegalReference: {
            type: 'string',
            description: 'Legal reference that states why this order item is exempt from tax.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItem'
} as const;

export const $OrderItemAdditionData = {
    title: 'OrderItemAdditionData',
    required: ['Name', 'UnitAmount', 'UnitCount'],
    type: 'object',
    properties: {
        Name: {
            minLength: 1,
            type: 'string'
        },
        UnitCount: {
            type: 'integer',
            format: 'int32'
        },
        UnitAmount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.'
        },
        AccountingCategoryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        Category: {
            title: 'AccountingCategoryParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingCategoryParameters'
                }
            ],
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountingCategoryId`.'
        },
        ExternalIdentifier: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemAdditionData'
} as const;

export const $OrderItemAllowanceDiscountData = {
    title: 'Allowance discount data',
    required: ['AllowanceProductOrderItemId', 'DiscountedOrderItemId'],
    type: 'object',
    properties: {
        DiscountedOrderItemId: {
            type: 'string',
            description: 'Unique identifier of [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which has been discounted by current item.',
            format: 'uuid'
        },
        AllowanceProductOrderItemId: {
            type: 'string',
            description: 'Unique identifier of the allowance product [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which credit has been consumed by current item.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemAllowanceDiscountData'
} as const;

export const $OrderItemAllowanceProfitsData = {
    title: 'Allowance profits data',
    required: ['AllowanceProductOrderItemId', 'AllowanceProfitType'],
    type: 'object',
    properties: {
        AllowanceProductOrderItemId: {
            type: 'string',
            description: 'Unique identifier of the allowance product [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which credit has been consumed by current item.',
            format: 'uuid'
        },
        AllowanceProfitType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AllowanceProfitTypeEnum'
                }
            ],
            description: `Type of allowance profit.

AllowanceBreakage (Profit of the allowance product.)

AllowanceContraBreakage (Accounting balance for profit of the allowance product.)

AllowanceLoss (Loss of the allowance product.)

AllowanceContraLoss (Accounting balance for loss of the allowance product.)`
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemAllowanceProfitsData'
} as const;

export const $OrderItemData = {
    title: 'Order item data',
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Order item data discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemDataDiscriminatorEnum'
                }
            ],
            description: `Discriminator pointing to the fields within this object that contains additional data.

Rebate (Rebate.)

Product (Product.)

AllowanceDiscount (Allowance discount.)

AllowanceProfits (Allowance profits.)`,
            'x-enumNames': ['Rebate', 'Product', 'AllowanceDiscount', 'AllowanceProfits'],
            'x-enumDescriptions': ['Rebate.', 'Product.', 'Allowance discount.', 'Allowance profits.']
        },
        Rebate: {
            title: 'Rebate data',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemRebateData'
                }
            ],
            description: 'Contains additional data in the case of rebate item.',
            nullable: true
        },
        Product: {
            title: 'Product data',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemProductData'
                }
            ],
            description: 'Contains additional data in the case of product item.',
            nullable: true
        },
        AllowanceDiscount: {
            title: 'Allowance discount data',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemAllowanceDiscountData'
                }
            ],
            description: 'Contains additional data in the case of allowance discount item.',
            nullable: true
        },
        AllowanceProfits: {
            title: 'Allowance profits data',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderItemAllowanceProfitsData'
                }
            ],
            description: 'Contains additional data in the case of allowance profits item.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Additional order item data.',
    'x-schema-id': 'OrderItemData'
} as const;

export const $OrderItemDataDiscriminatorEnum = {
    title: 'Order item data discriminator',
    enum: ['Rebate', 'Product', 'AllowanceDiscount', 'AllowanceProfits'],
    type: 'string',
    description: `

Rebate (Rebate.)

Product (Product.)

AllowanceDiscount (Allowance discount.)

AllowanceProfits (Allowance profits.)`,
    'x-enumNames': ['Rebate', 'Product', 'AllowanceDiscount', 'AllowanceProfits'],
    'x-enumDescriptions': ['Rebate.', 'Product.', 'Allowance discount.', 'Allowance profits.']
} as const;

export const $OrderItemFilterParameters = {
    title: 'OrderItemFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        OrderItemIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Order items](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item). Required if no other filter is provided.',
            nullable: true
        },
        AccountIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of specific `Accounts` to which the order items belong to. Required if no other filter is provided.',
            nullable: true
        },
        ServiceOrderIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the service orders ([product service orders](https://mews-systems.gitbook.io/connector-api/operations/productserviceorders/#product-service-order) or [reservations](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06)). Required if no other filter is provided.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service). Required if no other filter is provided.',
            nullable: true
        },
        BillIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Bills](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) to which order item is assigned. Required if no other filter is provided.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was created. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was updated. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ConsumedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was consumed. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        CanceledUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was canceled. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ClosedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) was closed. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Currency: {
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.',
            format: 'currency',
            nullable: true
        },
        AccountingStates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingStateEnum'
            },
            description: 'Accounting state of the item.',
            nullable: true
        },
        Types: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItemTypeEnum'
            },
            description: 'Order item type, e.g. whether product order or space order.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemFilterParameters'
} as const;

export const $OrderItemOld = {
    title: 'Order item',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the item.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the item belongs to.',
            format: 'uuid',
            nullable: true
        },
        OrderId: {
            type: 'string',
            description: 'Unique identifier of the order (or [Reservation](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06) which is a special type of order) the item belongs to.',
            format: 'uuid'
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the item is assigned to.',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.',
            format: 'uuid',
            nullable: true
        },
        UnitCount: {
            type: 'integer',
            description: 'Unit count of item, i.e. the number of sub-items or units, if applicable.',
            format: 'int32'
        },
        UnitAmount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: '',
            nullable: true
        },
        Amount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: '',
            nullable: true
        },
        OriginalAmount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: '',
            nullable: true
        },
        RevenueType: {
            type: 'string',
            description: 'Revenue type of the item.',
            nullable: true
        },
        CreatorProfileId: {
            type: 'string',
            format: 'uuid'
        },
        UpdaterProfileId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedUtc: {
            type: 'string',
            format: 'date',
            nullable: true
        },
        UpdatedUtc: {
            type: 'string',
            format: 'date',
            nullable: true
        },
        ConsumedUtc: {
            type: 'string',
            description: 'Date and time of the item consumption in UTC timezone in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        CanceledUtc: {
            type: 'string',
            format: 'date',
            nullable: true
        },
        ClosedUtc: {
            type: 'string',
            description: 'Date and time of the item bill closure in UTC timezone in ISO 8601 format.',
            format: 'date',
            nullable: true
        },
        StartUtc: {
            type: 'string',
            format: 'date',
            nullable: true
        },
        AccountingState: {
            type: 'string',
            description: 'Accounting state of the item.',
            nullable: true
        },
        Data: {
            title: 'Data',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/OrderItemTypeOld'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/RebateOrderItemData'
                        },
                        {
                            '$ref': '#/components/schemas/ProductOrderItemData'
                        }
                    ]
                }
            },
            description: 'Additional data specific to particular order item.',
            'x-coproduct': true,
            'x-schema-id': 'OrderItemOldDataCoproductOfOrderItemTypeOld'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemOld'
} as const;

export const $OrderItemOptions = {
    title: 'Order item options',
    required: ['CanceledWithReservation'],
    type: 'object',
    properties: {
        CanceledWithReservation: {
            type: 'boolean',
            description: 'Order item was canceled with reservation cancellation.'
        }
    },
    additionalProperties: false,
    description: 'Options of the order item.',
    'x-schema-id': 'OrderItemOptions'
} as const;

export const $OrderItemProductData = {
    title: 'Product data',
    required: ['ProductId'],
    type: 'object',
    properties: {
        ProductId: {
            type: 'string',
            description: 'Unique identifier of the [Product](https://mews-systems.gitbook.io/connector-api/operations/products/#product).',
            format: 'uuid'
        },
        AgeCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Age Category](https://mews-systems.gitbook.io/connector-api/operations/agecategories/#age-category).',
            format: 'uuid',
            nullable: true
        },
        ProductType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductTypeEnum'
                }
            ],
            description: `Type of Product, e.g. whether allowance or product.

Product

Allowance`,
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemProductData'
} as const;

export const $OrderItemRebateData = {
    title: 'Rebate data',
    required: ['ProductId', 'RebatedItemId'],
    type: 'object',
    properties: {
        ProductId: {
            type: 'string',
            description: 'Unique identifier of the [Product](https://mews-systems.gitbook.io/connector-api/operations/products/#product) of the original rebated [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item).',
            format: 'uuid'
        },
        RebatedItemId: {
            type: 'string',
            description: 'Unique identifier of [Order item](https://mews-systems.gitbook.io/connector-api/operations/orderitems/#order-item) which has been rebated by current item.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemRebateData'
} as const;

export const $OrderItemResult = {
    title: 'OrderItemResult',
    required: ['OrderItems'],
    type: 'object',
    properties: {
        OrderItems: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItem'
            },
            description: 'Set of requested order items.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest order item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older order items.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderItemResult'
} as const;

export const $OrderItemTypeEnum = {
    title: 'Order item type',
    enum: ['CancellationFee', 'NightRebate', 'ProductOrderRebate', 'AdditionalExpenseRebate', 'Deposit', 'ExchangeRateDifference', 'CustomItem', 'ServiceCharge', 'CityTax', 'CityTaxDiscount', 'SpaceOrder', 'ProductOrder', 'Surcharge', 'TaxCorrection', 'ResourceUpgradeFee', 'InvoiceFee', 'MulticurrencyFee', 'AllowanceDiscount', 'AllowanceBreakage', 'AllowanceContraBreakage'],
    type: 'string',
    description: `

CancellationFee

NightRebate

ProductOrderRebate

AdditionalExpenseRebate

Deposit

ExchangeRateDifference

CustomItem

ServiceCharge

CityTax

CityTaxDiscount

SpaceOrder

ProductOrder

Surcharge

TaxCorrection

ResourceUpgradeFee

InvoiceFee

MulticurrencyFee

AllowanceDiscount

AllowanceBreakage

AllowanceContraBreakage`,
    'x-enumNames': ['CancellationFee', 'NightRebate', 'ProductOrderRebate', 'AdditionalExpenseRebate', 'Deposit', 'ExchangeRateDifference', 'CustomItem', 'ServiceCharge', 'CityTax', 'CityTaxDiscount', 'SpaceOrder', 'ProductOrder', 'Surcharge', 'TaxCorrection', 'ResourceUpgradeFee', 'InvoiceFee', 'MulticurrencyFee', 'AllowanceDiscount', 'AllowanceBreakage', 'AllowanceContraBreakage'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
} as const;

export const $OrderItemTypeOld = {
    enum: ['CancellationFee', 'Rebate', 'Deposit', 'ExchangeRateDifference', 'CustomItem', 'Surcharge', 'SurchargeDiscount', 'SpaceOrder', 'ProductOrder', 'Other', 'TaxCorrection', 'ResourceUpgradeFee', 'InvoiceFee'],
    type: 'string'
} as const;

export const $OrderNote = {
    title: 'Service order note',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the service order note.',
            format: 'uuid'
        },
        OrderId: {
            type: 'string',
            description: 'Unique identifier of the `Service order` to which the Service Order Note belongs.',
            format: 'uuid'
        },
        Text: {
            type: 'string',
            description: 'Content of the service order note.',
            nullable: true
        },
        Type: {
            title: 'Service order note type',
            allOf: [
                {
                    '$ref': '#/components/schemas/OrderNoteTypeEnum'
                }
            ],
            description: `A discriminator specifying the type of service order note, e.g. general or channel manager.

General

ChannelManager

SpecialRequest`,
            'x-enumNames': ['General', 'ChannelManager', 'SpecialRequest'],
            'x-enumDescriptions': ['', '', '']
        },
        CreatedUtc: {
            type: 'string',
            description: 'Creation date and time of the service order note in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        UpdatedUtc: {
            type: 'string',
            description: 'Last update date and time of the service order note in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OrderNote'
} as const;

export const $OrderNoteTypeEnum = {
    title: 'Service order note type',
    enum: ['General', 'ChannelManager', 'SpecialRequest'],
    type: 'string',
    description: `

General

ChannelManager

SpecialRequest`,
    'x-enumNames': ['General', 'ChannelManager', 'SpecialRequest'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $Outlet = {
    title: 'Outlet',
    required: ['CreatedUtc', 'EnterpriseId', 'Id', 'IsActive', 'Name', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the outlet.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the outlet is still active.'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the outlet.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the outlet in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the outlet in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Outlet'
} as const;

export const $OutletBill = {
    title: 'Outlet bill',
    required: ['ClosedUtc', 'EnterpriseId', 'Id', 'OutletId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the bill.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the Enterprise.',
            format: 'uuid'
        },
        OutletId: {
            type: 'string',
            description: 'Unique identifier of the [Outlet](https://mews-systems.gitbook.io/connector-api/operations/outlets/#outlet) where the bill was issued.',
            format: 'uuid'
        },
        Number: {
            type: 'string',
            description: 'Number of the bill.',
            nullable: true
        },
        ClosedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the bill closure in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the bill in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Notes: {
            type: 'string',
            description: 'Additional notes on the bill.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletBill'
} as const;

export const $OutletBillParameters = {
    title: 'OutletBillParameters',
    required: ['ClosedUtc', 'Items', 'Number', 'OutletId'],
    type: 'object',
    properties: {
        OutletId: {
            type: 'string',
            format: 'uuid'
        },
        Number: {
            minLength: 1,
            type: 'string'
        },
        ClosedUtc: {
            minLength: 1,
            type: 'string'
        },
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OutletItemParameters'
            }
        },
        AccountId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        Notes: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletBillParameters'
} as const;

export const $OutletFilterParameters = {
    title: 'OutletFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        OutletIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Outlets](https://mews-systems.gitbook.io/connector-api/operations/#outlet).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletFilterParameters'
} as const;

export const $OutletItem = {
    title: 'Outlet item',
    required: ['BillId', 'ConsumedUtc', 'CreatedUtc', 'EnterpriseId', 'Id', 'Type', 'UnitAmount', 'UnitCount', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the item.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the [Outlet bill](https://mews-systems.gitbook.io/connector-api/operations/#outlet-bill) the item belongs to.',
            format: 'uuid'
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.',
            format: 'uuid',
            nullable: true
        },
        Type: {
            '$ref': '#/components/schemas/OutletItemType'
        },
        Name: {
            type: 'string',
            description: 'Name of the item.',
            nullable: true
        },
        UnitCount: {
            type: 'integer',
            description: 'Unit count of the item.',
            format: 'int32'
        },
        UnitAmount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: 'Unit amount of the item.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the item creation in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the item in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ConsumedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the item consumption in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'An identifier of this item from another system.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        PaymentCardPaymentId: {
            type: 'string',
            description: 'Unique identifier of the payment card `Payment` this item is linked to. This is only applicable to items where `Type` is `Payment`.',
            format: 'uuid',
            nullable: true
        },
        UnitCost: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Total price of the reservation.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `UnitAmount` instead.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletItem'
} as const;

export const $OutletItemParameters = {
    title: 'OutletItemParameters',
    required: ['ConsumedUtc', 'Name', 'UnitAmount', 'UnitCount'],
    type: 'object',
    properties: {
        Name: {
            minLength: 1,
            type: 'string'
        },
        UnitCount: {
            type: 'integer',
            format: 'int32'
        },
        UnitAmount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.'
        },
        ConsumedUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        Type: {
            type: 'string',
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            nullable: true
        },
        Notes: {
            type: 'string',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        AccountingCategory: {
            title: 'AccountingCategoryParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingCategoryParameters'
                }
            ],
            nullable: true
        },
        UnitCost: {
            title: 'CostParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/CostParameters'
                }
            ],
            nullable: true,
            deprecated: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletItemParameters'
} as const;

export const $OutletItemResult = {
    title: 'OutletItemResult',
    required: ['OutletBills', 'OutletItems'],
    type: 'object',
    properties: {
        OutletItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OutletItem'
            },
            description: 'The outlet items.'
        },
        OutletBills: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OutletBill'
            },
            description: 'The outlet bills of the items.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest outlet item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older outlet items.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletItemResult'
} as const;

export const $OutletItemType = {
    title: 'Outlet item type',
    enum: ['Revenue', 'NonRevenue', 'Payment'],
    type: 'string',
    description: 'Type of the outlet item.'
} as const;

export const $OutletItemsFilterParameters = {
    title: 'OutletItemsFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Ids: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Outlet items](#outlet-item). If not specified, the operation returns data for all [Outlet items](#outlet-item) within scope of the Access Token.',
            nullable: true
        },
        ConsumedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Outlet item](#outlet-item) was consumed. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Outlet bill](#outlet-bill) was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ClosedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Outlet bill](#outlet-bill) was closed.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Currency: {
            type: 'string',
            description: 'ISO-4217 code of the [Currency](#currency) the item costs should be converted to.',
            format: 'currency',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletItemsFilterParameters'
} as const;

export const $OutletResult = {
    title: 'OutletResult',
    required: ['Outlets'],
    type: 'object',
    properties: {
        Outlets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Outlet'
            },
            description: 'The outlets of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'OutletResult'
} as const;

export const $Parameters = {
    title: 'Parameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Parameters'
} as const;

export const $ParentProductCategory = {
    title: 'ParentProductCategory',
    required: ['Id', 'Names'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            format: 'uuid'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            'x-schema-id': 'LocalizedStrings'
        }
    },
    additionalProperties: false,
    description: '[Parent product category](https://mews-systems.gitbook.io/connector-api/operations/#parent-product-category).',
    'x-schema-id': 'ParentProductCategory'
} as const;

export const $PassportScannerCommandData = {
    title: 'Passport scanner command data',
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/DeviceCommandData'
        }
    ],
    properties: {
        PassportScannerId: {
            type: 'string',
            description: 'Identifier of the passport scanner.',
            nullable: true
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer` who should be processed.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation whose companions should be processed.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PassportScannerCommandData'
} as const;

export const $PaxCount = {
    title: 'PaxCount',
    required: ['PersonCount', 'UnitCount'],
    type: 'object',
    properties: {
        PersonCount: {
            type: 'integer',
            description: 'Predicted guest count that will be assigned to the Resource. The guest count must fit within the Resource Category maximum capacity.',
            format: 'int32'
        },
        UnitCount: {
            type: 'integer',
            description: 'Positive number of adjustments that are assigned to `PersonCount`. The sum of all `UnitCount` in `PaxCounts` should match the adjustment value applied to the interval.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaxCount'
} as const;

export const $Payment = {
    title: 'Payment',
    required: ['AccountId', 'AccountingState', 'Amount', 'CreatedUtc', 'EnterpriseId', 'Id', 'OriginalAmount', 'SettlementUtc', 'State', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the payment.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the `Enterprise`.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (for example `Customer`) the payment belongs to.',
            format: 'uuid'
        },
        AccountType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AccountType'
                }
            ],
            description: 'A discriminator specifying the account type, e.g. `Customer` or `Company`.',
            nullable: true
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the `Bill` the payment is assigned to.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the `Reservation` the payment belongs to.',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the `AccountingCategory` the payment belongs to.',
            format: 'uuid',
            nullable: true
        },
        Amount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: "Payment's amount, negative amount represents either rebate or a payment."
        },
        OriginalAmount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: "Payment's original amount, negative amount represents either rebate or a payment. Contains the earliest known value in conversion chain."
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        SettlementId: {
            type: 'string',
            description: 'Identifier of the settled payment from the external system (ApplePay/GooglePay).',
            nullable: true
        },
        ConsumedUtc: {
            type: 'string',
            description: 'Date and time of the item consumption in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        ClosedUtc: {
            type: 'string',
            description: 'Date and time of the payment bill closure in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        ChargedUtc: {
            type: 'string',
            description: 'Charged date and time of the payment in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the payment created in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the payment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        SettlementUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the payment settlement in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        AccountingState: {
            title: 'Order item accounting state',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountingStateEnum'
                }
            ],
            description: `Accounting state of the payment.

Open (Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.)

Closed (Order items which carry a non-zero value and have been closed on a bill or invoice.)

Inactive (Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.)

Canceled (Order items which have been canceled, regardless of whether the item is of zero value.)`,
            'x-enumNames': ['Open', 'Closed', 'Inactive', 'Canceled'],
            'x-enumDescriptions': ['Order items which carry a non-zero value, are open, and have not been closed on a bill or invoice.', 'Order items which carry a non-zero value and have been closed on a bill or invoice.', 'Order items which are either of zero value and have not been canceled, if the state of the payment item is Pending or Failed, or items of optional reservations. Until the reservation is confirmed, all its accounting items are Inactive.', 'Order items which have been canceled, regardless of whether the item is of zero value.']
        },
        State: {
            title: 'Payment state',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentStateEnum'
                }
            ],
            description: `Payment state of the payment.

Charged

Canceled

Pending

Failed

Verifying`,
            'x-enumNames': ['Charged', 'Canceled', 'Pending', 'Failed', 'Verifying'],
            'x-enumDescriptions': ['', '', '', '', '']
        },
        Identifier: {
            type: 'string',
            description: 'Additional unique identifier of the payment.',
            nullable: true
        },
        Type: {
            title: 'Payment type',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentDiscriminatorEnum'
                }
            ],
            description: `Payment type, e.g. whether credit card or cash.

Payment

CreditCardPayment

AlternativePayment

CashPayment

InvoicePayment

ExternalPayment

GhostPayment

TaxDeductedPayment`,
            'x-enumNames': ['Payment', 'CreditCardPayment', 'AlternativePayment', 'CashPayment', 'InvoicePayment', 'ExternalPayment', 'GhostPayment', 'TaxDeductedPayment'],
            'x-enumDescriptions': ['', '', '', '', '', '', '', '']
        },
        Kind: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentKindEnum'
                }
            ],
            description: `Payment kind, e.g. whether payment or refund. Value provided only for payments processed by Mews Payments.

Payment

Chargeback

ChargebackReversal

Refund`,
            nullable: true
        },
        Data: {
            title: 'Payment data',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentData'
                }
            ],
            description: 'Additional payment data.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Payment'
} as const;

export const $PaymentCardPaymentData = {
    title: 'PaymentCardPaymentData',
    type: 'object',
    properties: {
        PaymentCardId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentCardPaymentData'
} as const;

export const $PaymentCardStorage = {
    title: 'Payment card storage',
    required: ['PublicKey'],
    type: 'object',
    properties: {
        PublicKey: {
            minLength: 1,
            type: 'string',
            description: 'Key for accessing PCI proxy storage.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'PaymentCardStorage'
} as const;

export const $PaymentCreditCardData = {
    title: 'Credit card payment data',
    type: 'object',
    properties: {
        CreditCardId: {
            type: 'string',
            description: 'Unique identifier of the payment card.',
            format: 'uuid',
            nullable: true
        },
        Transaction: {
            title: 'Credit card transaction',
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditCardTransaction'
                }
            ],
            description: 'The credit card payment transaction.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentCreditCardData'
} as const;

export const $PaymentData = {
    title: 'Payment data',
    required: ['Discriminator'],
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Payment data discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentDataDiscriminatorEnum'
                }
            ],
            description: `Discriminator pointing to the fields within this object that contains additional data.

CreditCard

Invoice

External

Ghost`,
            readOnly: true,
            'x-enumNames': ['CreditCard', 'Invoice', 'External', 'Ghost'],
            'x-enumDescriptions': ['', '', '', '']
        },
        CreditCard: {
            title: 'Credit card payment data',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentCreditCardData'
                }
            ],
            description: 'Contains additional data in the case of a card payment.',
            nullable: true
        },
        Invoice: {
            title: 'Invoice payment data',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentInvoiceData'
                }
            ],
            description: 'Contains additional data in the case of an invoice payment.',
            nullable: true,
            readOnly: true
        },
        External: {
            title: 'External payment data',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentExternalData'
                }
            ],
            description: 'Contains additional data in the case of an external payment.',
            nullable: true,
            readOnly: true
        },
        Ghost: {
            title: 'Ghost payment data',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentGhostData'
                }
            ],
            description: 'Contains additional data in the case of a ghost payment.',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentData'
} as const;

export const $PaymentDataDiscriminatorEnum = {
    title: 'Payment data discriminator',
    enum: ['CreditCard', 'Invoice', 'External', 'Ghost'],
    type: 'string',
    description: `

CreditCard

Invoice

External

Ghost`,
    'x-enumNames': ['CreditCard', 'Invoice', 'External', 'Ghost'],
    'x-enumDescriptions': ['', '', '', '']
} as const;

export const $PaymentDiscriminatorEnum = {
    title: 'Payment type',
    enum: ['Payment', 'CreditCardPayment', 'AlternativePayment', 'CashPayment', 'InvoicePayment', 'ExternalPayment', 'GhostPayment', 'TaxDeductedPayment'],
    type: 'string',
    description: `

Payment

CreditCardPayment

AlternativePayment

CashPayment

InvoicePayment

ExternalPayment

GhostPayment

TaxDeductedPayment`,
    'x-enumNames': ['Payment', 'CreditCardPayment', 'AlternativePayment', 'CashPayment', 'InvoicePayment', 'ExternalPayment', 'GhostPayment', 'TaxDeductedPayment'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '']
} as const;

export const $PaymentExternalData = {
    title: 'External payment data',
    required: ['Type'],
    type: 'object',
    properties: {
        Type: {
            title: 'External payment type',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExternalPaymentTypeEnum'
                }
            ],
            description: `Type of the external payment. *Except for enterprises based in the French Legal Environment. \`Unspecified\` is considered as fraud.

Unspecified (Unspecified (unavailable in French Legal Environment))

BadDebts (Bad debts)

Bacs (Bacs payment)

WireTransfer (Wire transfer)

Invoice (Invoice)

ExchangeRateDifference (Exchange rate difference)

Complimentary (Complimentary)

Reseller (Reseller)

ExchangeRoundingDifference (Exchange rounding difference)

Barter (Barter)

Commission (Commission)

BankCharges (Bank charges)

CrossSettlement (Cross settlement)

Cash (Cash)

CreditCard (Credit card)

Prepayment (Prepayment)

Cheque (Cheque)

Bancontact (Bancontact)

IDeal (iDeal)

PayPal (PayPal)

GiftCard (Gift card)

LoyaltyPoints (Loyalty points)

ChequeVacances (Chèque-Vacances)

OnlinePayment (Online payment)

CardCheck (Card check)

PaymentHubRedirection (Payment hub redirection)

Voucher (Voucher)

MasterCard (MasterCard)

Visa (Visa)

Amex (American Express)

Discover (Discover)

DinersClub (Diners Club)

Jcb (JCB)

UnionPay (UnionPay)

Twint (TWINT)

Reka (Reka)

LoyaltyCard (Loyalty card)

PosDiningAndSpaReward (POS Dining & Spa Reward)

DirectDebit (Direct debit)

DepositCheck (Deposit - check)

DepositCash (Deposit - cash)

DepositCreditCard (Deposit - credit card)

DepositWireTransfer (Deposit - wire transfer)`,
            'x-enumNames': ['Unspecified', 'BadDebts', 'Bacs', 'WireTransfer', 'Invoice', 'ExchangeRateDifference', 'Complimentary', 'Reseller', 'ExchangeRoundingDifference', 'Barter', 'Commission', 'BankCharges', 'CrossSettlement', 'Cash', 'CreditCard', 'Prepayment', 'Cheque', 'Bancontact', 'IDeal', 'PayPal', 'GiftCard', 'LoyaltyPoints', 'ChequeVacances', 'OnlinePayment', 'CardCheck', 'PaymentHubRedirection', 'Voucher', 'MasterCard', 'Visa', 'Amex', 'Discover', 'DinersClub', 'Jcb', 'UnionPay', 'Twint', 'Reka', 'LoyaltyCard', 'PosDiningAndSpaReward', 'DirectDebit', 'DepositCheck', 'DepositCash', 'DepositCreditCard', 'DepositWireTransfer'],
            'x-enumDescriptions': ['Unspecified (unavailable in French Legal Environment)', 'Bad debts', 'Bacs payment', 'Wire transfer', 'Invoice', 'Exchange rate difference', 'Complimentary', 'Reseller', 'Exchange rounding difference', 'Barter', 'Commission', 'Bank charges', 'Cross settlement', 'Cash', 'Credit card', 'Prepayment', 'Cheque', 'Bancontact', 'iDeal', 'PayPal', 'Gift card', 'Loyalty points', 'Chèque-Vacances', 'Online payment', 'Card check', 'Payment hub redirection', 'Voucher', 'MasterCard', 'Visa', 'American Express', 'Discover', 'Diners Club', 'JCB', 'UnionPay', 'TWINT', 'Reka', 'Loyalty card', 'POS Dining & Spa Reward', 'Direct debit', 'Deposit - check', 'Deposit - cash', 'Deposit - credit card', 'Deposit - wire transfer']
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'Identifier of the payment from external system.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentExternalData'
} as const;

export const $PaymentFilterParameters = {
    title: 'PaymentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        PaymentIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of specific `Payment` items. Required if no other filter is provided.',
            nullable: true
        },
        AccountIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of specific `Accounts` to which payments belong. Required if no other filter is provided.',
            nullable: true
        },
        BillIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of specific `Bill` items to which payments are assigned. Required if no other filter is provided.',
            nullable: true
        },
        ReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of specific `Reservations` to which payments belong. Required if no other filter is provided.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Time interval during which the `Payment` was created. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Time interval during which the `Payment` was updated. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ChargedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Time interval during which the `Payment` was charged. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ClosedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Time interval during which the `Payment` was closed. Required if no other filter is provided.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        SettlementUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Payments` were settled.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Currency: {
            type: 'string',
            description: 'ISO-4217 code of the `Currency` the item costs should be converted to.',
            format: 'currency',
            nullable: true
        },
        AccountingStates: {
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingState'
            },
            description: 'Accounting state of the item.',
            nullable: true
        },
        States: {
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentState'
            },
            description: 'Payment state of the item.',
            nullable: true
        },
        Type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentDiscriminatorEnum'
                }
            ],
            description: `Payment state of the item.

Payment

CreditCardPayment

AlternativePayment

CashPayment

InvoicePayment

ExternalPayment

GhostPayment

TaxDeductedPayment`,
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentFilterParameters'
} as const;

export const $PaymentGhostData = {
    title: 'Ghost payment data',
    required: ['OriginalPaymentId'],
    type: 'object',
    properties: {
        OriginalPaymentId: {
            type: 'string',
            description: 'Unique identifier of the original payment.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentGhostData'
} as const;

export const $PaymentInvoiceData = {
    title: 'Invoice payment data',
    required: ['Type'],
    type: 'object',
    properties: {
        InvoiceId: {
            type: 'string',
            description: 'Unique identifier of the invoice `Bill`.',
            format: 'uuid',
            nullable: true
        },
        Type: {
            title: 'Invoice payment type',
            allOf: [
                {
                    '$ref': '#/components/schemas/InvoicePaymentTypeEnum'
                }
            ],
            description: `Type of the invoice payment.

Receivable

Balancing

UnderpaymentBalancingReceivable

OverpaymentBalancingReceivable

Overpayment`,
            'x-enumNames': ['Receivable', 'Balancing', 'UnderpaymentBalancingReceivable', 'OverpaymentBalancingReceivable', 'Overpayment'],
            'x-enumDescriptions': ['', '', '', '', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentInvoiceData'
} as const;

export const $PaymentItemOld = {
    title: 'Payment item',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the item.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the item belongs to.',
            format: 'uuid'
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the [Bill](https://mews-systems.gitbook.io/connector-api/operations/bills/#bill) the item is assigned to.',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Accounting category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category) the item belongs to.',
            format: 'uuid',
            nullable: true
        },
        Amount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: '',
            nullable: true
        },
        OriginalAmount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: '',
            nullable: true
        },
        AmountDefault: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: '',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        SettlementId: {
            type: 'string',
            description: 'Identifier of the settled payment from the external system (ApplePay/GooglePay).',
            nullable: true
        },
        ConsumedUtc: {
            type: 'string',
            description: 'Date and time of the item consumption in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        ClosedUtc: {
            type: 'string',
            description: 'Date and time of the item bill closure in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        AccountingState: {
            type: 'string',
            description: 'Accounting state of the item.',
            nullable: true
        },
        State: {
            type: 'string',
            description: 'Payment state of the item.',
            nullable: true
        },
        Identifier: {
            type: 'string',
            nullable: true
        },
        Data: {
            title: 'Data',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/PaymentType'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/PaymentCardPaymentData'
                        },
                        {
                            '$ref': '#/components/schemas/InvoicePaymentData'
                        }
                    ]
                }
            },
            description: 'Additional data specific to particular payment item.',
            'x-coproduct': true,
            'x-schema-id': 'PaymentItemOldDataCoproductOfPaymentType'
        }
    },
    additionalProperties: false,
    description: 'Payment item',
    'x-schema-id': 'PaymentItemOld'
} as const;

export const $PaymentKindEnum = {
    title: 'Payment kind',
    enum: ['Payment', 'Chargeback', 'ChargebackReversal', 'Refund'],
    type: 'string',
    description: `

Payment

Chargeback

ChargebackReversal

Refund`,
    'x-enumNames': ['Payment', 'Chargeback', 'ChargebackReversal', 'Refund'],
    'x-enumDescriptions': ['', '', '', '']
} as const;

export const $PaymentMethodsEnum = {
    title: 'Available payment plan payment methods',
    enum: ['Ideal', 'PaymentCard', 'ApplePay', 'GooglePay', 'SepaDirectDebit', 'All'],
    type: 'string',
    description: `

Ideal (iDEAL)

PaymentCard (Payment card)

ApplePay (Apple Pay)

GooglePay (Google Pay)

SepaDirectDebit (SEPA Direct Debit)

All`,
    'x-enumNames': ['Ideal', 'PaymentCard', 'ApplePay', 'GooglePay', 'SepaDirectDebit', 'All'],
    'x-enumDescriptions': ['iDEAL', 'Payment card', 'Apple Pay', 'Google Pay', 'SEPA Direct Debit', '']
} as const;

export const $PaymentPlanAddParameters = {
    title: 'PaymentPlanAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Name', 'PaymentRequest', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Reservation Id associated with the payment plan.',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the payment plan.'
        },
        PaymentRequest: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentPlanPaymentRequest'
                }
            ],
            description: 'Data related to the payment request associated with the payment plan created.'
        },
        StartMonth: {
            type: 'string',
            description: "Specifies the month when the payment plan begins collecting payments, in the 'YYYY-MM' format. The month must be in the future and fall within the reservation period.",
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentPlanAddParameters'
} as const;

export const $PaymentPlanAddResult = {
    title: 'PaymentPlanAddResult',
    required: ['PaymentRequestUrl'],
    type: 'object',
    properties: {
        PaymentRequestUrl: {
            minLength: 1,
            type: 'string',
            description: 'Payment request URL associated with the created payment plan.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentPlanAddResult'
} as const;

export const $PaymentPlanPaymentRequest = {
    title: 'PaymentPlanPaymentRequest',
    required: ['Message', 'PaymentMethods'],
    type: 'object',
    properties: {
        PaymentMethods: {
            minItems: 1,
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentMethodsEnum'
            },
            description: 'Allowed payment methods to pay for the payment plan.'
        },
        Message: {
            minLength: 1,
            type: 'string',
            description: 'Message in the payment request.'
        },
        Note: {
            type: 'string',
            description: 'Internal note for the payment request.',
            nullable: true
        },
        PaymentRequestType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentPlanPaymentRequestTypeEnum'
                }
            ],
            description: `Type of payment request to create. If not specified, defaults to \`Payment\`.

Payment

PaymentMethod`,
            nullable: true
        },
        PaymentRequestExpirationOffsetDays: {
            type: 'integer',
            description: "Custom expiration date offset in days for the payment request. If not set, it'll expire in one week, unless the first scheduled payment should be executed before. In that case, The expiration date will be set one second before the scheduled payment execution (the last possible moment when we can get the payment method).",
            format: 'int32',
            nullable: true
        },
        SendEmail: {
            type: 'boolean',
            description: 'Specifies whether a payment request email is sent to the customer. Defaults to true.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentPlanPaymentRequest'
} as const;

export const $PaymentPlanPaymentRequestTypeEnum = {
    title: 'Payment plan payment request type',
    enum: ['Payment', 'PaymentMethod'],
    type: 'string',
    description: `

Payment

PaymentMethod`,
    'x-enumNames': ['Payment', 'PaymentMethod'],
    'x-enumDescriptions': ['', '']
} as const;

export const $PaymentRefundParameters = {
    title: 'PaymentRefundParameters',
    required: ['AccessToken', 'AccountId', 'Client', 'ClientToken', 'PaymentId', 'Reason'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        PaymentId: {
            type: 'string',
            description: 'Unique identifier of specific [Payment](https://mews-systems.gitbook.io/connector-api/operations/payments/#payment).',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account (for example [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer)) the payment belongs to.',
            format: 'uuid'
        },
        Reason: {
            minLength: 1,
            type: 'string',
            description: 'Refund reason.'
        },
        ValueToRefund: {
            type: 'number',
            description: 'Refund amount. If not provided, the whole payment will be refunded.',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentRefundParameters'
} as const;

export const $PaymentRefundResult = {
    title: 'PaymentRefundResult',
    required: ['Amount', 'PaymentId', 'RefundId', 'State', 'Type'],
    type: 'object',
    properties: {
        PaymentId: {
            type: 'string',
            description: 'Unique identifier of specific [Payment](https://mews-systems.gitbook.io/connector-api/operations/payments/#payment).',
            format: 'uuid'
        },
        RefundId: {
            type: 'string',
            description: 'Unique identifier of refund.',
            format: 'uuid'
        },
        Type: {
            title: 'Refund type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RefundTypeEnum'
                }
            ],
            description: `Type of refund.

CreditCardPayment

AlternativePayment`,
            'x-enumNames': ['CreditCardPayment', 'AlternativePayment'],
            'x-enumDescriptions': ['', '']
        },
        Amount: {
            title: 'Currency value (ver 2023-02-02)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValue'
                }
            ],
            description: 'Absolute value of the fee.'
        },
        State: {
            title: 'Payment state',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentStateEnum'
                }
            ],
            description: `Payment state of the refund.

Charged

Canceled

Pending

Failed

Verifying`,
            'x-enumNames': ['Charged', 'Canceled', 'Pending', 'Failed', 'Verifying'],
            'x-enumDescriptions': ['', '', '', '', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentRefundResult'
} as const;

export const $PaymentRequest = {
    title: 'Payment request',
    required: ['AccountId', 'Amount', 'CreatedUtc', 'Description', 'EnterpriseId', 'ExpirationUtc', 'Id', 'Reason', 'State', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the payment request.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) to which the payment request was issued.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountId`'
        },
        ReservationGroupId: {
            type: 'string',
            description: 'Unique identifier of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations#reservation-group).',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        State: {
            '$ref': '#/components/schemas/PaymentRequestState'
        },
        Amount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: ''
        },
        Type: {
            '$ref': '#/components/schemas/PaymentRequestType'
        },
        Reason: {
            '$ref': '#/components/schemas/PaymentRequestReason'
        },
        ExpirationUtc: {
            minLength: 1,
            type: 'string',
            description: "Date and time of the payment request's expiration in ISO 8601 format.",
            format: 'date-time'
        },
        Description: {
            maxLength: 1000,
            minLength: 1,
            type: 'string',
            description: 'Description of the payment request.'
        },
        Notes: {
            maxLength: 1000,
            type: 'string',
            description: "Payment request's notes.",
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the payment request in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the payment request in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentRequest'
} as const;

export const $PaymentRequestAddParameters = {
    title: 'PaymentRequestAddParameters',
    required: ['AccountId', 'Amount', 'Description', 'ExpirationUtc', 'Reason', 'Type'],
    type: 'object',
    properties: {
        AccountId: {
            type: 'string',
            format: 'uuid'
        },
        Amount: {
            title: 'Currency value (ver 2023-02-02)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValue'
                }
            ],
            description: 'Absolute value of the fee.'
        },
        Type: {
            '$ref': '#/components/schemas/PaymentRequestType'
        },
        Reason: {
            '$ref': '#/components/schemas/PaymentRequestReason'
        },
        ExpirationUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        Description: {
            maxLength: 1000,
            minLength: 1,
            type: 'string'
        },
        Notes: {
            maxLength: 1000,
            type: 'string',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentRequestAddParameters'
} as const;

export const $PaymentRequestFilterParameters = {
    title: 'PaymentRequestFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        PaymentRequestIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Payment requests](https://mews-systems.gitbook.io/connector-api/operations/#payment-request).',
            nullable: true
        },
        AccountIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) accounts to which payment requests were issued.',
            nullable: true
        },
        ReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        States: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentRequestState'
            },
            description: 'A list of payment request states to filter by.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentRequestFilterParameters'
} as const;

export const $PaymentRequestReason = {
    enum: ['Other', 'PaymentCardMissing', 'PaymentCardDeclined', 'Deposit', 'Prepayment', 'Fee', 'RecurringPayment'],
    type: 'string'
} as const;

export const $PaymentRequestResult = {
    title: 'PaymentRequestResult',
    required: ['PaymentRequests'],
    type: 'object',
    properties: {
        PaymentRequests: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaymentRequest'
            },
            description: 'The filtered payment requests.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest payment request returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older payment requests.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentRequestResult'
} as const;

export const $PaymentRequestState = {
    enum: ['Pending', 'Completed', 'Canceled', 'Expired'],
    type: 'string'
} as const;

export const $PaymentRequestType = {
    enum: ['Payment', 'Preauthorization'],
    type: 'string'
} as const;

export const $PaymentResult = {
    title: 'PaymentResult',
    required: ['Payments'],
    type: 'object',
    properties: {
        Payments: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Payment'
            },
            description: 'The list of filtered payments.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest payment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of payments.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentResult'
} as const;

export const $PaymentState = {
    title: 'Payment state',
    enum: ['Charged', 'Canceled', 'Pending', 'Failed', 'Verifying'],
    type: 'string'
} as const;

export const $PaymentStateEnum = {
    title: 'Payment state',
    enum: ['Charged', 'Canceled', 'Pending', 'Failed', 'Verifying'],
    type: 'string',
    description: `

Charged

Canceled

Pending

Failed

Verifying`,
    'x-enumNames': ['Charged', 'Canceled', 'Pending', 'Failed', 'Verifying'],
    'x-enumDescriptions': ['', '', '', '', '']
} as const;

export const $PaymentTerminalCommandAccountData = {
    title: 'Account data for payment terminal command',
    required: ['Discriminator'],
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Account type',
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountTypeEnum'
                }
            ],
            description: `Type of the account.

Company

Customer`,
            'x-enumNames': ['Company', 'Customer'],
            'x-enumDescriptions': ['', '']
        },
        Customer: {
            title: 'Customer data for payment terminal command.',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentTerminalCommandCustomerData'
                }
            ],
            description: 'Customer data if the `Discriminator` is `Customer`.',
            nullable: true
        },
        Company: {
            title: 'Company data for payment terminal command.',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentTerminalCommandCompanyData'
                }
            ],
            description: 'Company data if the `Discriminator` is `Company`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentTerminalCommandAccountData'
} as const;

export const $PaymentTerminalCommandCompanyData = {
    title: 'Company data for payment terminal command.',
    required: ['Name'],
    type: 'object',
    properties: {
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the company.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentTerminalCommandCompanyData'
} as const;

export const $PaymentTerminalCommandCustomerData = {
    title: 'Customer data for payment terminal command.',
    required: ['FullName'],
    type: 'object',
    properties: {
        FullName: {
            minLength: 1,
            type: 'string',
            description: 'Full name of the customer.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentTerminalCommandCustomerData'
} as const;

export const $PaymentTerminalCommandData = {
    title: 'Payment terminal command data',
    required: ['AccountData', 'AccountId', 'Amount', 'CustomerId', 'PaymentTerminalId'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/DeviceCommandData'
        }
    ],
    properties: {
        PaymentTerminalId: {
            minLength: 1,
            type: 'string',
            description: 'Identifier of the payment terminal.'
        },
        CustomerId: {
            type: 'string',
            format: 'uuid',
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountId` instead.'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the account.',
            format: 'uuid'
        },
        FullName: {
            type: 'string',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AccountData.Customer.FullName`, if `AccountData.Discriminator` is `Customer`.'
        },
        BillId: {
            type: 'string',
            description: 'Identifier of the bill.',
            format: 'uuid',
            nullable: true
        },
        PaymentId: {
            type: 'string',
            description: 'Identifier of the `Payment`.',
            format: 'uuid',
            nullable: true
        },
        PreauthorizationId: {
            type: 'string',
            description: 'Identifier of the `Preauthorization`.',
            format: 'uuid',
            nullable: true
        },
        Amount: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: 'Amount to be processed.'
        },
        Fee: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: 'Payment fee to be processed.',
            nullable: true
        },
        PaymentTerminalData: {
            type: 'string',
            description: 'Custom JSON data.',
            nullable: true
        },
        AccountData: {
            title: 'Account data for payment terminal command',
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentTerminalCommandAccountData'
                }
            ],
            description: 'Account data for the payment terminal command.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentTerminalCommandData'
} as const;

export const $PaymentTerminalCommandParameters = {
    title: 'PaymentTerminalCommandParameters',
    required: ['AccessToken', 'Amount', 'Client', 'ClientToken', 'CustomerId', 'TerminalId', 'Type'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        TerminalId: {
            type: 'string',
            description: 'Unique identifier of the payment terminal.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer`.',
            format: 'uuid'
        },
        Type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaymentTerminalCommandTypeEnum'
                }
            ],
            description: `The type of payment, e.g. \`Preauthorization\`.

Payment

Preauthorization`
        },
        Amount: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Amount of the payment.'
        },
        BillId: {
            type: 'string',
            description: 'Unique identifier of the `Bill`.',
            format: 'uuid',
            nullable: true
        },
        PaymentRequestId: {
            type: 'string',
            description: 'Unique identifier of the `PaymentRequest`.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the `Reservation`.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PaymentTerminalCommandParameters'
} as const;

export const $PaymentTerminalCommandTypeEnum = {
    title: 'Payment type',
    enum: ['Payment', 'Preauthorization'],
    type: 'string',
    description: `

Payment

Preauthorization`,
    'x-enumNames': ['Payment', 'Preauthorization'],
    'x-enumDescriptions': ['', '']
} as const;

export const $PaymentType = {
    enum: ['CreditCard', 'Invoice', 'Cash', 'Unspecified', 'BadDebts', 'WireTransfer', 'ExchangeRateDifference', 'ExchangeRoundingDifference', 'BankCharges', 'Cheque', 'Other'],
    type: 'string'
} as const;

export const $PayworksData = {
    title: 'PayworksData',
    type: 'object',
    properties: {
        MerchantIdentifier: {
            type: 'string',
            nullable: true
        },
        MerchantSecretKey: {
            type: 'string',
            nullable: true
        },
        ApiUrl: {
            type: 'string',
            nullable: true
        },
        Descriptor: {
            type: 'string',
            nullable: true
        },
        AcceptedCreditCardTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PayworksData'
} as const;

export const $PerUnitPriceParameters = {
    title: 'Time unit amount parameters',
    type: 'object',
    properties: {
        Index: {
            type: 'integer',
            description: 'Index of the unit. Indexing starts with `0`. E.g. the first night of the reservation has index `0`.',
            format: 'int32'
        },
        Amount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Amount of the unit.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PerUnitPriceParameters'
} as const;

export const $PersonData = {
    type: 'object',
    additionalProperties: false
} as const;

export const $PickupDistributionEnum = {
    title: 'Pickup distribution',
    enum: ['AllInOneGroup', 'IndividualGroups'],
    type: 'string',
    description: `

AllInOneGroup (All created reservations in the block are added to the same reservation group.)

IndividualGroups (Reservations can be picked up in multiple groups, with up to 750 reservations per group.)`,
    'x-enumNames': ['AllInOneGroup', 'IndividualGroups'],
    'x-enumDescriptions': ['All created reservations in the block are added to the same reservation group.', 'Reservations can be picked up in multiple groups, with up to 750 reservations per group.']
} as const;

export const $Preauthorization = {
    title: 'Preauthorization',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the preauthorization.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            format: 'uuid'
        },
        CreditCardId: {
            type: 'string',
            description: 'Unique identifier of the credit card.',
            format: 'uuid',
            nullable: true
        },
        Amount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: '',
            nullable: true
        },
        State: {
            type: 'string',
            description: 'State of the preauthorization.',
            nullable: true
        },
        Code: {
            type: 'string',
            description: 'Code of the preauthorization.',
            nullable: true
        },
        IsActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Preauthorization'
} as const;

export const $PreauthorizationResult = {
    title: 'PreauthorizationResult',
    type: 'object',
    properties: {
        Preauthorizations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Preauthorization'
            },
            description: 'Preauthorizations of the specified [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PreauthorizationResult'
} as const;

export const $PricingModeEnum = {
    title: 'Pricing',
    enum: ['Gross', 'Net'],
    type: 'string',
    description: `

Gross (The enterprise shows amount with gross prices.)

Net (The enterprise shows amount with net prices.)`,
    'x-enumNames': ['Gross', 'Net'],
    'x-enumDescriptions': ['The enterprise shows amount with gross prices.', 'The enterprise shows amount with net prices.']
} as const;

export const $PrinterCommandData = {
    title: 'Printer command data',
    required: ['CopyCount', 'FileData', 'FileType', 'PrinterDriverName', 'PrinterName', 'PrinterPortName'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/DeviceCommandData'
        }
    ],
    properties: {
        CopyCount: {
            type: 'integer',
            description: 'Number of copies to be printed.',
            format: 'int32'
        },
        FileType: {
            minLength: 1,
            type: 'string',
            description: 'MIME type of the file to be printed (e.g. `application/pdf`).'
        },
        FileData: {
            minLength: 1,
            type: 'string',
            description: 'Base64-encoded data of the file to be printed.'
        },
        PrinterName: {
            minLength: 1,
            type: 'string',
            description: 'Name of the printer.'
        },
        PrinterDriverName: {
            minLength: 1,
            type: 'string',
            description: 'Name of the printer driver.'
        },
        PrinterPortName: {
            minLength: 1,
            type: 'string',
            description: 'Name of the printer port.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PrinterCommandData'
} as const;

export const $PrinterCommandParameters = {
    title: 'PrinterCommandParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CopyCount', 'Data', 'PrinterId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        PrinterId: {
            type: 'string',
            description: 'Unique identifier of the `Printer` `Device` where to print the document.',
            format: 'uuid'
        },
        Data: {
            minLength: 1,
            type: 'string',
            description: 'Base64 encoded data of PDF document to print.'
        },
        CopyCount: {
            type: 'integer',
            description: 'Count of copies to be printed.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'PrinterCommandParameters'
} as const;

export const $Product = {
    title: 'Product',
    required: ['ChargingMode', 'Classifications', 'ConsumptionMoment', 'CreatedUtc', 'ExternalNames', 'Id', 'IsActive', 'Names', 'Options', 'Ordering', 'PostingMode', 'Price', 'Promotions', 'ServiceId', 'ShortNames', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the product.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).',
            format: 'uuid'
        },
        CategoryId: {
            type: 'string',
            description: 'Unique identifier of the Product category.',
            format: 'uuid',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of [Accounting Category](https://mews-systems.gitbook.io/connector-api/operations/accountingcategories/#accounting-category).',
            format: 'uuid',
            nullable: true
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the product is still active.'
        },
        IsDefault: {
            type: 'boolean',
            deprecated: true
        },
        Name: {
            type: 'string',
            description: 'Name of the product. **Deprecated!** Please use Names',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `Names` instead.'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ExternalName: {
            type: 'string',
            description: 'Name of the product meant to be displayed to customer. **Deprecated!** Please use ExternalNames',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `ExternalNames` instead.'
        },
        ExternalNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of external name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortName: {
            type: 'string',
            description: 'Short name of the product. **Deprecated!** Please use ShortNames',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `ShortNames` instead.'
        },
        ShortNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of short name.',
            'x-schema-id': 'LocalizedStrings'
        },
        Description: {
            type: 'string',
            description: 'Description of the product. **Deprecated!** Please use Descriptions',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `Descriptions` instead.'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of descriptions.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        Charging: {
            title: 'Product charging mode',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductChargingModeEnum'
                }
            ],
            description: `

Once

PerTimeUnit

PerPersonPerTimeUnit

PerPerson`,
            deprecated: true,
            'x-enumNames': ['Once', 'PerTimeUnit', 'PerPersonPerTimeUnit', 'PerPerson'],
            'x-enumDescriptions': ['', '', '', '']
        },
        ChargingMode: {
            title: 'Product charging mode',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductChargingModeEnum'
                }
            ],
            description: `Charging mode of the product.

Once

PerTimeUnit

PerPersonPerTimeUnit

PerPerson`,
            'x-enumNames': ['Once', 'PerTimeUnit', 'PerPersonPerTimeUnit', 'PerPerson'],
            'x-enumDescriptions': ['', '', '', '']
        },
        Posting: {
            title: 'Product posting',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductPostingEnum'
                }
            ],
            description: `

Once

Daily`,
            deprecated: true,
            'x-enumNames': ['Once', 'Daily'],
            'x-enumDescriptions': ['', '']
        },
        PostingMode: {
            title: 'Product posting mode',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductPostingModeEnum'
                }
            ],
            description: `Charging mode of the product.

Once

PerTimeUnit`,
            'x-enumNames': ['Once', 'PerTimeUnit'],
            'x-enumDescriptions': ['', '']
        },
        Options: {
            title: 'Product options',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductOptions'
                }
            ],
            description: 'Options of the product.'
        },
        Promotions: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Promotions'
                }
            ],
            description: 'Promotions of the product.'
        },
        Classifications: {
            title: 'Product classifications',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductClassifications'
                }
            ],
            description: 'Classifications of the product.'
        },
        Price: {
            title: 'Extended amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/ExtendedAmount'
                }
            ],
            description: 'Price representing price of the product.'
        },
        Pricing: {
            title: 'Product pricing',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/ProductPricing'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/ExtendedAmount'
                        },
                        {
                            '$ref': '#/components/schemas/RelativeProductPrice'
                        }
                    ]
                }
            },
            deprecated: true,
            'x-coproduct': true,
            'x-schema-id': 'ProductPricingCoproductOfProductPricing',
            'x-deprecatedMessage': 'Use `Price` instead.'
        },
        ImageIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the product image.',
            nullable: true
        },
        Ordering: {
            type: 'integer',
            description: 'Order value for presentation purposes.',
            format: 'int32'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the product from external system.',
            nullable: true
        },
        TaxExemptionReason: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaxExemptionReasonTypeEnum'
                }
            ],
            description: `Specifies the reason a product is exempt from tax.

IT_N1 (N1 - Escluse ex art.15)

IT_N2_2 (N2.2 - Non soggette – altri casi)

IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)

IT_N4 (N4 - Esenti)

IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)

PL_ZW (ZW - Zwolniony)

PL_NP (NP - Nie podlega)`,
            nullable: true
        },
        TaxExemptionLegalReference: {
            type: 'string',
            description: 'Legal reference that states why this product is exempt from tax.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the product in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the product in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ConsumptionMoment: {
            title: 'Product consumption moment',
            allOf: [
                {
                    '$ref': '#/components/schemas/ProductConsumptionMomentEnum'
                }
            ],
            description: `Consumption moment of the product.

ServiceOrderEnd

ServiceOrderStart

PostingTimeUnit

NextTimeUnit`,
            'x-enumNames': ['ServiceOrderEnd', 'ServiceOrderStart', 'PostingTimeUnit', 'NextTimeUnit'],
            'x-enumDescriptions': ['', '', '', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Product'
} as const;

export const $ProductAgeCategoryPrice = {
    title: 'Age category price',
    required: ['AgeCategoryId', 'Prices'],
    type: 'object',
    properties: {
        AgeCategoryId: {
            type: 'string',
            description: 'Unique identifier of the age category.',
            format: 'uuid'
        },
        Prices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Amount'
            },
            description: 'Prices of the product for the resource category in the covered dates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductAgeCategoryPrice'
} as const;

export const $ProductCategory = {
    title: 'Product category',
    required: ['CreatedUtc', 'Id', 'Names', 'Ordering', 'ServiceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the category.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) of the resource category.',
            format: 'uuid'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the short name.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        ParentProductCategory: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ParentProductCategory'
                }
            ],
            description: '[Parent product category](https://mews-systems.gitbook.io/connector-api/operations/#parent-product-category).',
            nullable: true
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the product category update in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time of the product category creation in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Ordering: {
            type: 'integer',
            description: 'Ordering of the category, lower number corresponds to lower category (note that neither uniqueness nor continuous sequence is guaranteed).',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductCategory'
} as const;

export const $ProductCategoryFilterParameters = {
    title: 'ProductCategoryFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ProductCategoryIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Product category](https://mews-systems.gitbook.io/connector-api/operations/#product-category).',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource categories belong.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductCategoryFilterParameters'
} as const;

export const $ProductCategoryResult = {
    title: 'ProductCategoryResult',
    required: ['ProductCategories'],
    type: 'object',
    properties: {
        ProductCategories: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductCategory'
            },
            description: 'Product categories.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductCategoryResult'
} as const;

export const $ProductChargingModeEnum = {
    title: 'Product charging mode',
    enum: ['Once', 'PerTimeUnit', 'PerPersonPerTimeUnit', 'PerPerson'],
    type: 'string',
    description: `

Once

PerTimeUnit

PerPersonPerTimeUnit

PerPerson`,
    'x-enumNames': ['Once', 'PerTimeUnit', 'PerPersonPerTimeUnit', 'PerPerson'],
    'x-enumDescriptions': ['', '', '', '']
} as const;

export const $ProductClassifications = {
    title: 'Product classifications',
    type: 'object',
    properties: {
        Food: {
            type: 'boolean',
            description: 'Product is classified as food.'
        },
        Beverage: {
            type: 'boolean',
            description: 'Product is classified as beverage.'
        },
        Wellness: {
            type: 'boolean',
            description: 'Product is classified as wellness.'
        },
        CityTax: {
            type: 'boolean',
            description: 'Product is classified as city tax.'
        },
        Fee: {
            type: 'boolean',
            description: 'Product is classified as fee.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'ProductClassifications'
} as const;

export const $ProductConsumptionMomentEnum = {
    title: 'Product consumption moment',
    enum: ['ServiceOrderEnd', 'ServiceOrderStart', 'PostingTimeUnit', 'NextTimeUnit'],
    type: 'string',
    description: `

ServiceOrderEnd

ServiceOrderStart

PostingTimeUnit

NextTimeUnit`,
    'x-enumNames': ['ServiceOrderEnd', 'ServiceOrderStart', 'PostingTimeUnit', 'NextTimeUnit'],
    'x-enumDescriptions': ['', '', '', '']
} as const;

export const $ProductDeleteParameters = {
    title: 'Product delete parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ProductIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ProductIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the products to delete.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductDeleteParameters'
} as const;

export const $ProductFilterParameters = {
    title: 'Product parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ProductIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the product.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the products were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        IncludeDefault: {
            type: 'boolean',
            description: "Whether or not to include default products for the service, i.e. products which are standard includes and not true extras. For example, the night's stay would be the default product for a room reservation. These may be useful for accounting purposes but should not be displayed to customers for selection. If `ProductIds` are provided, `IncludeDefault` defaults to true, otherwise it defaults to false.",
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductFilterParameters'
} as const;

export const $ProductOptions = {
    title: 'Product options',
    required: ['BillAsPackage'],
    type: 'object',
    properties: {
        BillAsPackage: {
            type: 'boolean',
            description: 'Product should be displayed as part of a package.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'ProductOptions'
} as const;

export const $ProductOrderAdditionData = {
    title: 'Product order parameters',
    required: ['ProductId'],
    type: 'object',
    properties: {
        ProductId: {
            type: 'string',
            format: 'uuid'
        },
        Count: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        UnitAmount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.',
            nullable: true
        },
        StartUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductOrderAdditionData'
} as const;

export const $ProductOrderItemData = {
    title: 'ProductOrderItemData',
    type: 'object',
    properties: {
        ProductId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        AgeCategoryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductOrderItemData'
} as const;

export const $ProductPostingEnum = {
    title: 'Product posting',
    enum: ['Once', 'Daily'],
    type: 'string',
    description: `

Once

Daily`,
    'x-enumNames': ['Once', 'Daily'],
    'x-enumDescriptions': ['', '']
} as const;

export const $ProductPostingModeEnum = {
    title: 'Product posting mode',
    enum: ['Once', 'PerTimeUnit'],
    type: 'string',
    description: `

Once

PerTimeUnit`,
    'x-enumNames': ['Once', 'PerTimeUnit'],
    'x-enumDescriptions': ['', '']
} as const;

export const $ProductPriceUpdate = {
    title: 'Product price update',
    type: 'object',
    properties: {
        Value: {
            type: 'number',
            description: 'New value of the product on the interval. If not specified, removes all price adjustments within the interval.',
            format: 'double',
            nullable: true
        },
        FirstTimeUnitStartUtc: {
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        LastTimeUnitStartUtc: {
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 24 months if months.",
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductPriceUpdate'
} as const;

export const $ProductPriceUpdateParameters = {
    title: 'Product price update parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'PriceUpdates', 'ProductId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ProductId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the `Product`.',
            'x-schema-id': 'HybridIdentifier'
        },
        PriceUpdates: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductPriceUpdate'
            },
            description: 'Price adjustments for specific time intervals.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductPriceUpdateParameters'
} as const;

export const $ProductPricing = {
    title: 'Product pricing data discriminator',
    enum: ['Absolute', 'Relative'],
    type: 'string',
    description: ''
} as const;

export const $ProductPricingFilterParameters = {
    title: 'Product pricing filter parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc', 'ProductId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ProductId: {
            type: 'string',
            description: 'Unique identifier of the product.',
            format: 'uuid'
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/): 100 hours if hours, 100 days if days, or 24 months if months.",
            format: 'date-time'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductPricingFilterParameters'
} as const;

export const $ProductPricingResult = {
    title: 'Product pricing result',
    required: ['AgeCategoryPrices', 'BaseAmountPrices', 'ProductId', 'TimeUnitStartsUtc'],
    type: 'object',
    properties: {
        ProductId: {
            type: 'string',
            description: 'Unique identifier of the product.',
            format: 'uuid'
        },
        TimeUnitStartsUtc: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        BaseAmountPrices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Amount'
            },
            description: 'Base prices of the product for each time unit covered by the time interval.'
        },
        AgeCategoryPrices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductAgeCategoryPrice'
            },
            description: 'Age category prices.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductPricingResult'
} as const;

export const $ProductResult = {
    title: 'Product result',
    required: ['CustomerProducts', 'Products'],
    type: 'object',
    properties: {
        Products: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Product'
            },
            description: 'Products offered with the service.'
        },
        CustomerProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Product'
            },
            description: 'Products offered specifically to customers.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest product returned. This can be used in `Limitation` in a subsequent request to fetch the next batch of older products.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductResult'
} as const;

export const $ProductServiceOrderFilterParameters = {
    title: 'ProductServiceOrderFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ProductServiceOrderIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Product service order](https://mews-systems.gitbook.io/connector-api/operations/#product-service-order).',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).'
        },
        AccountIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        LinkedReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        States: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOrderState'
            },
            description: 'A list of product service order states to filter by.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductServiceOrderFilterParameters'
} as const;

export const $ProductServiceOrderResult = {
    title: 'ProductServiceOrderResult',
    required: ['ProductServiceOrders'],
    type: 'object',
    properties: {
        ProductServiceOrders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOrder'
            },
            description: 'The product service order of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ProductServiceOrderResult'
} as const;

export const $ProductTypeEnum = {
    title: 'Product type',
    enum: ['Product', 'Allowance'],
    type: 'string',
    description: `

Product

Allowance`,
    'x-enumNames': ['Product', 'Allowance'],
    'x-enumDescriptions': ['', '']
} as const;

export const $ProfileData = {
    title: 'Profile data',
    required: ['Discriminator'],
    type: 'object',
    properties: {
        Discriminator: {
            '$ref': '#/components/schemas/ProfileDataDiscriminator'
        },
        EnterpriseProfile: {
            title: 'Enterprise profile data',
            allOf: [
                {
                    '$ref': '#/components/schemas/EnterpriseProfileData'
                }
            ],
            description: 'Enterprise profile data.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'The profile data of the user who created or last updated the record.',
    'x-schema-id': 'ProfileData'
} as const;

export const $ProfileDataDiscriminator = {
    title: 'Profile data discriminator',
    enum: ['Personal', 'Enterprise', 'Platform', 'Static', 'Integration'],
    type: 'string'
} as const;

export const $Promotions = {
    title: 'Promotions',
    required: ['AfterCheckIn', 'AfterCheckOut', 'BeforeCheckIn', 'BeforeCheckOut', 'DuringCheckOut', 'DuringStay'],
    type: 'object',
    properties: {
        BeforeCheckIn: {
            type: 'boolean',
            description: 'Whether it can be promoted before check-in.'
        },
        AfterCheckIn: {
            type: 'boolean',
            description: 'Whether it can be promoted after check-in.'
        },
        DuringStay: {
            type: 'boolean',
            description: 'Whether it can be promoted during stay.'
        },
        BeforeCheckOut: {
            type: 'boolean',
            description: 'Whether it can be promoted before check-out.'
        },
        AfterCheckOut: {
            type: 'boolean',
            description: 'Whether it can be promoted after check-out.'
        },
        DuringCheckOut: {
            type: 'boolean',
            description: 'Whether it can be promoted during check-out.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'Promotions'
} as const;

export const $Rate = {
    title: 'Rate',
    required: ['GroupId', 'Id', 'IsActive', 'IsBaseRate', 'IsDefault', 'IsEnabled', 'IsPublic', 'Names', 'ServiceId', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate.',
            format: 'uuid'
        },
        GroupId: {
            type: 'string',
            description: 'Unique identifier of `Rate Group` where the rate belongs.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service`.',
            format: 'uuid'
        },
        BaseRateId: {
            type: 'string',
            description: 'Unique identifier of the base `Rate`.',
            format: 'uuid',
            nullable: true
        },
        IsBaseRate: {
            type: 'boolean',
            description: 'Indicates if this is a base rate.'
        },
        BusinessSegmentId: {
            type: 'string',
            description: 'Unique identifier of the `Business Segment`.',
            format: 'uuid',
            nullable: true
        },
        IsActive: {
            type: 'boolean',
            description: 'Indicates if this rate is active.'
        },
        IsEnabled: {
            type: 'boolean',
            description: 'Indicates if this rate is currently available to customers.'
        },
        IsPublic: {
            type: 'boolean',
            description: 'Indicates if this rate is publicly available.'
        },
        IsDefault: {
            type: 'boolean',
            description: 'Indicates if this rate is the default rate for the service. Assigned automatically to the first rate of a service.'
        },
        Type: {
            title: 'Rate type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateTypeEnum'
                }
            ],
            description: `Type of the rate.

Public

Private

AvailabilityBlock`,
            'x-enumNames': ['Public', 'Private', 'AvailabilityBlock'],
            'x-enumDescriptions': ['', '', '']
        },
        Name: {
            type: 'string',
            description: 'Name of the rate (in the default language).',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `Names` instead'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortName: {
            type: 'string',
            description: 'Short name of the rate (in the default language).',
            nullable: true
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Interval in which the rates were updated.',
            format: 'date-time'
        },
        ExternalNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the external name of the rate.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        Description: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description of the rate.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the rate from external system.',
            nullable: true
        },
        TaxExemptionReason: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaxExemptionReasonTypeEnum'
                }
            ],
            description: `Specifies the reason a rate is exempt from tax.

IT_N1 (N1 - Escluse ex art.15)

IT_N2_2 (N2.2 - Non soggette – altri casi)

IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)

IT_N4 (N4 - Esenti)

IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)

PL_ZW (ZW - Zwolniony)

PL_NP (NP - Nie podlega)`,
            nullable: true
        },
        TaxExemptionLegalReference: {
            type: 'string',
            description: 'Legal reference that states why this rate is exempt from tax.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Rate'
} as const;

export const $RateAddData = {
    title: 'Rate parameters',
    required: ['Names', 'PricingType', 'RateGroupId', 'ServiceId'],
    type: 'object',
    properties: {
        ServiceId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the service.',
            'x-schema-id': 'HybridIdentifier'
        },
        RateGroupId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the rate group under which rate is assigned.',
            'x-schema-id': 'HybridIdentifier'
        },
        IsEnabled: {
            type: 'boolean',
            description: 'Whether the rate is available to customers. `false` will be used as a default when not provided.',
            nullable: true
        },
        Type: {
            title: 'Rate Add Type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateAddTypeEnum'
                }
            ],
            description: `Type of the rate.

Public

Private`,
            'x-enumNames': ['Public', 'Private'],
            'x-enumDescriptions': ['', '']
        },
        AccountingCategoryId: {
            type: 'string',
            description: 'Unique identifier of the accounting category the rate belongs to.',
            format: 'uuid',
            nullable: true
        },
        BusinessSegmentId: {
            type: 'string',
            description: 'Unique identifier of the business segment.',
            format: 'uuid',
            nullable: true
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name of the rate.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the short name of the rate.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        ExternalNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the external name of the rate.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        PricingType: {
            title: 'Rate pricing discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/RatePricingDiscriminatorEnum'
                }
            ],
            description: `Discriminator in which field inside \`Pricing\` contains additional data.

BaseRatePricing

DependentRatePricing`,
            'x-enumNames': ['BaseRatePricing', 'DependentRatePricing'],
            'x-enumDescriptions': ['', '']
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the rate from external system.',
            nullable: true
        },
        Pricing: {
            title: 'Rate add pricing data parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateAddPricingDataParameters'
                }
            ],
            description: 'Contains additional data about pricing of the rate.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateAddData'
} as const;

export const $RateAddOptions = {
    title: 'RateAddOptions',
    type: 'object',
    properties: {
        HidePriceFromGuest: {
            type: 'boolean'
        },
        IsBonusPointsEligible: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateAddOptions'
} as const;

export const $RateAddParameters = {
    title: 'Rate add parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Rates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        Rates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateAddData'
            },
            description: 'Information about rates to be created.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateAddParameters'
} as const;

export const $RateAddPricingDataParameters = {
    title: 'Rate add pricing data parameters',
    type: 'object',
    properties: {
        BaseRatePricing: {
            title: 'Base rate pricing parameters with occupancy adjustments',
            allOf: [
                {
                    '$ref': '#/components/schemas/BaseRatePricingParameters'
                }
            ],
            description: "Additional data for rates with base rate pricing. Used when `PricingType` is `BaseRatePricing`. Defaults are applied if not specified: amount is set to 10000 in default Enterprise's currency and with its default accommodation tax rate code.",
            nullable: true
        },
        DependentRatePricing: {
            title: 'Dependent rate pricing parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DependentRatePricingParameters'
                }
            ],
            description: 'Additional data for rate with dependent rate pricing. Required when `PricingType` is `DependentRatePricing`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateAddPricingDataParameters'
} as const;

export const $RateAddResult = {
    title: 'Rate add result',
    type: 'object',
    properties: {
        Rates: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rate'
            },
            description: 'Rates that have been added.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateAddResult'
} as const;

export const $RateAddTypeEnum = {
    title: 'Rate Add Type',
    enum: ['Public', 'Private'],
    type: 'string',
    description: `

Public

Private`,
    'x-enumNames': ['Public', 'Private'],
    'x-enumDescriptions': ['', '']
} as const;

export const $RateCapacityOffsetUpdateParameters = {
    title: 'RateCapacityOffsetUpdateParameters',
    required: ['RateId'],
    type: 'object',
    properties: {
        RateId: {
            type: 'string',
            description: 'The unique identifier of the `Rate` to update.',
            format: 'uuid'
        },
        NegativeOccupancyAdjustment: {
            title: 'Decimal update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/DecimalUpdateValue'
                }
            ],
            description: "Amount added to the price when occupancy is less than the Space Category Capacity. Use a negative value to provide a discount for under-occupancy. Set to 'null' if not updated.",
            nullable: true
        },
        ExtraOccupancyAdjustment: {
            title: 'Decimal update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/DecimalUpdateValue'
                }
            ],
            description: 'Amount added to the price when the Space Category Capacity is exceeded.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateCapacityOffsetUpdateParameters'
} as const;

export const $RateDeleteParameters = {
    title: 'RateDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'RateIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        RateIds: {
            maxItems: 10,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Unique identifiers of the rates to be deleted.',
            'x-schema-id': 'HybridIdentifier'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateDeleteParameters'
} as const;

export const $RateExtent = {
    title: 'Rate extent',
    type: 'object',
    properties: {
        Rates: {
            type: 'boolean',
            description: 'Whether the response should contain rates.',
            nullable: true
        },
        RateGroups: {
            type: 'boolean',
            description: 'Whether the response should contain rate groups.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `rateGroups/getAll`'
        },
        AvailabilityBlockAssignments: {
            type: 'boolean',
            description: 'Whether the response should contain availability block assignments.'
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned.',
    'x-schema-id': 'RateExtent'
} as const;

export const $RateFilterParameters = {
    title: 'Rate filter parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Extent: {
            title: 'Rate extent',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateExtent'
                }
            ],
            description: 'Extent of data to be returned. If not specified, both `Rates` and `RateGroups` will be included.',
            nullable: true
        },
        RateIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which `Rate` was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the rates are requested.'
        },
        ExternalIdentifiers: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Identifiers of [Rate](https://mews-systems.gitbook.io/connector-api/operations/#rate) from external systems.',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted, or both types of record. If not specified, both active and deleted will be returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateFilterParameters'
} as const;

export const $RateForExtent = {
    title: 'Rate for extent',
    required: ['GroupId', 'Id', 'IsActive', 'IsBaseRate', 'IsEnabled', 'IsPublic', 'Names', 'ServiceId', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate.',
            format: 'uuid'
        },
        GroupId: {
            type: 'string',
            description: 'Unique identifier of `Rate Group` where the rate belongs.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service`.',
            format: 'uuid'
        },
        BaseRateId: {
            type: 'string',
            description: 'Unique identifier of the base `Rate`.',
            format: 'uuid',
            nullable: true
        },
        IsBaseRate: {
            type: 'boolean',
            description: 'Whether the rate is a base rate.'
        },
        BusinessSegmentId: {
            type: 'string',
            description: 'Unique identifier of the `Business Segment`.',
            format: 'uuid',
            nullable: true
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the rate is still active.'
        },
        IsEnabled: {
            type: 'boolean',
            description: 'Whether the rate is currently available to customers.'
        },
        IsPublic: {
            type: 'boolean',
            description: 'Whether the rate is publicly available.'
        },
        Type: {
            title: 'Rate type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateTypeEnum'
                }
            ],
            description: `Type of the rate.

Public

Private

AvailabilityBlock`,
            'x-enumNames': ['Public', 'Private', 'AvailabilityBlock'],
            'x-enumDescriptions': ['', '', '']
        },
        Name: {
            type: 'string',
            description: 'Name of the rate (in the default language).',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `Names` instead'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortName: {
            type: 'string',
            description: 'Short name of the rate (in the default language).',
            nullable: true
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Interval in which the rates were updated.',
            format: 'date-time'
        },
        ExternalNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the external name of the rate.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        Description: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description of the rate.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the rate from external system.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: `\`Rate\` entity, without some of the details, e.g. pricing.`,
    'x-schema-id': 'RateForExtent'
} as const;

export const $RateGroup = {
    title: 'Rate Group',
    required: ['CreatedUtc', 'Id', 'IsActive', 'Names', 'Ordering', 'ServiceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate group.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the rate group belongs to.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the rate group is still active.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the rate group in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the rate group in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Ordering: {
            type: 'integer',
            description: 'Ordering of the rate group.',
            format: 'int32'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the short name.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the rate group from external system.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateGroup'
} as const;

export const $RateGroupFilterParameters = {
    title: 'RateGroupFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        RateGroupIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Rate group](https://mews-systems.gitbook.io/connector-api/operations/#rate-group). Required if ServiceIds filter is not provided.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service). Required if RateGroupIds filter is not provided.',
            nullable: true
        },
        ExternalIdentifiers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Identifiers of [Rate group](https://mews-systems.gitbook.io/connector-api/operations/#rate-group) from external systems.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateGroupFilterParameters'
} as const;

export const $RateGroupOld = {
    title: 'Rate group (ver 2017-04-12)',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate group.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the Service that the rate group belongs to.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the rate group is still active.'
        },
        Name: {
            type: 'string',
            description: 'Name of the rate group.',
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'External identifier of the rate group.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateGroupOld'
} as const;

export const $RateGroupResult = {
    title: 'RateGroupResult',
    required: ['RateGroups'],
    type: 'object',
    properties: {
        RateGroups: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateGroup'
            },
            description: 'The filtered rate groups.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest rate group returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older rate groups.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateGroupResult'
} as const;

export const $RateOptions = {
    title: 'RateOptions',
    required: ['HidePriceFromGuest', 'IsBonusPointsEligible'],
    type: 'object',
    properties: {
        HidePriceFromGuest: {
            type: 'boolean'
        },
        IsBonusPointsEligible: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateOptions'
} as const;

export const $RatePriceUpdate = {
    title: 'Rate price update',
    type: 'object',
    properties: {
        CategoryId: {
            type: 'string',
            description: 'Unique identifier of the Resource category whose prices to update. If not specified, base price is updated.',
            format: 'uuid',
            nullable: true
        },
        Value: {
            type: 'number',
            description: 'New value of the rate on the interval. If not specified, removes all adjustments within the interval.',
            format: 'double',
            nullable: true
        },
        FirstTimeUnitStartUtc: {
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        LastTimeUnitStartUtc: {
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 24 months if months.",
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RatePriceUpdate'
} as const;

export const $RatePriceUpdateParameters = {
    title: 'Rate price update parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'PriceUpdates', 'RateId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        RateId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the `Rate`.',
            'x-schema-id': 'HybridIdentifier'
        },
        ProductId: {
            type: 'string',
            description: 'Unique identifier of the `Product`.',
            format: 'uuid',
            nullable: true
        },
        PriceUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RatePriceUpdate'
            },
            description: 'Price adjustments for specific time intervals.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RatePriceUpdateParameters'
} as const;

export const $RatePricing = {
    title: 'Rate pricing',
    required: ['AgeCategoryAdjustments', 'BaseAmountPrices', 'BasePrices', 'CategoryAdjustments', 'CategoryPrices', 'Currency', 'TimeUnitStartsUtc'],
    type: 'object',
    properties: {
        Currency: {
            minLength: 1,
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency).'
        },
        DatesUtc: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `TimeUnitStartsUtc` instead.'
        },
        TimeUnitStartsUtc: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.'
        },
        BasePrices: {
            type: 'array',
            items: {
                type: 'number',
                format: 'double'
            },
            deprecated: true,
            'x-deprecatedMessage': 'Use `BaseAmountPrices` instead.'
        },
        BaseAmountPrices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Amount'
            },
            description: 'Base prices of the rates for each time unit covered by the time interval.'
        },
        CategoryPrices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CategoryPricing'
            },
            description: 'Resource category prices.'
        },
        CategoryAdjustments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CategoryAdjustment'
            },
            description: 'Resource category adjustments.'
        },
        AgeCategoryAdjustments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AgeCategoryAdjustment'
            },
            description: "Assigns different pricing or occupancy based on the guest's age."
        },
        RelativeAdjustment: {
            type: 'number',
            description: 'Specific amount which shows the difference between this rate and the base rate.',
            format: 'double'
        },
        AbsoluteAdjustment: {
            type: 'number',
            description: 'Relative amount which shows the difference between this rate and the base rate.',
            format: 'double'
        },
        EmptyUnitAdjustment: {
            type: 'number',
            description: 'Price adjustment for when the resource booked with this rate is not full to capacity.',
            format: 'double'
        },
        ExtraUnitAdjustment: {
            type: 'number',
            description: 'Price adjustment for when the resource booked with this rate exceeds capacity.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RatePricing'
} as const;

export const $RatePricingData = {
    title: 'RatePricingData',
    type: 'object',
    properties: {
        Discriminator: {
            title: 'Rate pricing discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/RatePricingDiscriminatorEnum'
                }
            ],
            description: `

BaseRatePricing

DependentRatePricing`,
            readOnly: true,
            'x-enumNames': ['BaseRatePricing', 'DependentRatePricing'],
            'x-enumDescriptions': ['', '']
        },
        BaseRatePricing: {
            title: 'Base rate pricing',
            allOf: [
                {
                    '$ref': '#/components/schemas/BaseRatePricingData'
                }
            ],
            nullable: true
        },
        DependentRatePricing: {
            title: 'Dependent rate pricing',
            allOf: [
                {
                    '$ref': '#/components/schemas/DependentRatePricingData'
                }
            ],
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RatePricingData'
} as const;

export const $RatePricingDiscriminatorEnum = {
    title: 'Rate pricing discriminator',
    enum: ['BaseRatePricing', 'DependentRatePricing'],
    type: 'string',
    description: `

BaseRatePricing

DependentRatePricing`,
    'x-enumNames': ['BaseRatePricing', 'DependentRatePricing'],
    'x-enumDescriptions': ['', '']
} as const;

export const $RatePricingFilterParameters = {
    title: 'Rate pricing filter parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc', 'RateId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        RateId: {
            type: 'string',
            description: 'Unique identifier of the `Rate`.',
            format: 'uuid'
        },
        ProductId: {
            type: 'string',
            description: 'Unique identifier of the `Product`.',
            format: 'uuid',
            nullable: true
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 24 months if months.",
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RatePricingFilterParameters'
} as const;

export const $RateRestrictionResult = {
    title: 'Rate restriction result',
    required: ['DateRestrictions', 'EarlinessRestrictions', 'LengthRestrictions'],
    type: 'object',
    properties: {
        DateRestrictions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DateRestriction'
            },
            description: 'Date restrictions for the rate.'
        },
        EarlinessRestrictions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EarlinessRestriction'
            },
            description: 'Earliness restrictions for the rates that are only available up to before arrival.'
        },
        LengthRestrictions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LengthRestriction'
            },
            description: 'Length restrictions for the rate.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateRestrictionResult'
} as const;

export const $RateResult = {
    title: 'Rate result',
    required: ['RateGroups', 'RateRestrictions', 'Rates'],
    type: 'object',
    properties: {
        Rates: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rate'
            },
            description: 'Rates of the default service.'
        },
        RateGroups: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateGroupOld'
            },
            description: 'Rate groups of the default service.',
            deprecated: true,
            'x-deprecatedMessage': 'Use [rateGroups/getAll](https://mews-systems.gitbook.io/connector-api/operations/rategroups#request).'
        },
        RateRestrictions: {
            title: 'Rate restriction result',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateRestrictionResult'
                }
            ],
            deprecated: true,
            'x-deprecatedMessage': 'Use [restrictions/getAll](https://mews-systems.gitbook.io/connector-api/operations/restrictions#request).'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateResult'
} as const;

export const $RateSetData = {
    title: 'Set rate parameters',
    required: ['Names', 'PricingType', 'ServiceId', 'Type'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rate. If it matches an existing rate, that rate will be updated. If no match is found, an error will be returned.',
            format: 'uuid',
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Unique identifier of the rate in the external system. If `Id` is not provided and `ExternalIdentifier` matches an existing rate, the corresponding rate will be updated. If no match is found, a new rate will be created.',
            nullable: true
        },
        ServiceId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the service. Ignored in case of updating an existing rate.',
            'x-schema-id': 'HybridIdentifier'
        },
        RateGroupId: {
            type: 'string',
            description: 'Unique identifier of the rate group under which rate is assigned. Empty value means that rate is added to a default group or the current group is kept for update, respectively.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        IsEnabled: {
            type: 'boolean',
            description: 'Whether the rate is available to customers. `true` will be used as a default if not provided.',
            nullable: true
        },
        Type: {
            title: 'Rate Add Type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateAddTypeEnum'
                }
            ],
            description: `Type of the rate. \`Private\` will be used as a default if not provided.

Public

Private`
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name of the rate.',
            'x-schema-id': 'LocalizedStrings'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description.',
            nullable: true,
            'x-schema-id': 'LocalizedStrings'
        },
        PricingType: {
            title: 'Rate pricing discriminator',
            allOf: [
                {
                    '$ref': '#/components/schemas/RatePricingDiscriminatorEnum'
                }
            ],
            description: `Rate pricing type. Must match existing pricing type in case of update.

BaseRatePricing

DependentRatePricing`,
            'x-enumNames': ['BaseRatePricing', 'DependentRatePricing'],
            'x-enumDescriptions': ['', '']
        },
        Pricing: {
            title: 'Rate set pricing data parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/RateSetPricingDataParameters'
                }
            ],
            description: 'Contains additional data about pricing of the rate.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateSetData'
} as const;

export const $RateSetParameters = {
    title: 'Set rates parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Rates'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        Rates: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateSetData'
            },
            description: 'Rates to be added or updated.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateSetParameters'
} as const;

export const $RateSetPricingDataParameters = {
    title: 'Rate set pricing data parameters',
    type: 'object',
    properties: {
        BaseRatePricing: {
            title: 'Base rate pricing parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/BaseRatePricingWithoutAdjustmentsParameters'
                }
            ],
            description: "Additional data for rates with base rate pricing. Used when `PricingType` is `BaseRatePricing`. Defaults are applied if not specified: amount is set to 10000 in default Enterprise's currency and with its default accommodation tax rate code.",
            nullable: true
        },
        DependentRatePricing: {
            title: 'Dependent rate pricing parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DependentRatePricingParameters'
                }
            ],
            description: 'Additional data for rate with dependent rate pricing. Required when `PricingType` is `DependentRatePricing`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateSetPricingDataParameters'
} as const;

export const $RateSetResult = {
    title: 'Rate set result',
    type: 'object',
    properties: {
        Rates: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rate'
            },
            description: 'Rates that were added or updated.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RateSetResult'
} as const;

export const $RateTypeEnum = {
    title: 'Rate type',
    enum: ['Public', 'Private', 'AvailabilityBlock'],
    type: 'string',
    description: `

Public

Private

AvailabilityBlock`,
    'x-enumNames': ['Public', 'Private', 'AvailabilityBlock'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $RebateOrderItemData = {
    title: 'RebateOrderItemData',
    type: 'object',
    properties: {
        RebatedItemId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RebateOrderItemData'
} as const;

export const $RefundTypeEnum = {
    title: 'Refund type',
    enum: ['CreditCardPayment', 'AlternativePayment'],
    type: 'string',
    description: `

CreditCardPayment

AlternativePayment`,
    'x-enumNames': ['CreditCardPayment', 'AlternativePayment'],
    'x-enumDescriptions': ['', '']
} as const;

export const $RelativeProductPrice = {
    title: 'Relative product price',
    type: 'object',
    properties: {
        Multiplier: {
            type: 'number',
            format: 'double',
            deprecated: true
        },
        Target: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        TaxRateCodes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            deprecated: true
        },
        ProductIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true,
            deprecated: true
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'RelativeProductPrice'
} as const;

export const $RelativeTaxRateStrategy = {
    title: 'RelativeTaxRateStrategy',
    type: 'object',
    properties: {
        Value: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RelativeTaxRateStrategy'
} as const;

export const $ReleaseStrategyEnum = {
    title: 'Release strategy',
    enum: ['FixedRelease', 'RollingRelease', 'None'],
    type: 'string',
    description: `The strategy for automatic release of the availability block.

FixedRelease (The availability block is released at a fixed time.)

RollingRelease (Each availability adjustment is released at a fixed offset from its start.)

None (The availability block is not automatically released.)`,
    'x-enumNames': ['FixedRelease', 'RollingRelease', 'None'],
    'x-enumDescriptions': ['The availability block is released at a fixed time.', 'Each availability adjustment is released at a fixed offset from its start.', 'The availability block is not automatically released.']
} as const;

export const $ReleaseStrategyUpdateValue = {
    title: 'Release strategy update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Release strategy',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReleaseStrategyEnum'
                }
            ],
            description: `The strategy for automatic release of the availability block.

FixedRelease (The availability block is released at a fixed time.)

RollingRelease (Each availability adjustment is released at a fixed offset from its start.)

None (The availability block is not automatically released.)`,
            'x-enumNames': ['FixedRelease', 'RollingRelease', 'None'],
            'x-enumDescriptions': ['The availability block is released at a fixed time.', 'Each availability adjustment is released at a fixed offset from its start.', 'The availability block is not automatically released.']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReleaseStrategyUpdateValue'
} as const;

export const $Reservation = {
    title: 'Reservation (ver 2023-06-06)',
    required: ['AccountId', 'AccountType', 'CreatedUtc', 'CreatorProfileId', 'EndUtc', 'GroupId', 'Id', 'Number', 'Options', 'Origin', 'PersonCounts', 'RateId', 'RequestedResourceCategoryId', 'ScheduledEndUtc', 'ScheduledStartUtc', 'ServiceId', 'StartUtc', 'State', 'UpdatedUtc', 'UpdaterProfileId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service` that reservation is made against.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            description: 'Unique identifier of the Customer or Company who owns the reservation, i.e. the main guest linked to the reservation.',
            format: 'uuid'
        },
        AccountType: {
            '$ref': '#/components/schemas/AccountType'
        },
        CreatorProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who created the reservation.',
            format: 'uuid'
        },
        UpdaterProfileId: {
            type: 'string',
            description: 'Unique identifier of the user who updated the reservation.',
            format: 'uuid'
        },
        BookerId: {
            type: 'string',
            description: 'Unique identifier of the booker who made the reservation on behalf of the reservation owner, in the special case where the booker is also a registered customer in Mews.',
            format: 'uuid',
            nullable: true
        },
        Number: {
            minLength: 1,
            type: 'string',
            description: 'Confirmation number of the reservation in Mews.'
        },
        State: {
            title: 'Service order state',
            allOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderStateEnum'
                }
            ],
            description: `State of the reservation.

Inquired (Confirmed neither by the customer nor enterprise.)

Confirmed (Confirmed by both parties, before check-in.)

Started (Checked in.)

Processed (Checked out.)

Canceled (Canceled.)

Optional (Confirmed by enterprise but not by the guest (the enterprise is holding resource for the guest).)

Requested (Confirmed by the customer but not by the enterprise (waitlist).)`,
            'x-enumNames': ['Inquired', 'Confirmed', 'Started', 'Processed', 'Canceled', 'Optional', 'Requested'],
            'x-enumDescriptions': ['Confirmed neither by the customer nor enterprise.', 'Confirmed by both parties, before check-in.', 'Checked in.', 'Checked out.', 'Canceled.', 'Confirmed by enterprise but not by the guest (the enterprise is holding resource for the guest).', 'Confirmed by the customer but not by the enterprise (waitlist).']
        },
        Origin: {
            title: 'Service order origin',
            allOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderOriginEnum'
                }
            ],
            description: `Origin of the reservation.

Distributor (From the Mews Booking Engine or Booking Engine API.)

ChannelManager (From a channel manager.)

Commander (From Mews Operations.)

Import (From an import process.)

Connector (From the Mews Connector API.)

Navigator (From Mews Guest Services.)`,
            'x-enumNames': ['Distributor', 'ChannelManager', 'Commander', 'Import', 'Connector', 'Navigator'],
            'x-enumDescriptions': ['From the Mews Booking Engine or Booking Engine API.', 'From a channel manager.', 'From Mews Operations.', 'From an import process.', 'From the Mews Connector API.', 'From Mews Guest Services.']
        },
        CommanderOrigin: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderCommanderOriginEnum'
                }
            ],
            description: `Further detail about origin in case of Origin \`Commander\`.

InPerson

Channel

Phone

Email

Website

Message

CallCenter`,
            nullable: true
        },
        OriginDetails: {
            type: 'string',
            description: 'Details about the reservation `Origin`.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the reservation in UTC timezone.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the reservation in UTC timezone.',
            format: 'date-time'
        },
        CancelledUtc: {
            type: 'string',
            description: 'Cancellation date and time in UTC timezone.',
            format: 'date-time',
            nullable: true
        },
        VoucherId: {
            type: 'string',
            description: 'Unique identifier of the `Voucher` that has been used to create reservation.',
            format: 'uuid',
            nullable: true
        },
        BusinessSegmentId: {
            type: 'string',
            description: 'Identifier of the reservation `BusinessSegment`.',
            format: 'uuid',
            nullable: true
        },
        Options: {
            title: 'Service Order Options',
            allOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderOptions'
                }
            ],
            description: 'Options of the reservation.'
        },
        RateId: {
            type: 'string',
            description: 'Identifier of the reservation `Rate`.',
            format: 'uuid'
        },
        CreditCardId: {
            type: 'string',
            description: 'Unique identifier of the Credit card.',
            format: 'uuid',
            nullable: true
        },
        GroupId: {
            type: 'string',
            description: 'Unique identifier of the Reservation group.',
            format: 'uuid'
        },
        RequestedResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the Resource category.',
            format: 'uuid'
        },
        AssignedResourceId: {
            type: 'string',
            description: 'Identifier of the assigned Resource.',
            format: 'uuid',
            nullable: true
        },
        AvailabilityBlockId: {
            type: 'string',
            description: 'Unique identifier of the Availability block the reservation is assigned to.',
            format: 'uuid',
            nullable: true
        },
        PartnerCompanyId: {
            type: 'string',
            description: 'Identifier of the `Company` on behalf of which the reservation was made.',
            format: 'uuid',
            nullable: true
        },
        TravelAgencyId: {
            type: 'string',
            description: 'Identifier of the Travel Agency (`Company`) that mediated the reservation.',
            format: 'uuid',
            nullable: true
        },
        AssignedResourceLocked: {
            type: 'boolean',
            description: 'Whether the reservation is locked to the assigned Resource and cannot be moved.'
        },
        ChannelNumber: {
            type: 'string',
            description: 'Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number).',
            nullable: true
        },
        ChannelManagerNumber: {
            type: 'string',
            description: 'Unique number of the reservation within the reservation group.',
            nullable: true
        },
        CancellationReason: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderCancellationReasonEnum'
                }
            ],
            description: `Cancellation reason of the reservation.

Other

ConfirmationMissed

BookedElsewhere

ForceMajeure

GuestComplaint

NoShow

PriceTooHigh

ServiceNotAvailable

InputError

InvalidPayment

TravelAgency

RequestedByGuest

Update

BookingAbandoned

RequestedByBooker`,
            nullable: true
        },
        ReleasedUtc: {
            type: 'string',
            description: 'Date when the optional reservation is released in UTC timezone.',
            format: 'date-time',
            nullable: true
        },
        StartUtc: {
            minLength: 1,
            type: 'string',
            description: "Reservation start or check-in time (if it's earlier than scheduled start) in UTC timezone in ISO 8601 format.",
            format: 'date-time',
            deprecated: true,
            'x-deprecatedMessage': 'Use `ScheduledStartUtc` and `ActualStartUtc` instead.'
        },
        EndUtc: {
            minLength: 1,
            type: 'string',
            description: 'Scheduled end time of reservation in UTC timezone in ISO 8601 format',
            format: 'date-time',
            deprecated: true,
            'x-deprecatedMessage': 'Use `ScheduledEndUtc` and `ActualEndUtc` instead.'
        },
        ScheduledStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Scheduled start time of reservation in UTC timezone.',
            format: 'date-time'
        },
        ActualStartUtc: {
            type: 'string',
            description: 'Actual customer check-in time of reservation in UTC timezone.',
            format: 'date-time',
            nullable: true
        },
        ScheduledEndUtc: {
            minLength: 1,
            type: 'string',
            description: 'Scheduled end time of reservation in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ActualEndUtc: {
            type: 'string',
            description: 'Actual end time of reservation in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        Purpose: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationPurposeEnum'
                }
            ],
            description: `Purpose of the reservation.

Leisure

Business

Student`,
            nullable: true
        },
        QrCodeData: {
            type: 'string',
            description: 'QR code data of the reservation.',
            nullable: true
        },
        PersonCounts: {
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationPersonCount'
            },
            description: 'Number of people per age category the reservation was booked for.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Reservation'
} as const;

export const $ReservationAdditionParameters = {
    title: 'ReservationAdditionParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Reservations', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service` to be reserved.',
            format: 'uuid'
        },
        GroupId: {
            type: 'string',
            description: 'Unique identifier of the `ReservationGroup` where the reservations are added. If not specified, a new group is created.',
            format: 'uuid',
            nullable: true
        },
        GroupName: {
            type: 'string',
            description: 'Name of the `ReservationGroup` where the reservations are added to. If `GroupId` is specified, this field is ignored. If not specified, the group name is automatically created.',
            nullable: true
        },
        Reservations: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationData'
            },
            description: 'Parameters of the new reservations.'
        },
        CheckRateApplicability: {
            type: 'boolean',
            description: 'Indicates whether the system will check and prevent a booking being made using a restricted rate, e.g. a private rate. The default is `true`, i.e. the system will normally check for this unless the property is set to `false`.',
            nullable: true
        },
        CheckOverbooking: {
            type: 'boolean',
            description: 'Indicates whether the system will check and prevent a booking being made in the case of an overbooking, i.e. where there is an insufficient number of resources available to meet the request. The default is `true`, i.e. the system will normally check for this unless the property is set to `false`.',
            nullable: true
        },
        SendConfirmationEmail: {
            type: 'boolean',
            description: 'Whether the confirmation email is sent. Default value is `true`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationAdditionParameters'
} as const;

export const $ReservationAdditionResult = {
    title: 'ReservationAdditionResult',
    required: ['Reservations'],
    type: 'object',
    properties: {
        Reservations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AddedReservation'
            },
            description: 'The added reservations.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationAdditionResult'
} as const;

export const $ReservationCancellationParameters = {
    title: 'ReservationCancellationParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the reservation to cancel.'
        },
        ReservationId: {
            type: 'string',
            format: 'uuid',
            deprecated: true
        },
        PostCancellationFee: {
            type: 'boolean',
            description: 'Whether the cancellation fees should be charged according to rate conditions. The default is `false`.',
            nullable: true
        },
        SendEmail: {
            type: 'boolean',
            description: 'Whether the cancellation email should be sent. The default is `true`.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes describing the reason for the cancellation.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationCancellationParameters'
} as const;

export const $ReservationData = {
    title: 'Reservation parameters',
    required: ['CustomerId', 'EndUtc', 'PersonCounts', 'RateId', 'RequestedCategoryId', 'StartUtc'],
    type: 'object',
    properties: {
        Identifier: {
            type: 'string',
            description: 'Identifier of the reservation within the transaction.',
            nullable: true
        },
        ChannelNumber: {
            type: 'string',
            nullable: true
        },
        State: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderState'
                }
            ],
            description: 'State of the newly created reservation (either `Optional`, `Inquired` or `Confirmed`). If not specified, `Confirmed` is used.',
            nullable: true
        },
        StartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Reservation start in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        EndUtc: {
            minLength: 1,
            type: 'string',
            description: 'Reservation end in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        ReleasedUtc: {
            type: 'string',
            description: 'Release date and time of an unconfirmed reservation in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        AdultCount: {
            type: 'integer',
            format: 'int32',
            deprecated: true,
            'x-deprecatedMessage': 'Use `PersonCounts` instead.'
        },
        ChildCount: {
            type: 'integer',
            format: 'int32',
            deprecated: true,
            'x-deprecatedMessage': 'Use `PersonCounts` instead.'
        },
        PersonCounts: {
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationPersonCount'
            },
            description: 'Number of people per age category the reservation was booked for. At least one category with valid count must be provided.'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer` who owns the reservation.',
            format: 'uuid'
        },
        BookerId: {
            type: 'string',
            description: 'Unique identifier of the `Customer` on whose behalf the reservation was made.',
            format: 'uuid',
            nullable: true
        },
        RequestedCategoryId: {
            type: 'string',
            description: 'Identifier of the requested `ResourceCategory`.',
            format: 'uuid'
        },
        RateId: {
            type: 'string',
            description: 'Identifier of the reservation `Rate`.',
            format: 'uuid'
        },
        VoucherCode: {
            type: 'string',
            description: 'Voucher code value providing access to specified private `Rate` applied to this reservation.',
            nullable: true
        },
        CreditCardId: {
            type: 'string',
            description: 'Identifier of `CreditCard` belonging either to the `Customer` who owns the reservation or to the `Booker`.',
            format: 'uuid',
            nullable: true
        },
        TravelAgencyId: {
            type: 'string',
            description: 'Identifier of the `Company` that mediated the reservation.',
            format: 'uuid',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Identifier of the `Company` on behalf of which the reservation was made.',
            format: 'uuid',
            nullable: true
        },
        BusinessSegmentId: {
            type: 'string',
            description: 'Identifier of the reservation `BusinessSegment`.',
            format: 'uuid',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes.',
            nullable: true
        },
        TimeUnitAmount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Amount of each night of the reservation.',
            nullable: true
        },
        TimeUnitPrices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PerUnitPriceParameters'
            },
            description: 'Prices for time units of the reservation. E.g. prices for the first or second night.',
            nullable: true
        },
        ProductOrders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductOrderAdditionData'
            },
            description: 'Parameters of the products ordered together with the reservation.',
            nullable: true
        },
        AvailabilityBlockId: {
            type: 'string',
            description: 'Unique identifier of the `AvailabilityBlock` the reservation is assigned to.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationData'
} as const;

export const $ReservationDataParameters = {
    title: 'ReservationDataParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Reservations', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service` to be priced.',
            format: 'uuid'
        },
        Reservations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationData'
            },
            description: 'Parameters of the reservations to price. Note that `CustomerId` is not required when pricing reservations.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationDataParameters'
} as const;

export const $ReservationExtent = {
    title: 'Reservation extent',
    type: 'object',
    properties: {
        Reservations: {
            type: 'boolean',
            description: 'Whether the response should contain reservations.',
            nullable: true
        },
        ReservationGroups: {
            type: 'boolean',
            description: 'Whether the response should contain groups of the reservations.',
            nullable: true
        },
        Customers: {
            type: 'boolean',
            description: 'Whether the response should contain customers of the reservations.',
            nullable: true
        },
        CustomerAdresses: {
            type: 'boolean',
            description: 'Whether the response should contain addresses of the customers.',
            nullable: true
        },
        CustomerIdentityDocuments: {
            type: 'boolean',
            description: 'Whether the response should contain identity documents of the customers.',
            nullable: true
        },
        Services: {
            type: 'boolean',
            description: 'Whether the response should contain services reserved by the reservations.',
            nullable: true
        },
        Products: {
            type: 'boolean',
            description: 'Whether the response should contain products orderable with the reservations.',
            nullable: true
        },
        BusinessSegments: {
            type: 'boolean',
            description: 'Whether the response should contain business segmentation.',
            nullable: true
        },
        Resources: {
            type: 'boolean',
            description: 'Whether the response should contain resources.',
            nullable: true
        },
        ResourceCategories: {
            type: 'boolean',
            description: 'Whether the response should contain resource categories.',
            nullable: true
        },
        ResourceCategoryAssignments: {
            type: 'boolean',
            description: 'Whether the response should contain assignments of the resources to categories.',
            nullable: true
        },
        Rates: {
            type: 'boolean',
            description: 'Whether the response should contain rates and rate groups.',
            nullable: true
        },
        Items: {
            type: 'boolean',
            description: 'Whether the response should contain accounting items.',
            nullable: true
        },
        OrderItems: {
            type: 'boolean',
            description: 'Whether the response should contain reservation items.',
            nullable: true
        },
        Notes: {
            type: 'boolean',
            description: 'Whether the response should contain notes.',
            nullable: true
        },
        QrCodeData: {
            type: 'boolean',
            description: 'Whether the response should contain QR code data.',
            nullable: true
        },
        Companies: {
            type: 'boolean',
            description: 'Whether the response should contain companies.',
            nullable: true
        },
        AccountingStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingState'
            },
            description: 'States the items should be in. If not specified, items in `Open` or `Closed` states are returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned. E.g. it is possible to specify that together with the reservations, customers, groups and rates should be also returned.',
    'x-schema-id': 'ReservationExtent'
} as const;

export const $ReservationFilterParameters = {
    title: 'ReservationFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Extent', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) from which the reservations are requested.'
        },
        ServiceId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            deprecated: true
        },
        GroupIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group).',
            nullable: true
        },
        ReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2017-04-12).',
            nullable: true
        },
        CustomerIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer) which own the reservations.',
            nullable: true
        },
        AssignedResourceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource) assigned to the reservations.',
            nullable: true
        },
        RateIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate) assigned to the reservations.',
            nullable: true
        },
        BusinessSegmentIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Business segments](https://mews-systems.gitbook.io/connector-api/operations/businesssegments/#business-segment) assigned to the reservations.',
            nullable: true
        },
        ChannelNumbers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Set of numbers or references used by the Channel (i.e. OTA, GDS, CRS, etc.) in case the reservation group originates there, e.g. Booking.com confirmation numbers.',
            nullable: true
        },
        Numbers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Confirmation numbers of [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2017-04-12).',
            nullable: true
        },
        StartUtc: {
            type: 'string',
            description: 'Start of the interval in UTC timezone in ISO 8601 format. Required when used in conjunction with the TimeFilter or States search parameter.',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End of the interval in UTC timezone in ISO 8601 format. Required when used in conjunction with the TimeFilter or States search parameter.',
            format: 'date-time',
            nullable: true
        },
        TimeFilter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReservationTimeFilter'
                }
            ],
            description: 'Time filter of the interval. If not specified, reservations Colliding with the interval are returned.',
            nullable: true
        },
        Currency: {
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.',
            format: 'currency',
            nullable: true
        },
        States: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOrderStateOld'
            },
            description: 'States the reservations should be in. If not specified, reservations in Confirmed, Started or Processed states or reservations specified by ReservationIds regardless of state are returned.',
            nullable: true
        },
        Extent: {
            title: 'Reservation extent',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationExtent'
                }
            ],
            description: 'Extent of data to be returned. E.g. it is possible to specify that together with the reservations, customers, groups and rates should be also returned.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationFilterParameters'
} as const;

export const $ReservationGroup = {
    title: 'Reservation Group',
    required: ['EnterpriseId', 'Id', 'Name'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the reservation group.',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the reservation group, might be empty or same for multiple groups.'
        },
        ChannelManager: {
            type: 'string',
            description: 'Name of the corresponding channel manager.',
            nullable: true
        },
        ChannelManagerGroupNumber: {
            type: 'string',
            description: 'Identifier of the channel manager.',
            nullable: true
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise) the reservation group belongs to.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationGroup'
} as const;

export const $ReservationGroupFilterParameters = {
    title: 'ReservationGroupFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ReservationGroupIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Reservation Group](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group). Required if no other filter is provided.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationGroupFilterParameters'
} as const;

export const $ReservationGroupOld = {
    title: 'Reservation groups (ver 2017-04-12)',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the reservation group.',
            format: 'uuid'
        },
        Name: {
            type: 'string',
            description: 'Name of the reservation group.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationGroupOld'
} as const;

export const $ReservationGroupResult = {
    title: 'ReservationGroupResult',
    required: ['ReservationGroups'],
    type: 'object',
    properties: {
        ReservationGroups: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationGroup'
            },
            description: 'The filtered reservation groups.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest reservation group returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older reservation groups.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationGroupResult'
} as const;

export const $ReservationItemParameters = {
    title: 'ReservationItemParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the reservation.'
        },
        Currency: {
            type: 'string',
            description: 'ISO-4217 code of the [Currency](https://mews-systems.gitbook.io/connector-api/operations/currencies/#currency) the item costs should be converted to.',
            format: 'currency',
            nullable: true
        },
        AccountingStates: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'States the items should be in. If not specified, items in Open or Closed states are returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationItemParameters'
} as const;

export const $ReservationItemResult = {
    title: 'ReservationItemResult',
    required: ['Reservations'],
    type: 'object',
    properties: {
        Reservations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationItems'
            },
            description: 'The reservations with their items.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationItemResult'
} as const;

export const $ReservationItems = {
    title: 'Reservation items',
    required: ['Items', 'OrderItems'],
    type: 'object',
    properties: {
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingItem'
            },
            description: 'Accounting items associated with the reservation.'
        },
        OrderItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItemOld'
            },
            description: 'Order items associated with the reservation.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationItems'
} as const;

export const $ReservationOld = {
    title: 'Reservation (ver 2017-04-12)',
    required: ['AssignedResourceLocked', 'CompanionIds', 'CreatedUtc', 'CustomerId', 'EndUtc', 'GroupId', 'Id', 'Number', 'Options', 'Origin', 'OwnerId', 'PersonCounts', 'RateId', 'RequestedCategoryId', 'ServiceId', 'StartUtc', 'State', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the Service that is reserved.',
            format: 'uuid'
        },
        GroupId: {
            type: 'string',
            description: 'Unique identifier of the Reservation group.',
            format: 'uuid'
        },
        Number: {
            minLength: 1,
            type: 'string',
            description: 'Confirmation number of the reservation in Mews.'
        },
        ChannelNumber: {
            type: 'string',
            description: 'Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number).',
            nullable: true
        },
        ChannelManagerNumber: {
            type: 'string',
            description: 'Unique number of the reservation within the reservation group.',
            nullable: true
        },
        ChannelManagerGroupNumber: {
            type: 'string',
            description: 'Number of the reservation group within a Channel manager that transferred the reservation from Channel to Mews.',
            nullable: true
        },
        ChannelManager: {
            type: 'string',
            description: 'Name of the Channel manager (e.g. AvailPro, SiteMinder, TravelClick, etc).',
            nullable: true
        },
        State: {
            '$ref': '#/components/schemas/ServiceOrderStateOld'
        },
        Origin: {
            '$ref': '#/components/schemas/ReservationOldOrigin'
        },
        OriginDetails: {
            type: 'string',
            description: 'Details about the reservation origin.',
            nullable: true
        },
        Purpose: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReservationPurpose'
                }
            ],
            description: 'Purpose of the reservation.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the reservation in UTC timezone in ISO 8601 format.'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the reservation in UTC timezone in ISO 8601 format.'
        },
        CancelledUtc: {
            type: 'string',
            description: 'Cancellation date and time in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        StartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the reservation in UTC timezone in ISO 8601 format. This is either the scheduled reservation start time, or the actual customer check-in time if this is earlier than the scheduled start time.'
        },
        EndUtc: {
            minLength: 1,
            type: 'string',
            description: 'End of the reservation (departure) in UTC timezone in ISO 8601 format.'
        },
        ReleasedUtc: {
            type: 'string',
            description: 'Date when the optional reservation is released in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        RequestedCategoryId: {
            type: 'string',
            description: 'Identifier of the requested Resource category.',
            format: 'uuid'
        },
        AssignedSpaceId: {
            type: 'string',
            description: 'Identifier of the assigned Space.',
            format: 'uuid',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `AssignedResourceId` instead.'
        },
        AssignedSpaceLocked: {
            type: 'boolean',
            description: 'Whether the reservation is locked to the assigned Space and cannot be moved.',
            deprecated: true,
            'x-deprecatedMessage': 'Use `AssignedResourceLocked` instead.'
        },
        AssignedResourceId: {
            type: 'string',
            description: 'Identifier of the assigned Resource.',
            format: 'uuid',
            nullable: true
        },
        AssignedResourceLocked: {
            type: 'boolean',
            description: 'Whether the reservation is locked to the assigned Resource and cannot be moved.'
        },
        BusinessSegmentId: {
            type: 'string',
            description: 'Identifier of the reservation Business segment.',
            format: 'uuid',
            nullable: true
        },
        CompanyId: {
            type: 'string',
            description: 'Identifier of the Company on behalf of which the reservation was made.',
            format: 'uuid',
            nullable: true
        },
        TravelAgencyId: {
            type: 'string',
            description: 'Identifier of the Company that mediated the reservation.',
            format: 'uuid',
            nullable: true
        },
        AvailabilityBlockId: {
            type: 'string',
            description: 'Unique identifier of the Availability block the reservation is assigned to.',
            format: 'uuid',
            nullable: true
        },
        RateId: {
            type: 'string',
            description: 'Identifier of the reservation Rate.',
            format: 'uuid'
        },
        VoucherId: {
            type: 'string',
            description: 'Unique identifier of the Voucher that has been used to create reservation.',
            format: 'uuid',
            nullable: true
        },
        CreditCardId: {
            type: 'string',
            description: 'Unique identifier of the Credit card.',
            format: 'uuid',
            nullable: true
        },
        CancellationReason: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CancellationReason'
                }
            ],
            description: 'Cancellation reason of the reservation.',
            nullable: true
        },
        AdultCount: {
            type: 'integer',
            description: 'Count of adults the reservation was booked for.',
            format: 'int32',
            deprecated: true,
            'x-deprecatedMessage': 'Use `PersonCounts` instead.'
        },
        ChildCount: {
            type: 'integer',
            description: 'Count of children the reservation was booked for.',
            format: 'int32',
            deprecated: true,
            'x-deprecatedMessage': 'Use `PersonCounts` instead.'
        },
        PersonCounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationPersonCount'
            },
            description: 'Number of people per age category the reservation was booked for.'
        },
        OwnerId: {
            type: 'string',
            description: 'Unique identifier of the Customer or Company who owns the reservation.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the Customer who owns the reservation.',
            format: 'uuid',
            deprecated: true,
            'x-deprecatedMessage': 'Use `OwnerId` instead.'
        },
        BookerId: {
            type: 'string',
            description: 'Unique identifier of the Customer on whose behalf the reservation was made.',
            format: 'uuid',
            nullable: true
        },
        CompanionIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Customer`s that will use the resource.',
            deprecated: true,
            'x-deprecatedMessage': 'Use `companionships/getAll` instead.'
        },
        ChannelManagerId: {
            type: 'string',
            description: 'Channel Manager number.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `ChannelManagerNumber` instead.'
        },
        Options: {
            title: 'Reservation options',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationOptions'
                }
            ],
            description: 'Options of the reservation.'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'ReservationOld'
} as const;

export const $ReservationOldOrigin = {
    title: 'Reservation origin (ver 2017-04-12)',
    enum: ['Distributor', 'ChannelManager', 'Import', 'Connector', 'Navigator', 'CommanderInPerson', 'CommanderChannel', 'CommanderPhone', 'CommanderEmail', 'CommanderWebsite', 'CommanderMessage', 'CommanderCallCenter'],
    type: 'string',
    'x-enumDescriptions': ['From the Mews Booking Engine or Booking Engine API.', 'From a channel manager.', 'From an import process.', 'From the Mews Connector API.', 'From Mews Guest Services.', 'From Mews Operations, in person.', 'From Mews Operations, via channel.', 'From Mews Operations, via telephone.', 'From Mews Operations, via email.', 'From Mews Operations, via website.', 'From Mews Operations, via message person.', 'From Mews Operations, via call center.']
} as const;

export const $ReservationOptions = {
    title: 'Reservation options',
    required: ['AllCompanionsCheckedIn', 'AnyCompanionCheckedIn', 'OwnerCheckedIn'],
    type: 'object',
    properties: {
        OwnerCheckedIn: {
            type: 'boolean',
            description: 'Owner of the reservation checked in.'
        },
        AllCompanionsCheckedIn: {
            type: 'boolean',
            description: 'All companions of the reservation checked in.'
        },
        AnyCompanionCheckedIn: {
            type: 'boolean',
            description: 'Any companion of the reservation checked in.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationOptions'
} as const;

export const $ReservationPersonCount = {
    title: 'Age category parameters',
    required: ['AgeCategoryId', 'Count'],
    type: 'object',
    properties: {
        AgeCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Age category](https://mews-systems.gitbook.io/connector-api/operations/agecategories#age-category).',
            format: 'uuid'
        },
        Count: {
            type: 'integer',
            description: 'Number of people of a given age category. Only positive value is accepted.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationPersonCount'
} as const;

export const $ReservationPrice = {
    title: 'Reservation price',
    required: ['TotalAmount'],
    type: 'object',
    properties: {
        Identifier: {
            type: 'string',
            description: 'Identifier of the reservation within the transaction.',
            nullable: true
        },
        TotalAmount: {
            title: 'Amount',
            allOf: [
                {
                    '$ref': '#/components/schemas/Amount'
                }
            ],
            description: 'Total price of the reservation.'
        },
        Total: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Total price of the reservation.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `TotalAmount` instead.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationPrice'
} as const;

export const $ReservationPricingResult = {
    title: 'ReservationPricingResult',
    required: ['ReservationPrices'],
    type: 'object',
    properties: {
        ReservationPrices: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationPrice'
            },
            description: 'The reservation prices.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationPricingResult'
} as const;

export const $ReservationProcessingParameters = {
    title: 'ReservationProcessingParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation to process.',
            format: 'uuid'
        },
        CloseBills: {
            type: 'boolean',
            description: 'Whether closable bills of the reservation members should be automatically closed.',
            nullable: true
        },
        AllowOpenBalance: {
            type: 'boolean',
            description: 'Whether non-zero consumed balance of all reservation members is allowed.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Required if AllowOpenBalance set to true. Used to provide reason for closing with unbalanced bill.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationProcessingParameters'
} as const;

export const $ReservationProductParameters = {
    title: 'ReservationProductParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Count', 'ProductId', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        ProductId: {
            type: 'string',
            description: 'Unique identifier of the [Product](https://mews-systems.gitbook.io/connector-api/operations/products/#product).',
            format: 'uuid'
        },
        Count: {
            type: 'integer',
            description: 'The amount of the products to be added. Note that if the product is charged e.g. per night, count 1 means a single product every night. Count 2 means two products every night.',
            format: 'int32'
        },
        UnitAmount: {
            title: 'Amount parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/AmountParameters'
                }
            ],
            description: 'Price of the product that overrides the price defined in Mews.',
            nullable: true
        },
        StartUtc: {
            type: 'string',
            description: 'Product start in UTC timezone in ISO 8601 format. For products with charging Once and PerPerson must be set to same value as EndUtc.',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'Product end in UTC timezone in ISO 8601 format. For products with charging Once and PerPerson must be set to same value as StartUtc.',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationProductParameters'
} as const;

export const $ReservationPurpose = {
    title: 'Reservation purpose',
    enum: ['Leisure', 'Business', 'Student'],
    type: 'string'
} as const;

export const $ReservationPurposeEnum = {
    title: 'Reservation purpose',
    enum: ['Leisure', 'Business', 'Student'],
    type: 'string',
    description: `

Leisure

Business

Student`,
    'x-enumNames': ['Leisure', 'Business', 'Student'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $ReservationQrCodeData = {
    title: 'Reservation QR code data',
    type: 'object',
    properties: {
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        Data: {
            type: 'string',
            description: 'Reservation data for QR code generation.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationQrCodeData'
} as const;

export const $ReservationResult = {
    title: 'ReservationResult',
    type: 'object',
    properties: {
        Reservations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationOld'
            },
            description: 'The reservations that collide with the specified interval.',
            nullable: true
        },
        ReservationGroups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationGroupOld'
            },
            description: 'Reservation groups that the reservations are members of.',
            nullable: true
        },
        Customers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Customer'
            },
            description: 'Customers that are members of the reservations.',
            nullable: true
        },
        Services: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Service'
            },
            description: 'Services that have been reserved.',
            nullable: true
        },
        Products: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Product'
            },
            description: 'Products orderable with reservations.',
            nullable: true
        },
        Resources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Resource'
            },
            description: 'Assigned resources of the reservations.',
            nullable: true
        },
        ResourceCategories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategory'
            },
            description: 'Resource categories of the resources.',
            nullable: true
        },
        ResourceCategoryAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategoryAssignment'
            },
            description: 'Assignments of the resources to categories.',
            nullable: true
        },
        BusinessSegments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BusinessSegment'
            },
            description: 'Business segments of the reservations.',
            nullable: true
        },
        Rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateForExtent'
            },
            description: 'Rates of the reservations.',
            nullable: true
        },
        RateGroups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateGroupOld'
            },
            description: 'Rate groups of the reservation rates.',
            nullable: true
        },
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccountingItem'
            },
            description: 'Accounting items that are part of the reservations.',
            nullable: true
        },
        OrderItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItemOld'
            },
            description: 'Revenue items of the reservations.',
            nullable: true
        },
        Notes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderNote'
            },
            description: 'Notes of the reservations.',
            nullable: true
        },
        QrCodeData: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationQrCodeData'
            },
            description: 'QR code data of the reservations.',
            nullable: true
        },
        Companies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Company'
            },
            description: 'Companies related to the reservations.',
            nullable: true
        },
        ResourceAccessTokens: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceAccessToken'
            },
            description: 'Resource access tokens for the reservations.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest reservation returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older reservations.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationResult'
} as const;

export const $ReservationServiceOrderFilterParameters = {
    title: 'ReservationServiceOrderFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ReservationIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Reservations](https://mews-systems.gitbook.io/connector-api/operations/#reservation-ver-2023-06-06).',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service). If not provided, all bookable services are used.',
            nullable: true
        },
        ReservationGroupIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Reservation groups](https://mews-systems.gitbook.io/connector-api/operations/#reservation-group).',
            nullable: true
        },
        AccountIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of accounts (currently only [Customers](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer), in the future also [Companies](https://mews-systems.gitbook.io/connector-api/operations/companies/#company)) the reservation is associated with.',
            nullable: true
        },
        PartnerCompanyIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Companies` on behalf of which the reservations were made.',
            nullable: true
        },
        TravelAgencyIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Identifier of the Travel Agencies (`Company`) that mediated the reservations.',
            nullable: true
        },
        Numbers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Reservation confirmation numbers.',
            nullable: true
        },
        ChannelNumbers: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Numbers or references used by a Channel (OTA, GDS, CRS, etc.) in case the reservation group originates there, e.g. Booking.com confirmation numbers.',
            nullable: true
        },
        AssignedResourceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources#resource) assigned to the reservations.',
            nullable: true
        },
        AvailabilityBlockIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Availability blocks` assigned to the reservations.',
            nullable: true
        },
        CreatedUtc: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the [Reservation](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-ver-2023-06-06) was created.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Reservations` were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        CollidingUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: "Interval in which the reservations are active. This is defined for a `Reservation` as the period between the reservation's scheduled start time `ScheduledStartUtc` and its scheduled end time `EndUtc`. Reservation is selected if any part of its interval intersects with the interval specified in `CollidingUtc",
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ScheduledStartUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval filtering Reservations by their scheduled start time. Cannot be used with `ActualStartUtc`.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActualStartUtc: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval filtering Reservations by their actual start (check-in) time. Cannot be used with `ScheduledStartUtc`. Note that the filter applies only to started or processed reservations.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActualEndUtc: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval filtering Reservations by their actual end (check-out) time. Cannot be used with `ScheduledEndUtc`.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ScheduledEndUtc: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval filtering Reservations by their scheduled end time. Cannot be used with `ActualEndUtc`.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        States: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOrderStateEnum'
            },
            description: 'A list of service order states to filter by.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationServiceOrderFilterParameters'
} as const;

export const $ReservationServiceOrderResult = {
    title: 'ReservationServiceOrderResult',
    required: ['Reservations'],
    type: 'object',
    properties: {
        Reservations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Reservation'
            },
            description: 'The reservations of the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationServiceOrderResult'
} as const;

export const $ReservationStartParameters = {
    title: 'ReservationStartParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation to start.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationStartParameters'
} as const;

export const $ReservationTimeFilter = {
    title: 'Reservation time filter',
    enum: ['Colliding', 'Created', 'Updated', 'Start', 'End', 'Overlapping', 'Canceled'],
    type: 'string',
    'x-enumDescriptions': ['Reservations whose intervals collide with the specified interval.', 'Reservations created within the specified interval.', 'Reservations updated within the specified interval.', 'Reservations starting (arriving) within the specified interval.', 'Reservations ending (departing) within the specified interval.', 'Reservations whose intervals contain the specified interval.', 'Reservations canceled within the specified interval.']
} as const;

export const $ReservationUpdateIntervalParameters = {
    title: 'ReservationUpdateIntervalParameters',
    required: ['AccessToken', 'ChargeCancellationFee', 'Client', 'ClientToken', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation to be updated.',
            format: 'uuid'
        },
        StartUtc: {
            type: 'string',
            description: 'New reservation start in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'New reservation end in UTC timezone in ISO 8601 format.',
            format: 'date-time',
            nullable: true
        },
        ChargeCancellationFee: {
            type: 'boolean',
            description: 'Whether cancellation fee should be charged for potentially canceled nights.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationUpdateIntervalParameters'
} as const;

export const $ReservationUpdateOptionsParameters = {
    title: 'Reservations options parameters update values',
    type: 'object',
    properties: {
        OwnerCheckedIn: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'True if the owner of the reservation is checked in. (or `null` if the value should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationUpdateOptionsParameters'
} as const;

export const $ReservationUpdateParameters = {
    title: 'Reservation updates',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation.',
            format: 'uuid'
        },
        ChannelNumber: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Number of the reservation within the Channel (i.e. OTA, GDS, CRS, etc) in case the reservation group originates there (e.g. Booking.com confirmation number) (or `null` if the channel number should not be updated).',
            nullable: true
        },
        StartUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Reservation start in UTC timezone in ISO 8601 format. (or `null` if the start time should not be updated).',
            nullable: true
        },
        EndUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Reservation end in UTC timezone in ISO 8601 format. (or `null` if the end time should not be updated).',
            nullable: true
        },
        ReleasedUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Date when the optional reservation is released in UTC timezone in ISO 8601 format. (or `null` if the release time should not be updated).',
            nullable: true
        },
        PersonCounts: {
            title: 'Person counts update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationUpdatePersonCountParameters'
                }
            ],
            description: 'Number of people per age category the reservation is for. If supplied, the person counts will be replaced. (or `null` if the person counts should not be updated).',
            nullable: true
        },
        AssignedResourceId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the assigned `Resource`.',
            nullable: true
        },
        RequestedCategoryId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            description: 'Identifier of the requested `ResourceCategory` (or `null` if resource category should not be updated).',
            nullable: true
        },
        TravelAgencyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the `Company` that mediated the reservation (or `null` if travel agency should not be updated).',
            nullable: true
        },
        CompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the `Company` on behalf of which the reservation was made (or `null` if company should not be updated).',
            nullable: true
        },
        BusinessSegmentId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the reservation `BusinessSegment` (or `null` if the business segment should not be updated).',
            nullable: true
        },
        Purpose: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: `\`Purpose\` of the reservation (or \`null\` if the purpose should not be updated).`,
            nullable: true
        },
        RateId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            description: 'Identifier of the reservation `Rate` (or `null` if the rate should not be updated).',
            nullable: true
        },
        CreditCardId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of `CreditCard` belonging to `Customer` who owns the reservation.  (or `null` if the credit card should not be updated).',
            nullable: true
        },
        TimeUnitPrices: {
            title: 'Time unit amount update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationUpdatePerUnitPriceParameters'
                }
            ],
            description: 'Prices for time units of the reservation. E.g. prices for the first or second night. (or `null` if the unit amounts should not be updated).',
            nullable: true
        },
        BookerId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Identifier of the `Customer` on whose behalf the reservation was made. (or `null` if the booker should not be updated).',
            nullable: true
        },
        AssignedResourceLocked: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            description: 'Whether the reservation should be locked to the assigned `Resource`. Unlocking and assigning reservation to new `Resource` can be done in one call.',
            nullable: true
        },
        AvailabilityBlockId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of the `AvailabilityBlock` the reservation is assigned to.',
            nullable: true
        },
        Options: {
            title: 'Reservations options parameters update values',
            allOf: [
                {
                    '$ref': '#/components/schemas/ReservationUpdateOptionsParameters'
                }
            ],
            description: 'Options of the reservations.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationUpdateParameters'
} as const;

export const $ReservationUpdatePerUnitPriceParameters = {
    title: 'Time unit amount update value',
    type: 'object',
    properties: {
        Value: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PerUnitPriceParameters'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationUpdatePerUnitPriceParameters'
} as const;

export const $ReservationUpdatePersonCountParameters = {
    title: 'Person counts update value',
    type: 'object',
    properties: {
        Value: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservationPersonCount'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationUpdatePersonCountParameters'
} as const;

export const $ReservationsChannelManagerDetailsFilterParameters = {
    title: 'Reservation channel manager details filter parameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ReservationIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ReservationIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Reservations`.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationsChannelManagerDetailsFilterParameters'
} as const;

export const $ReservationsChannelManagerDetailsResult = {
    title: 'Reservation channel manager details result',
    required: ['ChannelManagerDetails'],
    type: 'object',
    properties: {
        ChannelManagerDetails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChannelManagerDetails'
            },
            description: 'List of reservation channel manager details.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationsChannelManagerDetailsResult'
} as const;

export const $ReservationsUpdateCustomerParameters = {
    title: 'ReservationsUpdateCustomerParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CustomerId', 'ReservationId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the reservation to be updated.',
            format: 'uuid'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ReservationsUpdateCustomerParameters'
} as const;

export const $Resource = {
    title: 'Resource',
    required: ['CreatedUtc', 'Data', 'Descriptions', 'Directions', 'EnterpriseId', 'ExternalNames', 'Id', 'IsActive', 'Name', 'State', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the resource.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the resource is still active.'
        },
        ParentResourceId: {
            type: 'string',
            description: 'Identifier of the parent [Resource](https://mews-systems.gitbook.io/connector-api/operations/#resource) (e.g. room of a bed).',
            format: 'uuid',
            nullable: true
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the resource (e.g. room number).'
        },
        State: {
            minLength: 1,
            type: 'string',
            description: 'State of the resource.'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description.',
            'x-schema-id': 'LocalizedStrings'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the resource in UTC timezone in ISO 8601 format.'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the resource in UTC timezone in ISO 8601 format.'
        },
        Data: {
            title: 'Data',
            type: 'object',
            properties: {
                Discriminator: {
                    type: 'string'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/SpaceData'
                        },
                        {
                            type: 'object',
                            additionalProperties: false
                        },
                        {
                            type: 'object',
                            additionalProperties: false
                        }
                    ]
                }
            },
            description: 'Additional data of the resource.',
            'x-coproduct': true,
            'x-schema-id': 'ResourceDataCoproductOfSpaceDataObjectDataPersonData'
        },
        ExternalNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of external name.',
            'x-schema-id': 'LocalizedStrings'
        },
        Directions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of direction.',
            'x-schema-id': 'LocalizedStrings'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Resource'
} as const;

export const $ResourceAccessToken = {
    title: 'Resource access token',
    required: ['CreatedUtc', 'EnterpriseId', 'Id', 'IsActive', 'ServiceOrderId', 'Type', 'UpdatedUtc', 'ValidityEndUtc', 'ValidityStartUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        ServiceOrderId: {
            type: 'string',
            description: 'Unique identifier of a reservation.',
            format: 'uuid'
        },
        CompanionshipId: {
            type: 'string',
            description: 'Unique identifier of [Companionship](https://mews-systems.gitbook.io/connector-api/operations/companionships/#companionship).',
            format: 'uuid',
            nullable: true
        },
        ResourceId: {
            type: 'string',
            description: 'Unique identifier of [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).',
            format: 'uuid',
            nullable: true
        },
        Type: {
            '$ref': '#/components/schemas/ResourceAccessTokenType'
        },
        Value: {
            type: 'string',
            description: 'Value of resource access token',
            nullable: true
        },
        SerialNumber: {
            type: 'string',
            description: 'Serial number of [Resource access token type](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token-type).',
            nullable: true
        },
        ValidityStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Marks the start of interval in which the resource access token can be used.',
            format: 'date-time'
        },
        ValidityEndUtc: {
            minLength: 1,
            type: 'string',
            description: 'Marks the end of interval in which the resource access token can be used.',
            format: 'date-time'
        },
        Permissions: {
            title: 'ResourceAccessTokenPermissions',
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceAccessTokenPermissions'
                }
            ],
            description: 'Specify permissions of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the resource access token in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the resource access token in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the resource access token is still active.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceAccessToken'
} as const;

export const $ResourceAccessTokenDeleteParameters = {
    title: 'ResourceAccessTokenDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Ids: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceAccessTokenDeleteParameters'
} as const;

export const $ResourceAccessTokenFilterParameters = {
    title: 'ResourceAccessTokenFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ResourceAccessTokenIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource access tokens](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token). Required if no other filter is provided.',
            nullable: true
        },
        ServiceOrderIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of reservations. Required if no other filter is provided.',
            nullable: true
        },
        CollidingUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceAccessTokenFilterParameters'
} as const;

export const $ResourceAccessTokenParameters = {
    title: 'ResourceAccessTokenParameters',
    type: 'object',
    properties: {
        ServiceOrderId: {
            type: 'string',
            format: 'uuid'
        },
        CompanionshipId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        ResourceId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        Value: {
            type: 'string',
            nullable: true
        },
        Type: {
            type: 'string',
            nullable: true
        },
        SerialNumber: {
            type: 'string',
            nullable: true
        },
        ValidityStartUtc: {
            type: 'string',
            nullable: true
        },
        ValidityEndUtc: {
            type: 'string',
            nullable: true
        },
        Permissions: {
            title: 'ResourceAccessTokenPermissionsParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceAccessTokenPermissionsParameters'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceAccessTokenParameters'
} as const;

export const $ResourceAccessTokenPermissions = {
    title: 'ResourceAccessTokenPermissions',
    type: 'object',
    properties: {
        Bed: {
            type: 'boolean'
        },
        Room: {
            type: 'boolean'
        },
        Floor: {
            type: 'boolean'
        },
        Building: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    description: 'Specify permissions of [Resource access token](https://mews-systems.gitbook.io/connector-api/operations/#resource-access-token).',
    'x-schema-id': 'ResourceAccessTokenPermissions'
} as const;

export const $ResourceAccessTokenPermissionsParameters = {
    title: 'ResourceAccessTokenPermissionsParameters',
    type: 'object',
    properties: {
        Bed: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        },
        Room: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        },
        Floor: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        },
        Building: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceAccessTokenPermissionsParameters'
} as const;

export const $ResourceAccessTokenResult = {
    title: 'ResourceAccessTokenResult',
    type: 'object',
    properties: {
        ResourceAccessTokens: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceAccessToken'
            },
            description: 'Resource access tokens.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest item returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older tokens. If [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) is specified in the request message, then Cursor will always be included in the response message.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceAccessTokenResult'
} as const;

export const $ResourceAccessTokenType = {
    enum: ['PinCode', 'RfidTag'],
    type: 'string'
} as const;

export const $ResourceAccessTokenUpdateParameters = {
    title: 'ResourceAccessTokenUpdateParameters',
    type: 'object',
    properties: {
        ResourceAccessTokenId: {
            type: 'string',
            format: 'uuid'
        },
        ValidityStartUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        ValidityEndUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        Value: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Value of resource access token (or null if the value should not be updated).',
            nullable: true
        },
        Permissions: {
            title: 'ResourceAccessTokenPermissionsParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceAccessTokenPermissionsParameters'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceAccessTokenUpdateParameters'
} as const;

export const $ResourceAvailabilityMetricTypeEnum = {
    title: 'Service availability metrics',
    enum: ['OutOfOrderBlocks', 'PublicAvailabilityAdjustment', 'OtherServiceReservationCount', 'Occupied', 'ConfirmedReservations', 'OptionalReservations', 'BlockAvailability', 'AllocatedBlockAvailability', 'UsableResources', 'ActiveResources'],
    type: 'string',
    description: `

OutOfOrderBlocks (Number of resources that are out of order for the resource category (see \`Resource Block\`).)

PublicAvailabilityAdjustment (Number of resources marked as manual availability adjustments.)

OtherServiceReservationCount (Number of resources occupied by another service.)

Occupied (Number of bookings that have been assigned to the resource category (i.e. reservations and blocks).)

ConfirmedReservations (Number of confirmed reservations that have been assigned to the resource category.)

OptionalReservations (Number of optional reservations that have been assigned to the resource category.)

BlockAvailability (Number of blocked resources (from an availability block / allotment).)

AllocatedBlockAvailability (Number of blocked resources that are in a deducting state (from an availability block / allotment).)

UsableResources (Number of usable resources (i.e. which are not out of order).)

ActiveResources (Number of active resources.)`,
    'x-enumNames': ['OutOfOrderBlocks', 'PublicAvailabilityAdjustment', 'OtherServiceReservationCount', 'Occupied', 'ConfirmedReservations', 'OptionalReservations', 'BlockAvailability', 'AllocatedBlockAvailability', 'UsableResources', 'ActiveResources'],
    'x-enumDescriptions': ['Number of resources that are out of order for the resource category (see `Resource Block`).', 'Number of resources marked as manual availability adjustments.', 'Number of resources occupied by another service.', 'Number of bookings that have been assigned to the resource category (i.e. reservations and blocks).', 'Number of confirmed reservations that have been assigned to the resource category.', 'Number of optional reservations that have been assigned to the resource category.', 'Number of blocked resources (from an availability block / allotment).', 'Number of blocked resources that are in a deducting state (from an availability block / allotment).', 'Number of usable resources (i.e. which are not out of order).', 'Number of active resources.']
} as const;

export const $ResourceBlock = {
    title: 'Resource block',
    required: ['AssignedResourceId', 'CreatedUtc', 'EndUtc', 'EnterpriseId', 'Id', 'IsActive', 'Name', 'StartUtc', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the block.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            format: 'uuid'
        },
        AssignedResourceId: {
            type: 'string',
            description: 'Unique identifier of the assigned [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the block is still active.'
        },
        Type: {
            '$ref': '#/components/schemas/ResourceBlockType'
        },
        StartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the block in UTC timezone in ISO 8601 format.'
        },
        EndUtc: {
            minLength: 1,
            type: 'string',
            description: 'End of the block in UTC timezone in ISO 8601 format.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the block in UTC timezone in ISO 8601 format.'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the block in UTC timezone in ISO 8601 format.'
        },
        DeletedUtc: {
            type: 'string',
            description: 'Date and time when the block was deleted (for inactive ones) in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the resource block.'
        },
        Notes: {
            type: 'string',
            description: 'Note describing the resource block.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceBlock'
} as const;

export const $ResourceBlockAddParameters = {
    title: 'ResourceBlockAddParameters',
    required: ['EndUtc', 'Name', 'ResourceId', 'StartUtc', 'Type'],
    type: 'object',
    properties: {
        ResourceId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string'
        },
        Type: {
            '$ref': '#/components/schemas/ResourceBlockType'
        },
        StartUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        EndUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        Notes: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceBlockAddParameters'
} as const;

export const $ResourceBlockDeleteParameters = {
    title: 'ResourceBlockDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ResourceBlockIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ResourceBlockIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of [Resource blocks](https://mews-systems.gitbook.io/connector-api/operations/#resource-block) to be removed.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceBlockDeleteParameters'
} as const;

export const $ResourceBlockExtent = {
    title: 'ResourceBlockExtent',
    type: 'object',
    properties: {
        Inactive: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned.',
    'x-schema-id': 'ResourceBlockExtent'
} as const;

export const $ResourceBlockParameters = {
    title: 'ResourceBlockParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Extent: {
            title: 'ResourceBlockExtent',
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceBlockExtent'
                }
            ],
            description: 'Extent of data to be returned.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use ActivityStates with `["Active", "Deleted"]` instead.'
        },
        ResourceBlockIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Resource blocks](https://mews-systems.gitbook.io/connector-api/operations/#resource-block).',
            nullable: true
        },
        AssignedResourceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested Assigned [Resources](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records. Defaults to `Active` if not specified.',
            nullable: true
        },
        CollidingUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceBlockParameters'
} as const;

export const $ResourceBlockResult = {
    title: 'ResourceBlockResult',
    required: ['ResourceBlocks'],
    type: 'object',
    properties: {
        ResourceBlocks: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceBlock'
            },
            description: 'Resource blocks added.'
        },
        Cursor: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceBlockResult'
} as const;

export const $ResourceBlockType = {
    enum: ['OutOfOrder', 'InternalUse'],
    type: 'string'
} as const;

export const $ResourceCategory = {
    title: 'Resource category',
    required: ['Capacity', 'Classification', 'Descriptions', 'EnterpriseId', 'ExtraCapacity', 'Id', 'IsActive', 'Names', 'Ordering', 'ServiceId', 'ShortNames', 'Type'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the category.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) of the resource category.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the category is still active.'
        },
        Type: {
            '$ref': '#/components/schemas/ResourceCategoryType'
        },
        Classification: {
            '$ref': '#/components/schemas/ResourceClassification'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the short name.',
            'x-schema-id': 'LocalizedStrings'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description.',
            'x-schema-id': 'LocalizedStrings'
        },
        Ordering: {
            type: 'integer',
            format: 'int32'
        },
        Capacity: {
            type: 'integer',
            format: 'int32'
        },
        ExtraCapacity: {
            type: 'integer',
            description: 'Extra capacity that can be served (e.g. extra bed count).',
            format: 'int32'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the resource category from external system.',
            nullable: true
        },
        AccountingCategoryId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategory'
} as const;

export const $ResourceCategoryAssignment = {
    title: 'Resource category assignment',
    required: ['CategoryId', 'CreatedUtc', 'Id', 'IsActive', 'ResourceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the assignment.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the assignment is still active.'
        },
        ResourceId: {
            type: 'string',
            description: 'Unique identifier of the [Resource](https://mews-systems.gitbook.io/connector-api/operations/#resource) assigned to the Resource category.',
            format: 'uuid'
        },
        CategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the assignment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the assignment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryAssignment'
} as const;

export const $ResourceCategoryAssignmentFilterParameters = {
    title: 'ResourceCategoryAssignmentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ResourceCategoryIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ResourceCategoryAssignmentIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource category assignment](https://mews-systems.gitbook.io/connector-api/operations/resourcecategories/#resource-category-assignment).',
            nullable: true
        },
        ResourceCategoryIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/#resource-category) to which the resource category assignment belong.'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the resource category assignments were updated.',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        },
        ResourceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of resources to which the resource category assignments belong.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryAssignmentFilterParameters'
} as const;

export const $ResourceCategoryAssignmentResult = {
    title: 'ResourceCategoryAssignmentResult',
    required: ['ResourceCategoryAssignments'],
    type: 'object',
    properties: {
        ResourceCategoryAssignments: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategoryAssignment'
            },
            description: 'Resource category assignments.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest resource category assignment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource category assignments.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryAssignmentResult'
} as const;

export const $ResourceCategoryAvailabilityV20240122 = {
    title: 'Resource category availability (ver 2024-01-22)',
    required: ['Metrics', 'ResourceCategoryId'],
    type: 'object',
    properties: {
        ResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources#resource-category).',
            format: 'uuid'
        },
        Metrics: {
            title: 'ResourceAvailabilityMetricTypeInt32IEnumerableIDictionary',
            type: 'object',
            properties: {
                OutOfOrderBlocks: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                PublicAvailabilityAdjustment: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                OtherServiceReservationCount: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                Occupied: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                ConfirmedReservations: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                OptionalReservations: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                BlockAvailability: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                AllocatedBlockAvailability: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                UsableResources: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                },
                ActiveResources: {
                    type: 'array',
                    items: {
                        type: 'integer',
                        format: 'int32'
                    }
                }
            },
            additionalProperties: false,
            description: 'Dictionary keys are names of [Service availability metrics](https://mews-systems.gitbook.io/connector-api/operations/services#service-availability-metrics), values are arrays of integers with metric values for corresponding time unit in `TimeUnitStartsUtc`.',
            'x-schema-id': 'ResourceAvailabilityMetricTypeInt32IEnumerableIDictionary'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryAvailabilityV20240122'
} as const;

export const $ResourceCategoryFilterParameters = {
    title: 'ResourceCategoryFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ResourceCategoryIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource categories belong.'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the resource categories were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryFilterParameters'
} as const;

export const $ResourceCategoryImageAssignment = {
    title: 'Resource category image assignment',
    required: ['CategoryId', 'CreatedUtc', 'Id', 'ImageId', 'IsActive', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the assignment.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the assignment is still active.'
        },
        CategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/#resource-category).',
            format: 'uuid'
        },
        ImageId: {
            type: 'string',
            description: 'Unique identifier of the image assigned to the Resource category.',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the assignment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the assignment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryImageAssignment'
} as const;

export const $ResourceCategoryImageAssignmentFilterParameters = {
    title: 'ResourceCategoryImageAssignmentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ResourceCategoryIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ResourceCategoryImageAssignmentIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource category image assignments](https://mews-systems.gitbook.io/connector-api/operations/resourcecategories/#resource-category-image-assignment).',
            nullable: true
        },
        ResourceCategoryIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource categories](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource-category) to which the resource category image assignments belong.'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the resource category image assignments were updated.',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryImageAssignmentFilterParameters'
} as const;

export const $ResourceCategoryImageAssignmentResult = {
    title: 'ResourceCategoryImageAssignmentResult',
    required: ['ResourceCategoryImageAssignments'],
    type: 'object',
    properties: {
        ResourceCategoryImageAssignments: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategoryImageAssignment'
            },
            description: 'Resource category image assignments.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest resource category image assignment returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource category image assignments.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryImageAssignmentResult'
} as const;

export const $ResourceCategoryOccupancyState = {
    title: 'Resource category occupancy state',
    required: ['ResourceCategoryId', 'ResourceOccupancyStates'],
    type: 'object',
    properties: {
        ResourceCategoryId: {
            type: 'string',
            description: "Unique identifier of the 'Resource category'.",
            format: 'uuid'
        },
        ResourceOccupancyStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceOccupancyState'
            },
            description: 'The resource occupancy states.'
        }
    },
    additionalProperties: false,
    description: 'The list of `ResourceOccupancyState`s grouped by resource category.',
    'x-schema-id': 'ResourceCategoryOccupancyState'
} as const;

export const $ResourceCategoryResult = {
    title: 'ResourceCategoryResult',
    required: ['ResourceCategories'],
    type: 'object',
    properties: {
        ResourceCategories: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategory'
            },
            description: 'Resource categories of the resources.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest resource category returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource categories.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceCategoryResult'
} as const;

export const $ResourceCategoryType = {
    title: 'Resource category type',
    enum: ['Room', 'Bed', 'Dorm', 'Apartment', 'Suite', 'Villa', 'Site', 'Office', 'MeetingRoom', 'ParkingSpot', 'Desk', 'TeamArea', 'Membership', 'Tent', 'CaravanOrRV', 'UnequippedCampsite', 'Bike', 'ExtraBed', 'Cot', 'Crib', 'ConferenceRoom', 'Rooftop', 'Garden', 'Restaurant', 'Amphitheater', 'PrivateSpaces'],
    type: 'string'
} as const;

export const $ResourceCategoryTypeEnum = {
    title: 'Resource category type',
    enum: ['Room', 'Bed', 'Dorm', 'Apartment', 'Suite', 'Villa', 'Site', 'Office', 'MeetingRoom', 'ParkingSpot', 'Desk', 'TeamArea', 'Membership', 'Tent', 'CaravanOrRV', 'UnequippedCampsite', 'Bike', 'ExtraBed', 'Cot', 'Crib', 'ConferenceRoom', 'Rooftop', 'Garden', 'Restaurant', 'Amphitheater', 'PrivateSpaces'],
    type: 'string',
    description: `

Room

Bed

Dorm

Apartment

Suite

Villa

Site

Office

MeetingRoom

ParkingSpot

Desk

TeamArea

Membership

Tent

CaravanOrRV

UnequippedCampsite

Bike

ExtraBed

Cot

Crib

ConferenceRoom

Rooftop

Garden

Restaurant

Amphitheater

PrivateSpaces`,
    'x-enumNames': ['Room', 'Bed', 'Dorm', 'Apartment', 'Suite', 'Villa', 'Site', 'Office', 'MeetingRoom', 'ParkingSpot', 'Desk', 'TeamArea', 'Membership', 'Tent', 'CaravanOrRV', 'UnequippedCampsite', 'Bike', 'ExtraBed', 'Cot', 'Crib', 'ConferenceRoom', 'Rooftop', 'Garden', 'Restaurant', 'Amphitheater', 'PrivateSpaces'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
} as const;

export const $ResourceClassification = {
    enum: ['StandardSingle', 'StandardDouble', 'SuperiorTwin', 'SuperiorDouble', 'JuniorSuite', 'SharedOrDorm', 'Other', 'SuperiorSingle', 'Triple', 'Family', 'StandardTwin', 'Studio', 'SuperiorTripleRoom', 'OneBedroomApartment', 'ThreeBedroomsApartment', 'TwoBedroomsApartment'],
    type: 'string'
} as const;

export const $ResourceDataDiscriminator = {
    enum: ['Space', 'Object', 'Person'],
    type: 'string'
} as const;

export const $ResourceExtent = {
    title: 'ResourceExtent',
    type: 'object',
    properties: {
        Resources: {
            type: 'boolean'
        },
        ResourceCategories: {
            type: 'boolean',
            deprecated: true,
            'x-deprecatedMessage': 'Use `resourceCategories/getAll`'
        },
        ResourceCategoryAssignments: {
            type: 'boolean',
            deprecated: true,
            'x-deprecatedMessage': 'Use `resourceCategoryAssignments/getAll`'
        },
        ResourceCategoryImageAssignments: {
            type: 'boolean',
            deprecated: true,
            'x-deprecatedMessage': 'Use `resourceCategoryImageAssignments/getAll`'
        },
        ResourceFeatures: {
            type: 'boolean',
            deprecated: true,
            'x-deprecatedMessage': 'Use `resourceFeatures/getAll`'
        },
        ResourceFeatureAssignments: {
            type: 'boolean',
            deprecated: true,
            'x-deprecatedMessage': 'Use `resourceFeatureAssignments/getAll`'
        },
        Inactive: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned.',
    'x-schema-id': 'ResourceExtent'
} as const;

export const $ResourceFeature = {
    title: 'Resource feature',
    required: ['Classification', 'CreatedUtc', 'Descriptions', 'Id', 'IsActive', 'Names', 'ServiceId', 'ShortNames', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the feature.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the resource feature is still active.'
        },
        Classification: {
            '$ref': '#/components/schemas/ResourceFeatureClassification'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        ShortNames: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the short name.',
            'x-schema-id': 'LocalizedStrings'
        },
        Descriptions: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the description.',
            'x-schema-id': 'LocalizedStrings'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceFeature'
} as const;

export const $ResourceFeatureAssignment = {
    title: 'Resource feature assignment',
    required: ['CreatedUtc', 'FeatureId', 'Id', 'IsActive', 'ResourceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the assignment.',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the assignment is still active.'
        },
        ResourceId: {
            type: 'string',
            description: 'Unique identifier of the [Resource](https://mews-systems.gitbook.io/connector-api/operations/resources/#resource).',
            format: 'uuid'
        },
        FeatureId: {
            type: 'string',
            description: 'Unique identifier of the [Resource feature](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature) assigned to the Resource.',
            format: 'uuid'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the assignment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the assignment in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceFeatureAssignment'
} as const;

export const $ResourceFeatureAssignmentFilterParameters = {
    title: 'ResourceFeatureAssignmentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ResourceFeatureIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ResourceFeatureAssignmentIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        ResourceFeatureIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource features](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature) to which the resource feature assignments belong.'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceFeatureAssignmentFilterParameters'
} as const;

export const $ResourceFeatureAssignmentResult = {
    title: 'ResourceFeatureAssignmentResult',
    required: ['ResourceFeatureAssignments'],
    type: 'object',
    properties: {
        ResourceFeatureAssignments: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceFeatureAssignment'
            },
            description: 'Resource feature assignments.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest resource feature assignments returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource feature assignments.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceFeatureAssignmentResult'
} as const;

export const $ResourceFeatureClassification = {
    title: 'Resource Feature Classification',
    enum: ['SeaView', 'RiverView', 'OceanView', 'TwinBeds', 'DoubleBed', 'RollawayBed', 'UpperBed', 'LowerBed', 'Balcony', 'AccessibleBathroom', 'AccessibleRoom', 'ElevatorAccess', 'HighFloor', 'Kitchenette', 'AirConditioning', 'PrivateJacuzzi', 'PrivateSauna', 'EnsuiteRoom', 'PrivateBathroom', 'SharedBathroom'],
    type: 'string'
} as const;

export const $ResourceFeatureClassificationEnum = {
    title: 'Resource Feature Classification',
    enum: ['SeaView', 'RiverView', 'OceanView', 'TwinBeds', 'DoubleBed', 'RollawayBed', 'UpperBed', 'LowerBed', 'Balcony', 'AccessibleBathroom', 'AccessibleRoom', 'ElevatorAccess', 'HighFloor', 'Kitchenette', 'AirConditioning', 'PrivateJacuzzi', 'PrivateSauna', 'EnsuiteRoom', 'PrivateBathroom', 'SharedBathroom'],
    type: 'string',
    description: `

SeaView

RiverView

OceanView

TwinBeds

DoubleBed

RollawayBed

UpperBed

LowerBed

Balcony

AccessibleBathroom

AccessibleRoom

ElevatorAccess

HighFloor

Kitchenette

AirConditioning

PrivateJacuzzi

PrivateSauna

EnsuiteRoom

PrivateBathroom

SharedBathroom`,
    'x-enumNames': ['SeaView', 'RiverView', 'OceanView', 'TwinBeds', 'DoubleBed', 'RollawayBed', 'UpperBed', 'LowerBed', 'Balcony', 'AccessibleBathroom', 'AccessibleRoom', 'ElevatorAccess', 'HighFloor', 'Kitchenette', 'AirConditioning', 'PrivateJacuzzi', 'PrivateSauna', 'EnsuiteRoom', 'PrivateBathroom', 'SharedBathroom'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
} as const;

export const $ResourceFeatureFilterParameters = {
    title: 'ResourceFeatureFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ResourceFeatureIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Resource features](https://mews-systems.gitbook.io/connector-api/operations/#resource-feature).',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) to which the resource features belong.'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted or both records.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceFeatureFilterParameters'
} as const;

export const $ResourceFeatureResult = {
    title: 'ResourceFeatureResult',
    required: ['ResourceFeatures'],
    type: 'object',
    properties: {
        ResourceFeatures: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceFeature'
            },
            description: 'Resource features.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest resource features returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older resource feature.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceFeatureResult'
} as const;

export const $ResourceFilterParameters = {
    title: 'ResourceFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ResourceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the requested [Resources](https://mews-systems.gitbook.io/connector-api/operations/#resource).',
            nullable: true
        },
        Names: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Extent: {
            title: 'ResourceExtent',
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceExtent'
                }
            ],
            description: 'Extent of data to be returned.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceFilterParameters'
} as const;

export const $ResourceOccupancyState = {
    title: 'Resource occupancy state',
    required: ['OccupancyState', 'ResourceId', 'ResourceState'],
    type: 'object',
    properties: {
        ResourceId: {
            type: 'string',
            description: 'Unique identifier of the resource.',
            format: 'uuid'
        },
        ResourceState: {
            title: 'Resource State',
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceStateEnum'
                }
            ],
            description: `Resource state of the resource.

Dirty

Clean

Inspected

OutOfService

OutOfOrder`,
            'x-enumNames': ['Dirty', 'Clean', 'Inspected', 'OutOfService', 'OutOfOrder'],
            'x-enumDescriptions': ['', '', '', '', '']
        },
        OccupancyState: {
            title: 'Occupancy State',
            allOf: [
                {
                    '$ref': '#/components/schemas/OccupancyStateEnum'
                }
            ],
            description: `State of the resource.

Vacant

ReservedLocked

Reserved

InternalUse

OutOfOrder`,
            'x-enumNames': ['Vacant', 'ReservedLocked', 'Reserved', 'InternalUse', 'OutOfOrder'],
            'x-enumDescriptions': ['', '', '', '', '']
        }
    },
    additionalProperties: false,
    description: 'The occupancy state of a `Resource`.',
    'x-schema-id': 'ResourceOccupancyState'
} as const;

export const $ResourceResult = {
    title: 'ResourceResult',
    type: 'object',
    properties: {
        Resources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Resource'
            },
            description: 'The resources of the enterprise.',
            nullable: true
        },
        ResourceCategories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategory'
            },
            description: 'Categories of resources in the enterprise. **Deprecated!**',
            nullable: true,
            deprecated: true
        },
        ResourceCategoryAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategoryAssignment'
            },
            description: 'Assignments of resources to categories. **Deprecated!**',
            nullable: true,
            deprecated: true
        },
        ResourceCategoryImageAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategoryImageAssignment'
            },
            description: 'Assignments of images to categories. **Deprecated!**',
            nullable: true,
            deprecated: true
        },
        ResourceFeatures: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceFeature'
            },
            description: 'Features of resources in the enterprise. **Deprecated!**',
            nullable: true,
            deprecated: true
        },
        ResourceFeatureAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceFeatureAssignment'
            },
            description: 'Assignments of resource features to resources. **Deprecated!**',
            nullable: true,
            deprecated: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceResult'
} as const;

export const $ResourceStateEnum = {
    title: 'Resource State',
    enum: ['Dirty', 'Clean', 'Inspected', 'OutOfService', 'OutOfOrder'],
    type: 'string',
    description: `

Dirty

Clean

Inspected

OutOfService

OutOfOrder`,
    'x-enumNames': ['Dirty', 'Clean', 'Inspected', 'OutOfService', 'OutOfOrder'],
    'x-enumDescriptions': ['', '', '', '', '']
} as const;

export const $ResourceUpdateParameters = {
    title: 'ResourceUpdateParameters',
    required: ['ResourceId'],
    type: 'object',
    properties: {
        ResourceId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        ParentResourceId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            nullable: true
        },
        Data: {
            title: 'Data',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/ResourceDataDiscriminator'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/SpaceData'
                        },
                        {
                            type: 'object',
                            additionalProperties: false
                        },
                        {
                            type: 'object',
                            additionalProperties: false
                        }
                    ]
                }
            },
            'x-coproduct': true,
            'x-schema-id': 'ResourceUpdateParametersDataCoproductOfResourceDataDiscriminator'
        },
        State: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        StateReason: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourceUpdateParameters'
} as const;

export const $ResourcesOccupancyStateFilterParameters = {
    title: 'ResourcesOccupancyStateFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ResourceCategoryIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ResourceCategoryIds: {
            maxItems: 5,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Resource category`.'
        },
        ResourceStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceStateEnum'
            },
            description: 'States of the `Resource`',
            nullable: true
        },
        OccupancyStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OccupancyStateEnum'
            },
            description: 'Occupancy states of the `Resource`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourcesOccupancyStateFilterParameters'
} as const;

export const $ResourcesOccupancyStateResult = {
    title: 'ResourcesOccupancyStateResult',
    required: ['ResourceCategoryOccupancyStates'],
    type: 'object',
    properties: {
        ResourceCategoryOccupancyStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategoryOccupancyState'
            },
            description: 'The resource categories.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ResourcesOccupancyStateResult'
} as const;

export const $Restriction = {
    title: 'Restriction',
    required: ['Conditions', 'Id', 'Origin', 'ServiceId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the restriction.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service`.',
            format: 'uuid'
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'External identifier of the restriction.',
            nullable: true
        },
        Origin: {
            title: 'Restriction origin',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionOriginEnum'
                }
            ],
            description: `Restriction origin

User (Restriction was created by a user in Mews.)

Integration (Restriction was created by a 3rd-party integration.)`,
            'x-enumNames': ['User', 'Integration'],
            'x-enumDescriptions': ['Restriction was created by a user in Mews.', 'Restriction was created by a 3rd-party integration.']
        },
        Conditions: {
            title: 'Restriction condition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionConditions'
                }
            ],
            description: 'The conditions or rules that must be met by a reservation for the restriction to apply.'
        },
        Exceptions: {
            title: 'Restriction exception',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionExceptions'
                }
            ],
            description: 'The rules that prevent the restriction from applying to a reservation, even when all conditions have been met.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'The added restriction.',
    'x-schema-id': 'Restriction'
} as const;

export const $RestrictionAdditionResult = {
    title: 'RestrictionAdditionResult',
    type: 'object',
    properties: {
        Restrictions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AddedRestriction'
            },
            description: 'The added restrictions.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionAdditionResult'
} as const;

export const $RestrictionClearData = {
    title: 'Restriction clear data',
    required: ['Days', 'Type'],
    type: 'object',
    properties: {
        Type: {
            title: 'Restriction type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionTypeEnum'
                }
            ],
            description: `Restriction type.

Stay (Guests can't stay within specified dates.)

Start (Guests can't check in within specified dates.)

End (Guests can't check out within specified dates.)`,
            'x-enumNames': ['Stay', 'Start', 'End'],
            'x-enumDescriptions': ["Guests can't stay within specified dates.", "Guests can't check in within specified dates.", "Guests can't check out within specified dates."]
        },
        ExactRateId: {
            type: 'string',
            description: 'Unique identifier of the exact `Rate` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        BaseRateId: {
            type: 'string',
            description: 'Unique identifier of the base `Rate` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        RateGroupId: {
            type: 'string',
            description: 'Unique identifier of the `Rate group` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        ResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the `Resource category` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        ResourceCategoryType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceCategoryTypeEnum'
                }
            ],
            description: `Name of the \`Resource category type\` to which the restriction applies.

Room

Bed

Dorm

Apartment

Suite

Villa

Site

Office

MeetingRoom

ParkingSpot

Desk

TeamArea

Membership

Tent

CaravanOrRV

UnequippedCampsite

Bike

ExtraBed

Cot

Crib

ConferenceRoom

Rooftop

Garden

Restaurant

Amphitheater

PrivateSpaces`,
            nullable: true
        },
        StartUtc: {
            type: 'string',
            description: 'Start date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).',
            format: 'date-time',
            nullable: true
        },
        Days: {
            title: 'Days parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DaysParameters'
                }
            ],
            description: 'The days of week to which the restriction applies.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionClearData'
} as const;

export const $RestrictionConditions = {
    title: 'Restriction condition',
    required: ['Type'],
    type: 'object',
    properties: {
        Type: {
            title: 'Restriction type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionTypeEnum'
                }
            ],
            description: `Restriction type.

Stay (Guests can't stay within specified dates.)

Start (Guests can't check in within specified dates.)

End (Guests can't check out within specified dates.)`,
            'x-enumNames': ['Stay', 'Start', 'End'],
            'x-enumDescriptions': ["Guests can't stay within specified dates.", "Guests can't check in within specified dates.", "Guests can't check out within specified dates."]
        },
        ExactRateId: {
            type: 'string',
            description: 'Unique identifier of the restricted exact `Rate`.',
            format: 'uuid',
            nullable: true
        },
        BaseRateId: {
            type: 'string',
            description: 'Unique identifier of the restricted base `Rate`.',
            format: 'uuid',
            nullable: true
        },
        RateGroupId: {
            type: 'string',
            description: 'Unique identifier of the restricted `Rate group`.',
            format: 'uuid',
            nullable: true
        },
        ResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the restricted `Resource category`.',
            format: 'uuid',
            nullable: true
        },
        ResourceCategoryType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceCategoryTypeEnum'
                }
            ],
            description: `Name of the restricted \`Resource category type\`.

Room

Bed

Dorm

Apartment

Suite

Villa

Site

Office

MeetingRoom

ParkingSpot

Desk

TeamArea

Membership

Tent

CaravanOrRV

UnequippedCampsite

Bike

ExtraBed

Cot

Crib

ConferenceRoom

Rooftop

Garden

Restaurant

Amphitheater

PrivateSpaces`,
            nullable: true
        },
        StartUtc: {
            type: 'string',
            description: 'Start date of the restriction time interval, specified in ISO 8601 format and adjusted to UTC - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes) for important information on format and implementation.',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End date of the restriction time interval, specified in ISO 8601 format and adjusted to UTC - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes) for important information on format and implementation.',
            nullable: true
        },
        Days: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The restricted days of week. Defaults to all days when not provided. Ignored when the service uses a time unit longer than a day.',
            nullable: true
        },
        Hours: {
            title: 'Hours',
            allOf: [
                {
                    '$ref': '#/components/schemas/Hours'
                }
            ],
            description: 'The restricted hours. Defaults to all hours when not provided.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'The conditions or rules that must be met by a reservation for the restriction to apply.',
    'x-schema-id': 'RestrictionConditions'
} as const;

export const $RestrictionConditionsData = {
    title: 'Restriction condition data',
    required: ['Type'],
    type: 'object',
    properties: {
        Type: {
            title: 'Restriction type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionTypeEnum'
                }
            ],
            description: `Restriction type.

Stay (Guests can't stay within specified dates.)

Start (Guests can't check in within specified dates.)

End (Guests can't check out within specified dates.)`,
            'x-enumNames': ['Stay', 'Start', 'End'],
            'x-enumDescriptions': ["Guests can't stay within specified dates.", "Guests can't check in within specified dates.", "Guests can't check out within specified dates."]
        },
        ExactRateId: {
            type: 'string',
            description: 'Unique identifier of the exact `Rate` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        BaseRateId: {
            type: 'string',
            description: 'Unique identifier of the base `Rate` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        RateGroupId: {
            type: 'string',
            description: 'Unique identifier of the `Rate group` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        ResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the `Resource category` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        ResourceCategoryType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceCategoryTypeEnum'
                }
            ],
            description: `Name of the \`Resource category type\` to which the restriction applies.

Room

Bed

Dorm

Apartment

Suite

Villa

Site

Office

MeetingRoom

ParkingSpot

Desk

TeamArea

Membership

Tent

CaravanOrRV

UnequippedCampsite

Bike

ExtraBed

Cot

Crib

ConferenceRoom

Rooftop

Garden

Restaurant

Amphitheater

PrivateSpaces`,
            nullable: true
        },
        StartUtc: {
            type: 'string',
            description: 'Start date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).',
            format: 'date-time',
            nullable: true
        },
        Days: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The restricted days of week. Defaults to all days when not provided. Ignored when the service uses a time unit longer than a day.',
            nullable: true
        },
        Hours: {
            title: 'Hours',
            allOf: [
                {
                    '$ref': '#/components/schemas/Hours'
                }
            ],
            description: 'The restricted hours. Defaults to all hours when not provided.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionConditionsData'
} as const;

export const $RestrictionData = {
    title: 'Restriction data',
    required: ['Conditions'],
    type: 'object',
    properties: {
        Identifier: {
            type: 'string',
            description: 'Identifier of the restriction within the transaction.',
            nullable: true
        },
        ExternalIdentifier: {
            type: 'string',
            description: 'External identifier of the restriction.',
            nullable: true
        },
        Conditions: {
            title: 'Restriction condition data',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionConditionsData'
                }
            ],
            description: 'The conditions or rules that must be met by a reservation for the restriction to apply.'
        },
        Exceptions: {
            title: 'Restriction exception data',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionExceptionsData'
                }
            ],
            description: 'The rules that prevent the restriction from applying to a reservation, even when all conditions have been met.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionData'
} as const;

export const $RestrictionExceptions = {
    title: 'Restriction exception',
    type: 'object',
    properties: {
        MinAdvance: {
            type: 'string',
            description: 'The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            nullable: true
        },
        MaxAdvance: {
            type: 'string',
            description: 'The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            nullable: true
        },
        MinLength: {
            type: 'string',
            description: 'Minimal reservation length in ISO 8601 duration format.',
            nullable: true
        },
        MaxLength: {
            type: 'string',
            description: 'Maximal reservation length in ISO 8601 duration format.',
            nullable: true
        },
        MinPrice: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Value of the minimum price per time unit.',
            nullable: true
        },
        MaxPrice: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Value of the maximum price per time unit.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'The rules that prevent the restriction from applying to a reservation, even when all conditions have been met.',
    'x-schema-id': 'RestrictionExceptions'
} as const;

export const $RestrictionExceptionsData = {
    title: 'Restriction exception data',
    type: 'object',
    properties: {
        MinAdvance: {
            type: 'string',
            description: 'The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MaxAdvance: {
            type: 'string',
            description: 'The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MinLength: {
            type: 'string',
            description: 'Minimal reservation length in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MaxLength: {
            type: 'string',
            description: 'Maximal reservation length in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MinPrice: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Value of the minimum price per time unit.',
            nullable: true
        },
        MaxPrice: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Value of the maximum price per time unit.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionExceptionsData'
} as const;

export const $RestrictionFilterParameters = {
    title: 'RestrictionFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        TimeFilter: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        StartUtc: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        EndUtc: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        CollidingUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Restriction` is active.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Restriction` was created.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the `Restriction` was updated.',
            nullable: true
        },
        RestrictionIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Restriction`.',
            nullable: true
        },
        ResourceCategoryIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Resource category`.',
            nullable: true
        },
        RateIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Rate`. Returns all restrictions that affect the given rates, i.e. ones without any `Restriction Conditions`, ones assigned directly to specified rates, ones assigned to `Rate group` of specified rates, or ones inherited from base rates.`.',
            nullable: true
        },
        ExactRateIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Rate`. Returns only those restrictions which have matching `ExactRateId` set in `Restriction Condition`.',
            nullable: true
        },
        BaseRateIds: {
            maxItems: 1000,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Rate`. Returns only those restrictions which have matching `BaseRateId` set in `Restriction Condition`.',
            nullable: true
        },
        Origin: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RestrictionOrigin'
                }
            ],
            description: 'Restriction origin. Returns only those restrictions which have matching Origin or all if not specified.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Service` from which the restrictions are requested.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionFilterParameters'
} as const;

export const $RestrictionOrigin = {
    title: 'Restriction origin',
    enum: ['User', 'Integration'],
    type: 'string',
    'x-enumDescriptions': ['Restriction was created by a user in Mews.', 'Restriction was created by a 3rd-party integration.']
} as const;

export const $RestrictionOriginEnum = {
    title: 'Restriction origin',
    enum: ['User', 'Integration'],
    type: 'string',
    description: `

User (Restriction was created by a user in Mews.)

Integration (Restriction was created by a 3rd-party integration.)`,
    'x-enumNames': ['User', 'Integration'],
    'x-enumDescriptions': ['Restriction was created by a user in Mews.', 'Restriction was created by a 3rd-party integration.']
} as const;

export const $RestrictionResult = {
    title: 'RestrictionResult',
    required: ['Restrictions'],
    type: 'object',
    properties: {
        Restrictions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Restriction'
            },
            description: 'Restrictions of the default service.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionResult'
} as const;

export const $RestrictionSetData = {
    title: 'Restriction set data',
    required: ['Days', 'Type'],
    type: 'object',
    properties: {
        Type: {
            title: 'Restriction type',
            allOf: [
                {
                    '$ref': '#/components/schemas/RestrictionTypeEnum'
                }
            ],
            description: `Restriction type.

Stay (Guests can't stay within specified dates.)

Start (Guests can't check in within specified dates.)

End (Guests can't check out within specified dates.)`,
            'x-enumNames': ['Stay', 'Start', 'End'],
            'x-enumDescriptions': ["Guests can't stay within specified dates.", "Guests can't check in within specified dates.", "Guests can't check out within specified dates."]
        },
        ExactRateId: {
            type: 'string',
            description: 'Unique identifier of the exact `Rate` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        BaseRateId: {
            type: 'string',
            description: 'Unique identifier of the base `Rate` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        RateGroupId: {
            type: 'string',
            description: 'Unique identifier of the `Rate group` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        ResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the `Resource category` to which the restriction applies.',
            nullable: true,
            'x-schema-id': 'HybridIdentifier'
        },
        ResourceCategoryType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ResourceCategoryTypeEnum'
                }
            ],
            description: `Name of the \`Resource category type\` to which the restriction applies.

Room

Bed

Dorm

Apartment

Suite

Villa

Site

Office

MeetingRoom

ParkingSpot

Desk

TeamArea

Membership

Tent

CaravanOrRV

UnequippedCampsite

Bike

ExtraBed

Cot

Crib

ConferenceRoom

Rooftop

Garden

Restaurant

Amphitheater

PrivateSpaces`,
            nullable: true
        },
        StartUtc: {
            type: 'string',
            description: 'Start date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            description: 'End date of the time interval for which the restriction conditions should be applied. This must be in UTC timezone in ISO 8601 format - see [Datetimes](https://mews-systems.gitbook.io/connector-api/guidelines/serialization#datetimes).',
            format: 'date-time',
            nullable: true
        },
        Days: {
            title: 'Days parameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/DaysParameters'
                }
            ],
            description: 'The restricted days of week.'
        },
        MinAdvance: {
            type: 'string',
            description: 'The minimum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MaxAdvance: {
            type: 'string',
            description: 'The maximum time before the reservation starts, you can reserve in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MinLength: {
            type: 'string',
            description: 'Minimal reservation length in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MaxLength: {
            type: 'string',
            description: 'Maximal reservation length in ISO 8601 duration format.',
            format: 'date-time',
            nullable: true
        },
        MinPrice: {
            title: 'Currency value (ver 2023-02-02)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValue'
                }
            ],
            description: 'Value of the minimum price per time unit.',
            nullable: true
        },
        MaxPrice: {
            title: 'Currency value (ver 2023-02-02)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValue'
                }
            ],
            description: 'Value of the maximum price per time unit.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RestrictionSetData'
} as const;

export const $RestrictionTypeEnum = {
    title: 'Restriction type',
    enum: ['Stay', 'Start', 'End'],
    type: 'string',
    description: `

Stay (Guests can't stay within specified dates.)

Start (Guests can't check in within specified dates.)

End (Guests can't check out within specified dates.)`,
    'x-enumNames': ['Stay', 'Start', 'End'],
    'x-enumDescriptions': ["Guests can't stay within specified dates.", "Guests can't check in within specified dates.", "Guests can't check out within specified dates."]
} as const;

export const $RevenueTypeEnum = {
    title: 'Revenue type',
    enum: ['Service', 'Product', 'Additional'],
    type: 'string',
    description: `Revenue type.

Service

Product

Additional`,
    'x-enumNames': ['Service', 'Product', 'Additional'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $RoutingRule = {
    title: 'Routing rule',
    required: ['Applicability', 'CompanyId', 'CompanyRelation', 'CreatedUtc', 'EnterpriseId', 'Id', 'RouteType', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the routing rule.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) routing rule is assigned to.',
            format: 'uuid'
        },
        CompanyRelation: {
            '$ref': '#/components/schemas/RoutingRuleCompanyRelation'
        },
        Applicability: {
            '$ref': '#/components/schemas/RoutingRuleApplicability'
        },
        RouteType: {
            '$ref': '#/components/schemas/RoutingRuleRouteType'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) routing rule is assigned to.',
            format: 'uuid',
            nullable: true
        },
        SelectedStayItems: {
            title: 'RoutingRuleStayItems',
            allOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleStayItems'
                }
            ],
            description: 'Specific items to which the routing rule applies. Returns only if RouteType value is SelectedStayItems.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the routing rule in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the routing rule in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRule'
} as const;

export const $RoutingRuleAddParameter = {
    title: 'RoutingRuleAddParameter',
    required: ['Applicability', 'CompanyId', 'CompanyRelation', 'RouteType', 'ServiceId'],
    type: 'object',
    properties: {
        CompanyId: {
            type: 'string',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            format: 'uuid'
        },
        CompanyRelation: {
            '$ref': '#/components/schemas/RoutingRuleCompanyRelation'
        },
        Applicability: {
            '$ref': '#/components/schemas/RoutingRuleApplicability'
        },
        RouteType: {
            '$ref': '#/components/schemas/RoutingRuleRouteType'
        },
        AssignmentTargetType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleRouteType'
                }
            ],
            nullable: true
        },
        SelectedStayItems: {
            title: 'RoutingRuleStayItemsAddParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleStayItemsAddParameters'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRuleAddParameter'
} as const;

export const $RoutingRuleApplicability = {
    enum: ['Always', 'PrepaidOnly'],
    type: 'string'
} as const;

export const $RoutingRuleCompanyRelation = {
    enum: ['PartnerCompany', 'TravelAgency'],
    type: 'string'
} as const;

export const $RoutingRuleDeleteParameters = {
    title: 'RoutingRuleDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'RoutingRuleIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        RoutingRuleIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the routing rules to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRuleDeleteParameters'
} as const;

export const $RoutingRuleFilterParameters = {
    title: 'RoutingRuleFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CompanyIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company).',
            nullable: true
        },
        RoutingRuleIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifier of the [Routing rule](https://mews-systems.gitbook.io/connector-api/operations/routingrules/#routing-rule).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRuleFilterParameters'
} as const;

export const $RoutingRuleResult = {
    title: 'RoutingRuleResult',
    required: ['RoutingRules'],
    type: 'object',
    properties: {
        RoutingRules: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoutingRule'
            },
            description: 'Collection of Routing rules.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRuleResult'
} as const;

export const $RoutingRuleRouteType = {
    enum: ['AllStayItems', 'SelectedStayItems'],
    type: 'string'
} as const;

export const $RoutingRuleStayItems = {
    title: 'RoutingRuleStayItems',
    type: 'object',
    properties: {
        Nights: {
            type: 'boolean'
        },
        CityTax: {
            type: 'boolean'
        },
        ProductCategoryIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Specific items to which the routing rule applies. Returns only if RouteType value is SelectedStayItems.',
    'x-schema-id': 'RoutingRuleStayItems'
} as const;

export const $RoutingRuleStayItemsAddParameters = {
    title: 'RoutingRuleStayItemsAddParameters',
    type: 'object',
    properties: {
        Nights: {
            type: 'boolean'
        },
        CityTax: {
            type: 'boolean'
        },
        ProductCategoryIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRuleStayItemsAddParameters'
} as const;

export const $RoutingRuleStayItemsUpdateParameters = {
    title: 'RoutingRuleStayItemsUpdateParameters',
    type: 'object',
    properties: {
        Nights: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        },
        CityTax: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        },
        ProductCategoryIds: {
            title: 'Guid array update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidIEnumerableUpdateValue'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRuleStayItemsUpdateParameters'
} as const;

export const $RoutingRuleUpdateParameters = {
    title: 'RoutingRuleUpdateParameters',
    required: ['RoutingRuleId'],
    type: 'object',
    properties: {
        RoutingRuleId: {
            type: 'string',
            format: 'uuid'
        },
        CompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            nullable: true
        },
        ServiceId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidUpdateValue'
                }
            ],
            nullable: true
        },
        CompanyRelation: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            anyOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleCompanyRelation'
                }
            ],
            nullable: true
        },
        Applicability: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            anyOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleApplicability'
                }
            ],
            nullable: true
        },
        RouteType: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            anyOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleRouteType'
                }
            ],
            nullable: true
        },
        AssignmentTargetType: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            anyOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleRouteType'
                }
            ],
            nullable: true
        },
        SelectedStayItems: {
            title: 'RoutingRuleStayItemsUpdateParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/RoutingRuleStayItemsUpdateParameters'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RoutingRuleUpdateParameters'
} as const;

export const $Rule = {
    title: 'Rule',
    required: ['CreatedUtc', 'Id', 'ServiceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rule.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the rule is assigned to.',
            format: 'uuid'
        },
        Conditions: {
            title: 'RuleConditions',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleConditions'
                }
            ],
            description: 'Conditions of the rule.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the rule in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the rule in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Rule'
} as const;

export const $RuleAction = {
    title: 'Rule action',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the rule action.',
            format: 'uuid'
        },
        RuleId: {
            type: 'string',
            description: 'Unique identifier of the rule.',
            format: 'uuid'
        },
        Data: {
            title: 'Data',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/RuleActionDiscriminator'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/RuleActionProductData'
                        }
                    ]
                }
            },
            description: 'Additional information about action.',
            'x-coproduct': true,
            'x-schema-id': 'RuleActionDataCoproductOfRuleActionDiscriminator'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RuleAction'
} as const;

export const $RuleActionDiscriminator = {
    enum: ['Product'],
    type: 'string'
} as const;

export const $RuleActionProductData = {
    title: 'RuleActionProductData',
    type: 'object',
    properties: {
        ActionType: {
            type: 'string',
            nullable: true
        },
        ProductId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RuleActionProductData'
} as const;

export const $RuleCondition = {
    title: 'RuleCondition',
    type: 'object',
    properties: {
        Value: {
            type: 'string',
            nullable: true
        },
        ConditionType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RuleConditionType'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RuleCondition'
} as const;

export const $RuleConditionType = {
    enum: ['Equals', 'NotEquals'],
    type: 'string'
} as const;

export const $RuleConditions = {
    title: 'RuleConditions',
    type: 'object',
    properties: {
        RateId: {
            title: 'RuleCondition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleCondition'
                }
            ],
            nullable: true
        },
        RateGroupId: {
            title: 'RuleCondition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleCondition'
                }
            ],
            nullable: true
        },
        BusinessSegmentId: {
            title: 'RuleCondition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleCondition'
                }
            ],
            nullable: true
        },
        ResourceCategoryId: {
            title: 'RuleCondition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleCondition'
                }
            ],
            nullable: true
        },
        ResourceCategoryType: {
            title: 'RuleCondition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleCondition'
                }
            ],
            nullable: true
        },
        Origin: {
            title: 'RuleCondition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleCondition'
                }
            ],
            nullable: true
        },
        TravelAgencyId: {
            title: 'RuleCondition',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleCondition'
                }
            ],
            nullable: true
        },
        MinimumTimeUnitCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaximumTimeUnitCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Conditions of the rule.',
    'x-schema-id': 'RuleConditions'
} as const;

export const $RuleExtent = {
    title: 'RuleExtent',
    type: 'object',
    properties: {
        RuleActions: {
            type: 'boolean'
        },
        Rates: {
            type: 'boolean'
        },
        RateGroups: {
            type: 'boolean'
        },
        ResourceCategories: {
            type: 'boolean'
        },
        BusinessSegments: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned.',
    'x-schema-id': 'RuleExtent'
} as const;

export const $RuleFilterParameters = {
    title: 'RuleFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Extent', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Ids: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Extent: {
            title: 'RuleExtent',
            allOf: [
                {
                    '$ref': '#/components/schemas/RuleExtent'
                }
            ],
            description: 'Extent of data to be returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RuleFilterParameters'
} as const;

export const $RuleResult = {
    title: 'RuleResult',
    type: 'object',
    properties: {
        Rules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rule'
            },
            description: 'Rules used with reservation creations and modifications.',
            nullable: true
        },
        RuleActions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RuleAction'
            },
            description: 'Rule actions applied in rules.',
            nullable: true
        },
        Rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateForExtent'
            },
            description: 'Rates used in conditions.',
            nullable: true
        },
        RateGroups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateGroupOld'
            },
            description: 'Rate groups used in conditions.',
            nullable: true
        },
        ResourceCategories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategory'
            },
            description: 'Resource categories used in conditions.',
            nullable: true
        },
        BusinessSegments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BusinessSegment'
            },
            description: 'Business segments used in conditions.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'RuleResult'
} as const;

export const $SaltoMobileKeyDto = {
    title: 'SaltoMobileKeyDto',
    type: 'object',
    properties: {
        Key: {
            type: 'string',
            nullable: true
        },
        InstallationId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SaltoMobileKeyDto'
} as const;

export const $SearchOperator = {
    enum: ['And', 'Or'],
    type: 'string'
} as const;

export const $SenderDiscriminator = {
    enum: ['Application', 'Enterprise'],
    type: 'string'
} as const;

export const $SepaDirectDebitData = {
    title: 'SEPA Direct Debit data',
    required: ['Email', 'Iban', 'Name', 'RemoteIpAddress', 'UserAgent'],
    type: 'object',
    properties: {
        Iban: {
            minLength: 1,
            type: 'string',
            description: "The customer's bank account number in IBAN format."
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Full name of the customer.'
        },
        Email: {
            minLength: 1,
            type: 'string',
            description: 'Email address of the customer.',
            format: 'email'
        },
        UserAgent: {
            minLength: 1,
            type: 'string',
            description: 'The user agent of the browser from which the Mandate was accepted by the customer.'
        },
        RemoteIpAddress: {
            minLength: 1,
            type: 'string',
            description: 'The IP address from which the Mandate was accepted by the customer.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SepaDirectDebitData'
} as const;

export const $Service = {
    title: 'Service',
    required: ['CreatedUtc', 'Data', 'EnterpriseId', 'Id', 'IsActive', 'Name', 'Names', 'Options', 'Ordering', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the service.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the [Enterprise](https://mews-systems.gitbook.io/connector-api/operations/enterprises/#enterprise).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the service is still active.'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the service.',
            deprecated: true,
            'x-deprecatedMessage': 'Use `Names` instead'
        },
        Names: {
            title: 'Localized text',
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'All translations of the name.',
            'x-schema-id': 'LocalizedStrings'
        },
        StartTime: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        EndTime: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        Options: {
            title: 'Service options',
            allOf: [
                {
                    '$ref': '#/components/schemas/ServiceOptions'
                }
            ],
            description: 'Options of the service.'
        },
        Promotions: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Promotions'
                }
            ],
            description: '',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `Promotions` in `Data` instead.'
        },
        Type: {
            type: 'string',
            nullable: true,
            deprecated: true
        },
        Ordering: {
            type: 'integer',
            description: 'Order value for presentation purposes.',
            format: 'int32'
        },
        Data: {
            title: 'Service data',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/ServiceDataDiscriminator'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/BookableServiceData'
                        },
                        {
                            '$ref': '#/components/schemas/AdditionalServiceData'
                        }
                    ]
                }
            },
            description: 'Additional information about the specific service.',
            'x-coproduct': true,
            'x-schema-id': 'ServiceDataCoproductOfServiceDataDiscriminator'
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the service from external system.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the service in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the service in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    description: '',
    'x-schema-id': 'Service'
} as const;

export const $ServiceAvailabilityFilterParameters = {
    title: 'ServiceAvailabilityFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/#service) whose availability should be returned.',
            format: 'uuid'
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/): 367 hours if hours, 367 days if days, or 60 months if months.",
            format: 'date-time'
        },
        StartUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            deprecated: true
        },
        EndUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            deprecated: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceAvailabilityFilterParameters'
} as const;

export const $ServiceAvailabilityFilterParametersV20240122 = {
    title: 'ServiceAvailabilityFilterParametersV20240122',
    required: ['AccessToken', 'Client', 'ClientToken', 'FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc', 'Metrics', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) whose availability should be returned.',
            format: 'uuid'
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/): 367 hours if hours, 367 days if days, or 60 months if months.",
            format: 'date-time'
        },
        Metrics: {
            minItems: 1,
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceAvailabilityMetricTypeEnum'
            },
            description: 'Set of [Service availability metrics](https://mews-systems.gitbook.io/connector-api/operations/services/#service-availability-metrics) to be returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceAvailabilityFilterParametersV20240122'
} as const;

export const $ServiceAvailabilityResult = {
    title: 'ServiceAvailabilityResult',
    required: ['CategoryAvailabilities', 'TimeUnitStartsUtc'],
    type: 'object',
    properties: {
        DatesUtc: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            deprecated: true
        },
        TimeUnitStartsUtc: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.'
        },
        CategoryAvailabilities: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CategoryAvailability'
            },
            description: 'Resource category availabilities.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceAvailabilityResult'
} as const;

export const $ServiceAvailabilityResultV20240122 = {
    title: 'ServiceAvailabilityResultV20240122',
    required: ['ResourceCategoryAvailabilities', 'TimeUnitStartsUtc'],
    type: 'object',
    properties: {
        TimeUnitStartsUtc: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Set of all time units covered by the time interval; expressed in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        ResourceCategoryAvailabilities: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResourceCategoryAvailabilityV20240122'
            },
            description: 'Resource category availabilities. Can be empty if no resource categories are assigned to the service.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceAvailabilityResultV20240122'
} as const;

export const $ServiceAvailabilityUpdateData = {
    title: 'Availability update',
    required: ['FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc', 'ResourceCategoryId', 'UnitCountAdjustment'],
    type: 'object',
    properties: {
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units): 367 hours if hours, 367 days if days, or 60 months if months.",
            format: 'date-time'
        },
        StartUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            deprecated: true
        },
        EndUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            deprecated: true
        },
        ResourceCategoryId: {
            type: 'string',
            description: 'Unique identifier of the [Resource category](https://mews-systems.gitbook.io/connector-api/operations/resources#resource-category) whose availability to update.',
            format: 'uuid'
        },
        UnitCountAdjustment: {
            title: 'Int32 update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/Int32NullableUpdateValue'
                }
            ],
            description: 'Adjustment value to be applied on the interval, can be both positive and negative (relative adjustment, not an absolute number). If specified without `Value` parameter, removes all adjustments within the interval.'
        },
        AvailabilityBlockId: {
            type: 'string',
            description: 'Unique identifier of the [Availability block](https://mews-systems.gitbook.io/connector-api/operations/availabilityblocks#availability-block) whose availability to update.',
            format: 'uuid',
            nullable: true
        },
        PaxCounts: {
            maxItems: 5,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PaxCount'
            },
            description: 'Collection of predicted occupancy of availability adjustments. Relates how many adjustments are assigned to each count of guests.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceAvailabilityUpdateData'
} as const;

export const $ServiceAvailabilityUpdateParameters = {
    title: 'ServiceAvailabilityUpdateParameters',
    required: ['AccessToken', 'AvailabilityUpdates', 'Client', 'ClientToken', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/#service) to update.',
            format: 'uuid'
        },
        AvailabilityUpdates: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceAvailabilityUpdateData'
            },
            description: 'Availability updates.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceAvailabilityUpdateParameters'
} as const;

export const $ServiceDataDiscriminator = {
    title: 'Service data discriminator',
    enum: ['Bookable', 'Additional'],
    type: 'string'
} as const;

export const $ServiceFilterParameters = {
    title: 'ServiceFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which `Services` were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceFilterParameters'
} as const;

export const $ServiceOptions = {
    title: 'Service options',
    required: ['BillAsPackage'],
    type: 'object',
    properties: {
        BillAsPackage: {
            type: 'boolean',
            description: 'Products should be displayed as a single package instead of individual items.'
        }
    },
    additionalProperties: false,
    description: 'Options of the service.',
    'x-schema-id': 'ServiceOptions'
} as const;

export const $ServiceOrder = {
    title: 'ServiceOrder',
    required: ['AccountId', 'CreatedUtc', 'CreatorProfileId', 'Id', 'Options', 'Origin', 'ServiceId', 'State', 'UpdatedUtc', 'UpdaterProfileId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) that service order is made against.',
            format: 'uuid'
        },
        AccountId: {
            type: 'string',
            format: 'uuid'
        },
        AccountType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AccountType'
                }
            ],
            nullable: true
        },
        CreatorProfileId: {
            type: 'string',
            format: 'uuid'
        },
        UpdaterProfileId: {
            type: 'string',
            format: 'uuid'
        },
        BookerId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        Number: {
            type: 'string',
            nullable: true
        },
        State: {
            '$ref': '#/components/schemas/ServiceOrderState'
        },
        Origin: {
            '$ref': '#/components/schemas/ServiceOrderOrigin'
        },
        CommanderOrigin: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderCommanderOrigin'
                }
            ],
            nullable: true
        },
        OriginDetails: {
            type: 'string',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            format: 'date-time'
        },
        CancelledUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        VoucherId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        BusinessSegmentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        LinkedReservationId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        Options: {
            title: 'Service Order Options',
            allOf: [
                {
                    '$ref': '#/components/schemas/ServiceOrderOptions'
                }
            ]
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrder'
} as const;

export const $ServiceOrderCancellationReasonEnum = {
    title: 'Reservation cancellation reason',
    enum: ['Other', 'ConfirmationMissed', 'BookedElsewhere', 'ForceMajeure', 'GuestComplaint', 'NoShow', 'PriceTooHigh', 'ServiceNotAvailable', 'InputError', 'InvalidPayment', 'TravelAgency', 'RequestedByGuest', 'Update', 'BookingAbandoned', 'RequestedByBooker'],
    type: 'string',
    description: `

Other

ConfirmationMissed

BookedElsewhere

ForceMajeure

GuestComplaint

NoShow

PriceTooHigh

ServiceNotAvailable

InputError

InvalidPayment

TravelAgency

RequestedByGuest

Update

BookingAbandoned

RequestedByBooker`,
    'x-enumNames': ['Other', 'ConfirmationMissed', 'BookedElsewhere', 'ForceMajeure', 'GuestComplaint', 'NoShow', 'PriceTooHigh', 'ServiceNotAvailable', 'InputError', 'InvalidPayment', 'TravelAgency', 'RequestedByGuest', 'Update', 'BookingAbandoned', 'RequestedByBooker'],
    'x-enumDescriptions': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
} as const;

export const $ServiceOrderCommanderOrigin = {
    title: 'Commander origin',
    enum: ['InPerson', 'Channel', 'Phone', 'Email', 'Website', 'Message', 'CallCenter'],
    type: 'string'
} as const;

export const $ServiceOrderCommanderOriginEnum = {
    title: 'Commander origin',
    enum: ['InPerson', 'Channel', 'Phone', 'Email', 'Website', 'Message', 'CallCenter'],
    type: 'string',
    description: `

InPerson

Channel

Phone

Email

Website

Message

CallCenter`,
    'x-enumNames': ['InPerson', 'Channel', 'Phone', 'Email', 'Website', 'Message', 'CallCenter'],
    'x-enumDescriptions': ['', '', '', '', '', '', '']
} as const;

export const $ServiceOrderNoteAddParameters = {
    title: 'Service order note parameters',
    required: ['ServiceOrderId', 'Text'],
    type: 'object',
    properties: {
        ServiceOrderId: {
            type: 'string',
            description: 'Unique identifier of the `Service order` to which note will be added.',
            format: 'uuid'
        },
        Text: {
            minLength: 1,
            type: 'string',
            description: 'Content of the service order note.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderNoteAddParameters'
} as const;

export const $ServiceOrderNoteAdditionResult = {
    title: 'ServiceOrderNoteAdditionResult',
    required: ['ServiceOrderNotes'],
    type: 'object',
    properties: {
        ServiceOrderNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderNote'
            },
            description: 'Added service order notes.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderNoteAdditionResult'
} as const;

export const $ServiceOrderNoteDeleteParameters = {
    title: 'ServiceOrderNoteDeleteParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ServiceOrderNoteIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceOrderNoteIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the service order notes to be deleted.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderNoteDeleteParameters'
} as const;

export const $ServiceOrderNoteFilterParameters = {
    title: 'ServiceOrderNoteFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceOrderIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ServiceOrderIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Service order`. Reservation IDs or Order IDs can be used as service order identifiers.'
        },
        ServiceOrderNoteIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Service order note`. Use this property if you want to fetch specific service order notes.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Timestamp in UTC timezone ISO 8601 format when the service order note was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Types: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderNoteTypeEnum'
            },
            description: 'Type of the service order note. Defaults to `["General", "ChannelManager"]`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderNoteFilterParameters'
} as const;

export const $ServiceOrderNoteResult = {
    title: 'ServiceOrderNoteResult',
    required: ['ServiceOrderNotes'],
    type: 'object',
    properties: {
        ServiceOrderNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderNote'
            },
            description: 'The collection of service order notes.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest service order note returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older service order notes.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderNoteResult'
} as const;

export const $ServiceOrderNoteUpdateParameters = {
    title: 'Service order note update parameters',
    required: ['ServiceOrderNoteId'],
    type: 'object',
    properties: {
        ServiceOrderNoteId: {
            type: 'string',
            description: 'Unique identifier of the `Service order note`.',
            format: 'uuid'
        },
        Text: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Content of the service order note (or `null` if the content should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderNoteUpdateParameters'
} as const;

export const $ServiceOrderNoteUpdateResult = {
    title: 'ServiceOrderNoteUpdateResult',
    required: ['ServiceOrderNotes'],
    type: 'object',
    properties: {
        ServiceOrderNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderNote'
            },
            description: 'Updated service order notes.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderNoteUpdateResult'
} as const;

export const $ServiceOrderOptions = {
    title: 'Service Order Options',
    required: ['AllCompanionsCheckedIn', 'AnyCompanionCheckedIn', 'ConnectorCheckIn', 'OwnerCheckedIn'],
    type: 'object',
    properties: {
        OwnerCheckedIn: {
            type: 'boolean',
            description: 'Owner of the reservation checked in.'
        },
        AllCompanionsCheckedIn: {
            type: 'boolean',
            description: 'All companions of the reservation checked in.'
        },
        AnyCompanionCheckedIn: {
            type: 'boolean',
            description: 'Any of the companions of the reservation checked in.'
        },
        ConnectorCheckIn: {
            type: 'boolean',
            description: 'Check in was done via Connector API.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOrderOptions'
} as const;

export const $ServiceOrderOrigin = {
    title: 'Service order origin',
    enum: ['Distributor', 'ChannelManager', 'Commander', 'Import', 'Connector', 'Navigator'],
    type: 'string',
    'x-enumDescriptions': ['From the Mews Booking Engine or Booking Engine API.', 'From a channel manager.', 'From Mews Operations.', 'From an import process.', 'From the Mews Connector API.', 'From Mews Guest Services.']
} as const;

export const $ServiceOrderOriginEnum = {
    title: 'Service order origin',
    enum: ['Distributor', 'ChannelManager', 'Commander', 'Import', 'Connector', 'Navigator'],
    type: 'string',
    description: `

Distributor (From the Mews Booking Engine or Booking Engine API.)

ChannelManager (From a channel manager.)

Commander (From Mews Operations.)

Import (From an import process.)

Connector (From the Mews Connector API.)

Navigator (From Mews Guest Services.)`,
    'x-enumNames': ['Distributor', 'ChannelManager', 'Commander', 'Import', 'Connector', 'Navigator'],
    'x-enumDescriptions': ['From the Mews Booking Engine or Booking Engine API.', 'From a channel manager.', 'From Mews Operations.', 'From an import process.', 'From the Mews Connector API.', 'From Mews Guest Services.']
} as const;

export const $ServiceOrderState = {
    title: 'Service order state',
    enum: ['Inquired', 'Confirmed', 'Started', 'Processed', 'Canceled', 'Optional', 'Requested'],
    type: 'string',
    'x-enumDescriptions': ['Confirmed neither by the customer nor enterprise.', 'Confirmed by both parties, before check-in.', 'Checked in.', 'Checked out.', 'Canceled.', 'Confirmed by enterprise but not by the guest (the enterprise is holding resource for the guest).', 'Confirmed by the customer but not by the enterprise (waitlist).']
} as const;

export const $ServiceOrderStateEnum = {
    title: 'Service order state',
    enum: ['Inquired', 'Confirmed', 'Started', 'Processed', 'Canceled', 'Optional', 'Requested'],
    type: 'string',
    description: `

Inquired (Confirmed neither by the customer nor enterprise.)

Confirmed (Confirmed by both parties, before check-in.)

Started (Checked in.)

Processed (Checked out.)

Canceled (Canceled.)

Optional (Confirmed by enterprise but not by the guest (the enterprise is holding resource for the guest).)

Requested (Confirmed by the customer but not by the enterprise (waitlist).)`,
    'x-enumNames': ['Inquired', 'Confirmed', 'Started', 'Processed', 'Canceled', 'Optional', 'Requested'],
    'x-enumDescriptions': ['Confirmed neither by the customer nor enterprise.', 'Confirmed by both parties, before check-in.', 'Checked in.', 'Checked out.', 'Canceled.', 'Confirmed by enterprise but not by the guest (the enterprise is holding resource for the guest).', 'Confirmed by the customer but not by the enterprise (waitlist).']
} as const;

export const $ServiceOrderStateOld = {
    title: 'Service order state (ver 2017-04-12)',
    enum: ['Enquired', 'Confirmed', 'Started', 'Processed', 'Canceled', 'Optional', 'Requested'],
    type: 'string'
} as const;

export const $ServiceOverbookingLimit = {
    title: 'Service overbooking limit',
    required: ['CreatedUtc', 'FirstTimeUnitStartUtc', 'Id', 'IsActive', 'LastTimeUnitStartUtc', 'Limit', 'ServiceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the service overbooking limit.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the `Service`.',
            format: 'uuid'
        },
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units/), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        Limit: {
            type: 'integer',
            description: 'Number of overbookings allowed for the `Service`.',
            format: 'int32'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Timestamp in UTC timezone ISO 8601 format when the service overbooking was created.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Timestamp in UTC timezone ISO 8601 format when the service overbooking was updated.',
            format: 'date-time'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the service overbooking limit is still active.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOverbookingLimit'
} as const;

export const $ServiceOverbookingLimitClearData = {
    title: 'Service overbooking limits clear parameters',
    required: ['FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc'],
    type: 'object',
    properties: {
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's time unit: 367 hours if hours, 367 days if days, or 60 months if months.",
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOverbookingLimitClearData'
} as const;

export const $ServiceOverbookingLimitClearParameters = {
    title: 'ServiceOverbookingLimitClearParameters',
    required: ['AccessToken', 'ClearServiceOverbookingLimits', 'Client', 'ClientToken', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) overbooking limits will be set in.',
            format: 'uuid'
        },
        ClearServiceOverbookingLimits: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOverbookingLimitClearData'
            },
            description: 'Collection of service overbooking limits to be cleared.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOverbookingLimitClearParameters'
} as const;

export const $ServiceOverbookingLimitFilterParameters = {
    title: 'ServiceOverbookingLimitFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Services` associated with the service overbooking limits.'
        },
        ServiceOverbookingLimitIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the service overbooking limits.',
            nullable: true
        },
        CollidingUtc: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the service overbooking limit is active.',
            nullable: true
        },
        UpdatedUtc: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the service overbooking limits were updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityState'
            },
            description: 'Whether to return only active, only deleted, or both types of record. If not specified, only active records will be returned.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOverbookingLimitFilterParameters'
} as const;

export const $ServiceOverbookingLimitResult = {
    title: 'ServiceOverbookingLimitResult',
    required: ['ServiceOverbookingLimits'],
    type: 'object',
    properties: {
        ServiceOverbookingLimits: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOverbookingLimit'
            },
            description: 'Service overbooking limits of the default service.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOverbookingLimitResult'
} as const;

export const $ServiceOverbookingLimitSetData = {
    title: 'Service overbooking limits set parameters',
    required: ['FirstTimeUnitStartUtc', 'LastTimeUnitStartUtc', 'Limit'],
    type: 'object',
    properties: {
        FirstTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format.',
            format: 'date-time'
        },
        LastTimeUnitStartUtc: {
            minLength: 1,
            type: 'string',
            description: "End of the time interval, expressed as the timestamp for the start of the last [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units), in UTC timezone ISO 8601 format. The maximum size of time interval depends on the service's [time unit](https://mews-systems.gitbook.io/connector-api/concepts/time-units): 367 days.",
            format: 'date-time'
        },
        Limit: {
            maximum: 2147483647,
            minimum: 0,
            type: 'integer',
            description: 'Number of overbookings allowed for the `Service`. Must be non-negative.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOverbookingLimitSetData'
} as const;

export const $ServiceOverbookingLimitSetParameters = {
    title: 'ServiceOverbookingLimitSetParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'ServiceId', 'SetServiceOverbookingLimits'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using [Portfolio Access Tokens](https://mews-systems.gitbook.io/connector-api/concepts/multi-property), ignored otherwise.',
            format: 'uuid',
            nullable: true
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) overbooking limits will be set in.',
            format: 'uuid'
        },
        SetServiceOverbookingLimits: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServiceOverbookingLimitSetData'
            },
            description: 'Collection of service overbooking limits to be set.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceOverbookingLimitSetParameters'
} as const;

export const $ServiceResult = {
    title: 'ServiceResult',
    required: ['Services'],
    type: 'object',
    properties: {
        Services: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Service'
            },
            description: 'Services offered by the enterprise.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'ServiceResult'
} as const;

export const $SetRestrictionParameters = {
    title: 'SetRestrictionParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Data', 'ServiceId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        ServiceId: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services#service) restrictions will be set in.',
            'x-schema-id': 'HybridIdentifier'
        },
        Data: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RestrictionSetData'
            },
            description: 'Parameters of restrictions.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SetRestrictionParameters'
} as const;

export const $Sex = {
    title: 'Sex',
    enum: ['Male', 'Female'],
    type: 'string'
} as const;

export const $SexEnum = {
    title: 'Sex',
    enum: ['Male', 'Female'],
    type: 'string',
    description: `

Male

Female`,
    'x-enumNames': ['Male', 'Female'],
    'x-enumDescriptions': ['', '']
} as const;

export const $Source = {
    title: 'Source',
    required: ['Code', 'Id', 'Name', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the source.',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name of the source.'
        },
        Type: {
            '$ref': '#/components/schemas/SourceType'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Date and time when the source was last updated, expressed in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Code: {
            type: 'integer',
            description: 'Code of the source.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Source'
} as const;

export const $SourceAssignment = {
    title: 'Source assignment',
    required: ['Id', 'IsPrimary', 'ReservationGroupId', 'SourceId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the source assignement.',
            format: 'uuid'
        },
        ReservationGroupId: {
            type: 'string',
            description: 'Unique identifier of the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).',
            format: 'uuid'
        },
        SourceId: {
            type: 'string',
            description: 'Unique identifier of the [Source](https://mews-systems.gitbook.io/connector-api/operations/sources/#source).',
            format: 'uuid'
        },
        IsPrimary: {
            type: 'boolean',
            description: 'Specifies the primary source for the [Reservation group](https://mews-systems.gitbook.io/connector-api/operations/reservations/#reservation-group).'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceAssignment'
} as const;

export const $SourceAssignmentFilterParameters = {
    title: 'SourceAssignmentFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ReservationGroupIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the `Reservation group`.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval of `Reservation group` last update date and time.',
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceAssignmentFilterParameters'
} as const;

export const $SourceAssignmentFilterParametersV20240920 = {
    title: 'SourceAssignmentFilterParametersV20240920',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        ReservationIds: {
            maxItems: 100,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of `Reservation`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceAssignmentFilterParametersV20240920'
} as const;

export const $SourceAssignmentResult = {
    title: 'SourceAssignmentResult',
    required: ['Cursor', 'SourceAssignments'],
    type: 'object',
    properties: {
        SourceAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SourceAssignment'
            },
            description: 'Assignments between reservation group and sources.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest source assignment returned. This can be used in `Limitation` in a subsequent request to fetch the next batch of older source assignments.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceAssignmentResult'
} as const;

export const $SourceAssignmentResultV20240920 = {
    title: 'SourceAssignmentResultV20240920',
    required: ['SourceAssignments'],
    type: 'object',
    properties: {
        SourceAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SourceAssignmentV20240920'
            },
            description: 'Assignments between `Reservation` and `Source`.'
        },
        Cursor: {
            type: 'string',
            description: 'Opaque pagination cursor which can be used in `Limitation` to fetch newer source assignments.',
            format: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceAssignmentResultV20240920'
} as const;

export const $SourceAssignmentV20240920 = {
    title: 'Source assignments (ver 2024-09-20)',
    required: ['Id', 'IsPrimary', 'ReservationId', 'SourceId'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the source assignment.',
            format: 'uuid'
        },
        ReservationId: {
            type: 'string',
            description: 'Unique identifier of the `Reservation`.',
            format: 'uuid'
        },
        SourceId: {
            type: 'string',
            description: 'Unique identifier of the `Source`.',
            format: 'uuid'
        },
        IsPrimary: {
            type: 'boolean',
            description: 'Specifies whether the source is primary for the `Reservation`.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceAssignmentV20240920'
} as const;

export const $SourceFilterParameters = {
    title: 'SourceFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        SourceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Sources](https://mews-systems.gitbook.io/connector-api/operations/sources/#source).',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the source was updated.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceFilterParameters'
} as const;

export const $SourceResult = {
    title: 'SourceResult',
    required: ['Sources'],
    type: 'object',
    properties: {
        Sources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Source'
            },
            description: 'The reservation sources.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the last and hence oldest source returned. This can be used in [Limitation](https://mews-systems.gitbook.io/connector-api/guidelines/pagination/#limitation) in a subsequent request to fetch the next batch of older sources.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SourceResult'
} as const;

export const $SourceType = {
    title: 'Source type',
    enum: ['OnlineTravelAgency', 'CentralReservationSystem', 'GlobalDistributionSystem', 'AlternativeDistributionSystem', 'SalesAndCateringSystem', 'PropertyManagementSystem', 'TourOperatorSystem', 'OnlineBookingEngine', 'Kiosk', 'Agent'],
    type: 'string',
    description: 'Type of the source.'
} as const;

export const $SpaceData = {
    title: 'SpaceData',
    required: ['FloorNumber'],
    type: 'object',
    properties: {
        FloorNumber: {
            minLength: 1,
            type: 'string'
        },
        LocationNotes: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SpaceData'
} as const;

export const $StringUpdateValue = {
    title: 'String update value',
    type: 'object',
    properties: {
        Value: {
            type: 'string',
            description: 'Value which is to be updated.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'StringUpdateValue'
} as const;

export const $SurchargeConfiguration = {
    title: 'Surcharging fees configuration',
    required: ['SurchargeFees'],
    type: 'object',
    properties: {
        SurchargeFees: {
            title: 'CreditCardTypeDecimalIDictionary',
            type: 'object',
            properties: {
                MasterCard: {
                    type: 'number',
                    format: 'double'
                },
                Visa: {
                    type: 'number',
                    format: 'double'
                },
                Amex: {
                    type: 'number',
                    format: 'double'
                },
                Discover: {
                    type: 'number',
                    format: 'double'
                },
                DinersClub: {
                    type: 'number',
                    format: 'double'
                },
                Jcb: {
                    type: 'number',
                    format: 'double'
                },
                Maestro: {
                    type: 'number',
                    format: 'double'
                },
                UnionPay: {
                    type: 'number',
                    format: 'double'
                },
                VPay: {
                    type: 'number',
                    format: 'double'
                },
                RuPay: {
                    type: 'number',
                    format: 'double'
                },
                Dankort: {
                    type: 'number',
                    format: 'double'
                },
                Mir: {
                    type: 'number',
                    format: 'double'
                },
                Verve: {
                    type: 'number',
                    format: 'double'
                },
                Troy: {
                    type: 'number',
                    format: 'double'
                },
                PostFinance: {
                    type: 'number',
                    format: 'double'
                },
                Giro: {
                    type: 'number',
                    format: 'double'
                },
                Bancomat: {
                    type: 'number',
                    format: 'double'
                },
                Bc: {
                    type: 'number',
                    format: 'double'
                },
                CarteBleue: {
                    type: 'number',
                    format: 'double'
                },
                Eftpos: {
                    type: 'number',
                    format: 'double'
                },
                Eps: {
                    type: 'number',
                    format: 'double'
                },
                Interac: {
                    type: 'number',
                    format: 'double'
                },
                Isracard: {
                    type: 'number',
                    format: 'double'
                },
                Meps: {
                    type: 'number',
                    format: 'double'
                },
                Nets: {
                    type: 'number',
                    format: 'double'
                },
                Bancontact: {
                    type: 'number',
                    format: 'double'
                }
            },
            additionalProperties: false,
            description: 'Dictionary keys are `CreditCardType` and values are surcharging fees as a percentage.',
            'x-schema-id': 'CreditCardTypeDecimalIDictionary'
        },
        SurchargeServiceId: {
            type: 'string',
            description: 'Unique identifier of the surcharging `Service`.',
            format: 'uuid',
            nullable: true
        },
        SurchargeTaxCode: {
            type: 'string',
            description: 'Surcharging fee `TaxCode`.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'SurchargeConfiguration'
} as const;

export const $Task = {
    title: 'Task',
    required: ['ClosedUtc', 'CreatedUtc', 'DeadlineUtc', 'Name', 'State'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the task.',
            format: 'uuid'
        },
        EnterpriseId: {
            type: 'string',
            description: 'Unique identifier of the enterprise. Required when using Portfolio Access Tokens, ignored otherwise.',
            format: 'uuid'
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name (or title) of the task.'
        },
        State: {
            minLength: 1,
            type: 'string',
            description: 'State of the task.'
        },
        Description: {
            type: 'string',
            description: 'Further description of the task.',
            nullable: true
        },
        DepartmentId: {
            type: 'string',
            description: 'Unique identifier of the Department the task is addressed to.',
            format: 'uuid',
            nullable: true
        },
        ServiceOrderId: {
            type: 'string',
            description: 'Unique identifier of the service order (reservation or product service order) the task is linked with.',
            format: 'uuid',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the task in UTC timezone in ISO 8601 format.'
        },
        DeadlineUtc: {
            minLength: 1,
            type: 'string',
            description: 'Deadline date and time of the task in UTC timezone in ISO 8601 format.'
        },
        ClosedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the task in UTC timezone in ISO 8601 format.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Task'
} as const;

export const $TaskAddParameters = {
    title: 'TaskAddParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'DeadlineUtc', 'Name'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        DepartmentId: {
            type: 'string',
            description: 'Unique identifier of the [Department](https://mews-systems.gitbook.io/connector-api/operations/departments/#department) the task is addressed to.',
            format: 'uuid',
            nullable: true
        },
        ServiceOrderId: {
            type: 'string',
            description: 'Unique identifier of the service order (reservation or product service order) the task is linked with.',
            format: 'uuid',
            nullable: true
        },
        Name: {
            minLength: 1,
            type: 'string',
            description: 'Name (or title) of the task.'
        },
        Description: {
            type: 'string',
            description: 'Further decription of the task.',
            nullable: true
        },
        DeadlineUtc: {
            minLength: 1,
            type: 'string',
            description: 'Deadline of the task in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaskAddParameters'
} as const;

export const $TaskFilterParameters = {
    title: 'TaskFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        CreatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the Task was created.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ClosedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the Task was closed.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        DeadlineUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: 'Interval in which the Task has a deadline.',
            nullable: true,
            'x-max-interval-in-months': 3
        },
        TaskIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Tasks](https://mews-systems.gitbook.io/connector-api/operations/#task).',
            nullable: true
        },
        DepartmentIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Departments](https://mews-systems.gitbook.io/connector-api/operations/departments/#department). Not possible to be used standalone, needs to be used in combination with other filters.',
            nullable: true
        },
        ServiceOrderIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of service orders (reservations or product service orders).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaskFilterParameters'
} as const;

export const $TaskResult = {
    title: 'TaskResult',
    required: ['Tasks'],
    type: 'object',
    properties: {
        Tasks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Task'
            },
            description: 'The filtered tasks.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaskResult'
} as const;

export const $TaxBreakdown = {
    title: 'Tax breakdown',
    required: ['Items'],
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxBreakdownItem'
            },
            description: 'Tax breakdown items per each tax rate applied.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaxBreakdown'
} as const;

export const $TaxBreakdownItem = {
    title: 'Tax breakdown item',
    required: ['NetValue', 'TaxValue'],
    type: 'object',
    properties: {
        TaxRateCode: {
            type: 'string',
            description: 'Tax rate code for the item. `null` for untaxed amounts.',
            nullable: true
        },
        NetValue: {
            type: 'number',
            description: 'The net value that the tax is calculated from.',
            format: 'double'
        },
        TaxValue: {
            type: 'number',
            description: 'The value of the tax.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaxBreakdownItem'
} as const;

export const $TaxEnvironment = {
    title: 'Tax environment',
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            description: 'Code of the tax environment.',
            nullable: true
        },
        CountryCode: {
            type: 'string',
            description: 'ISO 3166-1 alpha-3 code of associated country, e.g. USA or GBR.',
            nullable: true
        },
        ValidityStartUtc: {
            type: 'string',
            description: 'If specified, marks the start of the validity interval in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        ValidityEndUtc: {
            type: 'string',
            description: 'If specified, marks the end of the validity interval in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        TaxationCodes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Codes of the [Taxations](https://mews-systems.gitbook.io/connector-api/operations/#taxation) that are used by this environment.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaxEnvironment'
} as const;

export const $TaxEnvironmentResult = {
    title: 'TaxEnvironmentResult',
    type: 'object',
    properties: {
        TaxEnvironments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxEnvironment'
            },
            description: 'The supported tax environments.',
            nullable: true
        },
        Taxations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OldTaxation'
            },
            nullable: true,
            deprecated: true
        },
        TaxRates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxRate'
            },
            nullable: true,
            deprecated: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaxEnvironmentResult'
} as const;

export const $TaxExemptionReasonTypeEnum = {
    title: 'Tax exemption reason type',
    enum: ['IT_N1', 'IT_N2_2', 'IT_N3_5', 'IT_N4', 'IT_N5', 'PL_ZW', 'PL_NP'],
    type: 'string',
    description: `

IT_N1 (N1 - Escluse ex art.15)

IT_N2_2 (N2.2 - Non soggette – altri casi)

IT_N3_5 (N3.5 - Non imponibili – a seguito di dichiarazioni d’intento)

IT_N4 (N4 - Esenti)

IT_N5 (N5 - Regime del margine / IVA non esposta in fattura)

PL_ZW (ZW - Zwolniony)

PL_NP (NP - Nie podlega)`,
    'x-enumNames': ['IT_N1', 'IT_N2_2', 'IT_N3_5', 'IT_N4', 'IT_N5', 'PL_ZW', 'PL_NP'],
    'x-enumDescriptions': ['N1 - Escluse ex art.15', 'N2.2 - Non soggette – altri casi', 'N3.5 - Non imponibili – a seguito di dichiarazioni d’intento', 'N4 - Esenti', 'N5 - Regime del margine / IVA non esposta in fattura', 'ZW - Zwolniony', 'NP - Nie podlega']
} as const;

export const $TaxRate = {
    title: 'Tax rate',
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            description: 'Code of the tax rate. To be used when posting revenue items which should be accompanied by the tax rate(s) applicable to the nature of the item and the tax environment.',
            nullable: true
        },
        TaxationCode: {
            type: 'string',
            description: 'Code of the [Taxation](https://mews-systems.gitbook.io/connector-api/operations/#taxation) the rate is part of.',
            nullable: true
        },
        Value: {
            type: 'number',
            format: 'double'
        },
        ValidityInvervalsUtc: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DateTimeIntervalUtc'
            },
            nullable: true
        },
        Strategy: {
            title: 'Strategy',
            type: 'object',
            properties: {
                Discriminator: {
                    '$ref': '#/components/schemas/TaxRateStrategyDiscriminator'
                },
                Value: {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/RelativeTaxRateStrategy'
                        },
                        {
                            '$ref': '#/components/schemas/FlatTaxRateStrategy'
                        },
                        {
                            '$ref': '#/components/schemas/DependentTaxRateStrategy'
                        }
                    ]
                }
            },
            description: 'Tax strategy type, e.g. relative, flat or dependent.',
            'x-coproduct': true,
            'x-schema-id': 'TaxRateStrategyCoproductOfTaxRateStrategyDiscriminator'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaxRate'
} as const;

export const $TaxRateStrategyDiscriminator = {
    enum: ['Relative', 'Flat', 'Dependent'],
    type: 'string'
} as const;

export const $TaxValue = {
    title: 'Tax value',
    required: ['Value'],
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            description: 'Code corresponding to tax type.',
            nullable: true
        },
        Value: {
            type: 'number',
            description: 'Amount of tax applied.',
            format: 'double'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaxValue'
} as const;

export const $Taxation = {
    title: 'Taxation',
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            description: 'Code of the taxation.',
            nullable: true
        },
        Name: {
            type: 'string',
            description: 'Name of the taxation.',
            nullable: true
        },
        LocalName: {
            type: 'string',
            description: 'Local name of the taxation.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Taxation'
} as const;

export const $TaxationResult = {
    title: 'TaxationResult',
    type: 'object',
    properties: {
        Taxations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Taxation'
            },
            description: 'The supported taxations.',
            nullable: true
        },
        TaxRates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaxRate'
            },
            description: 'The supported tax rates.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TaxationResult'
} as const;

export const $TimeFilterInterval = {
    title: 'TimeFilterInterval',
    type: 'object',
    properties: {
        StartUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        EndUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TimeFilterInterval'
} as const;

export const $TimeUnitPeriodEnum = {
    title: 'Time unit period',
    enum: ['Day', 'Month', 'Hour'],
    type: 'string',
    description: `

Day

Month

Hour`,
    'x-enumNames': ['Day', 'Month', 'Hour'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $Title = {
    title: 'Title',
    enum: ['Mister', 'Miss', 'Misses'],
    type: 'string',
    description: `Type of the title prefix of the customer.

Note that the value should not be used as-is, but localized. For example, the value \`Misses\` should be displayed as \`Mrs.\` in English and \`Fr.\` in German.

Mister (Mr.)

Miss (Ms.)

Misses (Mrs.)`,
    'x-enumNames': ['Mister', 'Miss', 'Misses'],
    'x-enumDescriptions': ['Mr.', 'Ms.', 'Mrs.'],
    'x-schema-id': 'Title',
    'x-showDescription': true
} as const;

export const $TokenizedCreditCardParameters = {
    title: 'TokenizedCreditCardParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'CreditCardData', 'CustomerId'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        CustomerId: {
            type: 'string',
            description: 'Unique identifier of the [Customer](https://mews-systems.gitbook.io/connector-api/operations/customers/#customer).',
            format: 'uuid'
        },
        CreditCardData: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CreditCardData'
                }
            ],
            description: 'Credit card details provided by PCI provider.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TokenizedCreditCardParameters'
} as const;

export const $TravelAgencyContract = {
    title: 'Travel agency contract',
    required: ['CompanyId', 'CreatedUtc', 'Id', 'IsActive', 'ServiceId', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the contract.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of the [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the contract is related to.',
            format: 'uuid'
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of the contracted [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company).',
            format: 'uuid'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the contract is still active.'
        },
        CommissionIncluded: {
            type: 'boolean',
            description: 'Whether commission of the travel agency is included in the rate. When CommissionIncluded is not provided in the response, that means commission is unspecified, when set to true it means the the commission is included in the rate and false means the commission in not included in the rate.',
            nullable: true
        },
        Commission: {
            type: 'number',
            description: 'Commission of the travel agency.',
            format: 'double',
            nullable: true
        },
        ChannelManagerAbsoluteAdjustment: {
            type: 'number',
            description: 'Flat fee added to (or subtracted from) the reservation price when coming from Channel Managers.',
            format: 'double',
            nullable: true
        },
        ChannelManagerRelativeAdjustment: {
            type: 'number',
            description: 'Percentage of the reservation price added to (or subtracted from) price when coming from Channel Managers.',
            format: 'double',
            nullable: true
        },
        Options: {
            title: 'TravelAgencyContractOptions',
            allOf: [
                {
                    '$ref': '#/components/schemas/TravelAgencyContractOptions'
                }
            ],
            description: 'Options of the travel agency contract.',
            nullable: true
        },
        AccountingCode: {
            type: 'string',
            description: 'Accounting code of the travel agency contract.',
            nullable: true
        },
        InvoiceDueInterval: {
            type: 'string',
            description: 'The maximum time, when the invoice has to be be paid in ISO 8601 duration format.',
            nullable: true
        },
        ChannelManagerBusinessSegmentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        ContactPerson: {
            type: 'string',
            description: 'Contact person of the travel agency.',
            nullable: true
        },
        ContactEmail: {
            type: 'string',
            description: 'Contact email of the travel agency.',
            format: 'email',
            nullable: true
        },
        AdditionalContactInfo: {
            type: 'string',
            description: 'Additional contact info of the travel agency.',
            nullable: true
        },
        Notes: {
            type: 'string',
            description: 'Additional notes of the travel agency contract.',
            nullable: true
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the travel agency contract in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the travel agency contract in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TravelAgencyContract'
} as const;

export const $TravelAgencyContractAddParameters = {
    title: 'TravelAgencyContractAddParameters',
    required: ['CompanyId', 'ServiceId'],
    type: 'object',
    properties: {
        ServiceId: {
            type: 'string',
            format: 'uuid'
        },
        CompanyId: {
            type: 'string',
            format: 'uuid'
        },
        CommissionIncluded: {
            type: 'boolean',
            nullable: true
        },
        Commission: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        ChannelManagerBusinessSegmentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        ChannelManagerAbsoluteAdjustment: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        ChannelManagerRelativeAdjustment: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Options: {
            title: 'TravelAgencyContractOptions',
            allOf: [
                {
                    '$ref': '#/components/schemas/TravelAgencyContractOptions'
                }
            ],
            description: 'Options of the travel agency contract.',
            nullable: true
        },
        AccountingCode: {
            type: 'string',
            nullable: true
        },
        InvoiceDueInterval: {
            type: 'string',
            nullable: true
        },
        ContactPerson: {
            type: 'string',
            nullable: true
        },
        ContactEmail: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        AdditionalContactInfo: {
            type: 'string',
            nullable: true
        },
        Notes: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TravelAgencyContractAddParameters'
} as const;

export const $TravelAgencyContractOptions = {
    title: 'TravelAgencyContractOptions',
    type: 'object',
    properties: {
        IncludeCancellationFeeInCommissionEstimate: {
            type: 'boolean'
        },
        SkipAutomaticSettlement: {
            type: 'boolean'
        }
    },
    additionalProperties: false,
    description: 'Options of the travel agency contract.',
    'x-schema-id': 'TravelAgencyContractOptions'
} as const;

export const $TravelAgencyContractOptionsParameters = {
    title: 'TravelAgencyContractOptionsParameters',
    type: 'object',
    properties: {
        IncludeCancellationFeeInCommissionEstimate: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        },
        SkipAutomaticSettlement: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanUpdateValue'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TravelAgencyContractOptionsParameters'
} as const;

export const $TravelAgencyContractUpdateParameters = {
    title: 'TravelAgencyContractUpdateParameters',
    required: ['TravelAgencyContractId'],
    type: 'object',
    properties: {
        TravelAgencyContractId: {
            type: 'string',
            format: 'uuid'
        },
        CommissionIncluded: {
            title: 'Boolean update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/BooleanNullableUpdateValue'
                }
            ],
            nullable: true
        },
        Commission: {
            title: 'Decimal update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/DecimalNullableUpdateValue'
                }
            ],
            nullable: true
        },
        ChannelManagerBusinessSegmentId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            nullable: true
        },
        ChannelManagerAbsoluteAdjustment: {
            title: 'Decimal update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/DecimalNullableUpdateValue'
                }
            ],
            nullable: true
        },
        ChannelManagerRelativeAdjustment: {
            title: 'Decimal update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/DecimalNullableUpdateValue'
                }
            ],
            nullable: true
        },
        Options: {
            title: 'TravelAgencyContractOptionsParameters',
            allOf: [
                {
                    '$ref': '#/components/schemas/TravelAgencyContractOptionsParameters'
                }
            ],
            nullable: true
        },
        AccountingCode: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        InvoiceDueInterval: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        ContactPerson: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        ContactEmail: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            format: 'email',
            nullable: true
        },
        AdditionalContactInfo: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        },
        Notes: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'TravelAgencyContractUpdateParameters'
} as const;

export const $Unit = {
    type: 'object',
    additionalProperties: false
} as const;

export const $UpdateValueCurrencyValueOld = {
    title: 'Currency value (ver 2018-06-07) update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Currency value (ver 2018-06-07)',
            allOf: [
                {
                    '$ref': '#/components/schemas/CurrencyValueOld'
                }
            ],
            description: 'Value in the specified currency.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'UpdateValueCurrencyValueOld'
} as const;

export const $Voucher = {
    title: 'Voucher',
    required: ['CreatedUtc', 'Id', 'IsActive', 'Name', 'ServiceId', 'Type', 'UpdatedUtc'],
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of voucher.',
            format: 'uuid'
        },
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of [Service](https://mews-systems.gitbook.io/connector-api/operations/services/#service) the voucher belongs to.',
            format: 'uuid'
        },
        Name: {
            maxLength: 128,
            minLength: 1,
            type: 'string',
            description: 'Internal name of the voucher.'
        },
        CreatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Creation date and time of the voucher in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        UpdatedUtc: {
            minLength: 1,
            type: 'string',
            description: 'Last update date and time of the voucher in UTC timezone in ISO 8601 format.',
            format: 'date-time'
        },
        Type: {
            title: 'Voucher Type',
            allOf: [
                {
                    '$ref': '#/components/schemas/VoucherTypeEnum'
                }
            ],
            description: `Type of the voucher.

Public

PartnerCompany

TravelAgency`,
            'x-enumNames': ['Public', 'PartnerCompany', 'TravelAgency'],
            'x-enumDescriptions': ['', '', '']
        },
        ActivityState: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ActivityState'
                }
            ],
            description: 'Whether voucher is active or deleted.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `IsActive` instead.'
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) the voucher is related to.',
            format: 'uuid',
            nullable: true
        },
        TravelAgencyId: {
            type: 'string',
            description: 'Unique identifier of [Company](https://mews-systems.gitbook.io/connector-api/operations/companies/#company) with [Travel agency contract](https://mews-systems.gitbook.io/connector-api/operations/companycontracts/#travel-agency-contract) the voucher is related to.',
            format: 'uuid',
            nullable: true
        },
        OccupiableIntervalStartUtc: {
            type: 'string',
            description: 'Start of the time interval, expressed as the timestamp for the start of the first time unit, in UTC timezone ISO 8601 format (or null if the start time should not be updated).',
            format: 'date-time',
            nullable: true
        },
        OccupiableIntervalEndUtc: {
            type: 'string',
            description: 'End of the time interval, expressed as the timestamp for the start of the last time unit, in UTC timezone ISO 8601 format (or null if the end time should not be updated).',
            format: 'date-time',
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the voucher from external system.',
            nullable: true
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the voucher is still active.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'Voucher'
} as const;

export const $VoucherAddParameters = {
    title: 'Voucher Parameters',
    required: ['Name', 'ServiceId', 'Type'],
    type: 'object',
    properties: {
        ServiceId: {
            type: 'string',
            description: 'Unique identifier of Service.',
            format: 'uuid'
        },
        Name: {
            maxLength: 128,
            minLength: 1,
            type: 'string',
            description: 'Internal name of the voucher.'
        },
        Type: {
            title: 'Voucher Type',
            allOf: [
                {
                    '$ref': '#/components/schemas/VoucherTypeEnum'
                }
            ],
            description: `Type of the voucher.

Public

PartnerCompany

TravelAgency`,
            'x-enumNames': ['Public', 'PartnerCompany', 'TravelAgency'],
            'x-enumDescriptions': ['', '', '']
        },
        CompanyId: {
            type: 'string',
            description: 'Unique identifier of Company.',
            format: 'uuid',
            nullable: true
        },
        AssignedRateIds: {
            maxItems: 10,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of Rates.',
            nullable: true
        },
        OccupiableIntervalStartUtc: {
            type: 'string',
            description: 'Start of the interval in which the voucher can be applied.',
            format: 'date-time',
            nullable: true
        },
        OccupiableIntervalEndUtc: {
            type: 'string',
            description: 'End of the interval in which the voucher can be applied.',
            format: 'date-time',
            nullable: true
        },
        ExternalIdentifier: {
            maxLength: 255,
            type: 'string',
            description: 'Identifier of the voucher from external system.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherAddParameters'
} as const;

export const $VoucherAssignment = {
    title: 'Voucher assignment',
    type: 'object',
    properties: {
        VoucherId: {
            type: 'string',
            description: 'Unique identifier of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher).',
            format: 'uuid'
        },
        RateId: {
            type: 'string',
            description: 'Unique identifier of [Rate](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate) the voucher is assigned with.',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherAssignment'
} as const;

export const $VoucherCode = {
    title: 'Voucher code',
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Unique identifier of the voucher code.',
            format: 'uuid'
        },
        VoucherId: {
            type: 'string',
            description: 'Unique identifier of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher) the code belongs to.',
            format: 'uuid'
        },
        Value: {
            type: 'string',
            description: 'Value of voucher code used by customers.',
            nullable: true
        },
        ValidityStartUtc: {
            type: 'string',
            description: 'If specified, marks the beginning of interval in which the code can be used.',
            nullable: true
        },
        ValidityEndUtc: {
            type: 'string',
            description: 'If specified, marks the end of interval in which the code can be used.',
            nullable: true
        },
        CreatedUtc: {
            type: 'string',
            description: 'Creation date and time of the voucher in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        UpdatedUtc: {
            type: 'string',
            description: 'Last update date and time of the voucher in UTC timezone in ISO 8601 format.',
            nullable: true
        },
        ActivityState: {
            type: 'string',
            description: 'Whether voucher code is active or deleted.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `IsActive` instead.'
        },
        IsActive: {
            type: 'boolean',
            description: 'Whether the voucher code is still active.'
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherCode'
} as const;

export const $VoucherCodeAddParameters = {
    title: 'Voucher code parameters',
    required: ['Value', 'VoucherId'],
    type: 'object',
    properties: {
        VoucherId: {
            type: 'string',
            description: 'Unique identifier of [Voucher](#voucher) the code belongs to.',
            format: 'uuid'
        },
        Value: {
            maxLength: 128,
            minLength: 1,
            type: 'string',
            description: 'Value of voucher code used by customers.'
        },
        ValidityStartUtc: {
            type: 'string',
            description: 'If specified, marks the beginning of interval in which the code can be used.',
            format: 'date-time',
            nullable: true
        },
        ValidityEndUtc: {
            type: 'string',
            description: 'If specified, marks the end of interval in which the code can be used.',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherCodeAddParameters'
} as const;

export const $VoucherCodeFilterParameters = {
    title: 'VoucherCodeFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Limitation', 'VoucherIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        VoucherCodeIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the voucher codes.',
            nullable: true
        },
        VoucherIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of vouchers.'
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            description: "Interval of voucher code's last update date and time.",
            nullable: true,
            'x-max-interval-in-months': 3
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherCodeFilterParameters'
} as const;

export const $VoucherCodeResult = {
    title: 'VoucherCodeResult',
    required: ['VoucherCodes'],
    type: 'object',
    properties: {
        VoucherCodes: {
            maxItems: 1000,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VoucherCode'
            },
            description: 'Information about voucher codes used by customers.'
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherCodeResult'
} as const;

export const $VoucherExtent = {
    title: 'Voucher Extent',
    type: 'object',
    properties: {
        Vouchers: {
            type: 'boolean',
            description: 'Whether the response should contain main information about vouchers.',
            nullable: true
        },
        VoucherCodes: {
            type: 'boolean',
            description: 'Whether the response should contain voucher codes used by customers.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `voucherCodes/getAll`'
        },
        VoucherAssignments: {
            type: 'boolean',
            description: 'Whether the response should contain assignments between vouchers and Rates.',
            nullable: true
        },
        Companies: {
            type: 'boolean',
            description: 'Whether the response should contain detail of related companies.',
            nullable: true,
            deprecated: true,
            'x-deprecatedMessage': 'Use `companies/getAll`'
        },
        Rates: {
            type: 'boolean',
            description: 'Whether the response should contain detail of assigned rates.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Extent of data to be returned. Whether only specific voucher info should be returned or related items as well.',
    'x-schema-id': 'VoucherExtent'
} as const;

export const $VoucherFilterParameters = {
    title: 'VoucherFilterParameters',
    required: ['AccessToken', 'Client', 'ClientToken', 'Extent', 'Limitation', 'ServiceIds'],
    type: 'object',
    properties: {
        ClientToken: {
            minLength: 1,
            type: 'string',
            description: 'Token identifying the client application.'
        },
        AccessToken: {
            minLength: 1,
            type: 'string',
            description: 'Access token of the client application.'
        },
        Client: {
            minLength: 1,
            type: 'string',
            description: 'Name and version of the client application.'
        },
        Limitation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Limitation'
                }
            ],
            description: 'Limitation on the quantity of data returned and optional Cursor for the starting point of data.'
        },
        EnterpriseIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the Enterprises. If not specified, the operation returns data for all enterprises within scope of the Access Token.',
            nullable: true
        },
        Extent: {
            title: 'Voucher Extent',
            allOf: [
                {
                    '$ref': '#/components/schemas/VoucherExtent'
                }
            ],
            description: 'Extent of data to be returned. Whether only specific voucher info should be returned or related items as well.'
        },
        ServiceIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of [Services](https://mews-systems.gitbook.io/connector-api/operations/services/#service) where the vouchers belong to.'
        },
        VoucherIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of vouchers.',
            nullable: true
        },
        CompanyIds: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            description: 'Unique identifiers of the companies.',
            nullable: true
        },
        VoucherCodeValues: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Value of voucher codes used by customers.',
            nullable: true
        },
        ActivityStates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityStates'
            },
            description: 'Whether to return only active, only deleted, or both types of record. If not specified, both active and deleted records will be returned.',
            nullable: true
        },
        UpdatedUtc: {
            title: 'TimeFilterInterval',
            allOf: [
                {
                    '$ref': '#/components/schemas/TimeFilterInterval'
                }
            ],
            nullable: true,
            'x-max-interval-in-months': 3
        },
        ExternalIdentifiers: {
            maxItems: 1000,
            minItems: 1,
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Identifiers of [Voucher](https://mews-systems.gitbook.io/connector-api/operations/#voucher) from external systems.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherFilterParameters'
} as const;

export const $VoucherResult = {
    title: 'VoucherResult',
    type: 'object',
    properties: {
        Vouchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Voucher'
            },
            description: 'Details about vouchers added to the system.',
            nullable: true
        },
        VoucherCodes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VoucherCode'
            },
            description: 'Information about voucher codes used by customers.',
            nullable: true
        },
        VoucherAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VoucherAssignment'
            },
            description: 'The assignments between vouchers and [Rates](https://mews-systems.gitbook.io/connector-api/operations/rates/#rate).',
            nullable: true
        },
        Rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RateForExtent'
            },
            description: 'The assigned rates.',
            nullable: true
        },
        Companies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Company'
            },
            description: 'The related companies and travel agencies.',
            nullable: true
        },
        Cursor: {
            type: 'string',
            description: 'Unique identifier of the item one newer in time order than the items to be returned. If Cursor is not specified, i.e. null, then the latest or most recent items will be returned.',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherResult'
} as const;

export const $VoucherTypeEnum = {
    title: 'Voucher Type',
    enum: ['Public', 'PartnerCompany', 'TravelAgency'],
    type: 'string',
    description: `

Public

PartnerCompany

TravelAgency`,
    'x-enumNames': ['Public', 'PartnerCompany', 'TravelAgency'],
    'x-enumDescriptions': ['', '', '']
} as const;

export const $VoucherTypeUpdateValue = {
    title: 'Voucher Type update value',
    type: 'object',
    properties: {
        Value: {
            title: 'Voucher Type',
            allOf: [
                {
                    '$ref': '#/components/schemas/VoucherTypeEnum'
                }
            ],
            description: 'Value which is to be updated.',
            'x-enumNames': ['Public', 'PartnerCompany', 'TravelAgency'],
            'x-enumDescriptions': ['', '', '']
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherTypeUpdateValue'
} as const;

export const $VoucherUpdateParameters = {
    title: 'Vouchers update parameters',
    required: ['VoucherId'],
    type: 'object',
    properties: {
        VoucherId: {
            type: 'string',
            description: 'Unique identifier of the Voucher.',
            format: 'uuid'
        },
        Name: {
            title: 'String update value',
            maxLength: 128,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Internal name of the voucher (or `null` if the name should not be updated).',
            nullable: true
        },
        Type: {
            title: 'Voucher Type update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/VoucherTypeUpdateValue'
                }
            ],
            description: "Type of the voucher e.g. 'Public', 'PartnerCompany' or 'TravelAgency' (or `null` if the type should not be updated).",
            nullable: true
        },
        CompanyId: {
            title: 'Guid update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/GuidNullableUpdateValue'
                }
            ],
            description: 'Unique identifier of Company (Company or Travel Agency) the voucher is related to. This is required for Type of `PartnerCompany` or `TravelAgency`. Use `null` if Company should not be updated.',
            nullable: true
        },
        AssignedRateIds: {
            title: 'Assigned rate ids',
            allOf: [
                {
                    '$ref': '#/components/schemas/AssignedRateIds'
                }
            ],
            description: 'Unique identifiers of Rates (or `null` should it not be updated).',
            nullable: true
        },
        OccupiableIntervalStartUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Start of the interval in which the voucher can be applied (or `null` if the start time should not be updated).',
            format: 'date-time',
            nullable: true
        },
        OccupiableIntervalEndUtc: {
            title: 'String update value',
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'End of the interval in which the voucher can be applied (or `null` if the end time should not be updated).',
            format: 'date-time',
            nullable: true
        },
        ExternalIdentifier: {
            title: 'String update value',
            maxLength: 255,
            allOf: [
                {
                    '$ref': '#/components/schemas/StringUpdateValue'
                }
            ],
            description: 'Identifier of the voucher from external system (or `null` if the identifier should not be updated).',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherUpdateParameters'
} as const;

export const $VoucherWriteResult = {
    title: 'VoucherWriteResult',
    type: 'object',
    properties: {
        Vouchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Voucher'
            },
            description: 'Details about vouchers added to the system.',
            nullable: true
        }
    },
    additionalProperties: false,
    'x-schema-id': 'VoucherWriteResult'
} as const;